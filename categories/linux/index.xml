<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on weakptr's 笔记</title><link>https://nnnewb.github.io/categories/linux/</link><description>Recent content in linux on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Dec 2023 19:08:56 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>一套Linux网络开发/调试/运维的三板斧</title><link>https://nnnewb.github.io/p/%E4%B8%80%E5%A5%97linux%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91/%E8%B0%83%E8%AF%95/%E8%BF%90%E7%BB%B4%E7%9A%84%E4%B8%89%E6%9D%BF%E6%96%A7/</link><pubDate>Tue, 12 Dec 2023 19:08:56 +0800</pubDate><guid>https://nnnewb.github.io/p/%E4%B8%80%E5%A5%97linux%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91/%E8%B0%83%E8%AF%95/%E8%BF%90%E7%BB%B4%E7%9A%84%E4%B8%89%E6%9D%BF%E6%96%A7/</guid><description>&lt;img src="https://nnnewb.github.io/p/%E4%B8%80%E5%A5%97linux%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91/%E8%B0%83%E8%AF%95/%E8%BF%90%E7%BB%B4%E7%9A%84%E4%B8%89%E6%9D%BF%E6%96%A7/cover.jpg" alt="Featured image of post 一套Linux网络开发/调试/运维的三板斧" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>作为网络领域的一个菜鸡，谈不了什么深入的东西。&lt;/p>
&lt;p>近两年的工作里接触比较多的，容器编排工具如k8s、compose，虚拟机编排工具如 libvirt、openstack、ESXi 这些玩意儿，多少都有网络层的虚拟化和编排能力。而我负责做蜜罐系统的主机防火墙策略、蜜罐网络编排、流量牵引，不可避免就会碰到很多网络问题。&lt;/p>
&lt;p>本文不能算正经技术分享文，就当成我对着空气和幻想中的朋友闲聊吧。梳理下从入职到离职这一年多以来，积累的一些技术实践，为建立知识体系做准备，先把点连成线。&lt;/p>
&lt;h2 id="三板斧之-tcpdumpwireshark">三板斧之 tcpdump/wireshark&lt;/h2>
&lt;p>&lt;code>tcpdump&lt;/code> 是最管用的一板斧，跟电工手里的万用表一样。调试防火墙策略、网络转发的时候，常见的异常表现就是没收到/没发出/连接异常，这些都可以通过 &lt;code>tcpdump&lt;/code> 排查。&lt;/p>
&lt;p>比如某个 &lt;code>docker-compose&lt;/code> 编排的业务服务容器，暴露方式是 &lt;code>docker-compose.yaml&lt;/code> 的 &lt;code>ports&lt;/code> 配置，自定义 docker 网络。问题表现是浏览器访问超时，反向代理没有 access log。主机没有开启 firewalld/ufw，selinux 已关闭，有自定义防火墙加固策略。那么问题的阻塞点在哪儿？&lt;/p>
&lt;p>&lt;code>tcpdump&lt;/code> 这时候就跟万用表一样出场了。先看看物理网卡的链路收到流量了没？&lt;code>tcpdump -i eno3 tcp and port 443 -nn&lt;/code>，哦吼，根本没收到。所以问题不在 我们服务器上，直接推给客户网管排查。&lt;/p>
&lt;p>再例如，改了个 &lt;code>libvirtd&lt;/code> 的配置后重启了一下 &lt;code>libvirtd&lt;/code>，发现虚拟机全部不联网了，虚拟机硬件配置无异常。怎么办？&lt;code>tcpdump&lt;/code> 看下网桥流量，咦，没有。再看下桥接，哦，虚拟机 tap 网卡 &lt;code>vnet*&lt;/code> 怎么全都断开桥接了？重新 &lt;code>brctl addif br-test vnet1&lt;/code> 接上，问题解决。再看是否是改配置重启 &lt;code>libvirtd&lt;/code> 的影响，加上对应处理。&lt;/p>
&lt;p>&lt;code>tcpdump&lt;/code> 和 &lt;code>wireshark&lt;/code> 结合使用效果更好，主要是 &lt;code>tcpdump&lt;/code> 分析流量内容没 &lt;code>wireshark&lt;/code> 简单直观。前公司的流量牵引功能实现里，有个用 go 写的的低效软件 NAT 和 tun 网卡，调试过程就会需要看 TCP 报头的字段在转发过程里变化，偶尔也需要看报文内容。&lt;code>tcpdump&lt;/code> 抓好的包还是用 &lt;code>wireshark&lt;/code> 分析更方便。&lt;/p>
&lt;h2 id="三板斧之-iptables">三板斧之 iptables&lt;/h2>
&lt;p>以我有限的经验来看，Linux 网络防火墙基本都包含一定程度上对 iptables 的接管。不论是 &lt;code>firewalld&lt;/code> 还是 &lt;code>ufw&lt;/code>，乃至国产麒麟桌面版自带的防火墙。麒麟桌面有两套防火墙，&lt;code>ufw&lt;/code> 和一套没有提供 cli 的防火墙 &lt;code>kylin-firewall&lt;/code>，就是配置在 &lt;code>/etc/kylin-firewall&lt;/code> 里的那套玩意儿。服务器版则只有 &lt;code>firewalld&lt;/code>。桌面版和服务器版来源大概一个是ubuntu一个是centos。&lt;/p>
&lt;p>&lt;code>iptables&lt;/code> 作为 Linux 防火墙技术的事实标准是必学的。工作常用的 &lt;code>docker&lt;/code> 也好，&lt;code>libvirt&lt;/code> 也好，默认都会涉及一些 &lt;code>iptables&lt;/code> 控制。&lt;/p>
&lt;p>&lt;code>iptables&lt;/code> 最让人烦的就是如果有多个程序想搞 iptables 策略，程序本身写得还不太好的时候，很容易导致策略顺序错乱。而 &lt;code>iptables&lt;/code> 策略对顺序又是敏感的。像 &lt;code>docker&lt;/code> 一样建一条用户策略链是个很好的选择，程序只需要确保用户链策略的存在性和相对顺序，内置链的跳转策略只需要要求存在。但 &lt;code>libvirt&lt;/code> 有点粗暴，策略直接写内建链里，相对就容易出毛病。&lt;/p>
&lt;p>在前司工作的时候，设计防火墙策略时就考虑了大家伙儿一起操作 &lt;code>iptables&lt;/code> 对策略顺序的影响，而且软件化、云部署等客户已有环境上部署的复杂场景，要求接管 &lt;code>iptables&lt;/code> 不太现实。所以仅做了一些有限的控制。比如，要求 &lt;code>docker-compose.yaml&lt;/code> 不配置 &lt;code>ports&lt;/code> 端口映射，因为 &lt;code>docker-proxy&lt;/code> 常出毛病。&lt;code>docker&lt;/code> 不接管 &lt;code>iptables&lt;/code>，业务容器 IP 采用静态定义+&lt;code>iptables&lt;/code>主动控制端口映射。&lt;code>libvirtd&lt;/code>也是，网络策略尽可能选择了自行接管，降低协作的复杂度。而这个决策的 tradeoff ，评估认为让 &lt;code>docker&lt;/code> + &lt;code>libvirtd&lt;/code> + 我们的管理服务 + 防火墙 协作管理 &lt;code>iptables&lt;/code> 的成本收益比太低。&lt;/p>
&lt;p>接管 &lt;code>docker&lt;/code> 和 &lt;code>libvirtd&lt;/code> 的策略还算好推，至于宿主机的防火墙，由于确实有客户在乎这个点（可能是内审合规要求？），所以接管后的策略还是以用户链的形式配置的。客户如果想保留防火墙协同管理 &lt;code>iptables&lt;/code> 策略，也可以，客户自行配置下防火墙的策略就好啦。&lt;/p>
&lt;p>另外几个 &lt;code>iptables&lt;/code> 的坑值得一提。&lt;/p>
&lt;p>一个是 &lt;code>iptables&lt;/code> 的 &lt;code>LOG&lt;/code> 目标和 &lt;code>TRACE&lt;/code> 目标打不出日志，&lt;code>dmesg&lt;/code> 啥也看不到。可能是没加载 &lt;code>nf_log_ipv4&lt;/code> 模块。&lt;code>modprobe nf_log_ipv4&lt;/code> 加载下就行。&lt;/p>
&lt;p>还有 &lt;code>iptables&lt;/code> 的内置表、链或目标不存在，比如 &lt;code>iptables -t nat -S&lt;/code> 提示没有 &lt;code>nat&lt;/code> 表，原因可能是 &lt;code>iptables&lt;/code> 安装损坏了，内核模块丢失。可以尝试重装。需要注意 &lt;code>iptables&lt;/code> 的内核模块包含在哪个包里。而目标不存在则考虑下是不是 &lt;code>iptables&lt;/code> 版本太低了。SLES 11 SP4 这个老古董发行版就缺很多目标。&lt;/p>
&lt;h2 id="三板斧之-iproute2">三板斧之 iproute2&lt;/h2>
&lt;p>&lt;code>iproute2&lt;/code> 是一套网络工具，是 &lt;code>ifconfig&lt;/code>、&lt;code>brctl&lt;/code>、&lt;code>netstat&lt;/code>、&lt;code>route&lt;/code> 这套 &lt;code>net-tools&lt;/code> 工具的替代。现在 &lt;code>ifconfig&lt;/code> 这套命令行工具是弃用状态，很多发行版较新版本要么不带 &lt;code>net-tools&lt;/code> 要么就是 &lt;code>net-tools&lt;/code> 和 &lt;code>iproute2&lt;/code> 共存了。&lt;/p>
&lt;p>&lt;code>iproute2&lt;/code> 这个包最主要用的工具还是 &lt;code>ip&lt;/code> ，用来调链路属性（UP/DOWN等）、IP地址、路由表和策略路由、ARP、隧道等。还有大伙儿应该听过的 &lt;code>ss&lt;/code> ，&lt;code>netstat&lt;/code> 的替代，以及个人用的比较少的 &lt;code>bridge&lt;/code> 。&lt;/p>
&lt;p>&lt;code>iproute2&lt;/code> 这套工具都是基于 &lt;code>netlink&lt;/code> 协议和内核通信的，用 go 写网络代码应该对 &lt;code>github.com/vishvananda/netlink&lt;/code> 这个包不陌生，很多 &lt;code>iproute2&lt;/code> 的功能可以在这个包里找到对应的 API 。&lt;/p>
&lt;h2 id="内核参数">内核参数&lt;/h2>
&lt;p>常用的内核参数列一下。&lt;/p>
&lt;p>&lt;code>net.ipv4.ip_forward&lt;/code> ，控制是否允许跨网卡的IP报文转发，或者简单点说就是路由功能。修改这个配置会影响其他配置，所以还是用 &lt;code>net.ipv4.conf.all.forwarding&lt;/code> 更好。&lt;code>net.ipv6.conf.all.forwarding&lt;/code> 是对应参数的 IPv6 版本。&lt;/p>
&lt;p>&lt;code>net.ipv4.conf.all.rp_filter&lt;/code>，如果反向路由校验不通过则丢弃包，也是在多网卡环境下有影响。举例来说，网卡 eno4 配置的 IP 是 &lt;code>172.19.0.1/24&lt;/code>，但 eno4 收到了来自 &lt;code>192.168.1.100&lt;/code> 的报文，系统没有针对这个 IP 的路由，而且 eno4 没有默认路由，返程会走另一个网卡。这种情况下就会丢弃报文而不处理。&lt;/p>
&lt;h2 id="networkmanager-和其他">NetworkManager 和其他&lt;/h2>
&lt;p>一些经验技巧性的东西。&lt;/p>
&lt;p>现在常见的 RHEL 系发行版和基于 RHEL 系发行版衍生的“兼容”、“自主”发行版基本都用的 &lt;code>NetworkManager&lt;/code>，坚持不把 &lt;code>NetworkManager&lt;/code> 设为默认的，主流发行版里除了 Arch Linux 这样让你自己选的之外，应该就剩 Debian 了。其他更小众的不谈。至于商用的，SLES、RHEL 都是默认 &lt;code>NetworkManager&lt;/code> 。学会用 &lt;code>NetworkManager&lt;/code> 还是很有必要的。&lt;/p>
&lt;p>&lt;code>NetworkManager&lt;/code> 的主要命令行交互界面是 &lt;code>nmcli&lt;/code> 命令，具体翻文档。给网络配置功能做图形前端主要用 &lt;code>NetworkManager&lt;/code> 的 D-Bus 接口。D-Bus 是个非常恶心的玩意儿，但目前没有其他替代，主流 Linux 服务适配的还是它。特别是 systemd 那套东西。有个已知的情况是在 systemd 系统上配 sys-v 启动脚本，有概率在 journald 采集到 systemd 启动的 sys-v 服务相关的 D-Bus 错误 （忘记具体错误消息是啥了，队列满什么的吧。）。安全行业客户日志审计遇到 error 都要我们给个解释，很难顶。专门去学 D-Bus 又很傻逼，ROI 太低。&lt;/p>
&lt;p>还有专门提一嘴的，APUE 这书真的值得手边参考。很多 *nix 常见编程范式都囊括了。读没读过这书做出来的程序设计真的会很不一样。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>后面再想想归纳下这两年的工作经历，项目经验和教训。&lt;/p></description></item><item><title>VirtualBox 安装 32 位 CentOS 7.9 提示 Spurious ACK 问题</title><link>https://nnnewb.github.io/p/virtualbox-%E5%AE%89%E8%A3%85-32-%E4%BD%8D-centos-7.9-%E6%8F%90%E7%A4%BA-spurious-ack-%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 31 Aug 2023 13:40:44 +0800</pubDate><guid>https://nnnewb.github.io/p/virtualbox-%E5%AE%89%E8%A3%85-32-%E4%BD%8D-centos-7.9-%E6%8F%90%E7%A4%BA-spurious-ack-%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>为啥要装32位的？如果要问这问题我只能答你猜我乐不乐意装？&lt;/p>
&lt;p>工作需要没办法。&lt;/p>
&lt;h2 id="问题描述">问题描述&lt;/h2>
&lt;p>VirtualBox 版本 7.1.0 r158379 。&lt;/p>
&lt;p>宿主机 Windows 10.0.18363.1556 x64 。&lt;/p>
&lt;p>如果直接创建虚拟机后运行会出现&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">atkbd_interrupt: 2834 callbacks suppressed
atkbd serio0: Spurious ACK on isa0060/serio0. some program might trying to access hardware directly.
atkbd serio0: Spurious ACK on isa0060/serio0. some program might trying to access hardware directly.
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在这个界面卡住。顺便我还注意到键盘的CAPS LOCK、SCROLL LOCK、NUM LOCK 三个灯在疯狂闪烁。&lt;/p>
&lt;h2 id="解决方法">解决方法&lt;/h2>
&lt;p>参考一个别人发给我的可以用的32位虚拟机配置，反复检查和对比实验后发现应该是虚拟机设置中的 &lt;code>I/O APIC&lt;/code> 影响。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/virtualbox-%E5%AE%89%E8%A3%85-32-%E4%BD%8D-centos-7.9-%E6%8F%90%E7%A4%BA-spurious-ack-%E9%97%AE%E9%A2%98/image-20230831135203249.png"
width="713"
height="459"
srcset="https://nnnewb.github.io/p/virtualbox-%E5%AE%89%E8%A3%85-32-%E4%BD%8D-centos-7.9-%E6%8F%90%E7%A4%BA-spurious-ack-%E9%97%AE%E9%A2%98/image-20230831135203249_hu37dc36aeebdcd0d8c5f1f910faf9177b_20715_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/virtualbox-%E5%AE%89%E8%A3%85-32-%E4%BD%8D-centos-7.9-%E6%8F%90%E7%A4%BA-spurious-ack-%E9%97%AE%E9%A2%98/image-20230831135203249_hu37dc36aeebdcd0d8c5f1f910faf9177b_20715_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20230831135203249"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>开启 &lt;code>I/O APIC&lt;/code> 会导致这个奇诡的现象。关闭 &lt;code>I/O APIC&lt;/code> 后能正常从 CentOS 7.9 i386 的 DVD 镜像进入安装界面，但关闭后只能分配一个 CPU 核心。尝试了调整其他选项，关掉了 USB 控制器、移除了所有网卡、没有串口、没有声卡，基本能关的都关了，只要开着 &lt;code>I/O APIC&lt;/code> 就会出现这个问题。系统安装前、安装后都不行。顺便一提我也试过 VMWare Workstation Pro 创建虚拟机，问题表现和 VirtualBox 差不多。但不太清楚 VMWare 的 &lt;code>I/O APIC&lt;/code> 开关在哪儿。&lt;/p>
&lt;p>怀疑是内核原因，毕竟就是卡在内核启动过程中。尝试装完后升级内核（升级后版本 &lt;code>3.10.0-1160.62.1.el7.centos.plus.i686&lt;/code>，升级前 &lt;code>3.10.0-1160.2.2.el7.centos.plus.i686&lt;/code>）再开启 &lt;code>I/O APIC&lt;/code> 就没问题啦。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>遇到此问题可以尝试在创建完虚拟机后关掉 &lt;code>I/O APIC&lt;/code> ，启动虚拟机安装系统，装完再打开 &lt;code>I/O APIC&lt;/code>。&lt;/p></description></item></channel></rss>