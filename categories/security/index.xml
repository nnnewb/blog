<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/categories/security/</link><description>Recent content in security on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 21 Apr 2022 16:41:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/categories/security/index.xml" rel="self" type="application/rss+xml"/><item><title>DVWA上手记录-初体验</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-01/</link><pubDate>Thu, 21 Apr 2022 16:41:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-01/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>DVWA 全程 &lt;em>Damn Vunerable Web Application&lt;/em> ，是一个开源的基于 PHP+MariaDB 开发的漏洞靶场。&lt;/p>
&lt;p>官方文档推荐XAMPP部署，但个人比较爱docker，先拿 README 里写的 vulnerables/web-dvwa 玩玩看。&lt;/p>
&lt;blockquote>
&lt;p>vulnerable/web-dvwa 这个容器最后一次更新已经是 2015 年了，作为纯萌新姑且先把玩看看，安全领域攻防发展这么快，我寻思这个版本是有点和时代脱节了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>启动个虚拟机，debian bullseye，装好 docker 再配好 zsh 之类的工具。tmux 开个分窗然后一键跑起来：&lt;code>docker run --rm -it -p 80:80 vulerables/web-dvwa&lt;/code>。&lt;/p>
&lt;p>配置下虚拟机端口转发，把 SSH 和 HTTP 转发到宿主机：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945.png"
width="1138"
height="495"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945_hu970c5e0efec5234184e9b858ab391e20_35007_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945_hu970c5e0efec5234184e9b858ab391e20_35007_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421144541945"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>&lt;/p>
&lt;p>最后在浏览器打开 &lt;code>http://localhost:8080/&lt;/code> 就能看到登录页了。在创建数据库前随便输入什么用户名密码都能进去，简单读一下&lt;code>/setup.php&lt;/code> 上写的内容，点一下 &lt;code>Create/Reset database&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045.png"
width="900"
height="906"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045_hu5af901d3d9c5765cd7c0c540ee8e7236_94544_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045_hu5af901d3d9c5765cd7c0c540ee8e7236_94544_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421151455045"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>等跳转回登录页，就算是完成了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317.png"
width="424"
height="437"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317_hu59920bdd9bcb7bdd2dfa79f904f3464d_19156_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317_hu59920bdd9bcb7bdd2dfa79f904f3464d_19156_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421151523317"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="232px"
>&lt;/p>
&lt;p>默认账号密码是 &lt;code>admin&lt;/code> 和 &lt;code>password&lt;/code> 。&lt;/p>
&lt;h2 id="信息收集">信息收集&lt;/h2>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>在侧边栏可以看到可用的模块。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120.png"
width="203"
height="616"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120_hu9894033129233fb1163094cac0397a05_15927_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120_hu9894033129233fb1163094cac0397a05_15927_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421152621120"
class="gallery-image"
data-flex-grow="32"
data-flex-basis="79px"
>&lt;/p>
&lt;p>具体内容稍后再看，先把主页上的信息读一读。&lt;/p>
&lt;p>介绍中这样说：&lt;/p>
&lt;blockquote>
&lt;p>It is up to the user how they approach DVWA. Either by working through every module at a fixed level, or selecting any module and working up to reach the highest level they can before moving onto the next one. There is not a fixed object to complete a module; however users should feel that they have successfully exploited the system as best as they possible could by using that particular vulnerability.&lt;/p>
&lt;/blockquote>
&lt;p>用户自己决定怎么玩这个靶场，没有固定目标。可以先把一个模块从低难度到高难度全打通再继续下一个，也可以低难度把所有模块打通再提高难度再来一轮。&lt;/p>
&lt;blockquote>
&lt;p>Please note, there are &lt;em>both documented and undocumented vulnerability&lt;/em> with this software. This is intentional. You are encouraged to try and discover as many issues as possible.&lt;/p>
&lt;/blockquote>
&lt;p>并且还提到有意存在未文档化的漏洞，也就是攻破一个模块的方法并不局限于帮助文档里的方法，完全可能自己挖掘出别的问题。&lt;/p>
&lt;blockquote>
&lt;p>DVWA also includes a Web Application Firewall (WAF), PHPIDS, which can be enabled at any stage to further increase the difficulty.&lt;/p>
&lt;/blockquote>
&lt;p>DVWA 还包含了 WAF，可以自己开启或者关闭。开启等于是给自己提高了难度。&lt;/p>
&lt;h3 id="php-info">PHP info&lt;/h3>
&lt;p>侧边栏下方有个 PHP Info 链接，点开看一眼，就是个经典的 phpinfo 页。&lt;/p>
&lt;p>php 版本是 7.0.30-0+deb9u1，应该是 debian 打包的版本。&lt;/p>
&lt;p>Apache 版本 2.4.25，Debian 打包的版本。&lt;/p>
&lt;p>其他半懂不懂的全部略，就当没看见。&lt;/p>
&lt;p>之后有需要再来看。&lt;/p>
&lt;h3 id="关于">关于&lt;/h3>
&lt;p>在 About 页里提到发行时间是 2015-10-08，确实很老了。&lt;/p>
&lt;p>里面还有些相关链接和资源、文档，把 dvwa 的官网主页加入收藏夹后剩下的内容暂且不管。&lt;/p>
&lt;h3 id="dvwa-security">DVWA security&lt;/h3>
&lt;p>安全配置页，显示当前的 DVWA 运行在哪个安全级别（就是前文介绍中提到的 &lt;strong>难度&lt;/strong>）。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935.png"
width="904"
height="879"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935_hu1e8ee6e0e7ee30ed3f4d3caa6e5f5d59_111848_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935_hu1e8ee6e0e7ee30ed3f4d3caa6e5f5d59_111848_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421154901935"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>注意到页面这几个位置都有标注当前安全配置，在这个页面可以修改安全级别和 WAF （图中 PHPIDS）的开启状态。&lt;/p>
&lt;h3 id="setupreset-db">Setup/Reset DB&lt;/h3>
&lt;p>这个页面就是最初启动 DVWA 的时候初始化数据库的页面，可以在这个页面里重置数据库，也能在这个页面看到一些自检信息。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454.png"
width="896"
height="918"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454_hu8695d1d6b0b3980f08b0158e40b7c78e_108856_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454_hu8695d1d6b0b3980f08b0158e40b7c78e_108856_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421155109454"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="234px"
>&lt;/p>
&lt;p>&lt;code>allow_url_include&lt;/code>暂时不管，等玩到那个模块的时候再看情况。&lt;/p>
&lt;p>&lt;code>reCAPTCHA key&lt;/code> 是验证码模块需要的，等玩到的时候再找下怎么配。&lt;/p>
&lt;p>最下面的 &lt;code>Create / Reset Database&lt;/code> 的按钮就是重置数据库了。对于用 &lt;code>docker --rm&lt;/code> 启动的我来说直接重启下容器清理地更干净，预计不会怎么用到这个功能。&lt;/p>
&lt;h3 id="模块速览">模块速览&lt;/h3>
&lt;h4 id="brute-force">Brute Force&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710.png"
width="909"
height="340"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710_hue7b4ec4cb7abd897183a8792139fe6c5_35249_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710_hue7b4ec4cb7abd897183a8792139fe6c5_35249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421155923710"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="641px"
>&lt;/p>
&lt;p>一般说 Brute Force 的时候就是暴力破解了，”跑字典“啊什么的。遍历可能存在的的弱密码。&lt;/p>
&lt;h4 id="command-injection">Command Injection&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139.png"
width="896"
height="266"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139_hu25562b7f964fec8daa9cf0338b8b0c6e_31856_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139_hu25562b7f964fec8daa9cf0338b8b0c6e_31856_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160341139"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>&lt;/p>
&lt;p>命令注入，相当经典的一个 ping，应该看一眼就知道指的什么了。&lt;/p>
&lt;h4 id="csrf">CSRF&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952.png"
width="905"
height="363"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952_hu5f2fbd6d82dca55f3f85cc4115c97c39_41581_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952_hu5f2fbd6d82dca55f3f85cc4115c97c39_41581_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160436952"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;p>跨站请求伪造，有点摸不着头脑。emm，难道是说这个页面没有考虑 csrf （可能还有cors？），所以能在别的站直接发个 xhr 实现修改密码？&lt;/p>
&lt;h4 id="file-inclusion">File Inclusion&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753.png"
width="912"
height="321"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753_hua44789798500bf09a6d2ea7ea0a9e538_27839_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753_hua44789798500bf09a6d2ea7ea0a9e538_27839_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160749753"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="681px"
>&lt;/p>
&lt;p>没思路。虽然看过 p 大博客信手拈来的文件包含利用，但对着这个页面暂时还是想不出要干啥。&lt;/p>
&lt;blockquote>
&lt;p>PS：刚发现地址栏有点意思&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316.png"
width="337"
height="33"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316_hua5ff4026705173dea9ff93cd0ab7564d_2751_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316_hua5ff4026705173dea9ff93cd0ab7564d_2751_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160947316"
class="gallery-image"
data-flex-grow="1021"
data-flex-basis="2450px"
>&lt;/p>
&lt;/blockquote>
&lt;h4 id="file-upload">File Upload&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745.png"
width="895"
height="294"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745_hu764096419eb208ee58c131f60e4b10b0_30395_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745_hu764096419eb208ee58c131f60e4b10b0_30395_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161006745"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="730px"
>&lt;/p>
&lt;p>可能是任意文件上传相关的洞？&lt;/p>
&lt;h4 id="insecure-captcha">Insecure CAPTCHA&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749.png"
width="911"
height="306"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749_hu0f16c8e6b310cccc5ccf0aaf8819ad20_36210_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749_hu0f16c8e6b310cccc5ccf0aaf8819ad20_36210_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161050749"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="714px"
>&lt;/p>
&lt;p>看标题还是有点意思的，不安全的验证码指的是可以绕过验证码么？&lt;/p>
&lt;h4 id="sql-injection">SQL Injection&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372.png"
width="909"
height="341"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372_hu5bf7f52e9c2b4302389ebec44db8f820_37409_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372_hu5bf7f52e9c2b4302389ebec44db8f820_37409_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161127372"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>经典SQL注入。&lt;/p>
&lt;h4 id="sql-injection-blind">SQL Injection (Blind)&lt;/h4>
&lt;p>和上面一样，不过是盲注。&lt;/p>
&lt;h4 id="weak-session-ids">Weak Session IDs&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944.png"
width="912"
height="361"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944_hu0fdf17129a2a99d77936b492c1d40748_32668_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944_hu0fdf17129a2a99d77936b492c1d40748_32668_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161207944"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;p>对 PHP 还不够了解，不知道 &lt;code>Weak Session IDs&lt;/code> 指的是什么。可能和 Cookie 里的 &lt;code>PHPSESSID&lt;/code> 有关系？&lt;/p>
&lt;h4 id="xss-dom">XSS (DOM)&lt;/h4>
&lt;p>见下。&lt;/p>
&lt;h4 id="xssreflected">XSS(Reflected)&lt;/h4>
&lt;p>见下。&lt;/p>
&lt;h4 id="xssstored">XSS(Stored)&lt;/h4>
&lt;p>三类 XSS ，页面分别如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348.png"
width="680"
height="276"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348_hu1b4996709ef6808dda534c7704190b50_28036_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348_hu1b4996709ef6808dda534c7704190b50_28036_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(DOM)"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="591px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360.png"
width="685"
height="267"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360_hu0bb9744a0e435d0dcc709c36a8622d4a_28074_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360_hu0bb9744a0e435d0dcc709c36a8622d4a_28074_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(reflected)"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="615px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946.png"
width="679"
height="393"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946_hubc91e88711d10c78d8195fedb9cf37e2_33015_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946_hubc91e88711d10c78d8195fedb9cf37e2_33015_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(Stored)"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>除了 DOM 型看页面没有思路，另外两个看注入点还是清楚的。&lt;/p>
&lt;h4 id="csp-bypass">CSP Bypass&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897.png"
width="701"
height="290"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897_hu941ee16f0a67ff004f04e4e50818b863_27413_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897_hu941ee16f0a67ff004f04e4e50818b863_27413_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161626897"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>不了解 CSP，没头绪。&lt;/p>
&lt;h4 id="javascript">JavaScript&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960.png"
width="679"
height="280"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960_huc87a5a196e2cb78c1789a7565c0274b5_25147_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960_huc87a5a196e2cb78c1789a7565c0274b5_25147_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161759960"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>有点摸不着头脑，指的是在前端用 JS 检查表单不安全？&lt;/p>
&lt;p>看链接里的 &lt;code>es6-proxies-in-depth&lt;/code> 感觉是个绕过前端保护的题。&lt;/p>
&lt;h2 id="初体验总结">初体验总结&lt;/h2>
&lt;p>姑且算是把 DVWA 这个靶场在手里把玩了一下，初步看了看怎么玩、有什么可玩。&lt;/p>
&lt;p>接下来考虑是一题一题难度从低到高慢慢刷过去，实在干不过再跳。&lt;/p></description></item><item><title>安全入门系列-上传漏洞和远程命令执行</title><link>https://nnnewb.github.io/blog/p/get-start-cyber-security-upload-and-remote-command-execution-vulnerability/</link><pubDate>Wed, 20 Apr 2022 15:59:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-cyber-security-upload-and-remote-command-execution-vulnerability/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>迫不及待要找个靶场实践了，抓紧把剩下的两种概念捋一捋。&lt;/p>
&lt;h2 id="任意文件上传">任意文件上传&lt;/h2>
&lt;p>上传漏洞本质是&lt;/p>
&lt;ol>
&lt;li>可以上传任意类型文件&lt;/li>
&lt;li>&lt;strong>可以远程执行或利用被上传的文件发起进一步攻击&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>缺一不可。&lt;/p>
&lt;p>能上传不能利用的情况：&lt;/p>
&lt;p>举例来说，业务代码里没检查上传文件的 &lt;code>mimetype&lt;/code>，你传了一个包含恶意代码的文件&lt;code>I_am_hacker_hahaha.php&lt;/code>上传到了服务器上，但服务端是一个独立 Go 程序，没有 &lt;code>httpd&lt;/code>也没有&lt;code>nginx&lt;/code>，那任你传什么恶意脚本都没用——根本不会去执行你的代码。&lt;/p>
&lt;p>能利用但没法上传的情况：&lt;/p>
&lt;p>比如过滤很完善，会检查文件头的 Magic 之类的。还有一种是服务端用了对象存储服务。阿里云 OSS ，腾讯云 OSS，七牛云。虽然服务器配的是 &lt;code>httpd&lt;/code>+&lt;code>php&lt;/code> 的经典组合，文件名解析漏洞也没补，但上传的文件根本没放服务器上也不行（emm，没依据，不过要是能执行别的服务器上的代码的话就是远程代码执行的大洞了吧）。&lt;/p>
&lt;p>所以要利用的话，应该要求是：&lt;/p>
&lt;ol>
&lt;li>用了 &lt;code>CGI&lt;/code> 这样的协议，传上去的东西有机会被执行。&lt;/li>
&lt;li>用了动态特性比较强的语言，从 &lt;code>php&lt;/code>、&lt;code>python&lt;/code> 到 &lt;code>java&lt;/code> 都有运行时加载代码的能力。php 不多说，即使静态编译的语言如Java，也有像近期闹得比较大的 Log4J 漏洞，就是利用了运行时加载新代码的能力。更进一步如 &lt;code>Go&lt;/code>、&lt;code>C/C++&lt;/code> 运行时加载代码就要靠共享库&lt;code>dlopen&lt;/code>之类的方法了，用得不多雷也不多。PS: &lt;code>LD_PRELOAD&lt;/code>这里认为不是 &lt;strong>运行时&lt;/strong> 加载代码的方法。&lt;/li>
&lt;li>有其他被执行的机会，比如能写到 &lt;code>cron.d&lt;/code> 这样的位置，或者有其他可以结合利用的洞，比如有机会控制命令执行时的环境变量，加上任意文件上传，也能利用&lt;code>LD_PRELOAD&lt;/code>之类的方式把上传的 payload 跑起来。&lt;/li>
&lt;/ol>
&lt;p>总的来说，未经检查和约束的文件上传接口总是危险的。现在没爆雷，将来某天也可能会爆。&lt;/p>
&lt;h2 id="远程代码执行">远程代码执行&lt;/h2>
&lt;h3 id="命令执行">命令执行&lt;/h3>
&lt;p>也好理解，和 SQL 注入是比较类似的。如果服务端有这样的代码&lt;code>system(&amp;quot;ffmpeg -i /tmp/&amp;quot; + $_REQUEST[&amp;quot;filename&amp;quot;])&lt;/code>，那控制了&lt;code>filename&lt;/code>就能让&lt;code>system&lt;/code>去执行任意命令。&lt;/p>
&lt;p>比如传一个 &lt;code>filename=|| touch hello&lt;/code>，整条命令就变成了 &lt;code>ffmpeg -i /tmp/|| touch hello&lt;/code>，&lt;code>||&lt;/code> 或运算连接前后两条命令都会被执行。有&lt;code>Linux&lt;/code>环境可以自己试试&lt;code>false||id&lt;/code>看看&lt;code>id&lt;/code>命令会不会跑起来。&lt;/p>
&lt;h3 id="代码执行">代码执行&lt;/h3>
&lt;p>代码执行是个很宽泛的概念，因为可以执行的东西太多了。&lt;/p>
&lt;p>从最最最底层的，利用栈溢出漏洞覆盖返回地址，让进程执行自己期望的代码，到很上层的，利用&lt;code>eval&lt;/code>这样的函数（在&lt;code>php&lt;/code>、&lt;code>nodejs&lt;/code>、&lt;code>python&lt;/code>环境里都有）执行远程代码。&lt;/p>
&lt;p>还有如&lt;code>dlopen&lt;/code>、java的动态类加载等等，解释执行的语言还可以&lt;code>include&lt;/code>或&lt;code>import&lt;/code>、&lt;code>require&lt;/code>新的代码，等等这些函数的参数如果被用户输入控制的话都会构成远程代码执行的危险。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>其实没什么好总结的，都是些概念性的东西，没有干货。&lt;/p></description></item><item><title>安全入门系列-sql注入</title><link>https://nnnewb.github.io/blog/p/get-start-cyber-security-sql-inject/</link><pubDate>Tue, 19 Apr 2022 11:06:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-cyber-security-sql-inject/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>记得很早以前玩过SQL注入，还在上中学吧好像，拿学校的官网玩。&lt;/p>
&lt;p>SQL注入是个很老的漏洞了，准确说是开发人员水平太差、相关的库和最佳实践还没传播开的那段时期常出现的 &lt;strong>编程错误&lt;/strong> 。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>所谓SQL注入就是用户的输入在服务端组织成SQL的时候未经适当地过滤，结果用户输入扭曲了服务端构造的SQL原意，造成错误。&lt;/p>
&lt;p>比较常见的一种问题就是直接把用户输入拼接到了SQL字符串里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryRow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT id FROM user WHERE nickname=&amp;#39;%s&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">URL&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Query&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="s">&amp;#34;nickname&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像是上述的代码，如果用户请求 &lt;code>localhost/user?nickname=weakptr&lt;/code>，拼接的SQL结果就是&lt;code>SELECT id FROM user WHERE nickname='weakptr'&lt;/code>，符合预期。但如果用户请求的是&lt;code>localhost/user?nickname=' UNION SELECT password FROM user WHERE nickname='admin' --&lt;/code>，拼接的SQL就会变成 &lt;code>SELECT id FROM user WHERE nickname='' UNION SELECT password FROM user WHERE nickname='admin' --&lt;/code>，也就是会查出 &lt;code>admin&lt;/code> 用户的 &lt;code>password&lt;/code> 字段。&lt;/p>
&lt;p>当然这样的注入并不总是能成功，像是上面我用 go 写的 &lt;code>QueryRow&lt;/code>，在 &lt;code>Scan&lt;/code> 的时候传入的变量数量和类型会和被注入的 SQL 不匹配，返回错误。不过这不代表用 Go 就安全了，因为用户完全可以传个 &lt;code>' DROP TABLE user&lt;/code> 删除整个表，或者拼一个 &lt;code>' or 1=1&lt;/code> 让条件恒真，跳过身份认证。&lt;/p>
&lt;p>对这种问题最好的解决办法就是不要把用户输入直接拼到SQL里，而是用 &lt;code>?&lt;/code> 占位符。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html" target="_blank" rel="noopener"
>https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html&lt;/a>&lt;/p>
&lt;p>Using prepared statements with placeholders for parameter values has the following benefits:&lt;/p>
&lt;ul>
&lt;li>Less overhead for parsing the statement each time it is executed. Typically, database applications process large volumes of almost-identical statements, with only changes to literal or variable values in clauses such as &lt;code>WHERE&lt;/code> for queries and deletes, &lt;code>SET&lt;/code> for updates, and &lt;code>VALUES&lt;/code> for inserts.&lt;/li>
&lt;li>&lt;strong>Protection against SQL injection attacks. The parameter values can contain unescaped SQL quote and delimiter characters.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这个特性叫 &lt;code>server-side prepared statement&lt;/code>，在 MySQL 4.1 就引入了。对更古早一些的开发者来说，想写出现安全的服务端代码确实是没有现如今这么轻松的，还得自己关注SQL拼接和转义。而如今像 Go 这样的语言直接把 &lt;code>prepared statement&lt;/code> 写进标准库，当成最佳实践，想写出 bug 都不容易。&lt;/p>
&lt;p>好了回到正题。&lt;/p>
&lt;p>其实硬要说起来 SQL 注入如今也不是完全被杜绝了，因为拼 SQL 始终还是有需求的，对自己代码质量有追求的程序猿还是少数。像是 &lt;code>SELECT ... FROM tbl WHERE ... IN (a,b,c,d,e,f)&lt;/code>，&lt;code>IN&lt;/code> 如果要用 &lt;code>prepared statement&lt;/code> 写就至少要维护一个参数列表和 string builder，但如果像是 python 一类语言，就能偷懒成 &lt;code>cond.map(lambda s: f&amp;quot;'{s}'&amp;quot;).join(',')&lt;/code>，省掉一个参数列表和循环，埋下漏洞。&lt;/p>
&lt;h2 id="漏洞分类">漏洞分类&lt;/h2>
&lt;h3 id="字符型注入">字符型注入&lt;/h3>
&lt;p>简而言之，提交的输入类型是字符串的时候（比如&lt;code>nickname&lt;/code>、&lt;code>address&lt;/code>这样的字段），如果存在上面说的漏洞，那就是一个字符型注入漏洞。&lt;/p>
&lt;p>这里涉及的知识点是 &lt;strong>提交的输入类型&lt;/strong>。对于弱类型语言来说服务端可能没限制前端表单提交的类型，表单是 &lt;code>input type=number&lt;/code> 也接受，字符串也接受，服务端的 web 框架要么推导类型（罕见），要么用客户端的类型（当提交&lt;code>json&lt;/code>一类数据的时候），要么全部当成 &lt;code>bytes&lt;/code>、&lt;code>string&lt;/code>，留给开发者自己处理。&lt;/p>
&lt;p>比较常规的情况是服务端拿到 &lt;code>request.form&lt;/code> 是一个字典类型（总之就是&lt;code>dict&lt;/code>或&lt;code>map&lt;/code>这样的映射类型，不用抠字眼），值要么全是 &lt;code>string&lt;/code> 要么根据一定条件解析成服务端的数据类型（&lt;code>int&lt;/code>、&lt;code>float&lt;/code>、&lt;code>array&lt;/code>等）。&lt;/p>
&lt;p>如果服务端没有解析类型，直接往 SQL 里拼，大多时候就是字符型SQL注入；解析了，是个字符串，往 SQL 里拼，也是字符型注入。&lt;/p>
&lt;p>解析了，不是字符串，再格式化，那就很难控制服务端的SQL了。&lt;/p>
&lt;h3 id="数字型注入">数字型注入&lt;/h3>
&lt;p>数字型注入就是放屁。&lt;/p>
&lt;p>本质依然是你提交的数据没有被服务端检查类型，不管是 &lt;code>int&lt;/code> 还是 &lt;code>string&lt;/code> 直接往 SQL 里拼。非要说和字符型注入的区别就是服务端怎么把自己觉得是数字的内容拼到 SQL 里：&lt;/p>
&lt;ul>
&lt;li>&lt;code>WHERE nickname='{nickname}'&lt;/code> 拼字符串的时候为了不出现SQL语法错误，要加上 &lt;code>''&lt;/code> 单引号。&lt;/li>
&lt;li>&lt;code>WHERE id={id}&lt;/code> 拼数字的时候就不加。&lt;/li>
&lt;/ul>
&lt;p>但凡用 &lt;code>sprintf&lt;/code>格式化个&lt;code>%d&lt;/code>，或者拿什么请求验证框架对输入数据做了个类型检查就没数字型注入什么事儿了。&lt;/p>
&lt;h2 id="注入点">注入点&lt;/h2>
&lt;h3 id="query">query&lt;/h3>
&lt;p>就是出现在 URL Query Parameter 里的 SQL 注入点。比如 &lt;code>GET /user_profile?user_id=1&lt;/code>，&lt;code>user_id=1&lt;/code>没过滤，那注入点就在这里。&lt;/p>
&lt;h3 id="post">post&lt;/h3>
&lt;p>出现在 post 表单里的注入点，&lt;code>content-type&lt;/code> 是 &lt;code>x-www-form-urlencoded&lt;/code> 还是 &lt;code>multipart/form-data&lt;/code>，亦或者 &lt;code>application/json&lt;/code> 都无关紧要。&lt;/p>
&lt;p>只要服务端的代码无脑往 SQL 里拼用户输入，那就是注入漏洞。&lt;/p>
&lt;h3 id="header">header&lt;/h3>
&lt;p>出现在 HTTP Header 里的注入点，比如在 &lt;code>Cookies&lt;/code> 的什么数据，或者自定义的 HTTP 头字段。牢记 SQL 注入漏洞的本质是服务端拿了这些数据无脑往SQL里拼。&lt;/p>
&lt;h2 id="攻击手法">攻击手法&lt;/h2>
&lt;h3 id="报错法">报错法&lt;/h3>
&lt;p>首先从攻击者的视角看肯定是不知道服务器上数据表怎么设计的，所以一上手就直接传个 &lt;code>' UNION SELECT&lt;/code> 查出管理员账号密码是不太现实的。&lt;/p>
&lt;p>当通过传 &lt;code>' or 1=1&lt;/code> 或类似的 payload 确认可能存在 SQL 注入点之后，攻击者可以故意制造一些 SQL 错误，看看服务端有没有直接把错误页返回到浏览器。&lt;/p>
&lt;p>如果服务端没有做好 500 页面处理，直接把面向开发者的错误信息返回给了攻击者，攻击者就能借此获得服务端的信息：比如服务端使用的编程语言、框架、数据库版本、表名等等。如果错误页再人性化一点，比如类型错误顺便打印出变量内容，直接把数据爆出来也有可能。&lt;/p>
&lt;p>没管好 500 页导致错误爆到前端，这种问题也可能造成 SQL 注入以外的漏洞但不是这篇博客想讨论的内容了。&lt;/p>
&lt;p>总之报错法攻击就是根据返回的错误信息调整注入的payload，最终构造合法的 SQL 查出攻击者想要的数据。&lt;/p>
&lt;h3 id="盲注">盲注&lt;/h3>
&lt;p>对于没有 500 页（注入非法SQL不报错）或者只有一个通用的 500 页（不返回具体错误），此时只能盲注。先确定注入的 SQL 会如何影响页面，比如提交合法 payload 时的页面和提交非法 payload 时的页面有何不同。相当于我们有了一个 bit 的观测窗口。&lt;/p>
&lt;p>接着只要构造一个合法的 SQL ，比如 &lt;code>' AND username=admin&lt;/code> 等（例子不好，控制了 SQL其实能干的事情太多了）就能一个字符一个字符爆破出用户名和密码（前提是密码没加盐哈希）。&lt;/p>
&lt;h3 id="读写文件">读写文件&lt;/h3>
&lt;p>比如服务器运行的是MySQL而且权限配置有问题（比如跑在 root），那就可能直接注入一条 &lt;code>LOAD_FILE/OUT_FILE&lt;/code> 之类的函数，写入 Web Shell 或者读到 &lt;code>/etc/shadow&lt;/code> 之类的敏感文件。&lt;/p>
&lt;h2 id="工具">工具&lt;/h2>
&lt;ul>
&lt;li>sqlmap&lt;/li>
&lt;/ul>
&lt;p>只知道这一个。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>现在 SQL 注入的漏洞应该不多了，大概还有些被玩烂了的旧网站依然有这种问题。按现在挖矿的疯狂程度来看，还有这种洞怕是迟早被淦，要么下线要么升级。&lt;/p>
&lt;p>现代的 web 程序这种问题应该不多了，有好用的 ORM 和各种查询工具还手拼 SQL 干啥呢。&lt;/p>
&lt;p>挖 ORM 或者那些查询库的洞就是另一码事了。&lt;/p></description></item><item><title>安全入门系列-xss</title><link>https://nnnewb.github.io/blog/p/xss-day-1/</link><pubDate>Mon, 18 Apr 2022 10:11:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/xss-day-1/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>要是开发拿不到更高薪，继续撞天花板，就打算转安全了。考虑5年开发，以及不止5年的各种学习，想转到安全应该不是太难的事。&lt;/p>
&lt;p>且不说转不转行，先了解下安全这行总没错。不转行懂点安全也算优势。&lt;/p>
&lt;blockquote>
&lt;p>编辑于 2022年4月19日&lt;/p>
&lt;/blockquote>
&lt;p>考虑成体系学习，把标题改成了安全入门系列。差不多弄清楚 web 安全主流的攻防方向之后再整理个脑图什么的梳理下怎么深入。&lt;/p>
&lt;h2 id="xss">XSS&lt;/h2>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>XSS全称 Cross Site Scripting，X 就是 Cross（强行冷笑话）。本质是利用不正常的方式，在网页上插入一段可以执行的 JavaScript 代码，实现窃取 Cookie、冒充用户发送请求之类的操作。&lt;/p>
&lt;p>众所周知浏览器按 F12 在开发者工具里想怎么玩弄网页都行，XSS 听起来像是脱裤放屁。但开发者工具是有极限的，骗人打开开发者工具往里面贴自己看不懂的代码，和发个链接一打开就中招显然是两个难度的事情。&lt;/p>
&lt;h3 id="分类">分类&lt;/h3>
&lt;h4 id="反射型">反射型&lt;/h4>
&lt;p>反射型 XSS 利用服务器或前端把请求中的字段渲染成 HTML 的行为来向网页注入 js。比如这样一个页面：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">你好，&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">&amp;lt;/p&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>页面元素的一部分未经过滤就直接渲染成了 HTML 的一部分，就会产生一个 XSS 漏洞，传递这样一个 &lt;code>name&lt;/code> ： &lt;code>&amp;lt;img src=1 onerror=alert(1)/&amp;gt;&lt;/code> 就能让网页按我们的想法弹窗了。&lt;/p>
&lt;p>之所以叫反射型，是因为注入的 JS 到了服务器又回到了前端，就像是镜子里反射出你自己的影子。&lt;/p>
&lt;h4 id="持久型">持久型&lt;/h4>
&lt;p>和反射型差不多，不同的是注入的 JS 被持久化到了服务端，比如上面的用户名注入点是从数据库提取的，那么把用户名改成 &lt;code>&amp;lt;img src=1 onerror=alert(1)/&amp;gt;&lt;/code>，每次访问这个页面都会触发脚本了，威胁比反射型 XSS 更大。&lt;/p>
&lt;h4 id="dom型">DOM型&lt;/h4>
&lt;p>DOM 型和上面其他 XSS 的主要区别在于不经过服务器，像是现在大前端常见的 SPA ，路由都在前端，后端只有 API 不负责渲染网页。如果前端应用里出现 &lt;code>elem.innerHTML=userinput&lt;/code>，&lt;code>userinput&lt;/code>没好好过滤的情况，就是个 DOM 型的 XSS 漏洞。&lt;/p>
&lt;h3 id="测试">测试&lt;/h3>
&lt;h4 id="代码审计">代码审计&lt;/h4>
&lt;p>目前对代码审计的理解就是 review 源码来尝试发现漏洞，大概只对开源代码或前端代码有用。没代码的话审计就有点逆向的意思了。XSS 漏洞可以从审计中发现，比如 &lt;a class="link" href="https://www.leavesongs.com/PENETRATION/a-tour-of-tui-editor-xss.html" target="_blank" rel="noopener"
>一次对 Tui Editor XSS 的挖掘与分析&lt;/a>。&lt;/p>
&lt;h4 id="手动测试">手动测试&lt;/h4>
&lt;p>手工测试就是在可能的 XSS 注入点提交诸如 &lt;code>&amp;lt;img/onerror=alert(1)&amp;gt;&lt;/code>一类的内容，观察提交的内容是怎么转义的，提交内容如何渲染，再尝试修改 payload 来绕过防护，直至成功或失败。&lt;/p>
&lt;h4 id="自动测试">自动测试&lt;/h4>
&lt;p>尚不清楚自动 XSS 测试的原理，工具有 &lt;a class="link" href="https://github.com/chaitin/xray" target="_blank" rel="noopener"
>XRay&lt;/a> 。个人猜测至少两条路子：&lt;/p>
&lt;ol>
&lt;li>对能访问源码的情况可以自动源码审计，找出危险的赋值或调用。&lt;/li>
&lt;li>不能访问源码的情况下：
&lt;ol>
&lt;li>尝试判断底层框架，使用已知漏洞的 exploit 测试&lt;/li>
&lt;li>根据一定的规则，在可能的表单提交点尝试一系列 payload&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>实际上我觉得更像是半自动的，比如不涉及源码的情况下至少应该需要配置下要尝试的注入点（以及如何检测注入是否成功的页面）和指定 payload 类型，不然注入点的表单都填不满。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我倒是想再加个实战环节，但现在找个足够简单的 XSS 还挺难的。vulhub 有个 drupal 的 XSS 虽然能跑，但单纯跑一下 PoC 着实没什么乐趣可言。重复一次别人做过的分析倒是可以，但有点超出写这篇博客时的计划了，于是暂时不管，走马观花为主，先对整个安全体系建立概念再由点带面入门。&lt;/p></description></item></channel></rss>