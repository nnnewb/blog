<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>逆向 on weakptr's 笔记</title><link>https://nnnewb.github.io/categories/%E9%80%86%E5%90%91/</link><description>Recent content in 逆向 on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 03 Nov 2021 16:54:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/categories/%E9%80%86%E5%90%91/index.xml" rel="self" type="application/rss+xml"/><item><title>加壳原理08：混淆技术入门</title><link>https://nnnewb.github.io/p/learning-packer-08/</link><pubDate>Wed, 03 Nov 2021 16:54:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-08/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-08/cover.jpg" alt="Featured image of post 加壳原理08：混淆技术入门" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇尝试学习通过动手写一个 LLVM Pass 来学习编译阶段进行代码混淆的技术。&lt;/p>
&lt;h2 id="0x01-环境设置">0x01 环境设置&lt;/h2>
&lt;p>LLVM 是个相当大的项目，做好环境设置是首先要做的事情。这里选择 msys2 作为首要开发环境，不然光是 MSVC 把 LLVM 源码编译一遍就够呛了。&lt;/p>
&lt;p>安装好MSYS2之后安装 clang 工具链（2021年11月3日，clang32工具链默认不在msys2的源里，需要手动改 &lt;code>pacman.conf&lt;/code> 加入 &lt;code>clang32&lt;/code> 源，这里以 x86_64 的 LLVM 工具链进行实践）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">pacman -Sy mingw-w64-clang-x86_64-toolchain
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成后添加环境变量，把 msys2 安装目录下的 &lt;code>clang64/bin&lt;/code> 加入环境变量，方便 VSCode + CMake 找到工具链。另外注意装一个 Ninja，同样加入 Path。&lt;/p>
&lt;p>VSCode 里装上微软的 C/C++ 和 clangd，禁用微软 C/C++ 的 Intellisense，实在太慢。&lt;/p>
&lt;p>手动编译整个LLVM源码树实在是太费时间了，我选择用MSYS2的工具链。参考这篇文档去配置一个 LLVM 源码树外的 Pass 工程：&lt;a class="link" href="https://llvm.org/docs/CMake.html#cmake-out-of-source-pass" target="_blank" rel="noopener"
>CMake out of source pass - LLVM&lt;/a> 。写一个简单的 CMakeLists.txt ，跟着 &lt;a class="link" href="https://llvm.org/docs/WritingAnLLVMPass.html" target="_blank" rel="noopener"
>Writing an LLVM Pass - LLVM&lt;/a> 这篇文档快速实现一个遍历函数的 Pass 。&lt;/p>
&lt;p>下面是 &lt;code>CMakeLists.txt&lt;/code> 的内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="nb">cmake_minimum_required&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VERSION&lt;/span> &lt;span class="s">3.13.4&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">Hello&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LLVM&lt;/span> &lt;span class="s">REQUIRED&lt;/span> &lt;span class="s">CONFIG&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">STATUS&lt;/span> &lt;span class="s2">&amp;#34;Found LLVM ${LLVM_PACKAGE_VERSION}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">STATUS&lt;/span> &lt;span class="s2">&amp;#34;Using LLVMConfig.cmake in: ${LLVM_DIR}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">LLVM_INCLUDE_DIRS&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">separate_arguments&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LLVM_DEFINITIONS_LIST&lt;/span> &lt;span class="s">NATIVE_COMMAND&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LLVM_DEFINITIONS&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">LLVM_DEFINITIONS_LIST&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">APPEND&lt;/span> &lt;span class="s">CMAKE_MODULE_PATH&lt;/span> &lt;span class="s2">&amp;#34;${LLVM_CMAKE_DIR}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">AddLLVM&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_llvm_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">Hello&lt;/span> &lt;span class="s">MODULE&lt;/span> &lt;span class="s">hello.cpp&lt;/span> &lt;span class="s">PLUGIN_TOOL&lt;/span> &lt;span class="s">opt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后是实现 pass 的源码，源码的详细解释直接读 LLVM 给的文档。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/IR/Function.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/IR/LegacyPassManager.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/Pass.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/Support/raw_ostream.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/Transforms/IPO/PassManagerBuilder.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">llvm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">namespace&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">Hello&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">FunctionPass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">ID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Hello&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">FunctionPass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="nf">runOnFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Hello:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">write_escaped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// namespace
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">Hello&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="n">RegisterPass&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Hello&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">X&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hello world pass&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="n">RegisterStandardPasses&lt;/span> &lt;span class="nf">Y&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PassManagerBuilder&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">EP_EarlyAsPossible&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">[](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">PassManagerBuilder&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">legacy&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PassManagerBase&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pm&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Hello&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再准备一个简单的样本，用来实验 Pass 的效果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着是实验步骤：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">clang -O3 -emit-llvm sample.c -c -o sample.bc
opt -enable-new-pm&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> -load build/hello.dll -hello sample.bc -o sample.exe
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果一切顺利，输出如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">Hello:main
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不顺利的话只能自己谷歌。&lt;/p>
&lt;h2 id="0x02-ollvm-bcf-混淆初窥">0x02 OLLVM bcf 混淆初窥&lt;/h2>
&lt;p>这部分先看看知名的 OLLVM 项目是怎么做的，先看 &lt;em>bcf&lt;/em> 混淆，源码在 &lt;code>llvm/lib/Transforms/Obfuscation/BogusControlFlow.cpp&lt;/code>， 入口在 &lt;code>runOnFunction&lt;/code> 函数。&lt;/p>
&lt;h3 id="21-runonfunction">2.1 runOnFunction&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp"> &lt;span class="cm">/* runOnFunction
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * Overwrite FunctionPass method to apply the transformation
&lt;/span>&lt;span class="cm"> * to the function. See header for more details.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">runOnFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">// Check if the percentage is correct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ObfTimes&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;BogusControlFlow application number -bcf_loop=x must be x &amp;gt; 0&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Check if the number of applications is correct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">ObfProbRate&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ObfProbRate&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;BogusControlFlow application basic blocks percentage -bcf_prob=x must be 0 &amp;lt; x &amp;lt;= 100&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// If fla annotations
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">toObfuscate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;bcf&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isInvoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bogus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">doF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getParent&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of runOnFunction()
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前两个 &lt;code>if&lt;/code> 都是在判断参数，先忽略。&lt;code>if(toObfuscate(flag,&amp;amp;F,&amp;quot;bcf&amp;quot;))&lt;/code> 判断是否是否需要混淆，&lt;code>if (isInvoke(&amp;amp;F))&lt;/code> 判断能否混淆。&lt;/p>
&lt;p>真正的混淆逻辑在 &lt;code>bogus(F)&lt;/code> 里。&lt;/p>
&lt;h3 id="22-bogus">2.2 bogus&lt;/h3>
&lt;p>裁剪掉了调试输出后的 &lt;code>bogus&lt;/code> 函数内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">bogus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// For statistics and debug
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">NumFunction&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">NumBasicBlocks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">firstTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// First time we do the loop in this function
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">NumTimesOnFunctions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ObfTimes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">NumObfTimes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ObfTimes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Real begining of the pass
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Loop for the number of time we run the pass on the function
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Put all the function&amp;#39;s block in a list
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">NumBasicBlocks&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Basic Blocks&amp;#39; selection
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">ObfProbRate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">NumModifiedBasicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NumAddedBasicBlocks&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">FinalNumBasicBlocks&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Add bogus flow to the given Basic Block (see description)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">addBogusFlow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// remove the block from the list
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">firstTime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// first time we iterate on this function
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">InitNumBasicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">FinalNumBasicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of while(!basicBlocks.empty())
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">firstTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">NumObfTimes&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尝试分析上面的函数逻辑：&lt;/p>
&lt;ol>
&lt;li>循环混淆一定次数（&lt;code>NumObfTimes&lt;/code>）
&lt;ol>
&lt;li>遍历原函数基本块（&lt;code>basicBlocks&lt;/code>）
&lt;ol>
&lt;li>选择基本块（&lt;code>cryptoutils-&amp;gt;get_range(100) &amp;lt;= ObfProbRate&lt;/code>）
&lt;ol>
&lt;li>各种计数自增&lt;/li>
&lt;li>添加伪造控制流（&lt;code>addBogusFlow(basicBlock, F)&lt;/code>）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>混淆次数和基本块遍历没什么好说的，选择基本块这里，&lt;code>get_range(100)&lt;/code> 实际上是一个安全的随机数生成器，&lt;code>ObfProbRate&lt;/code> 是基本块被混淆的机率。也就是说一个函数内的基本块是随机被混淆的，加上混淆次数的设计，会出现有的基本块被混淆多次有的没有被混淆的情况。&lt;/p>
&lt;h3 id="22-addbogusflow">2.2 addBogusFlow&lt;/h3>
&lt;p>接着继续看添加伪造控制流的逻辑，同样裁剪掉了调试输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cm">/* addBogusFlow
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * Add bogus flow to a given basic block, according to the header&amp;#39;s description
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addBogusFlow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Split the block: first part with only the phi nodes and debug info and terminator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// created by splitBasicBlock. (-&amp;gt; No instruction)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Second part with every instructions from the original block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// We do this way, so we don&amp;#39;t have to adjust all the phi nodes, metadatas and so on
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// for the first block. We have to let the phi nodes in the first part, because they
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// actually are updated in the second part according to them.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getFirstNonPHIOrDbgOrLifetime&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">i1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getFirstNonPHIOrDbgOrLifetime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;originalBB&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">originalBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Creating the altered basic block on which the first basicBlock will jump
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;alteredBB&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">alteredBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createAlteredBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Now that all the blocks are created,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// we modify the terminators to adjust the control flow.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Preparing a condition..
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// For now, the condition is an always true comparaison between 2 float
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// This will be complicated after the pass (in doFinalization())
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">LHS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantFP&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getFloatTy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">RHS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantFP&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getFloatTy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// The always true condition. End of the first block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FCmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_TRUE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Jump to the original basic block if the condition is true or
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to the altered block if false.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// The altered block loop back on the original one.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// The end of the originalBB is modified to give the impression that sometimes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// it continues in the loop, and sometimes it return the desired value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// (of course it&amp;#39;s always true, so it always use the original terminator..
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but this will be obfuscated too;) )
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// iterate on instruction just before the terminator of the originalBB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Split at this point (we only want the terminator in the second part)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;originalBBpart2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">originalBBpart2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the first part go either on the return statement or on the begining
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// of the altered block.. So we erase the terminator created when splitting.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// We add at the end a new always true condition
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">condition2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FCmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_TRUE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBBpart2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of addBogusFlow()
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尝试分析上面的函数逻辑：&lt;/p>
&lt;ol>
&lt;li>分割基本块，把 &lt;code>phinode&lt;/code> 和调试信息之类的分割到原始块，新创建出来的块不包含 &lt;code>phinode&lt;/code> 之类的东西。（&lt;code>entry&lt;/code>）&lt;/li>
&lt;li>创建伪造分支。（&lt;code>altered&lt;/code>）&lt;/li>
&lt;li>创建恒真条件，这里是利用浮点比较 &lt;code>FCMP_TRUE&lt;/code>。（&lt;code>condition&lt;/code>）&lt;/li>
&lt;li>创建分支指令，真跳转原始块，假跳转伪造块，伪造块的末尾又跳回原始块。&lt;/li>
&lt;li>在原始块的结束部分再次分割基本块，分割后的块包含原始块的 terminator （&lt;code>terminator&lt;/code>）&lt;/li>
&lt;li>创建一个恒真条件，跳转到原始块的 terminator，假则跳转到伪造块 （&lt;code>condition2&lt;/code>）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-08/image-20211102160422737.png"
width="435"
height="648"
srcset="https://nnnewb.github.io/p/learning-packer-08/image-20211102160422737_hu1adf2e2db9eba618ac02ebe93739a09a_98722_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-08/image-20211102160422737_hu1adf2e2db9eba618ac02ebe93739a09a_98722_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211102160422737"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="161px"
>&lt;/p>
&lt;p>混淆后的控制流长这样，两个 condition 都是恒真条件，原始块被分成了三个部分，&lt;code>entry&lt;/code>、&lt;code>origin&lt;/code>、&lt;code>terminator&lt;/code> 。图中红色的部分是伪造块，包含垃圾指令，绿色的条件块都是恒真条件，只有绿色箭头的控制流能走通。蓝色节点是从原始基本块上分割出来的部分。&lt;/p>
&lt;h3 id="23-createalteredbasicblock">2.3 createAlteredBasicBlock&lt;/h3>
&lt;p>再看伪造块是如何生成的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++"> &lt;span class="cm">/* createAlteredBasicBlock
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * This function return a basic block similar to a given one.
&lt;/span>&lt;span class="cm"> * It&amp;#39;s inserted just after the given basic block.
&lt;/span>&lt;span class="cm"> * The instructions are similar but junk instructions are added between
&lt;/span>&lt;span class="cm"> * the cloned one. The cloned instructions&amp;#39; phi nodes, metadatas, uses and
&lt;/span>&lt;span class="cm"> * debug locations are adjusted to fit in the cloned basic block and
&lt;/span>&lt;span class="cm"> * behave nicely.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">createAlteredBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">Name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">F&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Useful to remap the informations concerning instructions.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ValueToValueMapTy&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">alteredBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CloneBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remap operands.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">ji&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Loop over the operands of the instruction
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">op_iterator&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">op_begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ope&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">op_end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">ope&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">opi&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// get the value for the operand
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Remap phi nodes&amp;#39; incoming blocks.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PHINode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dyn_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PHINode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getNumIncomingValues&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Remap attached metadata.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SmallVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MDNode&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MDs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getAllMetadata&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MDs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// important for compiling with DWARF, using option -g.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setDebugLoc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ji&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getDebugLoc&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">ji&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// The instructions&amp;#39; informations are now all correct
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// add random instruction in the middle of the bloc. This part can be improve
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// in the case we find binary operator, we modify slightly this part by randomly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// insert some instructions
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">isBinaryOp&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// binary instructions
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOpcode&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">BinaryOperator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">UnaryOperator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;_&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// treat differently float or int
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Binary int
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Add&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Sub&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Mul&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">UDiv&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SDiv&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">URem&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SRem&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Shl&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">LShr&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">AShr&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">And&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Or&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Xor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// to improve
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateNeg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Sub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Mul&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Shl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Binary float
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FAdd&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FSub&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FMul&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FDiv&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FRem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// can be improved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UnaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateFNeg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FAdd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FSub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FMul&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICmp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Condition (with int)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ICmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">currentI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// must be improved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">swapOperands&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// randomly change the predicate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_EQ&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_NE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// not equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_UGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_UGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned greater or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_ULT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_ULE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned less or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed greater or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SLT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SLE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed less or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCmp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Conditions (with float)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">currentI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// must be improved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">swapOperands&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// randomly change the predicate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OEQ&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_ONE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and operands are unequal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_UGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered or greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_UGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered, or greater than, or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_ULT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered or less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_ULE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered, or less than, or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and greater than or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OLT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OLE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered or less than, or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of createAlteredBasicBlock()
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要是分两部分：&lt;/p>
&lt;ol>
&lt;li>复制原始块，并修复伪造块的调试信息与元数据&lt;/li>
&lt;li>在伪造块中寻找二元运算、浮点运算、比较指令，在其中插入垃圾指令。&lt;/li>
&lt;/ol>
&lt;h2 id="0x03-创建自己的混淆">0x03 创建自己的混淆&lt;/h2>
&lt;p>对 OLLVM 的 bcf 混淆有了初步的映像之后，接下来就可以依样画葫芦抄一个自己的混淆出来啦。&lt;/p>
&lt;h3 id="31-方案">3.1 方案&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-08/image-20211103105527721.png"
width="953"
height="726"
srcset="https://nnnewb.github.io/p/learning-packer-08/image-20211103105527721_huf9cff02c3a79573b2f021a9808299ab4_137978_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-08/image-20211103105527721_huf9cff02c3a79573b2f021a9808299ab4_137978_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211103105527721"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>作为概念验证，我们的 pass 将原始代码分割成三个基本块，称为 &lt;code>entry&lt;/code>、&lt;code>original&lt;/code>和&lt;code>terminator&lt;/code>。&lt;code>entry&lt;/code> 通过一个恒真判断跳转至 &lt;code>original&lt;/code>，&lt;code>original&lt;/code> 通过恒真判断跳转至 &lt;code>terminator&lt;/code>。伪造块 &lt;code>altered&lt;/code> 则是 false 分支，内容仅复制 &lt;code>original&lt;/code> 块，并在末尾跳转至 &lt;code>original&lt;/code> 块。&lt;/p>
&lt;p>伪造块应该永远不会被执行。&lt;/p>
&lt;h3 id="32-llvm编程的重要概念">3.2 LLVM编程的重要概念&lt;/h3>
&lt;p>参考文章：&lt;a class="link" href="https://mukulrathi.com/create-your-own-programming-language/llvm-ir-cpp-api-tutorial/" target="_blank" rel="noopener"
>LLVM IR C++ API Tutorial&lt;/a>&lt;/p>
&lt;h4 id="关键类型">关键类型：&lt;/h4>
&lt;p>清单如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Value&lt;/code>&lt;/li>
&lt;li>&lt;code>Module&lt;/code>&lt;/li>
&lt;li>&lt;code>Type&lt;/code>&lt;/li>
&lt;li>&lt;code>Function&lt;/code>&lt;/li>
&lt;li>&lt;code>BasicBlock&lt;/code>&lt;/li>
&lt;li>&lt;code>BranchInst&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>列出的这些是 LLVM C++ 接口定义的类，可以通过 &lt;code>Module&lt;/code> 获取 &lt;code>Function&lt;/code>，可以从 &lt;code>Function&lt;/code> 获取 &lt;code>BasicBlock&lt;/code>，也可以从 &lt;code>BasicBlock&lt;/code> 反过来获取 &lt;code>Function&lt;/code>，这些容器间组织成层级关系。&lt;/p>
&lt;p>&lt;code>Module&lt;/code>-&amp;gt;&lt;code>Function&lt;/code>-&amp;gt;&lt;code>BasicBlock&lt;/code>-&amp;gt;&lt;code>Instruction&lt;/code>&lt;/p>
&lt;p>&lt;code>Value&lt;/code> 是公共基类，&lt;code>Function&lt;/code>、&lt;code>BasicBlock&lt;/code>，包括各种指令类都是从&lt;code>Value&lt;/code>继承。&lt;/p>
&lt;h4 id="phinode">PHINode：&lt;/h4>
&lt;p>参考文章：&lt;a class="link" href="http://mayuyu.io/2018/06/04/PhiNode-in-LLVM/" target="_blank" rel="noopener"
>PhiNode in LLVM&lt;/a>&lt;/p>
&lt;p>LLVM的指令类型中包含一种特殊节点叫 PhiNode，PhiNode 的存在是为了解决 LLVM IR 中因 SSA （静态单次赋值）引起的条件初始化问题。示例如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foooooo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//BasicBlock 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//BasicBlock 2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到我们需要按 &lt;code>bar&lt;/code> 的取值来初始化 &lt;code>i&lt;/code>，但 SSA 要求 &lt;code>i&lt;/code> 只能被赋值一次。PhiNode 允许根据基本块选择赋值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foooooo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">//BasicBlock1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">//BasicBlock2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Phi&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">BasicBlock1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="n">BasicBlock2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子也可以改成在栈或堆上开辟空间，以类似指针的方式避开 SSA 约束。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foooooo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">Store&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">Store&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">load&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="terminator">Terminator:&lt;/h4>
&lt;p>参考文章：&lt;a class="link" href="https://www.quora.com/How-do-Terminators-work-in-the-LLVM-IR" target="_blank" rel="noopener"
>How do Terminator work in LLVM IR&lt;/a>&lt;/p>
&lt;p>LLVM中，一个基本块 &lt;em>BasicBlock&lt;/em> 总是以终结指令 &lt;em>TerminatorInst&lt;/em> 结束的。终结指令不能出现在基本块末尾以外的任何地方。粗略地说，终结指令标识控制流在基本块结束后去往何方。&lt;/p>
&lt;p>每个终结指令都包含一定的后继基本块。&lt;/p>
&lt;p>几个常见的终结指令类型：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ReturnInst&lt;/code> 就像是普通编程中的的&lt;code>return&lt;/code>语句。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BranchInst&lt;/code> 是跳转指令，包括两类：&lt;/p>
&lt;ul>
&lt;li>条件跳转，满足条件时跳转分支1，否则跳转分支2。&lt;/li>
&lt;li>非条件跳转，总是跳转到某个分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SwitchInst&lt;/code> 类似于普通编程里的 &lt;code>switch&lt;/code> 语句，可以包含更多的后继块。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>还有些不那么常见的终结指令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>invoke&lt;/code> 和 &lt;code>catchswitch&lt;/code>&lt;/li>
&lt;li>&lt;code>unreachable&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="33-工具链">3.3 工具链&lt;/h3>
&lt;p>参考文章：&lt;a class="link" href="https://llvm.org/docs/CommandGuide/index.html" target="_blank" rel="noopener"
>LLVM Command Guide&lt;/a>&lt;/p>
&lt;p>实际动手前先了解下 LLVM工具链，列出一些会涉及到的命令行工具。&lt;/p>
&lt;ul>
&lt;li>&lt;code>llc&lt;/code> 将输入的 LLVM IR(&lt;code>.ll&lt;/code>) 编译成指定架构的汇编（或二进制对象文件）&lt;/li>
&lt;li>&lt;code>lli&lt;/code> 将输入的 BitCode(&lt;code>.bc&lt;/code>) 解释执行。&lt;/li>
&lt;li>&lt;code>llvm-as&lt;/code> 汇编器&lt;/li>
&lt;li>&lt;code>llvm-dis&lt;/code> 反汇编器，可以反汇编 BitCode&lt;/li>
&lt;li>&lt;code>opt&lt;/code> BITCODE/IR 优化器&lt;/li>
&lt;/ul>
&lt;p>最好再安装一个 graphviz，因为很多编程语言的命令行工具如果提供图形输出的话，大多是以 dot 形式提供（比如 go 的 pprof 和 LLVM opt 的 dot-cfg）。&lt;/p>
&lt;h3 id="33-runonfunction">3.3 runOnFunction&lt;/h3>
&lt;p>参考 OLLVM 的代码，抄出过滤函数。原理不明暂且不深究。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">isObfuscateable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isDeclaration&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hasAvailableExternallyLinkage&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">isInvoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="nf">isInvoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">bb&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isa&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">InvokeInst&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在入口点简单过滤掉不能混淆的函数，接着遍历基本块，对每个基本块都进行一次混淆。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">runOnFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">isObfuscateable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;function &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; is not obfuscateable&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">blocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">block&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">blocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nl">block&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">blocks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 原始块分割为三个基本块：entry、original、terminator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 通过两个恒真条件连接
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">entryBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">originalBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">entryBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entryBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getFirstNonPHIOrDbgOrLifetime&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;original&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">terminatorBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;terminator&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// 构造伪造块
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这一步已经构造好了 altered 跳转 original
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">alteredBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createAlteredBB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 清理 terminator，重新构造跳转关系
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">entryBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 构造恒真条件，从 entry 跳转到 original
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">lhs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">rhs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entryBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_EQ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entryBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 构造恒真条件，从 original 跳转到 terminator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">lhs2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">rhs2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">condition2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_EQ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition2&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">terminatorBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>混淆过程非常简单，原始基本块分割成三个部分，清除&lt;code>entry&lt;/code>和&lt;code>original&lt;/code>的&lt;code>terminator&lt;/code>并加入恒真条件跳转，false 分支都指定为 &lt;code>altered&lt;/code> 即可。&lt;/p>
&lt;h3 id="34-createalteredbb">3.4 createAlteredBB&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">createAlteredBB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 构造伪造块
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ValueToValueMapTy&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">altered&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CloneBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;altered&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 修复伪造块的指令
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">originalInstIt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">inst&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">altered&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// NOTE:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 参考链接： https://bbs.pediy.com/thread-266201.htm
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ... 但是CloneBasicBlock函数进行的克隆并不是完全的克隆，第一他不会对指令的操作数进行替换，比如：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ```
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// orig:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %a = ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %b = fadd %a, ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// clone:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %a.clone = ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %b.clone = fadd %a, ... ; Note that this references the old %a and
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// not %a.clone!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ```
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 在clone出来的基本块中，fadd指令的操作数不是%a.clone，而是%a。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 所以之后要通过VMap对所有操作数进行映射，使其恢复正常：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">op_begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">op_end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">opi&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 第二，它不会对PHI Node进行任何处理，PHI Node的前驱块仍然是原始基本块的前驱块，
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 但是新克隆出来的基本块并没有任何前驱块，所以我们要对PHI Node的前驱块进行remap：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">pn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dyn_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PHINode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inst&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getNumIncomingValues&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SmallVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MDNode&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MDs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getAllMetadata&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MDs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 修复调试
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setDebugLoc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalInstIt&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getDebugLoc&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">originalInstIt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 清理原来的 terminator，无条件从 altered 跳转到 original
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">altered&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">altered&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">altered&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>去除修复指令操作数和 PhiNode 的部分，其实就是复制了原始块的指令，然后将终结指令改成跳转到原始块而已。&lt;/p>
&lt;h3 id="35-编译和测试">3.5 编译和测试&lt;/h3>
&lt;p>使用 CMake 编译，在环境设置一节中已经说明了怎么配置，编译得到了 &lt;code>Hello.dll&lt;/code> 后用下面的案例程序测试。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>程序保存在 &lt;code>sample/sample.c&lt;/code>，测试命令如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># clang 编译得到 bitcode&lt;/span>
clang -emit-llvm .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample.c -c -o .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample.bc
&lt;span class="c1"># opt 启用 hello pass 创建混淆后的新 bitcode&lt;/span>
opt -enable-new-pm&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> -load .&lt;span class="se">\b&lt;/span>uild&lt;span class="se">\H&lt;/span>ello.dll -hello .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample.bc -o .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc
&lt;span class="c1"># llvm-dis 反汇编混淆后的 bitcode，得到 sample-optimized.ll ，可以拿来看混淆结果&lt;/span>
llvm-dis .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc
&lt;span class="c1"># llc 将混淆后的 bitcode 编译出汇编文件，也可以编译出 obj 文件，用 -filetype=obj 就行&lt;/span>
&lt;span class="c1"># 注意 -O0，不然默认优化就会直接把我们伪造的分支给干掉&lt;/span>
llc .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc -O0 -o .&lt;span class="se">\s&lt;/span>ample.s
&lt;span class="c1"># 用 clang 完成最后的汇编和链接&lt;/span>
clang sample.s -o sample.exe
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以用 opt 来获得混淆后的代码控制流视图。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">opt -enable-new-pm&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> -dot-cfg -cfg-func-name&lt;span class="o">=&lt;/span>main .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-08/main.png"
width="755"
height="555"
srcset="https://nnnewb.github.io/p/learning-packer-08/main_hu9fb641053a057b276abc5a630d791922_51045_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-08/main_hu9fb641053a057b276abc5a630d791922_51045_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="main"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>在IDA打开后看到的结果如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-08/image-20211103141258015.png"
width="370"
height="668"
srcset="https://nnnewb.github.io/p/learning-packer-08/image-20211103141258015_hu6b9a1833094321916938f7c8374d48d6_60703_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-08/image-20211103141258015_hu6b9a1833094321916938f7c8374d48d6_60703_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211103141258015"
class="gallery-image"
data-flex-grow="55"
data-flex-basis="132px"
>&lt;/p>
&lt;p>再来个更复杂的例子：&lt;a class="link" href="https://github.com/nnnewb/crackmes/blob/main/cm02/main.c" target="_blank" rel="noopener"
>main.c&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-08/image-20211103142352174.png"
width="314"
height="638"
srcset="https://nnnewb.github.io/p/learning-packer-08/image-20211103142352174_hu6e7d17f0f44390d3241deebec431bcff_8522_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-08/image-20211103142352174_hu6e7d17f0f44390d3241deebec431bcff_8522_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211103142352174"
class="gallery-image"
data-flex-grow="49"
data-flex-basis="118px"
>&lt;/p>
&lt;h3 id="36-扩展不透明谓词">3.6 扩展：不透明谓词&lt;/h3>
&lt;p>参考文章：&lt;a class="link" href="https://reverseengineering.stackexchange.com/questions/1669/what-is-an-opaque-predicate" target="_blank" rel="noopener"
>what is an opaque predicate&lt;/a>&lt;/p>
&lt;p>PS：本人没有相关学术背景，内容东拼西凑，如果存在理解错误或者陈述不准确请指出。&lt;/p>
&lt;p>概括地说，不透明谓词就是“某种如果程序分析不够充分，就可能错过的东西”。学术上说不透明谓词是始终在一个方向上执行的分支，对程序创建者已知，对分析器未知。&lt;/p>
&lt;p>例如我们知道程序运行时，&lt;code>LoadLibraryA&lt;/code> 加载一个不存在的库会返回 &lt;code>null&lt;/code>，但分析器并不清楚我们运行的环境里是否真的存在/不存在这个库，对于分析器来说用&lt;code>LoadLibraryA&lt;/code>构造出来的条件跳转就是一个不透明谓词。&lt;/p>
&lt;p>那透明呢？不知道有没有这样的说法，不透明是分析器可能错过的东西的话，透明就是分析器不会错过的东西，比如 &lt;code>xor eax,eax&lt;/code> 再紧跟着 &lt;code>test eax,eax&lt;/code>，那么&lt;code>jnz&lt;/code>的走向对分析器来说就是已知的——除非分析器根本没这功能。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>首先是完整案例代码：&lt;a class="link" href="https://github.com/nnnewb/learning-packer/tree/main/packer8" target="_blank" rel="noopener"
>packer8 - GitHub&lt;/a>&lt;/p>
&lt;p>总结知识点：&lt;/p>
&lt;ul>
&lt;li>关键类型：&lt;code>Module&lt;/code>、&lt;code>Function&lt;/code>、&lt;code>BasicBlock&lt;/code>、&lt;code>Instruction&lt;/code> &amp;hellip;&lt;/li>
&lt;li>PhiNode&lt;/li>
&lt;li>终结指令，&lt;code>BranchInst&lt;/code>、&lt;code>ReturnInst&lt;/code>&lt;/li>
&lt;li>LLVM 工具链：&lt;code>opt&lt;/code>、&lt;code>llc&lt;/code>、&lt;code>lli&lt;/code>、&lt;code>llvm-dis&lt;/code>&lt;/li>
&lt;li>关于 new pass manager 的坑：&lt;code>-fno-experimental-new-pass-manager&lt;/code>、&lt;code>-enable-new-pm=0&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>用 opt 单独搞混淆很麻烦，也不能集成到已有的 cmake/make 项目里。用 clang 加载混淆器的只需要这样：&lt;code>-Xclang -load -Xclang bcf.dll -fno-experimental-new-pass-manager&lt;/code> 就可以直接使用 &lt;code>bcf.dll&lt;/code> 参与混淆啦。&lt;/p>
&lt;p>LLVM 13.x 版本的新 pass manager 带来了很多问题，主要是 LLVM 的文档没写怎么把 Pass 注册到新的 PM 里，结果 opt 能跑 clang 又没运行 pass ，就搜来搜去花了很多时间&amp;hellip;不过实际动手写过之后会发现 LLVM 是个大宝库，特别适合发挥想象。Pass 来扩展编译器功能还是挺方便扩展的，也能一窥LLVM内部的奇妙世界。&lt;/p>
&lt;p>原本还打算看看控制流扁平化，毕竟OLLVM都已经开始看了，控制流扁平化不看一下感觉有点说不过去。但是实际上手发现没耐心再读一遍这代码了=。=也许下次。OLLVM代码解读好像有不少帖子了吧，不献丑了。控制流扁平化的代码量也不是很多，慢慢读还是能捋清楚逻辑的。&lt;/p>
&lt;p>另外还可以发挥想象：能不能用 LLVM Pass 往代码里插入花指令？&lt;/p>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://llvm.org/docs/CMake.html#cmake-out-of-source-pass" target="_blank" rel="noopener"
>CMake out of source pass - LLVM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://llvm.org/docs/WritingAnLLVMPass.html" target="_blank" rel="noopener"
>Writing an LLVM Pass - LLVM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://mukulrathi.com/create-your-own-programming-language/llvm-ir-cpp-api-tutorial/" target="_blank" rel="noopener"
>LLVM IR C++ API Tutorial&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://mayuyu.io/2018/06/04/PhiNode-in-LLVM/" target="_blank" rel="noopener"
>PhiNode in LLVM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.quora.com/How-do-Terminators-work-in-the-LLVM-IR" target="_blank" rel="noopener"
>How do Terminator work in LLVM IR&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://llvm.org/docs/CommandGuide/index.html" target="_blank" rel="noopener"
>LLVM Command Guide&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://bbs.pediy.com/thread-266201.htm" target="_blank" rel="noopener"
>OLLVM 虚假控制流源码学习笔记 - 看雪论坛&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github1s.com/0x3f97/ollvm-12.x/blob/HEAD/README.md" target="_blank" rel="noopener"
>0x3f97/ollvm-12.x&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>加壳原理07 - 花指令入门</title><link>https://nnnewb.github.io/p/learning-packer-07/</link><pubDate>Sun, 31 Oct 2021 17:14:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-07/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/cover.jpg" alt="Featured image of post 加壳原理07 - 花指令入门" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>个人浅见，一般分析一个程序可以有动态和静态两条路，动态一般指的就是调试或者别的运行时跟踪程序行为的方式了，除了调试器外就是抓取事件、日志、API调用记录、看内存数据等，比如有 Frida，还有内存搜索如CE。静态则是用各种工具在不实际运行程序的前提下，从程序文件里提取有用的信息。&lt;/p>
&lt;p>对于运行时的对抗手段很多，毕竟程序都跑起来了，你来我往打擂台嘛。而且在Windows这个闭源平台上，还可以靠不大可能被动手脚的内核来保护自己，Linux上就可能内核都是被魔改过的。&lt;/p>
&lt;p>但是对静态分析就没有什么特别好的办法，又要人造的计算机能正确运行，又要人不能理解，就有点矛盾。&lt;/p>
&lt;p>广为人知的对抗静态分析的手段有这些：&lt;/p>
&lt;ol>
&lt;li>混淆，把程序逻辑转换成更晦涩但等价的形式。&lt;/li>
&lt;li>加花，对抗反汇编引擎，利用反汇编工具的算法缺陷、漏洞来迫使分析者必须花费大量时间处理错误的反汇编结果，让诸如控制流视图之类的工具失效。&lt;/li>
&lt;/ol>
&lt;p>混淆和加花的主要区别 &lt;strong>在我这&lt;/strong> 定义为 &lt;strong>混淆是变换原程序逻辑，花指令不改变原程序逻辑&lt;/strong> 。&lt;/p>
&lt;p>这些对抗手段主要的目的都是 &lt;strong>消磨耐心&lt;/strong> 和 &lt;strong>拖延时间&lt;/strong> ，抬高人肉分析的成本。但混淆加花这种手段是无法做到只让机器读懂代码而人读不懂这种效果的。这个结论忘了是哪篇论文里提到的了。&lt;/p>
&lt;p>本篇只讲如何对抗反汇编，也就是花指令技术。&lt;/p>
&lt;h2 id="0x01-花指令原理">0x01 花指令原理&lt;/h2>
&lt;h3 id="11-机器码指令格式">1.1 机器码指令格式&lt;/h3>
&lt;p>码农日常工作接触的是高级语言（这个概念可能有争议，反正相对汇编、机器码这个层级来说都是高级语言就对了），汇编和机器码这种满是历史尘埃的领域是绝无机会接触的。但要理解花指令，首先要理解汇编代码的二进制表示，才会明白为什么反汇编工具的力量是有极限的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/zHClf.png"
width="658"
height="368"
srcset="https://nnnewb.github.io/p/learning-packer-07/zHClf_hu3ca7a186b6a8e60fb2df5f6ffb33e0d4_25027_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-07/zHClf_hu3ca7a186b6a8e60fb2df5f6ffb33e0d4_25027_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="zHClf"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;p>这是 Intel 的 &lt;a class="link" href="https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf" target="_blank" rel="noopener"
>64-ia-32-architectures-software-developer-instruction-set-reference-manual&lt;/a> 里的一张图，说明了汇编指令如何以二进制形式保存。可以简单看成3部分，1字节的可选前缀，1-3字节的opcode部分，剩余描述操作数的部分。&lt;/p>
&lt;p>几个要素：&lt;/p>
&lt;ol>
&lt;li>指令长度不固定，最短 1 字节，最长可能有 14 （图中全部相加，实际会不会有我就不知道了）。&lt;/li>
&lt;li>一条&lt;strong>汇编代码里的指令&lt;/strong>可能对应很多不同的 opcode ，简单到 &lt;code>add&lt;/code> 这样的指令也会有很多种不同形式。&lt;/li>
&lt;/ol>
&lt;p>熟悉机器码格式在自己构造花指令的时候大概会有用，但实话说 Intel 这手册看得我头痛。所以还是直接快进到花指令原理。&lt;/p>
&lt;h3 id="12-花指令原理">1.2 花指令原理&lt;/h3>
&lt;p>花指令的英文是 &lt;em>junk code&lt;/em> ，也就是垃圾代码。实际上花指令的确是一些不影响程序逻辑的 &lt;em>垃圾&lt;/em> 机器码，它存在的唯一意义就是干扰反汇编引擎和人肉分析。&lt;/p>
&lt;p>花指令有两种类型：&lt;/p>
&lt;ul>
&lt;li>不可执行的花指令&lt;/li>
&lt;li>可执行的花指令&lt;/li>
&lt;/ul>
&lt;p>听起来像是废话但实际上构造这两种花指令的难度是完全不一样的。&lt;/p>
&lt;p>对于不可执行的花指令，本质上我们做的事情是在跳转指令之后插入一个多字节指令的字节，欺骗反汇编器将这个字节之后的几个字节当成一个多字节指令解释，进而造成后续指令反汇编出错。&lt;/p>
&lt;p>而可执行的花指令，本质是将指令的组成部分重新解释执行。像是一个2字节的跳转指令，第二个字节是操作数，但操作数可以是 &lt;code>0xff&lt;/code>，也就是带符号的 &lt;code>-1&lt;/code>，使 EIP 落在 &lt;code>0xff&lt;/code> 这个字节上，将&lt;code>0xff&lt;/code>作为指令继续执行。这个过程中&lt;code>0xff&lt;/code>既可以被当成数字&lt;code>0xff&lt;/code>解释，也被当成了指令来解释。&lt;/p>
&lt;h3 id="13-反汇编算法">1.3 反汇编算法&lt;/h3>
&lt;p>目前常见反汇编算法就两类，一类是线性反汇编，对输入的数据逐字节翻译成汇编代码。这种反汇编算法多数时候工作地很好，但属于老实人，认为指令总是一个接一个出现，一个简单地在&lt;code>jmp&lt;/code>后插入&lt;code>0xe8&lt;/code>就能骗到。&lt;/p>
&lt;p>另一类是基于代码流分析的算法，这类算法的特点是不会无脑地继续反汇编跳转指令之后的代码，而是去优先反汇编 &lt;strong>可达&lt;/strong> 的代码。像是我们在 C 里面写 &lt;code>if (1) {} else { /* junk code */ }&lt;/code>，对于足够聪明的编译器，&lt;code>else&lt;/code> 分支就是明确无误的垃圾。对于这种反汇编算法，可以通过可执行的花指令来欺骗，或构造反汇编器无法判断真假的恒真/恒假分支，再插入不可执行的花指令来达到欺骗效果。&lt;/p>
&lt;h2 id="0x02-花指令案例">0x02 花指令案例&lt;/h2>
&lt;h3 id="21-e8-和线性反汇编算法">2.1 &lt;code>E8&lt;/code> 和线性反汇编算法&lt;/h3>
&lt;p>&lt;code>E8&lt;/code> 是 &lt;code>call&lt;/code> 指令的 opcode。opcode &lt;em>operation code&lt;/em> 也叫指令机器码 &lt;em>Instruction Machine Code&lt;/em>，就是汇编指令翻译后的二进制形式。贴一个 &lt;a class="link" href="https://en.wikipedia.org/wiki/X86_instruction_listings" target="_blank" rel="noopener"
>wiki 百科的 x86 指令列表&lt;/a> 以供参考。还有 &lt;a class="link" href="https://c9x.me/x86/html/file_module_x86_id_26.html" target="_blank" rel="noopener"
>x86 instruction set reference&lt;/a> 。还有 &lt;a class="link" href="https://stackoverflow.com/questions/44882315/how-does-the-cpu-distinguish-call-rel16-e8-cw-and-call-rel32-e8-cd" target="_blank" rel="noopener"
>How does the CPU distinguish &amp;lsquo;CALL rel16&amp;rsquo; (E8 cw) and &amp;lsquo;CALL rel32&amp;rsquo; (E8 cd)?&lt;/a>&lt;/p>
&lt;p>我们的程序运行在用户模式（32位）模式下，&lt;code>E8&lt;/code> 指令后紧跟着的是4字节的相对偏移，一条完整的 &lt;code>E8&lt;/code> 指令会使用 5 个字节的空间。&lt;/p>
&lt;p>下面是一个 &lt;code>E8&lt;/code> 花指令的案例，需要 MinGW 编译，对 x32dbg 有效。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define ANTI_LINEAR_DISASSEMBLE_ALGORITHM_1 asm(&amp;#34;jmp next\n.byte 0xe8;\nnext:\n&amp;#34;)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ANTI_LINEAR_DISASSEMBLE_ALGORITHM_1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">gcc demo.c &lt;span class="s1">&amp;#39;-Wl,--entry=_start&amp;#39;&lt;/span> -nodefaultlibs -nostartfiles -o demo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>调试器内的效果&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/image-20211028152219524.png"
width="1175"
height="501"
srcset="https://nnnewb.github.io/p/learning-packer-07/image-20211028152219524_hu2408fa036d3a5e5647fcc1f6e2c0b730_66690_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-07/image-20211028152219524_hu2408fa036d3a5e5647fcc1f6e2c0b730_66690_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211028152219524"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="562px"
>&lt;/p>
&lt;p>可以看到在 &lt;code>jmp&lt;/code> 指令后，反汇编出了一条 &lt;code>call&lt;/code> 指令。但实际上我们写的代码里是没有任何函数调用的。而在这个 &lt;code>E8&lt;/code> 后面的 &lt;code>B8 00 00 00 00 5D C3&lt;/code> 才是真正会执行的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">mov eax, 0 ; B8 00 00 00 00
pop ebp ; 5D
retn ; C3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考&lt;a class="link" href="http://www.mathemainzel.info/files/x86asmref.html#pop" target="_blank" rel="noopener"
>intel 80x86 assembly language opcodes&lt;/a>。&lt;/p>
&lt;p>如果仔细看 &lt;code>jmp&lt;/code> 后的偏移 &lt;code>01&lt;/code> 的话也能猜到下一个 &lt;code>E8&lt;/code> 是不会被执行的。&lt;/p>
&lt;p>像是这种简单的花指令在 IDA 里没用，IDA 的反汇编算法会根据控制流分析来判断哪些内容不会被执行，进而产生下面的结果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/image-20211028153421508.png"
width="796"
height="478"
srcset="https://nnnewb.github.io/p/learning-packer-07/image-20211028153421508_hu997bdc75332333c1639f8a4c89fbdacd_51145_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-07/image-20211028153421508_hu997bdc75332333c1639f8a4c89fbdacd_51145_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211028153421508"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;h3 id="22--ida-和代码流反汇编算法">2.2 IDA 和代码流反汇编算法&lt;/h3>
&lt;p>关于IDA的反汇编算法描述是来自《恶意代码分析实战》。&lt;/p>
&lt;blockquote>
&lt;p>前面讨论的简单对抗反汇编技术是巧妙地在条件跳转指令之后放一个字节，这种技术的思路是，从这个字节开始反汇编，阻止其后真正的指令被反汇编，因为插入的字节是一个多字节指令的机器码。我们称这样的字节是流氓字节，因为它不属于程序的一部分，只是用在代码段迷惑反汇编器。&lt;/p>
&lt;/blockquote>
&lt;p>IDA的反汇编算法是针对代码流的反汇编，基本思路是记录反汇编过程中的跳转地址作为下一次反汇编的起点，当控制流转移（&lt;code>jmp&lt;/code>之类的跳转指令）时，并不是从跳转指令之后继续反汇编，而是从之前记录的跳转地址里选一个，开始新的反汇编工作。如上面的 &lt;code>jmp&lt;/code> + &lt;code>e8&lt;/code> 就无法对抗这种反汇编算法。&lt;/p>
&lt;p>目前实践中也发现，IDA 已经可以识别出一些例如 &lt;code>jz&lt;/code>+&lt;code>jnz&lt;/code> 制造的无条件跳转，通过控制流指令制造恒真或恒假条件来跳转大概会往更加复杂、高开销的方向走：比如利用系统API、环境中的已知常量作为条件去欺骗IDA，让 IDA 无法轻易认定某条分支是无效分支，进而干扰反汇编结果。&lt;/p>
&lt;p>那么除了插入多字节指令还有什么办法对抗代码流分析算法呢？&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;但是，如果流氓字节不能被忽略怎么办？如果它是合法指令的一部分，且在运行时能够被正确执行怎么办？这里，我们碰到一个棘手的问题，所有给定字节都是多字节指令的一部分，而且它们都能够被执行。目前业内没有一个反汇编器能够将单个字节表示为两条指令的组成部分，然而处理器没有这种限制。&lt;/p>
&lt;/blockquote>
&lt;p>下面是一个案例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="p">.&lt;/span>&lt;span class="n">byte&lt;/span> &lt;span class="mh">0xeb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xff&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x48&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>0xeb&lt;/code> &lt;code>jmp&lt;/code> 指令的 opcode，是一个 2 字节指令。&lt;code>0xff&lt;/code> 被解释为 &lt;code>-1&lt;/code>。&lt;/p>
&lt;p>&lt;code>0xff&lt;/code> 是 &lt;code>INC&lt;/code> 的机器码，&lt;code>0xc0&lt;/code>是操作数，表示 &lt;code>eax&lt;/code>，也就是 &lt;code>inc eax&lt;/code>。可以在这个&lt;a class="link" href="https://defuse.ca/online-x86-assembler.htm" target="_blank" rel="noopener"
>在线反汇编&lt;/a>网站上验证。&lt;/p>
&lt;p>&lt;code>0x48&lt;/code> 则是 &lt;code>dec eax&lt;/code> 的汇编指令，因此这4个字节执行后最终不会影响 &lt;code>eax&lt;/code> 的值。&lt;/p>
&lt;p>在这里，&lt;code>0xff&lt;/code> 同时被解释为 &lt;code>jmp&lt;/code> 的操作数和 &lt;code>inc&lt;/code> 指令，并且能正常执行，但反汇编器则会被迷惑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/image-20211030211603863.png"
width="910"
height="177"
srcset="https://nnnewb.github.io/p/learning-packer-07/image-20211030211603863_huc23cc312a3844059e36c75b9cf995c65_26582_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-07/image-20211030211603863_huc23cc312a3844059e36c75b9cf995c65_26582_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211030211603863"
class="gallery-image"
data-flex-grow="514"
data-flex-basis="1233px"
>&lt;/p>
&lt;p>上图是IDA中反汇编的结果。&lt;/p>
&lt;h3 id="23-构造能欺骗ida的花指令">2.3 构造能欺骗IDA的花指令&lt;/h3>
&lt;p>构造能欺骗IDA的花指令简单的办法就是构造无法被静态分析的恒真/恒假条件。举例来说，&lt;code>LoadLibraryA&lt;/code> 加载失败会返回 &lt;code>NULL&lt;/code>，就可以被用来构造花指令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;not-exists.dll&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">asm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;test %eax,%eax;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">jz next;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">.byte 0xe8;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">next:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/image-20211030213109569.png"
width="955"
height="267"
srcset="https://nnnewb.github.io/p/learning-packer-07/image-20211030213109569_huae46ff5cf7f405ad977cb15ab7a51e13_39907_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-07/image-20211030213109569_huae46ff5cf7f405ad977cb15ab7a51e13_39907_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211030213109569"
class="gallery-image"
data-flex-grow="357"
data-flex-basis="858px"
>&lt;/p>
&lt;p>可以看到，IDA不能静态分析出&lt;code>LoadLibraryA&lt;/code> 的返回值是 &lt;code>NULL&lt;/code>，顺着 &lt;code>jz&lt;/code> 的 False 分支反汇编时遇到了 &lt;code>0xe8&lt;/code>，于是后续的反汇编结果就完全乱了套。&lt;/p>
&lt;h3 id="24-破坏栈帧分析">2.4 破坏栈帧分析&lt;/h3>
&lt;p>还有一种花指令是通过对 &lt;code>call&lt;/code> 和 &lt;code>ret&lt;/code> 利用来实现破坏栈帧分析。大家都知道 &lt;code>call&lt;/code> 和 &lt;code>ret&lt;/code> 就是 &lt;code>push&lt;/code>+&lt;code>jmp&lt;/code>和&lt;code>pop&lt;/code>+&lt;code>jmp&lt;/code>，如果我们手动在函数里再构造一个假函数，跳转之后修改栈上的返回地址，返回到我们希望继续执行的位置，虽然本质上是个 GOTO 的操作，但 IDA 就会懵圈了。&lt;/p>
&lt;p>一个简单的例子如下，&lt;code>call&lt;/code>跳转到下一行，修改返回地址到 &lt;code>continue&lt;/code> 后又&lt;code>ret&lt;/code>，结果就是在 &lt;code>continue&lt;/code> 这个标签处继续执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">asm&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;call next;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;next:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;movl $continue,(%esp);&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;ret;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;continue:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>产生的代码在IDA里分析会出现这样的 &lt;code>sp-analysis failed&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/image-20211030215415946.png"
width="529"
height="325"
srcset="https://nnnewb.github.io/p/learning-packer-07/image-20211030215415946_hu1b68fd95622716000a3ab92e85a1f3fd_15293_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-07/image-20211030215415946_hu1b68fd95622716000a3ab92e85a1f3fd_15293_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211030215415946"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>这个思路可以反复嵌套，增加跳转的次数和深度，甚至把正常逻辑隐藏在这种反复跳转中，但从高级语言层面手工加这种花很困难。&lt;/p>
&lt;p>再给一个复杂一些的例子，同样是利用了 &lt;code>call&lt;/code> 和 &lt;code>ret&lt;/code> 来实现花式跳转。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-07/165417l97li97iwq8lf5qz.png"
width="836"
height="381"
srcset="https://nnnewb.github.io/p/learning-packer-07/165417l97li97iwq8lf5qz_hua1e400469607dff71cf186bb43cf99f2_16220_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-07/165417l97li97iwq8lf5qz_hua1e400469607dff71cf186bb43cf99f2_16220_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;p>来自52论坛的：&lt;a class="link" href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=1068444&amp;amp;highlight=%BB%A8%D6%B8%C1%EE" target="_blank" rel="noopener"
>一些简单的花指令的解析(含Intel指令集) - 『病毒分析区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn&lt;/a>。&lt;/p>
&lt;p>顺便一提，链接里那个 &lt;code>pop ss&lt;/code> 也很有意思，GrandCrab 的案例也是结合了多种控制流指令来完成跳转，阻碍IDA分析。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>首先，不只是E8，不要局限在这里。所有的多字节指令都可以用来构造花指令。花指令也不只是利用多字节指令干扰反汇编，也能精心伪造控制流对抗分析工具的其他高级分析功能，迫使分析者不能无脑F5读伪代码，消磨分析者的时间、精力、耐心。&lt;/p>
&lt;p>花指令有很多模式，但一个显著特征是 &lt;strong>跳转&lt;/strong>，必须通过跳转指令来实现越过不可执行的花指令，或通过跳转来实现重新解释已经被解释过的指令的一部分，以及通过连续跳转来隐藏真实跳转地址。所以看到莫名其妙地开始跳起来就要警惕了，这会儿很可能正在分析无效的垃圾代码。&lt;/p>
&lt;p>编写花指令的时候应该注意到，花指令对抗的目标不是分析工具，而是分析者。简单地写一个&lt;code>jz&lt;/code>和&lt;code>E8&lt;/code>也许实现了让分析工具出错的目的，但分析者一眼就能看出这是无效代码，基本无法起到对抗作用。&lt;/p>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://book.douban.com/subject/25868289/" target="_blank" rel="noopener"
>恶意代码分析实战 (豆瓣) (douban.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/onetrainee/p/12175257.html" target="_blank" rel="noopener"
>一个利用call+ret修改返回地址的花指令分析 - OneTrainee - 博客园 (cnblogs.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=1068444&amp;amp;highlight=%BB%A8%D6%B8%C1%EE" target="_blank" rel="noopener"
>一些简单的花指令的解析(含Intel指令集) - 『病毒分析区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-sdm-combined-volumes-1-2a-2b-2c-2d-3a-3b-3c-3d-and-4.html" target="_blank" rel="noopener"
>Combined Volume Set of Intel® 64 and IA-32 Architectures Software Developer’s Manuals&lt;/a>&lt;/li>
&lt;li>[&lt;a class="link" href="https://bbs.pediy.com/thread-113402.htm" target="_blank" rel="noopener"
>原创]汇编指令之OpCode快速入门-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.felixcloutier.com/x86/" target="_blank" rel="noopener"
>x86 and amd64 instruction reference (felixcloutier.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.mathemainzel.info/files/x86asmref.html" target="_blank" rel="noopener"
>Intel 80x86 Assembly Language OpCodes (mathemainzel.info)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://defuse.ca/online-x86-assembler.htm" target="_blank" rel="noopener"
>online x86 disassembler&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.docin.com/p-748789332.html" target="_blank" rel="noopener"
>花指令模糊变换策略研究与实现 - 豆丁网 (docin.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>特别推荐最后这篇论文，我没找到在哪儿能下，就放原链接了。直接百度学术搜花指令也能找到很多有意思的文章（尽管形式化描述的部分基本都没看懂）。&lt;/p>
&lt;p>自动化的加花方式基本要求在汇编层面去重排代码或者插入代码，直接在二进制文件上加花我寻思了一下是蛮难的，主要是正常程序代码段里随便插东西的话，重定位和重新算各种文件字段很麻烦。所以吧&amp;hellip;大概在编译器层面（LLVM？或者对生成的汇编文件下手）才会比较好施展开。&lt;/p></description></item><item><title>加壳原理06：反调试技术入门</title><link>https://nnnewb.github.io/p/learning-packer-06/</link><pubDate>Wed, 27 Oct 2021 19:50:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-06/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-06/cover.jpg" alt="Featured image of post 加壳原理06：反调试技术入门" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>反调试技术，往大了说是用尽一切手段防止运行时对程序的非法篡改和窥视，往小了说就是防调试器。反正反调试这件事和各种技术都能搭点边，什么HOOK啦DLL注入啦。真要给涉及到的各方面都说得头头是道，那我这个菜鸡就不叫菜鸡了。&lt;/p>
&lt;p>反正涉及的各种技术细节吧，将来都会慢慢学到的。也不急于一时。本篇关注的重点还是在导，引入，了解个大概。看看有什么反调试思路，对付这些反调试技术又有什么 bypass 的手段。&lt;/p>
&lt;p>说这么多，其实还是找了篇写得不错的外文文章，抄了然后调试了下案例。&lt;/p>
&lt;h2 id="0x01-反调试思路">0x01 反调试思路&lt;/h2>
&lt;p>首先概述一下本篇主要的反调试思路。&lt;/p>
&lt;h3 id="11-系统api或数据结构">1.1 系统API或数据结构&lt;/h3>
&lt;p>操作系统提供了一些调试标志位，调试器启动的进程会有标识。调试器也可能会为了提供更好的调试体验，修改一些参数，让我们有迹可循。&lt;/p>
&lt;ol>
&lt;li>&lt;code>PEB-&amp;gt;BeingDebugged&lt;/code>和&lt;code>IsDebuggerPresent&lt;/code>&lt;/li>
&lt;li>&lt;code>PEB-&amp;gt;NtGlobalFlag&lt;/code>&lt;/li>
&lt;li>&lt;code>PEB-&amp;gt;HEAP-&amp;gt;Flags&lt;/code>和&lt;code>PEB-&amp;gt;HEAP-&amp;gt;ForceFlags&lt;/code>&lt;/li>
&lt;li>&lt;code>CheckRemoteDebuggerPresent&lt;/code>&lt;/li>
&lt;li>&lt;code>NtQueryInformationProcess&lt;/code>
&lt;ol>
&lt;li>&lt;code>ProcessDebugPort&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugObjectHandle&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugFlags&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessBasicInformation&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>NtSetInformationThread&lt;/code>和&lt;code>NtCreateThreadEx&lt;/code>
&lt;ol>
&lt;li>利用 &lt;code>HideFromDebugger&lt;/code> 标志位来对调试器隐藏自身。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="12-sehveh">1.2 SEH、VEH&lt;/h3>
&lt;p>总的来说，利用 SEH 和 VEH 机制，尝试抛出一些会被调试器处理的中断或异常，同时自己挂一个处理函数，如果异常被调试器捕获了，那自己挂的异常处理函数就不会被调用，借此判断是否有调试器正在调试程序。&lt;/p>
&lt;ol>
&lt;li>&lt;code>TF&lt;/code>标志位和&lt;code>INT 1&lt;/code>中断&lt;/li>
&lt;li>&lt;code>INT 3&lt;/code> 中断和 SEH 处理函数，&lt;code>__try __except&lt;/code> 或 MinGW 的 &lt;code>__try1 __except1&lt;/code>，顺便一提我的SEH实验没成功。但是 VEH 基本没问题。&lt;/li>
&lt;li>&lt;code>DBG_PRINTEXCEPTION_WIDE_C&lt;/code>和&lt;code>DBG_PRINTEXCEPTION_W&lt;/code>，Windows 10 &lt;code>OutputDebugString&lt;/code> 利用了这个 Exception 来抛出调试字符串。&lt;/li>
&lt;li>&lt;code>EXCEPTION_INVALID_HANDLE&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="13-调试寄存器">1.3 调试寄存器&lt;/h3>
&lt;p>&lt;code>GetThreadContext&lt;/code> 获取当前上下文，判断 &lt;code>Dr0&lt;/code>-&lt;code>Dr3&lt;/code>寄存器的值。&lt;/p>
&lt;h3 id="14-完整性校验">1.4 完整性校验&lt;/h3>
&lt;p>原理是调试器通过临时修改断点处指令为中断来取得程序控制权，可以用CRC校验，或者更简单点，直接逐字节求和，判断代码是否被篡改。&lt;/p>
&lt;h2 id="0x02-系统api方式">0x02 系统API方式&lt;/h2>
&lt;h3 id="21-isdebuggerpresent">2.1 IsDebuggerPresent&lt;/h3>
&lt;p>首先出场的就是 &lt;code>IsDebuggerPresent&lt;/code> 这个 API 了，文档&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-isdebuggerpresent" target="_blank" rel="noopener"
>可以在这里&lt;/a>找到。简要概述一下这个接口，微软的描述是此函数允许应用程序确定自己是否正在被调试，并依此改变行为。例如通过&lt;code>OutputDebugString&lt;/code>函数提供更多调试信息。&lt;/p>
&lt;p>微软的本意应该是一个调试开关式的东西，正经写过工作代码应该知道代码里加个调试开关方便在出问题的时候拿详细日志是很有用很方便的，同时也能在不需要调试的时候也不会让程序不会损失太多性能。比起编译期的调试开关&lt;code>_DEBUG&lt;/code>宏之类的会更灵活一些。&lt;/p>
&lt;p>扯远了。总之，这个函数没参数，返回&lt;code>BOOL&lt;/code>，案例很好写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;debugapi.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_isDebuggerPresent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IsDebuggerPresent&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;IsDebuggerPresent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就是这样。&lt;/p>
&lt;p>&lt;code>IsDebuggerPresent&lt;/code> 这个 API 的实现方式是从 PEB &lt;em>Process Environment Block&lt;/em> 读取 &lt;code>BeingDebugged&lt;/code> 字段。随便什么调试器跳转过去就能看到这样的实现代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">fs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0x30&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>fs:[0]&lt;/code>是 TEB &lt;em>Thread Environment Block&lt;/em> 结构的地址，其中&lt;code>fs:[0x30]&lt;/code> 这个偏移是 PEB 指针，第一行的意思是将 PEB 指针赋值给 eax 寄存器。&lt;/p>
&lt;p>第二行就是从 PEB 结构的 0x2 偏移处，也就是 &lt;code>BeingDebugged&lt;/code> 字段，取 1 字节，赋值到 eax 。&lt;/p>
&lt;p>第三行就是返回了，没有参数和局部变量所以也没平栈，无论 &lt;code>__cdecl&lt;/code> 还是 &lt;code>__stdcall&lt;/code> 都是在 &lt;code>eax&lt;/code> 寄存器保存返回值。&lt;/p>
&lt;p>从&lt;a class="link" href="https://en.wikipedia.org/wiki/Win32_Thread_Information_Block" target="_blank" rel="noopener"
>wiki&lt;/a> 和 &lt;a class="link" href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FTEB.html" target="_blank" rel="noopener"
>NTAPI UNDOCUMENTED FUNCTIONS&lt;/a> 查询到的文档都能看到 PEB 结构的内存布局。&lt;/p>
&lt;p>想要 bypass 这种检查就非常容易，修改 PEB 结构中的 &lt;code>BeingDebugged&lt;/code> 字段值为 0 就完事了。&lt;/p>
&lt;h3 id="22-ntglobalflag">2.2 NtGlobalFlag&lt;/h3>
&lt;p>&lt;code>NtGlobalFlag&lt;/code> 也是一个 PEB 的字段，但是在微软官方的 PEB 结构文档和定义里没有给出这个字段（在 Reserved 里）。查阅上面提到的文档或者用 WinDbg 的 &lt;code>dt&lt;/code> 命令都可以查到。&lt;/p>
&lt;p>当这个字段包含特定标志位（&lt;code>0x20 | 0x40&lt;/code>，分别是 &lt;strong>FLG_HEAP_ENABLE_TAIL_CHECK&lt;/strong> 和 &lt;strong>FLG_HEAP_ENABLE_FREE_CHECK&lt;/strong>）的时候提示有调试器存在（&lt;a class="link" href="https://www.geoffchappell.com/studies/windows/win32/ntdll/api/rtl/regutil/getntglobalflags.htm" target="_blank" rel="noopener"
>Geoff Chappell, Software Analyst，RtlGetNtGlobalFlags()&lt;/a>，没微软的文档）。&lt;/p>
&lt;p>这里给出 WinDbg 查到的字段偏移。微软商店里的 WinDbg Preview 也是一样的。关于 &lt;code>dt&lt;/code> 命令可以用 &lt;code>.hh dt&lt;/code> 来查阅命令的文档，&lt;code>?&lt;/code> 来查阅可用命令，或者直接点上面的帮助。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _peb NtGlobalFlag @$peb
ntdll!_PEB
+0x068 NtGlobalFlag : 0x70
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到偏移是 &lt;code>0x68&lt;/code>，WinDbg 中标志位的值是 &lt;code>x70&lt;/code>，符合上面所说的 &lt;code>0x20|0x40&lt;/code>。接下来尝试实现一下。首先因为我用的 MinGW 所以需要写两句汇编去取PEB指针。（用的 nasm，gcc 的内联汇编语法太怪了）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_GetPEB&lt;/span>
&lt;span class="nl">_GetPEB:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再具体实现。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_RtlGetNtGlobalFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 两种方式，直接读内存或者用undocumented接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">PPEB&lt;/span> &lt;span class="n">peb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetPEB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PULONG&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">peb&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x68&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x20&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;PEB-&amp;gt;NtGlobalFlag&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 或者...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FARPROC&lt;/span> &lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;RtlGetNtGlobalFlags&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="n">ULONG&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">RtlGetNtGlobalFlags_t&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(((&lt;/span>&lt;span class="n">RtlGetNtGlobalFlags_t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="p">)()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x20&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;RtlGetNtGlobalFlags&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>差别不大，可以根据需要选择其一。编译后不使用调试器打开则不会触发反调试代码。&lt;/p>
&lt;p>bypass 这个检查也很容易，因为标志位都在被调试进程的地址空间里，直接改掉就行了。&lt;/p>
&lt;h3 id="23-heap-flags">2.3 HEAP-&amp;gt;Flags&lt;/h3>
&lt;p>PEB 结构中还有个指向当前堆信息结构的指针，&lt;code>ProcessHeap&lt;/code>。可以用 WinDbg 的 &lt;code>dt&lt;/code> 命令查看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _peb processheap @$peb
ntdll!_PEB
+0x018 ProcessHeap : 0x012d0000 Void
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而这个 heap 结构的也同样可以用 &lt;code>dt&lt;/code> 命令查看。我们关注的是 heap 结构中的 &lt;code>Flags&lt;/code> 和 &lt;code>ForceFlags&lt;/code> 字段。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _heap flags 0x012d0000
ntdll!_HEAP
+0x040 Flags : 0x40000062
0:000&amp;gt; dt _heap forceflags 0x012d0000
ntdll!_HEAP
+0x044 ForceFlags : 0x40000060
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当 Flags 没有 &lt;code>HEAP_GROWABLE&lt;/code> 标志位，或 &lt;code>ForceFlags&lt;/code> 不为零的时候，则可能存在调试器。同样的， 没有官方的文档，只能说逆向出这些东西的大佬真是太强啦。关于 Flags 谷歌了一下，发现在 &lt;a class="link" href="https://ctf-wiki.org/reverse/windows/anti-debug/heap-flags/#flags" target="_blank" rel="noopener"
>CTF Wiki&lt;/a> 有比较详细的说明。我搬一部分过来。&lt;/p>
&lt;blockquote>
&lt;p>在所有版本的 Windows 中, &lt;code>Flags&lt;/code>字段的值正常情况都设为&lt;code>HEAP_GROWABLE(2)&lt;/code>, 而&lt;code>ForceFlags&lt;/code>字段正常情况都设为&lt;code>0&lt;/code>. 然而对于一个 32 位进程 (64 位程序不会有此困扰), 这两个默认值, 都取决于它的宿主进程(host process) 的 &lt;a class="link" href="https://msdn.microsoft.com/en-us/library/ms933120.aspx" target="_blank" rel="noopener"
>&lt;code>subsystem&lt;/code>&lt;/a>版本 (这里不是指所说的比如 win10 的 linux 子系统). 只有当&lt;code>subsystem&lt;/code>在&lt;code>3.51&lt;/code>及更高的版本, 字段的默认值才如前所述. 如果是在&lt;code>3.10-3.50&lt;/code>版本之间, 则两个字段的&lt;code>HEAP_CREATE_ALIGN_16 (0x10000)&lt;/code>都会被设置. 如果版本低于&lt;code>3.10&lt;/code>, 那么这个程序文件就根本不会被运行.&lt;/p>
&lt;p>如果某操作将&lt;code>Flags&lt;/code>和&lt;code>ForgeFlags&lt;/code>字段的值分别设为&lt;code>2&lt;/code>和&lt;code>0&lt;/code>, 但是却未对&lt;code>subsystem&lt;/code>版本进行检查, 那么就可以表明该动作是为了隐藏调试器而进行的.&lt;/p>
&lt;/blockquote>
&lt;p>接下来给出案例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_PEB_HeapFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PPEB&lt;/span> &lt;span class="n">peb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetPEB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">heap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PDWORD&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">peb&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x18&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">PDWORD&lt;/span> &lt;span class="n">heapFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PDWORD&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">heap&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">PDWORD&lt;/span> &lt;span class="n">forceFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PDWORD&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">heap&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x44&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">heapFlags&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">HEAP_GROWABLE&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">forceFlags&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;PEB-&amp;gt;_HEAP-&amp;gt;HeapFlags,ForceFlags&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码本身很简单，不多解释。在调试器启动时会触发反调试代码，正常运行则不会。这个检查比较粗陋，可以根据上面 CTF Wiki 摘录内容的说法，根据 PE 头中的 subsystem 来二次判断，来发现尝试 bypass 反调试代码的行为。&lt;/p>
&lt;p>至于如何 bypass 这个反调试方案，按上面给出的原理来反向应用就好了。&lt;/p>
&lt;h3 id="24-checkremotedebuggerpresent">2.4 CheckRemoteDebuggerPresent&lt;/h3>
&lt;p>&lt;code>CheckRemoteDebuggerPresent&lt;/code> 的&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-checkremotedebuggerpresent" target="_blank" rel="noopener"
>微软文档&lt;/a>中这么描述：确定指定进程是否正在被调试。接受两个参数，一个是进程的 HANDLE，一个是 PBOOL。&lt;/p>
&lt;p>应用方式可以有很多，可以在进程内自己检查自己有没有被调试；或者开新进程去监视原进程是否正在被调试；甚至注入正常进程，隐藏好自己，再去监视原进程是否被调试；甚至干脆潜伏下来开个后门，亲自人肉监视屏幕上有没有调试器&amp;hellip;&amp;hellip;越说越离谱了。&lt;/p>
&lt;p>总之先给了案例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_CheckRemoteDebuggerPresent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="n">isRemoteDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CheckRemoteDebuggerPresent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">isRemoteDebuggerPresent&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isRemoteDebuggerPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;CheckRemoteDebuggerPresent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码很简单不多解释，不过从这里可以引出新的内容：&lt;code>CheckRemoteDebuggerPresent&lt;/code> 的实现方式是调用 &lt;code>NtQueryInformationProcess&lt;/code> ，一个没有文档的内核接口。&lt;/p>
&lt;h3 id="25-ntqueryinformationprocess">2.5 NtQueryInformationProcess&lt;/h3>
&lt;p>&lt;code>NtQueryInformationProcess&lt;/code> 同样没文档，这里给出比较清晰的 &lt;a class="link" href="https://ctf-wiki.org/reverse/windows/anti-debug/ntqueryinformationprocess/" target="_blank" rel="noopener"
>CTF Wiki&lt;/a> 的说明链接。&lt;code>NtQueryInformationProcess&lt;/code> 是一个查询信息的接口，输入参数包括查询的信息类型、进程HANDLE、结果指针等。用法同样是简单的。&lt;/p>
&lt;p>值得关注的查询信息类型包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ProcessDebugPort&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessBasicInformation&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugObjectHandle&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugFlags&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>对于 &lt;code>ProcessDebugPort&lt;/code>，查询结果是一个 DWORD，当存在调试器时查询结果会是 &lt;code>0xffffffff&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_NtQueryInformationProcess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibrary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FARPROC&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtQueryInformationProcess&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NTSTATUS&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessDebugPort&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">isDebuggerPresent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isDebuggerPresent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtQueryInformationProcess&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 &lt;code>ProcessBasicInformation&lt;/code>，查询结果是 &lt;code>PROCESS_BASIC_INFORMATION&lt;/code> 结构，可以根据这个结构来进一步判断父进程是否是已知的调试器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#ifdef UNICODE
&lt;/span>&lt;span class="cp"># define MY_STRCMP wcscmp
&lt;/span>&lt;span class="cp">#else
&lt;/span>&lt;span class="cp"># define MY_STRCMP strcmp
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_NtQueryInformationProcess_BasicInformation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibrary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FARPROC&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtQueryInformationProcess&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">PROCESS_BASIC_INFORMATION&lt;/span> &lt;span class="n">info&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NTSTATUS&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessBasicInformation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HANDLE&lt;/span> &lt;span class="n">hProcSnap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CreateToolhelp32Snapshot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TH32CS_SNAPPROCESS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">PROCESSENTRY32&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dwSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PROCESSENTRY32&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">Process32First&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pe32&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">th32ProcessID&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">info&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InheritedFromUniqueProcessId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;devenv.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x32dbg.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x64dbg.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ollydbg.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;BasicInformation&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">CloseHandle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Process32Next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pe32&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>ProcessObjectDebugHandle&lt;/code> 和 &lt;code>ProcessDebugFlags&lt;/code> 就不一一给案例了。检查方式也很简单，就是判断非零则存在调试器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessObjectDebugHandle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">HANDLE&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessDebugFlags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ULONG&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为 &lt;code>NtQueryInformationProcess&lt;/code> 是从内核查询消息，所以 bypass 会比较难——就是说需要 HOOK 。但我还不会 HOOK ，所以略过。&lt;/p>
&lt;h3 id="26-ntsetinformationthread">2.6 NtSetInformationThread&lt;/h3>
&lt;p>又是一个没有文档的API。&lt;code>NtSetInformationThread&lt;/code> 等同于 &lt;code>ZwSetInformationThread&lt;/code>，通过设置 &lt;code>ThreadHideFromDebugger&lt;/code> 标志位可以禁止线程产生调试事件。如果正处于调试状态执行了这个 API 则会导致程序立即退出。&lt;/p>
&lt;p>案例如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pfnNtSetInformationThread&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ThreadHandle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_In_&lt;/span> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">ThreadInformationClass&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">_In_&lt;/span> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">ThreadInformation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_In_&lt;/span> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">ThreadInformationLength&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_HideFromDebugger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibrary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">pfnNtSetInformationThread&lt;/span> &lt;span class="n">ntSetInfoThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pfnNtSetInformationThread&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtSetInformationThread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntSetInfoThread&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">ntSetInfoThread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentThread&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ThreadHideFromDebugger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// ... NtCreateThreadEx THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样因为这一方式是走内核接口，可以通过 HOOK 技术把相应的标志位拦截掉就行。&lt;/p>
&lt;h3 id="27-setgetlasterror">2.7 Set/GetLastError&lt;/h3>
&lt;p>对&lt;code>SetLastError&lt;/code>和&lt;code>GetLastError&lt;/code>的利用方式是结合 &lt;code>OutputDebugString&lt;/code> 失败时会修改 &lt;code>GetLastError()&lt;/code> 的错误码的行为，判断是否有调试器存在。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// TODO: somehow not work on windows 10, need more test.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_SetLastError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">SetLastError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x1234&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">OutputDebugString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello Debugger!&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GetLastError&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Set/Get LastError&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比较奇怪的是在我这无论在不在调试环境跑都会触发反调试，环境 Windows 10 + MinGW 。&lt;/p>
&lt;h2 id="0x03-异常处理方式">0x03 异常处理方式&lt;/h2>
&lt;p>异常处理方式的反调试，是通过触发会被调试器处理的中断或者异常，如果调试器拦截并处理了中断或异常，就会导致程序里注册的异常处理函数未被执行，进而发现正在被调试。&lt;/p>
&lt;p>这个思路也可以用来构造特殊的控制流，比如把关键逻辑放在中断处理函数里，然后抛出 INT 1 中断（单步执行），如果被调试器命中，则我们构造的控制流就会被破坏，程序就会跑飞。&lt;/p>
&lt;h3 id="31-int-1">3.1 INT 1&lt;/h3>
&lt;p>INT 1 中断的含义是 SINGLE STEP，在调试器上的表现就是会让调试器断在中断的位置（反正在x32dbg上的表现是这样）。INT 1中断后，如果没有调试器，那么控制权会转交给调试器，SEH 不会执行，反之则 SEH 执行，用户程序保留控制权。&lt;/p>
&lt;p>实际上发现 x32dbg 即使断到了也会把控制权转给 SEH，所以对关于 SEH 反调试是否可行、如何实现持疑问。但是经过一番搜索和研究发现 VEH 机制可以实现上述逻辑。案例代码如下。&lt;/p>
&lt;p>用来抛出 INT 1 中断的汇编代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_RaiseInt1&lt;/span>
&lt;span class="nl">_RaiseInt1:&lt;/span>
&lt;span class="nf">pushfd&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dword&lt;/span> &lt;span class="mi">0x100&lt;/span>
&lt;span class="nf">popfd&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>检测调试器的函数如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">BOOL&lt;/span> &lt;span class="k">volatile&lt;/span> &lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_INT1_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_SINGLE_STEP&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// handle single step exception if not handled by debugger
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_INT1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-setunhandledexceptionfilter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SetUnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT1_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// https://docs.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler?redirectedfrom=MSDN
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-pvectored_exception_handler
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RaiseInt1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;VEH INT1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>利用 &lt;code>SetUnhandledExceptionFilter&lt;/code> 实现，文档链接在注释里给出了。也可以再罗嗦一点，结合 &lt;code>AddVectoredExceptionHandler&lt;/code> 实现。但逻辑还是那样。&lt;/p>
&lt;p>INT 1中断方式检测调试器后，可以恢复到正常控制流执行。但是 INT 3 会有所区别，INT 3 中断时 EIP 会停留在中断指令处，中断处理中需要修改 EIP 的值恢复控制流。&lt;/p>
&lt;p>关于 SEH 中断反调试我留个链接：&lt;a class="link" href="https://bbs.pediy.com/thread-267324.htm" target="_blank" rel="noopener"
>看雪论坛：基于SEH的静态反调试实例分析&lt;/a>，有空再分析看看。&lt;/p>
&lt;h3 id="32-int-3">3.2 INT 3&lt;/h3>
&lt;p>INT 3 中断就是 &lt;code>0xcc&lt;/code> 一字节中断指令，顺便一提啊，因为VC会用 0xcc 填充未初始化的栈，用C写过代码多少都见过的 &lt;em>烫烫烫&lt;/em> 错误就是来自于此。&lt;/p>
&lt;p>参考 &lt;a class="link" href="https://ctf-wiki.org/reverse/windows/anti-debug/int-3/" target="_blank" rel="noopener"
>CTF Wiki - Interrupt 3&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>当&lt;code>EXCEPTION_BREAKPOINT(0x80000003)&lt;/code>异常触发时, Windows 会认定这是由单字节的 &amp;ldquo;&lt;code>CC&lt;/code>&amp;rdquo; 操作码 (也即&lt;code>Int 3&lt;/code>指令) 造成的. Windows 递减异常地址以指向所认定的 &amp;ldquo;&lt;code>CC&lt;/code>&amp;rdquo; 操作码, 随后传递该异常给异常处理句柄. 但是 EIP 寄存器的值并不会发生变化.&lt;/p>
&lt;p>因此, 如果使用了 &lt;code>CD 03&lt;/code>（这是 &lt;code>Int 03&lt;/code> 的机器码表示），那么当异常处理句柄接受控制时, 异常地址是指向 &lt;code>03&lt;/code> 的位置.&lt;/p>
&lt;/blockquote>
&lt;p>这里有一个调试中发现的怪异问题：调试器内运行时会平栈错误，esp 会越过原本的返回地址，导致执行到 ret 时返回地址是0，产生异常。目前不确定是不是因为上面说的EIP没有+1导致的问题。&lt;/p>
&lt;p>案例代码如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_RaiseInt3&lt;/span>
&lt;span class="nl">_RaiseInt3:&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">BOOL&lt;/span> &lt;span class="k">volatile&lt;/span> &lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_INT3_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_BREAKPOINT&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// handle single step exception if not handled by debugger
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ContextRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Eip&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_INT3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">SetUnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT3_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">RaiseInt3&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SEH INT3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到和 INT1 的案例别无二致。这里再附带上汇编结果，大佬也可以看看上面说的平栈问题是怎么回事。编译好的案例会附在最末。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1C&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0x5B4000&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">packed.sub_5B1390&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="err">&amp;lt;&amp;amp;&lt;/span>&lt;span class="no">_SetUnhandledExceptionFilterStub@4&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x4&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">packed.5B1AA1&lt;/span> &lt;span class="c">; int3, retn
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0x5B4000&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1&lt;/span>
&lt;span class="nf">je&lt;/span> &lt;span class="no">packed.5B1650&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1C&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0xC&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">packed.5B20A1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">packed.5B202A&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="err">&amp;lt;&amp;amp;&lt;/span>&lt;span class="no">MessageBoxA&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1C&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="33-debugoutputstring">3.3 DebugOutputString&lt;/h3>
&lt;p>利用方式和前面一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// TODO: NOT WORK
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="n">VEH_OutputDebugStringException_isDebugPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_OutputDebugStringException_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_BREAKPOINT&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// handle single step exception if not handled by debugger
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_OutputDebugException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ULONG_PTR&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ULONG_PTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">wcslen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;debug&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ULONG_PTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;debug&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">AddVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VEH_OutputDebugStringException_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">VEH_OutputDebugStringException_isDebugPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">RaiseException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DBG_PRINTEXCEPTION_WIDE_C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">RemoveVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_OutputDebugStringException_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VEH_OutputDebugStringException_isDebugPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;OutputDebugString&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实测发现 x32dbg 并不会处理 &lt;code>DBG_PRINTEXCEPTION_WIDE_C&lt;/code> ，所以这个反调试对 x32dbg 没用。&lt;/p>
&lt;h3 id="34-invalid_handle">3.4 INVALID_HANDLE&lt;/h3>
&lt;p>根据微软的文档 &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle" target="_blank" rel="noopener"
>CloseHandle function (handleapi.h)&lt;/a> 说明：&lt;/p>
&lt;blockquote>
&lt;p>If the application is running under a debugger, the function will throw an exception if it receives either a handle value that is not valid or a pseudo-handle value. This can happen if you close a handle twice, or if you call &lt;strong>CloseHandle&lt;/strong> on a handle returned by the &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea" target="_blank" rel="noopener"
>FindFirstFile&lt;/a> function instead of calling the &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-findclose" target="_blank" rel="noopener"
>FindClose&lt;/a> function.&lt;/p>
&lt;/blockquote>
&lt;p>可以得知，在调试器启动时，&lt;code>CloseHandle&lt;/code> 关闭无效的 &lt;code>HANDLE&lt;/code> 时会出现 &lt;code>EXCEPTION_INVALID_HANDLE&lt;/code> 异常。所以只要故意关闭一个无效的 &lt;code>HANDLE&lt;/code>，抓住这个异常，就能确定调试器存在。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_INVALID_HANDLE_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_INVALID_HANDLE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// if debug present
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;INVALID HANDLE&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_INVALID_HANDLE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">AddVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VEH_INVALID_HANDLE_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">CloseHandle&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">HANDLE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0xBAAD&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">RemoveVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INVALID_HANDLE_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>和之前的检查不同，INVALID_HANDLE 是 &lt;strong>出现这个异常才存在调试器&lt;/strong>，之前的异常处理方式都是没出现异常才存在调试器。&lt;/p>
&lt;h2 id="0x04-硬件断点">0x04 硬件断点&lt;/h2>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/X86_debug_register" target="_blank" rel="noopener"
>x86 体系上存在一套调试寄存器&lt;/a>，就是 &lt;code>dr0&lt;/code>-&lt;code>dr7&lt;/code>这8个寄存器。其中&lt;code>dr0&lt;/code>-&lt;code>dr3&lt;/code>保存的硬件断点的线性地址，断点条件保存在&lt;code>dr7&lt;/code>寄存器。&lt;code>dr6&lt;/code>寄存器保存的是调试状态，指示触发了哪个断点条件。&lt;/p>
&lt;p>所以发现硬件断点的存在，就可以百分百确定正在被调试。&lt;/p>
&lt;h3 id="41-硬件断点">4.1 硬件断点&lt;/h3>
&lt;p>直接给案例代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// detect hardware breakpoint
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_DebugRegister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">CONTEXT&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ContextFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CONTEXT_DEBUG_REGISTERS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GetThreadContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentThread&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr0&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr2&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr3&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Dr0-Dr3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>GetThreadContext&lt;/code>这个接口获得当前寄存器状态，当然也可以通过内联汇编来实现。当发现四个断点寄存器非零就可以确定正在被调试了。&lt;/p>
&lt;h2 id="0x05-完整性校验">0x05 完整性校验&lt;/h2>
&lt;p>完整性校验反调试的原理是检测 &lt;code>0xCC&lt;/code> 软件断点，当我们一般说的在程序里&lt;em>下断点&lt;/em>的时候下的是软件断点，实现的原理是调试器在这个内存位置上临时放一个&lt;code>0xcc&lt;/code>占位，当EIP走到这里时会触发一个INT 3中断，调试器趁机取得控制权。同时因为 INT 3 断点不会把 EIP + 1，所以调试器只需要把改成 &lt;code>0xcc&lt;/code> 的地方改回去，就可以让程序继续跑而无需去碰寄存器。&lt;/p>
&lt;h3 id="51-softwarebreakpoint">5.1 SoftwareBreakpoint&lt;/h3>
&lt;p>下面的案例给了一个简单的软件断点检测，只能检测到下在函数开头的软件断点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// detect 0xcc interrupt code
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_SoftwareBreakPoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PBYTE&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">addr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0xcc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SoftwareBreakpoint&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 在主函数里：
&lt;/span>&lt;span class="c1">// anti_debug_by_SoftwareBreakPoint((PBYTE)&amp;amp;load_PE)
&lt;/span>&lt;span class="c1">// 就能检测到在 load_PE 函数开头处下的断点
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果能以一定的方式确定一个函数的代码段大小，也可以做到对整个函数的完整性检测（通过计算 CRC 或者其他哈希算法，甚至就直接累加都行）。&lt;/p>
&lt;p>确定函数代码段大小的方式我只想到一个利用栈上的返回地址=，=在函数开头和结尾部分调用一次获取栈上返回地址的函数就能拿到一个范围了，但感觉并不可靠，主要是编译器优化可能重排代码，而且不走到结尾部分也没法开始计算哈希=，=这都给人调试完了。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>所有案例代码都在这里：[github.com/nnnewb/learning-packer](&lt;a class="link" href="https://github.com/nnnewb/learning-packer/tree/main/packer6" target="_blank" rel="noopener"
>learning-packer/packer6 at main · nnnewb/learning-packer (github.com)&lt;/a>)&lt;/p>
&lt;p>总结就是反调试主要靠 &lt;em>判断调试器特征&lt;/em> 来发现正在被调试。而这个判断方法就很多，从硬件到操作系统层面，再到软件层面，都有洞可以钻。&lt;/p>
&lt;p>总结这篇里实践的反调试（或者说检测调试器）方式有这些：&lt;/p>
&lt;ul>
&lt;li>PEB和相关结构的各种标志位&lt;/li>
&lt;li>内核接口，&lt;code>NtQueryInformationProcess&lt;/code>、&lt;code>NtSetInformationThread&lt;/code>等等&lt;/li>
&lt;li>异常处理机制，&lt;code>SEH&lt;/code>，&lt;code>VEH&lt;/code>，触发会被调试器处理的异常（或者只在有调试器时才会触发的异常）来发现调试器&lt;/li>
&lt;li>调试寄存器和硬件断点&lt;/li>
&lt;li>代码完整性校验发现软件断点&lt;/li>
&lt;/ul>
&lt;p>以上就是本篇实验过的所有反调试思路了。原本应该有个通过 TLS 回调隐藏自身的案例，但是 MinGW 加不了 TLS 回调（可能还是我菜），谷歌搜到的做法都是要对编译好的二进制文件打补丁，太麻烦就没搞。&lt;/p>
&lt;p>另外还有个利用执行时间做反调试，因为不知道现在都是怎么利用，然后是这个反调试原理感觉也是很简单=，=就是利用方法可能千奇百怪，单单写两次 time 调用感觉没啥意义就没写（偷懒了）。&lt;/p>
&lt;p>总之就是隐藏好反调试的代码，然后发现调试器就悄悄施展迷惑手段或者干脆大搞破坏。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software" target="_blank" rel="noopener"
>Anti Debugging Protection Techniques With Examples&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.geoffchappell.com/" target="_blank" rel="noopener"
>Geoff Chappell, Software Analyst&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://ctf-wiki.org/" target="_blank" rel="noopener"
>CTF Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://book.douban.com/subject/25868289/" target="_blank" rel="noopener"
>《恶意代码分析实战》&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>内容主要来自第一个链接，根据我的环境做了一些修改（比如有些SEH的我实测 x32dbg 不行就换成了VEH），结合参考了 CTF wiki 和 《恶意代码分析实战》这书。API 全是微软的文档和没有文档化的接口我不一个一个摆链接了。&lt;/p></description></item><item><title>加壳原理05：利用图片隐藏</title><link>https://nnnewb.github.io/p/learning-packer-05/</link><pubDate>Thu, 21 Oct 2021 21:17:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-05/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-05/cover.jpg" alt="Featured image of post 加壳原理05：利用图片隐藏" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>完成了简单的压缩壳之后放松下，在52论坛病毒分析区看到过几次把代码隐藏到图片里的做法，也看到过把程序转成图片后训练神经网络来判断有没有恶意的，于是就想，淦，这不是挺好玩的嘛。&lt;/p>
&lt;h2 id="0x01-思路">0x01 思路&lt;/h2>
&lt;p>用图片保存程序最简单的做法就是直接把程序每个字节都转成像素，然后输出成灰度图。比较进阶的做法就像是二维码了，大色块，容错校验，图片被压到包浆也能扫出来。但那个有点点难（我菜）最终成果也大到不现实，而且实话说打包到程序里就不用考虑被二次压缩的情况了。所以简单的8bit灰度图就刑。&lt;/p>
&lt;p>说到位图肯定有人想到了 BMP ，我记得上学那会儿还跟着网上哪儿找的教程，学着用 ffmpeg 把 &lt;em>Bad Apple&lt;/em> 转成位图序列，再转成字符图合并成 HTML，用 js 播放。说起来都是泪。&lt;/p>
&lt;p>现在已经成了正经的码农，再折腾 BMP 就没意思了，PNG 就挺好的。&lt;/p>
&lt;p>图片可以放到 Section 里——但并没有意义，所以我选择放到资源里。写一个 &lt;code>.rc&lt;/code> 文件用 &lt;code>windres&lt;/code> 编译出目标文件，再拿 &lt;code>gcc&lt;/code> 链接就行了。如此一来并没有 lief 出场的机会，编译好的加载器就是加完壳的程序。&lt;/p>
&lt;p>加载器则采用开启 ASLR 的模式，这样程序的节表会比较干净，没有明显特征（虽然也没什么卵用）。&lt;/p>
&lt;h2 id="0x02-加载器">0x02 加载器&lt;/h2>
&lt;h3 id="21-资源介绍">2.1 资源介绍&lt;/h3>
&lt;p>参考微软的文档 &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/menurc/using-resources" target="_blank" rel="noopener"
>Using Resources&lt;/a>、&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/menurc/resources" target="_blank" rel="noopener"
>Menu and Other Resources&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>A &lt;em>resource&lt;/em> is binary data that you can add to the executable file of a Windows-based application. A resource can be either standard or defined. The data in a &lt;em>standard resource&lt;/em> describes an icon, cursor, menu, dialog box, bitmap, enhanced metafile, font, accelerator table, message-table entry, string-table entry, or version information. An &lt;em>application-defined resource&lt;/em>, also called a &lt;em>custom resource&lt;/em>, contains any data required by a specific application.&lt;/p>
&lt;/blockquote>
&lt;p>资源就是一堆打包进可执行文件里的二进制数据，有标准资源类型和自定义的资源类型，标准的回头看就全是微软的历史包袱了，自定义的就是随便什么东西。&lt;/p>
&lt;p>资源本身是有结构的，大体上分三层：&lt;/p>
&lt;ol>
&lt;li>类型；比如图标、对话框、位图、Manifest等等。&lt;/li>
&lt;li>ID；资源的标识符，可以是数字或字符串。&lt;/li>
&lt;li>语言；英语法语等等..&lt;/li>
&lt;/ol>
&lt;p>经过这样三层索引就能找到对应资源的原始数据了。&lt;/p>
&lt;p>如图：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-05/07_resource_tree.png"
width="1080"
height="555"
srcset="https://nnnewb.github.io/p/learning-packer-05/07_resource_tree_hu7434ebea0cccdf660ca2884c9de14b61_327250_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-05/07_resource_tree_hu7434ebea0cccdf660ca2884c9de14b61_327250_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="07_resource_tree.png"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;h3 id="22-查找并加载资源">2.2 查找并加载资源&lt;/h3>
&lt;p>步骤很简单：&lt;/p>
&lt;ol>
&lt;li>&lt;code>FindResource&lt;/code> 找到你要的资源&lt;/li>
&lt;li>&lt;code>SizeofResource&lt;/code> 确定你要的资源大小&lt;/li>
&lt;li>&lt;code>LoadResource&lt;/code> 加载资源，得到 HANDLE&lt;/li>
&lt;li>&lt;code>LockResource&lt;/code> 锁定资源，得到资源首字节指针&lt;/li>
&lt;/ol>
&lt;p>实现比较啰嗦，主要是错误检查很啰嗦。我这返回值都是随便 return 的，更好的做法应该是 &lt;code>GetLastError&lt;/code> 去拿错误码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">get_resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HRSRC&lt;/span> &lt;span class="n">res_found&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FindResourceA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;BEAUTIFUL.PNG&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RT_RCDATA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">res_found&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;find resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;FindResourceA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">sizeof_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SizeofResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_found&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sizeof_res&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;sizeof resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SizeofResource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">HGLOBAL&lt;/span> &lt;span class="n">res_loaded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_found&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;load resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;LoadResource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">LPVOID&lt;/span> &lt;span class="n">res_acquired&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LockResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">res_acquired&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;lock resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;LockResource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sizeof_res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_acquired&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sizeof_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">UnlockResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FreeResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得到数据后复制到新分配的内存里返回出去就完事了。&lt;/p>
&lt;h3 id="23-解析图片">2.3 解析图片&lt;/h3>
&lt;p>得到了资源图片的内容之后，下一步就是把图片解码成像素，还原到程序本身了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;png.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stddef.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">u8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">u8p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">u32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">u32p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// decode PNG in memory
&lt;/span>&lt;span class="c1">// https://stackoverflow.com/questions/53237065/using-libpng-1-2-to-write-rgb-image-buffer-to-png-buffer-in-memory-causing-segme
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">u8p&lt;/span> &lt;span class="nf">read_program_from_png&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u8p&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">png_image&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PNG_IMAGE_VERSION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">png_image_begin_read_from_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">png_bytep&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PNG_FORMAT_GRAY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">input_data_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PNG_IMAGE_SIZE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">png_bytep&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_data_length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_data_length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">png_image_finish_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">u32&lt;/span> &lt;span class="n">actual_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">u32&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">program&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">actual_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">actual_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">u8p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>面向 stackoverflow 编程，照着抄一个 libpng 的解码实现。不同的是把解码后的头4个字节作为小端序无符号整型，认为是程序的实际大小。因为程序的大小可能并不正好是图片的像素数量（width*height）。&lt;/p>
&lt;p>最后是把解码后的内容复制到新分配的内存里返回。现在返回的指针应该就指向我们的 PE 文件内容了。&lt;/p>
&lt;h3 id="24-入口点">2.4 入口点&lt;/h3>
&lt;p>在入口点，调用加载资源函数获得资源数据的指针，传给解码的函数，得到解码后的PE文件指针，然后加载并跳转到被加载程序的入口点，就这么简单。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">get_resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;BEAUTIFUL.PNG&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">u8p&lt;/span> &lt;span class="n">program&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read_program_from_png&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">u8p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">program&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">load_PE&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.packed section not found&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;loader error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x03-加壳机">0x03 加壳机&lt;/h2>
&lt;h3 id="31-程序转图片">3.1 程序转图片&lt;/h3>
&lt;p>使用 &lt;code>pypng&lt;/code> 这个包实现把二进制程序转图片。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">IMG_PATH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;packer5-packed.png&amp;#39;&lt;/span>
&lt;span class="n">ROW_LEN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;I&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">content&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">png&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMG_PATH&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>非常简单的一段脚本。把内容长度和内容拼接后，以 &lt;code>ROW_LEN&lt;/code> 每行，拆成一个二维数组，然后用 pypng 编码并保存。&lt;/p>
&lt;h3 id="32-编译资源">3.2 编译资源&lt;/h3>
&lt;p>随便新建一个 &lt;code>rsrc.rc&lt;/code> 。&lt;/p>
&lt;p>别问 &lt;code>.rc&lt;/code> 怎么写，不知道，问就是面向谷歌编程抄的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">beautiful.png RCDATA &amp;#34;packer5-packed.png&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在脚本里调用 &lt;code>windres&lt;/code> 编译。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">windres&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">executable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;windres&amp;#39;&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sources&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">executable&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> -o &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="n">CompilationError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">windres&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rsrc.rc&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rsrc.o&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就得到了 &lt;code>rsrc.o&lt;/code> 。&lt;/p>
&lt;h3 id="33-编译加载器">3.3 编译加载器&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># compile shifted loader program&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="n">compiler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;gcc&amp;#39;&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sources&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">flags&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">compiler&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="n">CompilationError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cflags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;-m32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-O2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wall&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-I.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wl,--entry=__start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nodefaultlibs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nostartfiles&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lkernel32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-luser32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lmsvcrt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lpng&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="nb">compile&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">src&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;loader.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;png_decode.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rsrc.o&amp;#39;&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="n">cflags&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile loader with resource success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要是加上 &lt;code>-lpng&lt;/code> 链接参数，链接 &lt;code>libpng&lt;/code> 。输入文件里加上 &lt;code>png_decode.c&lt;/code> 这个里面实现了 &lt;code>read_program_from_png&lt;/code>，还有编译好的资源 &lt;code>rsrc.o&lt;/code>。&lt;/p>
&lt;h2 id="0x04-成果展示">0x04 成果展示&lt;/h2>
&lt;h3 id="41-完整代码">4.1 完整代码&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/nnnewb/learning-packer/tree/main/packer5" target="_blank" rel="noopener"
>github.com - packer05&lt;/a>&lt;/p>
&lt;h3 id="42-成果">4.2 成果&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-05/png-packer.gif"
width="934"
height="624"
srcset="https://nnnewb.github.io/p/learning-packer-05/png-packer_hu49467b8d76a283ecefa4b0c8c018eaea_352500_480x0_resize_box.gif 480w, https://nnnewb.github.io/p/learning-packer-05/png-packer_hu49467b8d76a283ecefa4b0c8c018eaea_352500_1024x0_resize_box.gif 1024w"
loading="lazy"
alt="png-packer"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-05/image-20211021172402101.png"
width="1123"
height="262"
srcset="https://nnnewb.github.io/p/learning-packer-05/image-20211021172402101_hu5e82684139999b9b3beada7e64c4352c_121826_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-05/image-20211021172402101_hu5e82684139999b9b3beada7e64c4352c_121826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211021172402101"
class="gallery-image"
data-flex-grow="428"
data-flex-basis="1028px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-05/image-20211021172445654.png"
width="745"
height="442"
srcset="https://nnnewb.github.io/p/learning-packer-05/image-20211021172445654_huadd050e73542001f453da1b3213f5950_43748_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-05/image-20211021172445654_huadd050e73542001f453da1b3213f5950_43748_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211021172445654"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-05/image-20211021172504888.png"
width="969"
height="550"
srcset="https://nnnewb.github.io/p/learning-packer-05/image-20211021172504888_hubda3186aaf1f68e7da983b4009bb0f3d_50213_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-05/image-20211021172504888_hubda3186aaf1f68e7da983b4009bb0f3d_50213_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211021172504888"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这次实验主要是验证了从资源加载程序，本质和之前的其他加壳方式没有区别。把应用程序转换成图片后看到的效果确实比较有趣，我想如果用一张普通的图片或者其他文件类型，藏起来可能更隐蔽。&lt;/p>
&lt;p>但到这里还是有明显的问题：壳和被加载的程序还是泾渭分明。&lt;/p></description></item><item><title>加壳原理04 - zlib压缩壳案例</title><link>https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/</link><pubDate>Wed, 20 Oct 2021 16:07:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/cover.jpg" alt="Featured image of post 加壳原理04 - zlib压缩壳案例" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文在前一篇基础上，写一个使用 zlib 的压缩壳案例。&lt;/p>
&lt;h2 id="0x01-zlib-解压">0x01 zlib 解压&lt;/h2>
&lt;h3 id="11-概述">1.1 概述&lt;/h3>
&lt;p>关于 zlib 的用法找了这些参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zlib.net/zpipe.c" target="_blank" rel="noopener"
>zlib.net/zpipe.c&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zlib.net/zlib_how.html" target="_blank" rel="noopener"
>zlib Usage Example&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gist.github.com/arq5x/5315739" target="_blank" rel="noopener"
>Compress and Decompress a string with zlib&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>尝试了 zlib、lzo、Windows Compression API，对压缩和解压 API 的基本模式的基本认识大概是这样：&lt;/p>
&lt;ul>
&lt;li>首先，你得有被压缩数据的大小（要么分块压缩，要么有整个压缩后的大小）&lt;/li>
&lt;li>然后得有解压后的预期大小，这个能通过 &lt;em>尝试解压&lt;/em> 的操作来实现。比如 Windows Compression API 和 lzo 都可以在解压 buffer 传 NULL，尝试取得解压后的大小，再分配好内存解压。&lt;/li>
&lt;li>zlib 这样的流式压缩、解压处理文件比较友好，但全程在内存里进行的话，流式解压就会导致大量内存分配 =。= 除非一开始就分配足够的空间，不然一个一个内存块申请和合并会很蛋疼。&lt;/li>
&lt;/ul>
&lt;h3 id="12-内存布局">1.2 内存布局&lt;/h3>
&lt;p>压缩后的 &lt;code>.packed&lt;/code> 节在头部留出 8 个字节，分别保存压缩后大小和压缩前大小，以便一次分配好内存完成解压。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>偏移&lt;/th>
&lt;th>大小&lt;/th>
&lt;th>内容&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>DWORD&lt;/td>
&lt;td>小端序，压缩后大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>DWORD&lt;/td>
&lt;td>小端序，压缩前大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>可变&lt;/td>
&lt;td>压缩后的数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="13-解压代码">1.3 解压代码&lt;/h3>
&lt;p>解压过程在加载 PE 之前，找到 &lt;code>.packed&lt;/code> 节后，开始读取头部大小，并调用解压代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">compressed_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// compressed size little-endian
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">decompressed_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// decompressed size little-endian
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compressed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// compressed buffer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">decompressed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decompressed_size&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// decompressed buffer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">decompressed&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;memory allocate failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;malloc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">decompress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">compressed_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decompressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decompressed_size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decompressed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应该没有太多疑问。接下来的是解压代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">decompress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">decompressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">decompressed_length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">z_stream&lt;/span> &lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">zalloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Z_NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">zfree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Z_NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">opaque&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Z_NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">avail_in&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uInt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next_in&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Bytef&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">avail_out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uInt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">decompressed_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next_out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Bytef&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">decompressed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflateInit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inflate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z_NO_FLUSH&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">Z_STREAM_END&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">inflateEnd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;zlib decompression failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;zlib&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">inflateEnd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义 inflate 流：&lt;/p>
&lt;ul>
&lt;li>&lt;code>avail_in&lt;/code> 是可用的输入 buffer 大小&lt;/li>
&lt;li>&lt;code>avail_out&lt;/code> 是可用的输出 buffer 大小&lt;/li>
&lt;li>&lt;code>next_in&lt;/code> 是输入 buffer 的指针&lt;/li>
&lt;li>&lt;code>next_out&lt;/code> 是输出 buffer 的指针&lt;/li>
&lt;li>&lt;code>zalloc&lt;/code>、&lt;code>zfree&lt;/code>、&lt;code>opaque&lt;/code> 初始化成 NULL&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>inflateInit()&lt;/code> 初始化流，然后调用 &lt;code>inflate()&lt;/code> 解压。&lt;code>inflate()&lt;/code> 会返回错误码，如果长度正好，会返回 &lt;code>Z_STREAM_END&lt;/code>。如果输出 buffer 长度不足，但解压成功，会返回 &lt;code>Z_OK&lt;/code>。其他情况会返回错误码。因为这里很清楚给定的压缩前长度，解压必定返回 &lt;code>Z_STREAM_END&lt;/code>，其他情况都有问题，所以只做了一个判断。&lt;/p>
&lt;p>对于其他情况，错误码可以用 &lt;code>zError&lt;/code> 获取错误描述。&lt;/p>
&lt;p>解压结束后要使用 &lt;code>inflateEnd()&lt;/code> 关闭流。&lt;/p>
&lt;h2 id="0x02-zlib压缩">0x02 zlib压缩&lt;/h2>
&lt;p>因为使用 python 写加壳机，就不用这么麻烦了。&lt;/p>
&lt;p>在处理 &lt;code>.packed&lt;/code> 节的时候，使用 &lt;code>struct&lt;/code> 和 &lt;code>zlib&lt;/code> 两个 python 自带的库就能完成压缩和填充头。&lt;/p>
&lt;p>在脚本头部添加两句 &lt;code>import&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">zlib&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后修改加壳代码中，添加 &lt;code>.packed&lt;/code> 节的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># add packed section&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">file_content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">origin_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">compressed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">zlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">compressed_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">section_content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;II&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">compressed_length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">origin_length&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">section_content&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">compressed&lt;/span>
&lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.packed&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">section_content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_INITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到使用 &lt;code>zlib.compress&lt;/code> 就完成了压缩，不用原始 zlib 流那么麻烦。&lt;/p>
&lt;p>&lt;code>struct.pack&lt;/code> 指定了小端序，两个4字节int，分别填写压缩后大小和原始大小，连接压缩后的数据，填充进&lt;code>.packed&lt;/code> 节。&lt;/p>
&lt;p>就这样，压缩功能成功完成。&lt;/p>
&lt;h2 id="0x03-成果展示">0x03 成果展示&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/compression-packer.gif"
width="961"
height="548"
srcset="https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/compression-packer_hu48b8d61b8280e2749c0709493a3ebc66_545730_480x0_resize_box.gif 480w, https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/compression-packer_hu48b8d61b8280e2749c0709493a3ebc66_545730_1024x0_resize_box.gif 1024w"
loading="lazy"
alt="compression-packer"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154513713.png"
width="612"
height="124"
srcset="https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154513713_hu9ea9ff8b4b10d51b1ae7242496aa71bc_14861_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154513713_hu9ea9ff8b4b10d51b1ae7242496aa71bc_14861_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211020154513713"
class="gallery-image"
data-flex-grow="493"
data-flex-basis="1184px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154539546.png"
width="512"
height="282"
srcset="https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154539546_hu04f79f6a0431df840a4406ea20a286f1_11213_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154539546_hu04f79f6a0431df840a4406ea20a286f1_11213_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211020154539546"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>偷懒了，用了一些 msvcrt 的函数，比如 malloc，要加个 &lt;code>-lmsvcrt&lt;/code> 链接选项。最终成品压缩率还可以，从107KB 压缩到了 49KB，zlib 不负期望。&lt;/p>
&lt;p>写好壳程序之后，不管是加密还是压缩都是很容易的事情（指单纯做个简单实现），但问题依然存在：&lt;/p>
&lt;ul>
&lt;li>64位程序——我觉得可以以后再说吧？我连64位汇编都还不会（泪）。&lt;/li>
&lt;li>脱壳跟玩一样——现在看 .packed 已经没有 MZ 这个摆明了是原始程序的标志了，但并没有卵用。壳程序也没混淆和反调试，节表也是清晰可见，根本不用分析。&lt;/li>
&lt;/ul>
&lt;p>下一篇还没想好做什么，得先继续学习充实下自己，找个方向。&lt;/p></description></item><item><title>加壳原理03 - 支持没有重定位的程序</title><link>https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/</link><pubDate>Wed, 20 Oct 2021 10:25:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/cover.jpg" alt="Featured image of post 加壳原理03 - 支持没有重定位的程序" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>距离上一篇加壳原理已经过去挺久了，这段时间稍微折腾了一下 nasm，尝试手工制作了 PE32 文件，积累了一些基本的知识吧。&lt;/p>
&lt;p>所以现在继续学习加壳——如何对不支持 ASLR 的 PE32 程序进行加壳？&lt;/p>
&lt;h2 id="0x01-关于aslr">0x01 关于ASLR&lt;/h2>
&lt;p>ASLR是一项内存保护技术，用于防范内存损坏漏洞，比如缓冲区溢出。需要注意的是 ASLR 并不是 &lt;em>解决&lt;/em> 了相关威胁，而是让利用相关的漏洞变得更加困难和具有挑战性。&lt;/p>
&lt;p>ASLR 的全名是 &lt;em>Address Space Layout Randomization&lt;/em> ，地址空间布局随机化技术。一个典型的 PE32 程序在没有 ASLR 支持的情况下， 地址空间布局是确定的：程序镜像总会加载到固定的地址。这个地址会在文件头里指定。攻击者可以利用这一特点来构造恶意数据，让存在内存损坏漏洞的程序按攻击者意图跳过或执行特定逻辑，造成安全威胁。&lt;/p>
&lt;p>对应 ASLR 的地址空间布局随机化，程序需要再次编译来支持重定位 &lt;em>Relocation&lt;/em> ，别无他法（大概）。&lt;/p>
&lt;h2 id="0x02-思路">0x02 思路&lt;/h2>
&lt;p>对于加壳一个没有重定位，不支持 ASLR 的 PE32 程序，假设这个程序的基址是 &lt;code>0x04000000&lt;/code>，原先的 &lt;code>VirtualAlloc&lt;/code> 方式分配内存是行不通的。加壳后程序若开启 ASLR，则 &lt;code>0x04000000&lt;/code> 可能已经存在其他模块，并不能保证这个基址可用。&lt;strong>所以加壳后的程序必须也使用 &lt;code>0x04000000&lt;/code> 这个基址，而且标记为不支持 ASLR&lt;/strong>，避免基址已经被其他模块使用造成加载器无法工作。&lt;/p>
&lt;p>将加壳后程序的基址设置为固定的 &lt;code>0x04000000&lt;/code> 又会产生新的问题：加载器的代码段不能放在 &lt;code>0x04000000&lt;/code> ，否则加载器运行时就会出现被被加载的代码覆盖的情况，导致程序跑飞。所以&lt;strong>编译后的加载器所有 Section 都必须有一定的偏移，这个偏移值就是被加载程序的 Section 大小之和（对齐后）&lt;/strong>。而因此多出来的空间单独分成一个 Section ，正好用来放要加载的程序。&lt;/p>
&lt;p>另外，还必须确认文件头大小是否一致，因为&lt;strong>我们需要将被加载程序的文件头覆盖加载器的文件头&lt;/strong>。而&lt;strong>最开始预留的空间必须分配为一个 Section&lt;/strong>，让 Windows 的加载器能顺利加载程序而不报“不是有效的Win32程序”错误。&lt;/p>
&lt;p>内存布局示意图如下：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png"
width="1155"
height="145"
srcset="https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80_hu26017091af2f4be7bf70029e5d75a3ba_13811_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80_hu26017091af2f4be7bf70029e5d75a3ba_13811_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="内存布局"
class="gallery-image"
data-flex-grow="796"
data-flex-basis="1911px"
>&lt;/p>
&lt;p>所以加载器的加载步骤如下：&lt;/p>
&lt;ol>
&lt;li>寻找被加载的 Section 。&lt;/li>
&lt;li>复制文件头覆盖自己的文件头。&lt;/li>
&lt;li>以自己的基址为被加载程序的基址，完成加载。&lt;/li>
&lt;/ol>
&lt;p>加壳机的加壳步骤如下：&lt;/p>
&lt;ol>
&lt;li>解析被加壳程序，获取 Section 大小、文件头大小、对齐大小等信息。&lt;/li>
&lt;li>生成加载器程序，根据上一步取得的数据计算出加载器 Section 的偏移和对齐。&lt;/li>
&lt;li>合并被加壳程序和加载器，生成被加壳程序。&lt;/li>
&lt;/ol>
&lt;p>案例程序如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;MSGBOX&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x03-加载器修改">0x03 加载器修改&lt;/h2>
&lt;p>加载器需要把 &lt;code>VirtualAlloc&lt;/code> 改成 &lt;code>GetModuleHandleA&lt;/code>，并解除当前程序文件头的写保护，并在随后的复制 Section 阶段同样用 &lt;code>VirtualProtect&lt;/code> 解除写保护，添加执行权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// base address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetModuleHandleA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// make sure we can write in allocated memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// make sure we can write in allocated sections
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">old_protect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">old_protect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dest&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此外还有一个坑：不知道为啥，我用 lief python 生成的 DataDirectories 实际只有15个元素（包括最后一个 null 元素），但 &lt;code>winnt.h&lt;/code> 里定义的 DataDirectories 是固定长度 16 个元素，所以直接算 &lt;code>p_NT_header + 1&lt;/code> 得到的偏移值会比预期的大 8 个字节，导致报找不到 &lt;code>.packed&lt;/code> 。&lt;/p>
&lt;p>改成这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetModuleHandleA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_DOS_HEADER&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">unpacker_VA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_NT_HEADERS&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_SECTION_HEADER&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 注意看这里再计算了一次偏移
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_SECTION_HEADER&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NUMBEROF_DIRECTORY_ENTRIES&lt;/span> &lt;span class="o">-&lt;/span>
&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfRvaAndSizes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x04-加壳器">0x04 加壳器&lt;/h2>
&lt;p>加壳器这次用 python 写，MinGW 下又要重新编译 LIEF 太折磨人了。&lt;/p>
&lt;h3 id="41-工具函数">4.1 工具函数&lt;/h3>
&lt;p>先是导入和定义必要的工具。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">al&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; return &amp;lt;x&amp;gt; aligned to &amp;lt;al&amp;gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">al&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="42-解析">4.2 解析&lt;/h3>
&lt;p>先分析案例程序，获得必要的数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">binary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># calculate shift offset and reserved section size&lt;/span>
&lt;span class="n">image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">lowest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">highest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] analyze origin demo program binary success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>取得基址、所有 section 中最低的起始 rva 和最高的结束 rva，得到整个 PE 镜像的 Sections 覆盖的内存范围。&lt;/p>
&lt;h3 id="43-构造加载器">4.3 构造加载器&lt;/h3>
&lt;p>使用 MinGW 来完成加载器构造——当然有其他更好的做法，加壳还要装一个 MinGW 未免太麻烦，但我也不知道该怎么做就是了（我猜的话，大概拿 nasm 应该就刑。）&lt;/p>
&lt;p>编译命令在 Python 脚本里生成并执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># compile shifted loader program&lt;/span>
&lt;span class="n">compile_args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;loader.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-m32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-O2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wall&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wl,--entry=__start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nodefaultlibs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nostartfiles&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lkernel32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-luser32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--image-base=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--section-start=.text=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">check_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;gcc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compile_args&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile shifted loader program success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">CalledProcessError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[!] loader compilation failed, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="n">shifted_loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-luser32&lt;/code> 是因为我添加了一个 &lt;code>MessageBoxA&lt;/code> 的调用。&lt;/p>
&lt;p>&lt;code>-Wl,--image-base=...&lt;/code> 设置了加载器的基址，确保加载器和被加壳的程序落在同一个基址上。&lt;/p>
&lt;p>&lt;code>-Wl,--section-start=...&lt;/code> 因为知道第一个 section 一定是 &lt;code>.text&lt;/code> 所以只设置了第一个 section 的地址，之后的 section 会自动往后挪。&lt;/p>
&lt;p>其他参数不多解释了。&lt;/p>
&lt;p>编译完成后，再解析出加载器的对齐信息，准备用于构造完整的被加壳程序。&lt;/p>
&lt;h3 id="44-构造加壳程序">4.4 构造加壳程序&lt;/h3>
&lt;p>加载器和被加载的程序都已经就绪，接下来就是把加载器和程序合并成加壳后的程序了。这一步还是先在创建 lief 的PE32 对象，然后填充基址、Section 对齐、文件对齐，并且把 DLL Characteristics 重置到 0，目的是声明不支持 ASLR。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># create new binary from scratch&lt;/span>
&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Binary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE_TYPE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy essential fields from shifted_loader&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;span class="c1"># disable ASLR&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dll_characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先准备这些文件头字段，接下来开始填充 Section ，最先填充的就是准备用作被加载程序内存空间的 &lt;code>.alloc&lt;/code> 节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># add .alloc section&lt;/span>
&lt;span class="n">allocate_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">lowest_rva&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.alloc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowest_rva&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocate_size&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_WRITE&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_UNINITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">allocate_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>.alloc&lt;/code> 节起始点放置在低位，长度为被加载程序的节大小之和对齐。&lt;/p>
&lt;p>之后开始复制加载器的节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># copy sections&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># let lief recalculate section offset and sizeof raw data&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_raw_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>需要注意&lt;/strong> 把 &lt;code>offset&lt;/code> 和 &lt;code>sizeof_raw_data&lt;/code> 置零，让 &lt;code>lief&lt;/code> 去计算偏移和大小，后面添加的一应节都按这样操作。新创建的 Section 还好，对于从加载器里复制的 Section，保留 &lt;code>offset&lt;/code> 和 &lt;code>sizeof_raw_data&lt;/code> 会导致最终成品的 Section 数据不正确，造成 &lt;code>ntdll&lt;/code> 里加载PE文件时，读取PE数据结构时出错。可以自行用 x32dbg 验证。&lt;/p>
&lt;p>最后把被加载的文件打包进去。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># add packed section&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.packed&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_INITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样，让 lief 去计算偏移和大小。复制好节，继续复制 Data Directories，这又有一个坑。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># copy data directories&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>
&lt;span class="c1"># correct number of data directories&lt;/span>
&lt;span class="c1"># warning: size of data directories may disagree with IMAGE_NT_HEADERS.DataDirectory in winnt.h&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">numberof_rva_and_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意到，&lt;strong>lief 的数据结构里，允许的 data_directories 只有 15 个&lt;/strong>！&lt;strong>但 &lt;code>winnt.h&lt;/code> 里定义的 DATA_DIRECTORIES 数组，是固定16个元素&lt;/strong>！&lt;/p>
&lt;p>如果直接 &lt;code>range(16)&lt;/code> 去遍历，会出现 &lt;code>IndexError&lt;/code> ，如果忽视这个长度问题，直接在加载器里采用 Windows SDK 的头文件定义的结构，会导致取节表指针的时候比预期的多偏移 8 个字节，造成问题。调试起来简直太折磨人了。&lt;/p>
&lt;p>之后再复制入口点和镜像大小。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># copy original address of entrypoint&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span>
&lt;span class="c1"># let lief recalculate size of image&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，入口点和镜像大小的字段必须在复制完 Section 之后再复制，不然 lief 会犯傻，原因不明，有兴趣可以自己改一改顺序看看结果。&lt;/p>
&lt;p>到这里，基本准备就绪，就可以把构造好的可执行文件写入硬盘了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># build output binary&lt;/span>
&lt;span class="n">builder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="45-完整代码">4.5 完整代码&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># %%&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">subprocess&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">STDOUT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CalledProcessError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">check_output&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">al&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; return &amp;lt;x&amp;gt; aligned to &amp;lt;al&amp;gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">al&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># compile origin demo program&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">check_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gcc example.c -m32 -O2 -o example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">CalledProcessError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[!] demo program compilation failed, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="n">binary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile origin demo program success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># calculate shift offset and reserved section size&lt;/span>
&lt;span class="n">image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">lowest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">highest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] analyze origin demo program binary success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># compile shifted loader program&lt;/span>
&lt;span class="n">compile_args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;loader.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-m32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-O2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wall&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wl,--entry=__start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nodefaultlibs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nostartfiles&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lkernel32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-luser32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--image-base=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--section-start=.text=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">check_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;gcc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compile_args&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile shifted loader program success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">CalledProcessError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[!] loader compilation failed, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="n">shifted_loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># create new binary from scratch&lt;/span>
&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Binary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE_TYPE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy essential fields from shifted_loader&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;span class="c1"># disable ASLR&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dll_characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1"># add .alloc section&lt;/span>
&lt;span class="n">allocate_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">lowest_rva&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.alloc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowest_rva&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocate_size&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_WRITE&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_UNINITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">allocate_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy sections&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># let lief recalculate section offset and sizeof raw data&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_raw_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># add packed section&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.packed&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_INITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy data directories&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>
&lt;span class="c1"># correct number of data directories&lt;/span>
&lt;span class="c1"># warning: size of data directories may disagree with IMAGE_NT_HEADERS.DataDirectory in winnt.h&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">numberof_rva_and_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy original address of entrypoint&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span>
&lt;span class="c1"># let lief recalculate size of image&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1"># build output binary&lt;/span>
&lt;span class="n">builder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] create packed binary success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只放一下加载器代码，一共三个代码文件托管在 Gist 上，需要安装 MinGW 和 LIEF，配置方式不赘述。还不会 C 和 Python 的话建议学一下先呢。&lt;/p>
&lt;p>&lt;a class="link" href="https://gist.github.com/nnnewb/28ca24ed4ee53f446120d64570c7ad01" target="_blank" rel="noopener"
>完整代码的 GIST&lt;/a>&lt;/p>
&lt;h2 id="0x05-成果">0x05 成果&lt;/h2>
&lt;p>加壳机运行效果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/%E5%8A%A0%E5%A3%B3%E6%9C%BA.gif"
loading="lazy"
alt="加壳机"
>&lt;/p>
&lt;p>&lt;code>packed.exe&lt;/code> 的节表信息如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/image-20211020095008599.png"
width="507"
height="296"
srcset="https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/image-20211020095008599_hu133cb724811b185855f9a631cc001e91_10916_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-03-support-no-relocations/image-20211020095008599_hu133cb724811b185855f9a631cc001e91_10916_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211020095008599"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>整个过程里踩了不少坑，几乎都要靠 x32dbg 调试和 CFF Explorer 挨个文件头字段检查。有个比较实用的做法是拿 LIEF 解析好加壳后的文件，把输出结果和原始加载器对比。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="n">packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed-analysis.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w+&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;loader-analysis.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w+&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>分析好之后就可以拿 vscode 去比较了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">code -n -d packed-analysis.txt loader-analysis.txt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比起直接拿 CFF Explorer 硬看字段哪儿不对，和编译器产生的正常文件比较能排除掉一些无关的字段。但也不是万能，比如说之前没有写 &lt;code>section.offset=0&lt;/code>，结果生成的 PE32 文件导入表内容坏了，一直没意识到。直到 x32dbg 调试中发现 ntdll 里加载导入表时碰到了一个无效地址（我怎么知道是加载导入表时呢，胆大心细加上99%的运气&amp;hellip;），然后看 CFF Explorer 才发现导入表完全挂了，再回头看节表才发现 &lt;code>.idata&lt;/code> 的偏移和大小都是坏的&amp;hellip;&lt;/p>
&lt;p>还有 data directories 的坑，也是靠 x32dbg，跳转到内存，才发现 &lt;code>(IMAGE_SECTION_HEADER*)(PIMAGE_NT_HEADERS+1)&lt;/code> 算出来的偏移值多了8字节，冥思苦想这8字节怎么回事，胡乱分析，然后突然意识到 data directory 正好 8 字节，加壳机里又有个很迷惑的 &lt;code>range(0,15)&lt;/code>，反复确认了几次才发现真的是 LIEF 就给了 15 个 Data directory —— 但 Windows SDK 里 &lt;code>winnt.h&lt;/code> 定义的是 &lt;strong>固定 16 个元素&lt;/strong> ，之后去翻 PE Format 文档才发现微软早就挖好了这个坑等你翻文档：&lt;/p>
&lt;blockquote>
&lt;p>Note that the number of directories is not fixed. Before looking for a specific directory, check the NumberOfRvaAndSizes field in the optional header.&lt;/p>
&lt;/blockquote>
&lt;p>原先的文章预计是要做一个压缩壳，简单试验了一下没啥难度，代码都不用几行（VS+CMake+VCPKG 同时用 LIEF 和 ZLIB/LZO 什么的有点费劲，所以用 Windows Compression API），就这样水一篇文章有点不好意思。所以就先去看怎么对付不能重定位的PE32了，结果搞 LIEF 的各种环境编译、折腾VC++的Pragma、翻 Linker Script 手册看能不能改节表偏移、学NASM、从国庆坑到现在。&lt;/p>
&lt;p>本篇的参考文章是：https://bidouillesecurity.com/tutorial-writing-a-pe-packer-part-4/&lt;/p>
&lt;p>文中有些地方比较怪，比如说先编译了正常 loader 再编译 shifted_loader 就让人不是很理解，照抄抄出一堆bug。所以本文的脚本和参考的脚本已经有点对不上了。&lt;/p>
&lt;p>受制于不知道怎么编译出没有重定位的程序，我拿一个有重定位的做了实验（理论上来说，应该是一样的吧？），所以到头也不确定是不是真的能把没有重定位的程序跑起来。&lt;/p>
&lt;p>就这样吧，这个结论有点长。到这就差不多了。&lt;/p></description></item><item><title>关于在内存里找kernel32这件事</title><link>https://nnnewb.github.io/p/find-kernel32-in-memory/</link><pubDate>Thu, 14 Oct 2021 16:31:00 +0800</pubDate><guid>https://nnnewb.github.io/p/find-kernel32-in-memory/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总得有个前言。&lt;/p>
&lt;p>用 nasm 手工打造了一个 PE 文件后，这个 PE 文件还没什么卵用。如果要动 IAT，又嫌麻烦。网上冲浪找到&lt;a class="link" href="https://www.ired.team/offensive-security/code-injection-process-injection/finding-kernel32-base-and-function-addresses-in-shellcode#finding-kernel32-base-address" target="_blank" rel="noopener"
>一篇关于 shellcode 的文章&lt;/a>，讲如何在内存里找到 kernel32.dll 并调用 WinExec 函数，于是就想实践一下看看，实际抄代码碰到不少坑。对汇编又熟悉了一点。&lt;/p>
&lt;h2 id="0x01-寻找-kernel32">0x01 寻找 kernel32&lt;/h2>
&lt;p>微软有一篇很&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/thread-environment-block--debugging-notes-" target="_blank" rel="noopener"
>简短的文章&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>The Thread Environment Block (&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-teb" target="_blank" rel="noopener"
>&lt;strong>TEB structure&lt;/strong>&lt;/a>) holds context information for a thread.&lt;/p>
&lt;p>In the following versions of Windows, the offset of the 32-bit TEB address within the 64-bit TEB is 0. This can be used to directly access the 32-bit TEB of a WOW64 thread. This might change in later versions of Windows&lt;/p>
&lt;/blockquote>
&lt;p>另外在&lt;a class="link" href="https://en.wikipedia.org/wiki/Win32_Thread_Information_Block" target="_blank" rel="noopener"
>维基百科页面&lt;/a>也有一点概述，&lt;em>TIB&lt;/em> 就是 &lt;em>TEB&lt;/em> 。&lt;em>TIB&lt;/em> 全称是 &lt;em>Thread Information Block&lt;/em> ，&lt;em>TEB&lt;/em> 是 &lt;em>Thread Environment Block&lt;/em> 。&lt;/p>
&lt;p>关于 &lt;em>TIB&lt;/em> 和 &lt;em>TEB&lt;/em> 的微软官方文档和文章链接很多都失效了，能找到的相关信息不多。但是微软至少还&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-teb" target="_blank" rel="noopener"
>给出了 TEB 的结构定义&lt;/a>吧（在Windows SDK 里）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_TEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PPEB&lt;/span> &lt;span class="n">ProcessEnvironmentBlock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">399&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1952&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsSlots&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved5&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReservedForOle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved6&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsExpansionSlots&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">TEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PTEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大量的刺眼的 &lt;code>Reserved&lt;/code> 。不过还好，花了点时间还是谷歌出了所谓的&lt;code>Undocumented&lt;/code>的相关信息。&lt;a class="link" href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FTEB.html" target="_blank" rel="noopener"
>NTAPI Undocumented Function&lt;/a>。也可以像我看的那篇文章一样，用 &lt;code>WinDbg Preview&lt;/code> 去实际看看内存里的结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_TEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">NT_TIB&lt;/span> &lt;span class="n">Tib&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">EnvironmentPointer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">CLIENT_ID&lt;/span> &lt;span class="n">Cid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ActiveRpcInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ThreadLocalStoragePointer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEB&lt;/span> &lt;span class="n">Peb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">LastErrorValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">CountOfOwnedCriticalSections&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">CsrClientThread&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Win32ThreadInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Win32ClientInfo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x1F&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">WOW32Reserved&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">CurrentLocale&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">FpSoftwareStatusRegister&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SystemReserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x36&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Spare1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">SpareBytes1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x28&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SystemReserved2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xA&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiRgn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiPen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiBrush&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">CLIENT_ID&lt;/span> &lt;span class="n">RealClientId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiCachedProcessHandle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiClientPID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiClientTID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiThreadLocaleInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">UserReserved&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlDispatchTable&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x118&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GlReserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x1A&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlReserved2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlSectionInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlSection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlTable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlCurrentRC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlContext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NTSTATUS&lt;/span> &lt;span class="n">LastStatusValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">UNICODE_STRING&lt;/span> &lt;span class="n">StaticUnicodeString&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">WCHAR&lt;/span> &lt;span class="n">StaticUnicodeBuffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x105&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">DeallocationStack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsSlots&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x40&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">TlsLinks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Vdm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReservedForNtRpc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">DbgSsReserved&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HardErrorDisabled&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Instrumentation&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">WinSockData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiBatchCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Spare2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Spare3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Spare4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReservedForOle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">WaitingOnLoaderLock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">StackCommit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">StackCommitMax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">StackReserved&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">TEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PTEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过依然没什么卵用，因为在乎的只有 PPEB 这个字段。好吧，点到为止。&lt;/p>
&lt;p>在那篇文章的原文里，给出的找到 kernel32.dll 的查找路径是这样的：&lt;code>TEB-&amp;gt;PEB-&amp;gt;Ldr-&amp;gt;InMemoryOrderLoadList-&amp;gt;currentProgram-&amp;gt;ntdll-&amp;gt;kernel32.BaseDll&lt;/code>&lt;/p>
&lt;h3 id="11--process-environment-block">1.1 Process Environment Block&lt;/h3>
&lt;p>从 TEB 出发，找到 PEB &lt;code>(12*sizeof PVOID)==48==0x30&lt;/code> 。PEB 的结构如下，文档参考&lt;a class="link" href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FProcess%2FPEB.html" target="_blank" rel="noopener"
>这个&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_PEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">InheritedAddressSpace&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">ReadImageFileExecOptions&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">BeingDebugged&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">Spare&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HANDLE&lt;/span> &lt;span class="n">Mutant&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ImageBaseAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEB_LDR_DATA&lt;/span> &lt;span class="n">LoaderData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PRTL_USER_PROCESS_PARAMETERS&lt;/span> &lt;span class="n">ProcessParameters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SubSystemData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ProcessHeap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">FastPebLock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEBLOCKROUTINE&lt;/span> &lt;span class="n">FastPebLockRoutine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEBLOCKROUTINE&lt;/span> &lt;span class="n">FastPebUnlockRoutine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">EnvironmentUpdateCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPVOID&lt;/span> &lt;span class="n">KernelCallbackTable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">EventLogSection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">EventLog&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEB_FREE_BLOCK&lt;/span> &lt;span class="n">FreeList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">TlsExpansionCounter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsBitmap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">TlsBitmapBits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReadOnlySharedMemoryBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReadOnlySharedMemoryHeap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPVOID&lt;/span> &lt;span class="n">ReadOnlyStaticServerData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">AnsiCodePageData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">OemCodePageData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">UnicodeCaseTableData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">NumberOfProcessors&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">NtGlobalFlag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">Spare2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">LARGE_INTEGER&lt;/span> &lt;span class="n">CriticalSectionTimeout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapSegmentReserve&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapSegmentCommit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapDeCommitTotalFreeThreshold&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapDeCommitFreeBlockThreshold&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">NumberOfHeaps&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">MaximumNumberOfHeaps&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPVOID&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ProcessHeaps&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiSharedHandleTable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ProcessStarterHelper&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiDCAttributeList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">LoaderLock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSMajorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSMinorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSBuildNumber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSPlatformId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ImageSubSystem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ImageSubSystemMajorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ImageSubSystemMinorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiHandleBuffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x22&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">PostProcessInitRoutine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">TlsExpansionBitmap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">TlsExpansionBitmapBits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">SessionId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">PEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PPEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着从 PEB 找到 &lt;code>Ldr&lt;/code>，位置是 &lt;code>(sizeof(BOOLEAN)*4+sizeof(HANDLE)+sizeof(PVOID))==12==0xc&lt;/code>。&lt;/p>
&lt;h3 id="12-peb_ldr_data">1.2 PEB_LDR_DATA&lt;/h3>
&lt;p>接着从 &lt;code>PEB_LDR_DATA&lt;/code> 结构里找 &lt;code>InMemoryOrderModuleList&lt;/code> 这个字段，&lt;code>PEB_LDR_DATA&lt;/code> 结构如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_PEB_LDR_DATA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">Initialized&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SsHandle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">InLoadOrderModuleList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">InMemoryOrderModuleList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">InInitializationOrderModuleList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">PEB_LDR_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PPEB_LDR_DATA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>找到&lt;code>InMemoryOrderModuleList&lt;/code>字段，位置是&lt;code>(sizeof(ULONG)+sizeof(BOOLEAN)+sizeof(PVOID)+sizeof(LIST_ENTRY))==20==0x14&lt;/code>&lt;/p>
&lt;p>注意 &lt;code>sizeof(BOOLEAN)&lt;/code> 是 &lt;code>BYTE&lt;/code> 类型，但这个结构体是被对齐到了4字节的，所以 BOOLEAN 字段后面实际有3个字节的 padding。合起来就是三个 DWORD 。&lt;/p>
&lt;h3 id="13-ldr_data_table_entry">1.3 LDR_DATA_TABLE_ENTRY&lt;/h3>
&lt;p>之后就是 LIST_ENTRY 这个结构了，用 WinDbg 查了下结构：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _LIST_ENTRY
ntdll!_LIST_ENTRY
+0x000 Flink : Ptr32 _LIST_ENTRY
+0x004 Blink : Ptr32 _LIST_ENTRY
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据上面 &lt;em>Undocumented&lt;/em> 文档和原文章的叙述来看，这应该就是个指向 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构（双向链表）的指针。&lt;code>_LIST_ENTRY&lt;/code>结构本身是包含两个指针，一个&lt;code>Forward&lt;/code>正向指针，一个&lt;code>Backward&lt;/code>。所以我们取&lt;code>Flink&lt;/code>字段就可以，跳过&lt;code>InLoadOrderModuleList&lt;/code>这个字段后，一共偏移 &lt;code>0x14&lt;/code> 就是我们要的 &lt;code>Flink&lt;/code> 指针了，指向的应该是 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 这个结构体中的 &lt;code>InMemoryOrderLinks&lt;/code> 字段。下面给出&lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code>的结构（WinDbg）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _ldr_data_table_entry
ntdll!_LDR_DATA_TABLE_ENTRY
+0x000 InLoadOrderLinks : _LIST_ENTRY
+0x008 InMemoryOrderLinks : _LIST_ENTRY
+0x010 InInitializationOrderLinks : _LIST_ENTRY
+0x018 DllBase : Ptr32 Void
+0x01c EntryPoint : Ptr32 Void
+0x020 SizeOfImage : Uint4B
+0x024 FullDllName : _UNICODE_STRING
+0x02c BaseDllName : _UNICODE_STRING
+0x034 FlagGroup : [4] UChar
+0x034 Flags : Uint4B
+0x034 PackagedBinary : Pos 0, 1 Bit
+0x034 MarkedForRemoval : Pos 1, 1 Bit
+0x034 ImageDll : Pos 2, 1 Bit
+0x034 LoadNotificationsSent : Pos 3, 1 Bit
+0x034 TelemetryEntryProcessed : Pos 4, 1 Bit
+0x034 ProcessStaticImport : Pos 5, 1 Bit
+0x034 InLegacyLists : Pos 6, 1 Bit
+0x034 InIndexes : Pos 7, 1 Bit
+0x034 ShimDll : Pos 8, 1 Bit
+0x034 InExceptionTable : Pos 9, 1 Bit
+0x034 ReservedFlags1 : Pos 10, 2 Bits
+0x034 LoadInProgress : Pos 12, 1 Bit
+0x034 LoadConfigProcessed : Pos 13, 1 Bit
+0x034 EntryProcessed : Pos 14, 1 Bit
+0x034 ProtectDelayLoad : Pos 15, 1 Bit
+0x034 ReservedFlags3 : Pos 16, 2 Bits
+0x034 DontCallForThreads : Pos 18, 1 Bit
+0x034 ProcessAttachCalled : Pos 19, 1 Bit
+0x034 ProcessAttachFailed : Pos 20, 1 Bit
+0x034 CorDeferredValidate : Pos 21, 1 Bit
+0x034 CorImage : Pos 22, 1 Bit
+0x034 DontRelocate : Pos 23, 1 Bit
+0x034 CorILOnly : Pos 24, 1 Bit
+0x034 ChpeImage : Pos 25, 1 Bit
+0x034 ReservedFlags5 : Pos 26, 2 Bits
+0x034 Redirected : Pos 28, 1 Bit
+0x034 ReservedFlags6 : Pos 29, 2 Bits
+0x034 CompatDatabaseProcessed : Pos 31, 1 Bit
+0x038 ObsoleteLoadCount : Uint2B
+0x03a TlsIndex : Uint2B
+0x03c HashLinks : _LIST_ENTRY
+0x044 TimeDateStamp : Uint4B
+0x048 EntryPointActivationContext : Ptr32 _ACTIVATION_CONTEXT
+0x04c Lock : Ptr32 Void
+0x050 DdagNode : Ptr32 _LDR_DDAG_NODE
+0x054 NodeModuleLink : _LIST_ENTRY
+0x05c LoadContext : Ptr32 _LDRP_LOAD_CONTEXT
+0x060 ParentDllBase : Ptr32 Void
+0x064 SwitchBackContext : Ptr32 Void
+0x068 BaseAddressIndexNode : _RTL_BALANCED_NODE
+0x074 MappingInfoIndexNode : _RTL_BALANCED_NODE
+0x080 OriginalBase : Uint4B
+0x088 LoadTime : _LARGE_INTEGER
+0x090 BaseNameHashValue : Uint4B
+0x094 LoadReason : _LDR_DLL_LOAD_REASON
+0x098 ImplicitPathOptions : Uint4B
+0x09c ReferenceCount : Uint4B
+0x0a0 DependentLoadFlags : Uint4B
+0x0a4 SigningLevel : UChar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要注意到 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构中的 &lt;code>InMemoryOrderLinks&lt;/code> 并不是在结构开头，所以取得的地址必须先减去这个偏移值（8字节）再转换类型才是正确的结构。&lt;/p>
&lt;h3 id="14-模块基址">1.4 模块基址&lt;/h3>
&lt;p>接着从 WinDbg 可以实际发现，这个链表里，我们的程序之后就是&lt;code>ntdll.dll&lt;/code>，再之后就是&lt;code>kernel32.dll&lt;/code>，不再演示。反正就当&lt;code>kernel32.dll&lt;/code>固定在这个链表的第三个元素就是了。真要高鲁棒性的话就得遍历这个链表，按名字找出 &lt;code>kernel32.dll&lt;/code> 对应的结构，再取地址——麻烦死了。&lt;/p>
&lt;p>取得 &lt;code>kernel32.dll&lt;/code> 对应的 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构后，就可以提取其中的 &lt;code>DllBase&lt;/code> 字段了，这个字段就是 &lt;code>kernel32.dll&lt;/code> 的基址。&lt;/p>
&lt;h3 id="15-teb-的位置">1.5 TEB 的位置&lt;/h3>
&lt;p>谷歌一下不难找到，Win32程序进程地址空间里，TEB的地址就在 &lt;code>[fs:0]&lt;/code> 这个地址上。&lt;/p>
&lt;h3 id="16-获取-kernel-32-基址">1.6 获取 kernel 32 基址&lt;/h3>
&lt;p>那就开始写汇编。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_main&lt;/span>
&lt;span class="nl">_main:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">esp&lt;/span>
&lt;span class="c">; 获取 kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = TEB-&amp;gt;PEB
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB-&amp;gt;Ldr
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink (当前程序)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 ntdll.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 kernel32.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax-8h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.DllBase (kernel32.dll 基址)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">eax&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用 MinGW 编译。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">nasm main.asm -f win32 -o main.o
gcc main.o -nostartfiles -nodefaultlibs -o main.exe
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一步 &lt;code>[fs:30h]&lt;/code> 这个地址就是 TEB 中的 PEB 指针，将指针保存的地址移入 &lt;code>eax&lt;/code> 寄存器。现在 &lt;code>eax&lt;/code> 寄存器指向的就是 PEB 结构了。&lt;/p>
&lt;p>第二步取 &lt;code>PEB-&amp;gt;Ldr&lt;/code> 指针。&lt;/p>
&lt;p>第三步取 &lt;code>PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink&lt;/code> 指针，这个指针指向的是当前程序的 &lt;code>_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink&lt;/code> 。此时我们已经开始遍历链表。&lt;/p>
&lt;p>第四步是取链表的下一个元素，我们认为是 &lt;code>ntdll.dll&lt;/code> ，再取下一个元素，得到 &lt;code>kernel32.dll&lt;/code>。&lt;/p>
&lt;p>此时的 &lt;code>eax&lt;/code> 指向的还是 &lt;code>_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink&lt;/code> 请注意，计算偏移的时候要先移回结构的首部（&lt;code>-0x08&lt;/code>）再计算。&lt;/p>
&lt;p>第五步就是从 &lt;code>kernel32.dll&lt;/code> 的 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构里，取 &lt;code>DllBase&lt;/code> 字段的值了。&lt;code>eax - 8h + 18h&lt;/code> 得到 &lt;code>DllBase&lt;/code> 字段的偏移地址，执行后得到的就是 &lt;code>kernel32.dll&lt;/code> 的基址指针了。&lt;/p>
&lt;p>我们可以用 WinDbg Preview 验证下。&lt;/p>
&lt;p>&amp;hellip;.&lt;/p>
&lt;p>不知道为啥 WinDbg Preview 不能正确调试，还是用回 x32dbg 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014143628806.png"
width="1432"
height="820"
srcset="https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014143628806_huf7fa0ebadcb6a82d265da90a7a4fd7da_174978_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014143628806_huf7fa0ebadcb6a82d265da90a7a4fd7da_174978_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211014143628806"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>注意此时 EAX 的值是 &lt;code>75B30000&lt;/code> ，内容被调试器识别为 &lt;code>MZ?&lt;/code> ，显然是个 DOS 文件头。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014143759203.png"
width="337"
height="82"
srcset="https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014143759203_hu942b83f24b9afa2f5f8ca8a3c9b2bb0e_5647_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014143759203_hu942b83f24b9afa2f5f8ca8a3c9b2bb0e_5647_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211014143759203"
class="gallery-image"
data-flex-grow="410"
data-flex-basis="986px"
>&lt;/p>
&lt;p>在调试器的内存布局窗口可以看到，这个地址正好就是 &lt;code>kernel32.dll&lt;/code> 的镜像基址。&lt;/p>
&lt;p>到此，我们已经找到了 &lt;code>kernel32.dll&lt;/code> 的镜像基址，找到了镜像基址后，根据之前学习的对 PE 文件格式的了解，就有机会自己解析导出表，调用 &lt;code>kernel32.dll&lt;/code> 内的函数啦。&lt;/p>
&lt;h2 id="0x02-寻找-winexec-函数">0x02 寻找 WinExec 函数&lt;/h2>
&lt;p>作为实践的目标，这次希望在 &lt;code>kernel32.dll&lt;/code> 里找出 &lt;code>WinExec&lt;/code> 函数。这个函数的文档在&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-winexec" target="_blank" rel="noopener"
>这里&lt;/a>。函数签名如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">UINT&lt;/span> &lt;span class="nf">WinExec&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">LPCSTR&lt;/span> &lt;span class="n">lpCmdLine&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">UINT&lt;/span> &lt;span class="n">uCmdShow&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>文档说我们应该用 &lt;code>CreateProcess&lt;/code> 但是那个函数参数多的一批，狗都不看。微软就没点13数么。&lt;/p>
&lt;h3 id="21-寻找导出表">2.1 寻找导出表&lt;/h3>
&lt;p>有了 &lt;code>kernel32.dll&lt;/code> 的基址，下一步就是寻找导出表的位置了。&lt;/p>
&lt;p>依据我们对 PE 文件格式的了解，首先得在 Data Directories 里找到 &lt;em>Export Directory&lt;/em> 。&lt;/p>
&lt;p>在此之前，我们先暂存一下 &lt;code>kernel32.dll&lt;/code> 基址以备后用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后开始寻找 dos 文件头里的 &lt;code>lfanew&lt;/code> 。相对文件头的偏移是 &lt;code>3ch&lt;/code> ，内容是相对文件头的偏移值，我们这样计算。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在 eax 指向的就是 pe 文件头了。&lt;/p>
&lt;p>然后我们找到 &lt;code>ExportDirectory.VirtualAddress&lt;/code> 的偏移，它在相对 PE 文件头 &lt;code>78h&lt;/code> 偏移的地方。如果还记得 16 个元素的 Data Directories 结构的话，提醒下 ExportDirectory 就是所有 Data Directories 里排第一个的结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">78&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = ExportDirectory.VirtualAddress
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得到的是 RVA ，加上基址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax = &amp;amp;ExportDirectoryTable
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来要开始解析 ExportDirectoryTable 结构了，参考&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#export-directory-table" target="_blank" rel="noopener"
>微软的文档&lt;/a>。&lt;/p>
&lt;p>因为需要暂存很多变量，我们先给这些变量在栈上分配空间。&lt;/p>
&lt;h3 id="22-分配栈变量">2.2 分配栈变量&lt;/h3>
&lt;p>先回到开头，定义好栈如何分配。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">kernel32_base&lt;/span> &lt;span class="mi">0x04&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">numberof_export_entries&lt;/span> &lt;span class="mi">0x08&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_ordinal_table&lt;/span> &lt;span class="mi">0x0c&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_func_address_table&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_export_directory_table&lt;/span> &lt;span class="mi">0x14&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_name_table&lt;/span> &lt;span class="mi">0x18&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">ordinal_base&lt;/span> &lt;span class="mi">0x1c&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在入口点处，添加 &lt;code>sub esp, 0x1c&lt;/code>，分配栈空间。之后就可以使用 &lt;code>[ebp-变量]&lt;/code> 的形式来使用这些变量了。修改后的代码如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">kernel32_base&lt;/span> &lt;span class="mi">0x04&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">numberof_export_entries&lt;/span> &lt;span class="mi">0x08&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_ordinal_table&lt;/span> &lt;span class="mi">0x0c&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_func_address_table&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_export_directory_table&lt;/span> &lt;span class="mi">0x14&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_name_table&lt;/span> &lt;span class="mi">0x18&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">ordinal_base&lt;/span> &lt;span class="mi">0x1c&lt;/span>
&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_main&lt;/span>
&lt;span class="nl">_main:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="c">; 获取 kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = TEB-&amp;gt;PEB
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB-&amp;gt;Ldr
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink (当前程序)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 ntdll.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 kernel32.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax-8h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.DllBase (kernel32.dll 基址)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; ebx -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-kernel32_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; kernel32_base -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; kernel32.dll 的 pe 文件头
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">78&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax -&amp;gt; ExportDirectory.VirtualAddress
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; Export Directory Table
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着从 &lt;code>xor eax,eax&lt;/code> 之前继续。&lt;/p>
&lt;h3 id="23-分析-export-directory-table">2.3 分析 Export Directory Table&lt;/h3>
&lt;p>先给出定义。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Offset&lt;/th>
&lt;th style="text-align:left">Size&lt;/th>
&lt;th style="text-align:left">Field&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">0&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Export Flags&lt;/td>
&lt;td style="text-align:left">Reserved, must be 0.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Time/Date Stamp&lt;/td>
&lt;td style="text-align:left">The time and date that the export data was created.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">8&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">Major Version&lt;/td>
&lt;td style="text-align:left">The major version number. The major and minor version numbers can be set by the user.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">Minor Version&lt;/td>
&lt;td style="text-align:left">The minor version number.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">12&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Name RVA&lt;/td>
&lt;td style="text-align:left">The address of the ASCII string that contains the name of the DLL. This address is relative to the image base.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">16&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Ordinal Base&lt;/td>
&lt;td style="text-align:left">The starting ordinal number for exports in this image. This field specifies the starting ordinal number for the export address table. It is usually set to 1.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">20&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Address Table Entries&lt;/td>
&lt;td style="text-align:left">The number of entries in the export address table.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">24&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Number of Name Pointers&lt;/td>
&lt;td style="text-align:left">The number of entries in the name pointer table. This is also the number of entries in the ordinal table.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">28&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Export Address Table RVA&lt;/td>
&lt;td style="text-align:left">The address of the export address table, relative to the image base.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">32&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Name Pointer RVA&lt;/td>
&lt;td style="text-align:left">The address of the export name pointer table, relative to the image base. The table size is given by the Number of Name Pointers field.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">36&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Ordinal Table RVA&lt;/td>
&lt;td style="text-align:left">The address of the ordinal table, relative to the image base.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意 offset 是 10 进制，之后编写的代码里会用 16 进制。&lt;/p>
&lt;p>我们把这个结构里，我们关注的字段保存到栈上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存导出表结构基址用来运算
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_export_directory_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表结构基址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存ordinal表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表(name)数量到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax=第一个函数名称的 RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数的名称表到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-ordinal_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存 ordinal base 用于计算导出函数的地址
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应该不难理解。&lt;/p>
&lt;p>接下来要从这个结构里找出 &lt;code>WinExec&lt;/code> 函数的地址。&lt;/p>
&lt;h3 id="24-导出表和函数地址">2.4 导出表和函数地址&lt;/h3>
&lt;p>一些前置知识。&lt;/p>
&lt;p>导出函数的地址表是用 Ordinal 做索引的，所以必须先取得 Ordinal 才能正确取得地址。&lt;/p>
&lt;blockquote>
&lt;p>The export address table contains the address of exported entry points and exported data and absolutes. An ordinal number is used as an index into the export address table.&lt;/p>
&lt;/blockquote>
&lt;p>注意从 Ordinal Base 取出的值是 &lt;strong>unbiased indexes&lt;/strong>，从 Ordinal Table 里取出的 Ordinal 值并不需要减去 Ordinal Base 。但是 DUMPBIN 之类的工具似乎会给出加上了 Ordinal Base 的 Ordinal 值，也就是微软文档中说的 Biased Ordinal 。&lt;/p>
&lt;p>这份文档曾经是错误的，&lt;a class="link" href="https://stackoverflow.com/questions/39996742/how-can-kernel32-dll-export-an-ordinal-of-0-when-its-ordinalbase-field-is-s" target="_blank" rel="noopener"
>见爆栈的这个问题&lt;/a>。要是看了什么不知道从哪儿复制粘贴来的博客可能会有误解，但现在的文档里是明确说了是 &lt;strong>unbiased indexes&lt;/strong> 。取得 Ordinal 之后直接当下标去访问就行了。&lt;/p>
&lt;blockquote>
&lt;p>The export ordinal table is an array of &lt;strong>16-bit unbiased indexes&lt;/strong> into the export address table. Ordinals are biased by the Ordinal Base field of the export directory table. In other words, the ordinal base must be subtracted from the ordinals to obtain true indexes into the export address table.&lt;/p>
&lt;/blockquote>
&lt;p>文档也明确指出，你可以把名称表和ordinal表当成一个表，下标是共通的。也就是名称表的第1个元素对应ordinal表的第一个元素，以此类推。&lt;/p>
&lt;blockquote>
&lt;p>The export name pointer table and the export ordinal table form two parallel arrays that are separated to allow natural field alignment. These two tables, in effect, operate as one table, in which the Export Name Pointer column points to a public (exported) name and the Export Ordinal column gives the corresponding ordinal for that public name. A member of the export name pointer table and a member of the export ordinal table are associated by having the same position (index) in their respective arrays.&lt;/p>
&lt;/blockquote>
&lt;p>现在我们可以开始处理这几个表了。&lt;/p>
&lt;h3 id="25-遍历名称表">2.5 遍历名称表&lt;/h3>
&lt;p>字符串常量要记得先定义好，之后用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.data&lt;/span>
&lt;span class="nl">str_winexec:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">WinExec&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nl">str_calcexe:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">calc.exe&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先从名称表里找出 &lt;code>WinExec&lt;/code> 这个字符串。之后会拿 &lt;code>eax&lt;/code> 保存下标，&lt;code>ecx&lt;/code> 用于 &lt;code>repe cmpsb&lt;/code> 指令，所以这两个字段我们先清空。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着写一个循环。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.findWinExecLocation:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">str_winexec&lt;/span> &lt;span class="c">; 准备比较，esi=常量字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 准备比较，edi=名称表首元素，注意名称表是一个指针数组，每个元素都是 DWORD RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span> &lt;span class="c">; 清除 df 标志位
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存下 eax，接下来 eax 要算下标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 左移 2 位，等于 eax *= 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 啰嗦这么多就是为了 edi = edi + eax * 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; 恢复 eax 的值
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="no">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; edi = *(基址+名称表RVA[下标])，注意此时拿到的还是一个 RVA ，指向导出函数名字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; 将 RVA 加上基址，得到完整的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c">; repe cmpsb 使用 cx 寄存器来计数，WinExec 长度是 7，加上 NUL 就是 8 个字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">repe&lt;/span> &lt;span class="no">cmpsb&lt;/span> &lt;span class="c">; 字符串比较
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="no">jz&lt;/span> &lt;span class="no">.found&lt;/span> &lt;span class="c">; 如果 repe cmpsb 得到的结果是相同，那么当前下标 eax 就是 WinExec 了，跳转出循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 否则下标自增
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 如果当前下标还不等于导出总数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">.findWinExecLocation&lt;/span> &lt;span class="c">; 继续循环
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="no">.found&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最复杂的部分就是算偏移，在 C 中一个下标运算又或者指针解引用的事情在汇编里就很蛋疼。&lt;/p>
&lt;h3 id="26-取-ordinal-和函数地址">2.6 取 Ordinal 和函数地址&lt;/h3>
&lt;p>得到正确下标后就可以取 Ordinal 了。先把 ordinal 表的地址和 函数地址表的地址放进寄存器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后用 eax 做下标，取 ordinal 值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ax(ordinal) = ((WORD*)ordinal_table)[eax]
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再拿 Ordinal 值做下标，取函数地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">edx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = ((DWORD*)address_table)[eax]
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后把函数地址（RVA）加上基址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax=WinExec 函数的地址
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得到 &lt;code>WinExec&lt;/code> 函数在内存中的地址。&lt;/p>
&lt;h3 id="27-调用-winexec-函数">2.7 调用 WinExec 函数&lt;/h3>
&lt;p>Windows API 都是 &lt;em>stdcall&lt;/em> 调用约定，我们不用管清栈，直接压参数就好。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c">; SW_SHOWDEFAULT
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">str_calcexe&lt;/span> &lt;span class="c">; 字符串 calc.exe
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; __stdcall WinExec
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>到这里，应该就成功调用了 &lt;code>WinExec&lt;/code> 函数了。&lt;/p>
&lt;h3 id="28-清理和退出">2.8 清理和退出&lt;/h3>
&lt;p>写完了主要功能，接下来就要给自己擦屁股了，平栈。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>收工！&lt;/p>
&lt;h3 id="29-完整代码">2.9 完整代码&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">kernel32_base&lt;/span> &lt;span class="mi">0x04&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">numberof_export_entries&lt;/span> &lt;span class="mi">0x08&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_ordinal_table&lt;/span> &lt;span class="mi">0x0c&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_func_address_table&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_export_directory_table&lt;/span> &lt;span class="mi">0x14&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_name_table&lt;/span> &lt;span class="mi">0x18&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">ordinal_base&lt;/span> &lt;span class="mi">0x1c&lt;/span>
&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_main&lt;/span>
&lt;span class="nl">_main:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="c">; 获取 kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = TEB-&amp;gt;PEB
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB-&amp;gt;Ldr
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink (当前程序)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 ntdll.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 kernel32.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax-8h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.DllBase (kernel32.dll 基址)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; ebx -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-kernel32_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; kernel32_base -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; kernel32.dll 的 pe 文件头
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">78&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax -&amp;gt; ExportDirectory.VirtualAddress
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; Export Directory Table
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存导出表结构基址用来运算
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_export_directory_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表结构基址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存ordinal表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表(name)数量到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax=第一个函数名称的 RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数的名称表到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-ordinal_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存 ordinal base 用于计算导出函数的地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">eax&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ecx&lt;/span>
&lt;span class="nl">.findWinExecLocation:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">str_winexec&lt;/span> &lt;span class="c">; 准备比较，esi=常量字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 准备比较，edi=名称表首元素
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span> &lt;span class="c">; 清除 df 标志位
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存下 eax，接下来 eax 要算下标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 左移 2 位，等于 eax *= 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 啰嗦这么多就是为了 edi = edi + eax * 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; 恢复 eax 的值
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; edi = *(基址+名称表RVA[下标])，注意此时拿到的还是一个 RVA ，指向导出函数名字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; 将 RVA 加上基址，得到完整的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c">; repe cmpsb 使用 cx 寄存器来计数，WinExec 长度是 7，加上 NUL 就是 8 个字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">repe&lt;/span> &lt;span class="no">cmpsb&lt;/span> &lt;span class="c">; 字符串比较
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">jz&lt;/span> &lt;span class="no">.found&lt;/span> &lt;span class="c">; 如果 repe cmpsb 得到的结果是相同，那么当前下标 eax 就是 WinExec 了，跳转出循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 否则下标自增
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 如果当前下标还不等于导出总数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">.findWinExecLocation&lt;/span> &lt;span class="c">; 继续循环
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">.found:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ax(ordinal) = ((WORD*)ordinal_table)[eax]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">edx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = ((DWORD*)address_table)[eax]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax=WinExec 函数的地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c">; SW_SHOWDEFAULT
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">str_calcexe&lt;/span> &lt;span class="c">; 字符串 calc.exe
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; __stdcall WinExec
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;span class="nf">section&lt;/span> &lt;span class="no">.data&lt;/span>
&lt;span class="nl">str_winexec:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">WinExec&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nl">str_calcexe:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">calc.exe&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x03-验证">0x03 验证&lt;/h2>
&lt;p>验证方法很简单，我们编译之，运行，然后就好啦！&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014161140486.png"
width="1432"
height="821"
srcset="https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014161140486_huecdba194dea060f00d31873e5d097cb1_387956_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/find-kernel32-in-memory/image-20211014161140486_huecdba194dea060f00d31873e5d097cb1_387956_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211014161140486"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;p>&lt;code>WinExec&lt;/code> 的返回值在 eax 里，微软的文档说返回值大于 31 就是 OJBK，0x21 是10进制的33，所以完全 OJBK 。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这是写 shellcode 的技术吧，东一榔头西一棒子就是我了。话说 shellcode 的具体定义是啥来着？我只剩菜了.jpg&lt;/p>
&lt;p>最终体会就是写过汇编才知道 C 真的是很高级的语言了（&lt;/p>
&lt;p>真要算地址算偏移一算一整天，365天对着16进制数做加减乘除那真就是折磨。&lt;/p>
&lt;p>Windows 未公开的数据结构也不知道网上的大佬都是怎么研究出来的，毕竟理论上来说搞这个没有任何价值，在逆向研究出结果之前谁也不知道这些东西能带来什么价值，甚至你搞完了也不知道有什么价值，直到有一天被正好有需要的人发现（大黑阔：现成的洞，好耶）。&lt;/p>
&lt;p>嗯，这个想法就让人比较兴奋，顿时感觉自己闲出屁摸鱼也是在为社会创造价值了呢~&lt;/p>
&lt;p>另外关于如何用 C 写 shellcode，其实我想了下，也许可以让编译器把汇编吐出来，然后从里面拿咱需要的代码？不过这也不知道怎么编译器吐出能让 nasm 接受的汇编。或者有啥比较业界通行的语法标准？只知道有 AT&amp;amp;T 和 Intel 两种风格，但非要说的话 nasm 和 masm 都有些不兼容，尽管都是 Intel 风格（大概）。或者就是让编译器吐个 obj 文件出来，然后解析这个 obj ，提取里面的二进制代码就好。&lt;/p>
&lt;p>好了瞎bb完毕。收工啦。&lt;/p></description></item><item><title>加壳原理02 - 简单加壳机</title><link>https://nnnewb.github.io/p/learning-packer-02/</link><pubDate>Tue, 28 Sep 2021 16:57:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-02/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-02/cover.jpg" alt="Featured image of post 加壳原理02 - 简单加壳机" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>对 Windows 程序的加载和运行过程有了基本了解后，手动加载并运行一个PE文件并不成问题。加壳仅仅是在这上面更进一步：把加载程序和被加载的程序合并成一个文件。&lt;/p>
&lt;p>这么说可能有点太简单化，大部分的工作其实就在这儿：如何处理被加载的程序？压缩？加密？混淆？加载器（或者叫壳程序）如何反调试？&lt;/p>
&lt;p>这里先写一个简单的加壳机，仅仅是把被加载的PE文件作为一个 Section，添加到壳程序里，让壳程序直接从这个 Section 加载并运行。其他花里胡哨的操作都先不整，仅作为证明工作原理的案例。&lt;/p>
&lt;h2 id="0x01-壳程序">0x01 壳程序&lt;/h2>
&lt;h3 id="11-思路">1.1 思路&lt;/h3>
&lt;p>和加载一个PE文件不同，既然被加载的程序就在 Section 里，那需要做的只有定位到 Section，然后把 Section 内容当读取进内存的 PE 文件内容处理就好了。&lt;/p>
&lt;p>壳程序应该尽量保持轻量，不在原始程序上添加太多东西（加完壳大小翻一倍还多了一堆DLL依赖那谁受得了啊），所以很多标准C库的函数也不能用了，像是&lt;code>memcpy&lt;/code>、&lt;code>strcmp&lt;/code> 都要自己简单实现一个。&lt;/p>
&lt;h3 id="12--壳实现">1.2 壳实现&lt;/h3>
&lt;p>绝大部分内容和之前文章中的 &lt;code>load_PE&lt;/code> 一致，入口点修改为 &lt;code>_start&lt;/code>，需要注意。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">mystrcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetModuleHandleA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">unpacker_VA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">unpacker_VA&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">packed_section_name&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;.packed&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mystrcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">packed_section_name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dest&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Set permission for the PE header to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// panic!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ExitProcess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ExitProcess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">mystrcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">str1&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">str2&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dest&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>构建参数（CMAKE）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">loader_2&lt;/span> &lt;span class="s">WIN32&lt;/span> &lt;span class="s">loader_2.c&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">loader_2&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">/GS-&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">loader_2&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">/NODEFAULTLIB&lt;/span> &lt;span class="s">/ENTRY:_start&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参数&lt;code>/GS-&lt;/code>是为了避免在&lt;code>/NODEFAULTLIB&lt;/code>下出现一些缓存区安全检查代码链接错误。参考&lt;a class="link" href="https://docs.microsoft.com/en-us/cpp/build/reference/gs-buffer-security-check?view=msvc-160" target="_blank" rel="noopener"
>文档&lt;/a>。&lt;/p>
&lt;h2 id="0x02-加壳机">0x02 加壳机&lt;/h2>
&lt;p>相信已经发现了，上文并没有提到怎么把程序嵌入壳程序里。这是因为加壳并不是在壳程序编译时直接把文件嵌进去=，=虽然理论上来说也可以，但这里不讨论了。仅仅看加壳机加壳的场景吧。&lt;/p>
&lt;h3 id="21-加壳机原理">2.1 加壳机原理&lt;/h3>
&lt;p>加壳机做的事情包括：&lt;/p>
&lt;ul>
&lt;li>在 section table 里添加 section
&lt;ul>
&lt;li>根据 section table 和 file_alignment 决定如何分配空间&lt;/li>
&lt;li>根据 section_alignment 计算 virtual size&lt;/li>
&lt;li>根据上一个 section 大小和位置计算 virtual address&lt;/li>
&lt;li>填充 pointer_to_raw_data 和 size_of_raw_data&lt;/li>
&lt;li>设置合适的 characteristics&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>计算修改 number_of_sections&lt;/li>
&lt;li>计算修改 size_of_image&lt;/li>
&lt;li>计算修改 size_of_headers&lt;/li>
&lt;/ul>
&lt;p>反正看起来就很麻烦，不过幸好操作 PE 文件的库不少，GitHub 搜一搜就有。这里用 &lt;a class="link" href="https://github.com/lief-project/LIEF" target="_blank" rel="noopener"
>LIEF&lt;/a> 这个库，操作蛮简单的。&lt;/p>
&lt;h3 id="22-源码">2.2 源码&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;LIEF/LIEF.hpp&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">read_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CreateFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">GENERIC_READ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">OPEN_EXISTING&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE_ATTRIBUTE_NORMAL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">readbyte&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">filesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetFileSize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filesize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">filesize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">readbyte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">readbyte&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">filesize&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">CloseHandle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;loader and program path are required&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">loader_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">program_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">loader_binary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader_path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// LIEF 帮我们做了偏移计算之类的工作，这里就只用点逻辑，非常得银杏。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">program_content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program_path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;.packed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 新建 section
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">packed_section&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program_content&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 把被加载程序的内容当成 section 内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">loader_binary&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE_SECTION_TYPES&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">DATA&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 把 section 添加到壳程序里
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 用 lief 实现把修改后的壳程序写入硬盘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">builder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader_binary&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;packed.exe&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译指令（CMAKE）参考 &lt;a class="link" href="https://lief-project.github.io//doc/latest/installation.html#cmake-integration" target="_blank" rel="noopener"
>LIEF 文档&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="c"># Custom path to the LIEF install directory
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LIEF_DIR&lt;/span> &lt;span class="s">CACHE&lt;/span> &lt;span class="s">PATH&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">CMAKE_INSTALL_PREFIX&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># Directory to &amp;#39;FindLIEF.cmake&amp;#39;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">APPEND&lt;/span> &lt;span class="s">CMAKE_MODULE_PATH&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LIEF_DIR&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="s">/share/LIEF/cmake&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># include &amp;#39;FindLIEF.cmake&amp;#39;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">FindLIEF&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># Find LIEF
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LIEF&lt;/span> &lt;span class="s">REQUIRED&lt;/span> &lt;span class="s">COMPONENTS&lt;/span> &lt;span class="s">STATIC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c"># COMPONENTS: &amp;lt;SHARED | STATIC&amp;gt; - Default: STATIC
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">packer.cpp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">MSVC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">target_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">/FIiso646.h&lt;/span> &lt;span class="s">/MT&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">set_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">TARGET&lt;/span> &lt;span class="s">packer&lt;/span> &lt;span class="s">PROPERTY&lt;/span> &lt;span class="s">LINK_FLAGS&lt;/span> &lt;span class="s">/NODEFAULTLIB:MSVCRT&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">endif&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LIEF_INCLUDE_DIRS&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">set_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">TARGET&lt;/span> &lt;span class="s">packer&lt;/span>
&lt;span class="s">PROPERTY&lt;/span> &lt;span class="s">CXX_STANDARD&lt;/span> &lt;span class="s">11&lt;/span>
&lt;span class="s">PROPERTY&lt;/span> &lt;span class="s">CXX_STANDARD_REQUIRED&lt;/span> &lt;span class="s">ON&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LIEF_LIBRARIES&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我要顺便一提，LIEF有python包，但那玩意儿不知道为啥赋值content一直报 not supported，没解决。就干脆拿 c++ 写了。论简单快捷还是要看 python 版本的。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>加壳程序反而平平无奇，正印证了那句台下功夫。&lt;/p></description></item><item><title>加壳原理01 - Windows 程序的加载和运行</title><link>https://nnnewb.github.io/p/learning-packer-01/</link><pubDate>Mon, 27 Sep 2021 14:51:00 +0800</pubDate><guid>https://nnnewb.github.io/p/learning-packer-01/</guid><description>&lt;img src="https://nnnewb.github.io/p/learning-packer-01/cover.jpg" alt="Featured image of post 加壳原理01 - Windows 程序的加载和运行" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文由多篇相关文章翻译整合得来，参考文章和书目文末给出。&lt;/p>
&lt;h2 id="0x01-pe文件结构">0x01 PE文件结构&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-01/PE_Format.png"
width="2048"
height="1526"
srcset="https://nnnewb.github.io/p/learning-packer-01/PE_Format_hu1d6972d7cbd2497cb5e2be07eb52e9a7_686257_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-01/PE_Format_hu1d6972d7cbd2497cb5e2be07eb52e9a7_686257_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="PE_Format"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;h3 id="11-从-pe-coff-格式说起">1.1 从 PE-COFF 格式说起&lt;/h3>
&lt;blockquote>
&lt;p>&amp;hellip; 现在PC平台流行的 &lt;strong>可执行文件格式（Executable）&lt;/strong> 主要是 Windows 下的 PE （Portable Executable） 和 Linux 的 ELF （Executable Linkable Format），它们都是 COFF（Common Object File Format）格式的变种。目标文件就是源代码编译后但未进行链接的那些中间文件（Windows 的 .obj 和 Linux 下的 .o），它和可执行文件的内容和结构很相似，所以一般跟可执行文件一起采用一种格式存储。从广义上看，目标文件与可执行文件的格式其实几乎是一样的，所以我们可以广义地将目标文件与可执行文件看成是同一种类型的文件，在 Windows 下，我们可以统称它们为 PE-COFF 文件格式。在 Linux 下，我们可以将它们统称为 ELF 文件。&lt;/p>
&lt;p>&amp;hellip; 不光是 &lt;strong>可执行文件&lt;/strong> （Windows 的 .exe 和 Linux 下的 ELF 可执行文件）按照可执行文件格式存储。&lt;strong>动态链接库（DLL，Dynamic Linking Library）&lt;/strong> （Windows 的 DLL 和 Linux 下的 .so ）以及&lt;strong>静态链接库 （Static Linking Library）&lt;/strong> （Windows 的 .lib 和 Linux 下的 .a）文件都按照可执行文件格式存储。它们在 Windows 下都按照 PE-COFF 格式存储，Linux 下按照 ELF 格式存储。静态链接库稍有不同，它是把很多目标文件捆绑在一起形成一个文件，再加上一些索引，可以简单理解为一个包含很多目标文件的文件包。&lt;/p>
&lt;p>&amp;hellip; COFF 的主要贡献是在目标文件引入了“段”的机制，不同的目标文件可以拥有不同数量及不同类型的“段”。另外，它还定义了调试数据的格式。&lt;/p>
&lt;p>——《程序员的自我修养——链接、装载与库》&lt;/p>
&lt;/blockquote>
&lt;p>这里讨论可执行文件格式，目标文件、静态库、动态库都先暂时不考虑。btw，引文中的“段”其实说的既是Section也是Segment，根据上下文自己理解。&lt;/p>
&lt;h3 id="12-pe-文件头一览">1.2 PE 文件头一览&lt;/h3>
&lt;p>PE格式在 Wiki 上有张挺漂亮的图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-01/Portable_Executable_32_bit_Structure_in_SVG_fixed.png"
width="2980"
height="4213"
srcset="https://nnnewb.github.io/p/learning-packer-01/Portable_Executable_32_bit_Structure_in_SVG_fixed_hu17a376e08455c311f7e43d421ffa5e76_295222_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-01/Portable_Executable_32_bit_Structure_in_SVG_fixed_hu17a376e08455c311f7e43d421ffa5e76_295222_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Portable_Executable_32_bit_Structure_in_SVG_fixed"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>图中可以看到，微软的兼容包袱是真的重（不是）。&lt;/p>
&lt;p>PE文件头已经包含了海量的信息，大部分我们不关注（或者说很少关注？），从做个简单壳的目的出发，了解了PE-COFF格式的一点通识和历史后就可以继续了。&lt;/p>
&lt;p>读懂这图需要了解下关于PE文件中几种“地址”的概念：&lt;/p>
&lt;ul>
&lt;li>&lt;em>raw addresses&lt;/em>，或者文件偏移 &lt;em>file offset&lt;/em>，这种地址指的是 &lt;strong>PE 文件中的偏移&lt;/strong>。&lt;/li>
&lt;li>&lt;em>virtual addresses&lt;/em>，虚拟地址，指在 RAM 中的地址，就是一般常说的进程地址空间里的地址。&lt;/li>
&lt;li>&lt;em>relative virtual addresses&lt;/em>，相对镜像基址（Image Base）的虚拟地址，不考虑 ASLR 的情况下，相对地址计算就是基址+RVA。&lt;/li>
&lt;/ul>
&lt;p>可以理解成，VA 就是基址+RVA，RVA就是VA-基址。&lt;/p>
&lt;p>VA/RVA 转文件偏移就麻烦很多，要根据节表 &lt;em>Section Table&lt;/em> 计算。&lt;/p>
&lt;p>上述镜像基址 &lt;em>Image Base&lt;/em> 和节表 &lt;em>Section Table&lt;/em> 都可以在图里找到。&lt;/p>
&lt;h3 id="13-dos-文件头">1.3 DOS 文件头&lt;/h3>
&lt;p>我们可以用在 Python REPL 中用 &lt;a class="link" href="https://pypi.org/project/pefile" target="_blank" rel="noopener"
>pefile&lt;/a> 来快速分析和查看PE文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pefile&lt;/span>
&lt;span class="n">pe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pefile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cm04.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># cm04 是C++写的带界面 Hello world，你也可以用计算器，C:\Windows\System32\calc.exe&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pe&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DOS_HEADERS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">[IMAGE_DOS_HEADER]
0x0 0x0 e_magic: 0x5A4D
0x2 0x2 e_cblp: 0x90
0x4 0x4 e_cp: 0x3
0x6 0x6 e_crlc: 0x0
0x8 0x8 e_cparhdr: 0x4
0xA 0xA e_minalloc: 0x0
0xC 0xC e_maxalloc: 0xFFFF
0xE 0xE e_ss: 0x0
0x10 0x10 e_sp: 0xB8
0x12 0x12 e_csum: 0x0
0x14 0x14 e_ip: 0x0
0x16 0x16 e_cs: 0x0
0x18 0x18 e_lfarlc: 0x40
0x1A 0x1A e_ovno: 0x0
0x1C 0x1C e_res:
0x24 0x24 e_oemid: 0x0
0x26 0x26 e_oeminfo: 0x0
0x28 0x28 e_res2:
0x3C 0x3C e_lfanew: 0x108
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一列是文件偏移，第二列是结构内的相对偏移，第三列是字段名，第四列是值。&lt;/p>
&lt;p>DOS文件头里基本都是为兼容保留的字段，没有我们需要的信息。需要关注的主要是开头的&lt;code>e_magic&lt;/code>，固定为&lt;code>0x5A4D&lt;/code>，也就是ASCII编码的&lt;code>MZ&lt;/code>；还有末尾的&lt;code>e_lfanew&lt;/code>，这个字段保存的是NT文件头的文件偏移，对照上文的图片，就是绿色 COFF Header 开头的 Signature。&lt;/p>
&lt;h3 id="14-ntfilecoff-文件头">1.4 NT/File/COFF 文件头&lt;/h3>
&lt;p>这部分开始，数据结构定义和上文中的PE文件头图有点差异（主要是字段划分归类上），编程的时候按实际数据结构写，看理论的时候遵照文档说法来灵活理解吧。之后C结构定义在字段归类上也有点差别的。总之，参考字段大小顺序，别太在意结构怎么写的。&lt;/p>
&lt;p>用 &lt;code>print(pe.NT_HEADERS)&lt;/code> 可以看到只输出了一个 Signature。剩余的 COFF Header 可以用 &lt;code>pe.FILE_HEADER&lt;/code> 查看（在微软 &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#file-headers" target="_blank" rel="noopener"
>PE Format 文档&lt;/a>中，Signature 不是 COFF File Header 的组成部分，和 Wiki 的图不一致）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">In [4]: print(pe.FILE_HEADER)
[IMAGE_FILE_HEADER]
0x10C 0x0 Machine: 0x14C
0x10E 0x2 NumberOfSections: 0x7
0x110 0x4 TimeDateStamp: 0x61501513 [Sun Sep 26 06:37:07 2021 UTC]
0x114 0x8 PointerToSymbolTable: 0x0
0x118 0xC NumberOfSymbols: 0x0
0x11C 0x10 SizeOfOptionalHeader: 0xE0
0x11E 0x12 Characteristics: 0x102
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这部分文件头中有几个重要字段：&lt;code>NumberOfSections&lt;/code>，PE文件中节的数量；以及 &lt;code>Characteristics&lt;/code>，16比特标志位字段，标识PE文件的一些基本属性。&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#characteristics" target="_blank" rel="noopener"
>可用的属性清单链接&lt;/a>。&lt;/p>
&lt;h3 id="15-可选文件头">1.5 可选文件头&lt;/h3>
&lt;p>虽然叫可选文件头（Optional Header），但并不可选。可以照例输出看看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">In [5]: print(pe.OPTIONAL_HEADER)
[IMAGE_OPTIONAL_HEADER]
0x120 0x0 Magic: 0x10B
0x122 0x2 MajorLinkerVersion: 0xE
0x123 0x3 MinorLinkerVersion: 0x1D
0x124 0x4 SizeOfCode: 0x6800
0x128 0x8 SizeOfInitializedData: 0xD000
0x12C 0xC SizeOfUninitializedData: 0x0
0x130 0x10 AddressOfEntryPoint: 0x1005
0x134 0x14 BaseOfCode: 0x1000
0x138 0x18 BaseOfData: 0x8000
0x13C 0x1C ImageBase: 0x400000
0x140 0x20 SectionAlignment: 0x1000
0x144 0x24 FileAlignment: 0x200
0x148 0x28 MajorOperatingSystemVersion: 0x6
0x14A 0x2A MinorOperatingSystemVersion: 0x0
0x14C 0x2C MajorImageVersion: 0x0
0x14E 0x2E MinorImageVersion: 0x0
0x150 0x30 MajorSubsystemVersion: 0x6
0x152 0x32 MinorSubsystemVersion: 0x0
0x154 0x34 Reserved1: 0x0
0x158 0x38 SizeOfImage: 0x19000
0x15C 0x3C SizeOfHeaders: 0x400
0x160 0x40 CheckSum: 0x0
0x164 0x44 Subsystem: 0x2
0x166 0x46 DllCharacteristics: 0x8140
0x168 0x48 SizeOfStackReserve: 0x100000
0x16C 0x4C SizeOfStackCommit: 0x1000
0x170 0x50 SizeOfHeapReserve: 0x100000
0x174 0x54 SizeOfHeapCommit: 0x1000
0x178 0x58 LoaderFlags: 0x0
0x17C 0x5C NumberOfRvaAndSizes: 0x10
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中大部分字段要不然是没用到，要不然就是固定值不变。几个值得关注的字段如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Magic&lt;/code>，区分 PE32/PE64 格式。微软文档给出的是 &lt;code>0x10b&lt;/code> 对应 &lt;code>PE32&lt;/code>，&lt;code>0x20b&lt;/code> 对应 &lt;code>PE32+&lt;/code>。&lt;/li>
&lt;li>&lt;code>AddressOfEntryPoint&lt;/code>，二进制文件加载后要执行的第一条指令的地址，程序的入口点，&lt;strong>注意是RVA&lt;/strong>。&lt;/li>
&lt;li>&lt;code>ImageBase&lt;/code>，偏好的镜像基址。RVA和这个基址相加得到VA。注意因为ASLR的存在，真实基址在运行前并不确定。&lt;/li>
&lt;li>&lt;code>SizeOfImage&lt;/code>，镜像的 &lt;em>虚拟大小&lt;/em> ，是加载可执行文件到内存时需要申请的内存大小。&lt;/li>
&lt;li>&lt;code>SizeOfHeaders&lt;/code>，所有文件头（DOS、NT、COFF、Optional &amp;hellip;）的总大小。&lt;/li>
&lt;li>&lt;code>DLLCharacteristics&lt;/code>，各种标志位，最有用的是&lt;code>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE&lt;/code> ，指定镜像基址是否可移动（也就是能不能开启ASLR 基址随机化）。&lt;/li>
&lt;/ul>
&lt;h2 id="0x02-加载pe">0x02 加载PE&lt;/h2>
&lt;p>对PE格式有了基本了解后，就可以开始尝试加载 PE 文件到内存里了。&lt;/p>
&lt;h3 id="21-加载和内存初始化">2.1 加载和内存初始化&lt;/h3>
&lt;p>PE文件头总是加载到镜像基址处。先写一个简单的C程序，把 PE 文件读取。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;missing path argument&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error opening file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Get file size : put pointer at the end
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_END&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// and read its position
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">file_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ftell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// put the pointer back at the beginning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_SET&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// allocate memory and read the whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// read whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n_read&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;reading error (%d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n_read&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// load the PE in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[+] Loading PE file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先写这么多，内容只有简单地文件IO，读取PE文件到内存，接下来写一个 &lt;code>void* load_PE(char* PE_data)&lt;/code> 函数，加载PE文件内容到内存空间，返回加载后的镜像基址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p_image_base&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前几句赋值都是在用指针运算取PE文件头里的字段。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先提取了 DOS 文件头和 NT 文件头（注意， File Header 和 Optional Header 都嵌在 NT 文件头结构里，这就是为啥我说结构定义会和上面的 wiki 图不大一样）。接着从文件头结构里取镜像大小、入口点RVA、文件头总大小，用于后续分配内存和指针运算。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>紧接着用 Win32 API 分配了一片内存空间，大小由 PE 文件头的镜像大小指定。用这个API的原因是之后我们需要设置这片内存为可执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PE文件头总是在镜像基址开始的位置，直接复制过去。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>取巧的方式获得节表指针。这是个简单的c指针运算，&lt;code>p_NT_headers+1&lt;/code>其实就是&lt;code>(char*)p_NT_headers + sizeof(IMAGE_NT_HEADERS)&lt;/code>，也就是NT_HEADERS 结构紧邻的下一个字节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着就是遍历节表，取节的基地址，PE文件中节包含数据的话，就复制节数据到内存，否则把节初始化为0。&lt;/p>
&lt;p>接着补充可执行权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// Set permission for the PE hader to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先把整个PE头设置为只读，然后遍历节表，取节基地址和标志位。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据PE头中节的可写、可执行标志位，设置内存空间保护方式。&lt;/p>
&lt;p>最后返回入口点地址，在 main 函数里跳转。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完整代码如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;missing path argument&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error opening file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Get file size : put pointer at the end
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_END&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// and read its position
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">file_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ftell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// put the pointer back at the beginning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_SET&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// allocate memory and read the whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// read whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n_read&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;reading error (%d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n_read&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// load the PE in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[+] Loading PE file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Set permission for the PE hader to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>到此，看起来这个加载其他程序运行的程序可以运行了，但其实还不行。其主要原因之一就是缺乏必要的导入信息。下文详述。&lt;/p>
&lt;h2 id="0x03-导入表">0x03 导入表&lt;/h2>
&lt;h3 id="31-导入表介绍">3.1 导入表介绍&lt;/h3>
&lt;p>在Windows上，每个可执行文件（.exe）都需要一些外部函数来支持其正常运作。这些外部函数通常在我们熟悉的&lt;code>.dll&lt;/code>文件里。举例来说，&lt;code>calc.exe&lt;/code>（计算器程序）需要外部函数来支持打开窗口、显示按钮等。&lt;/p>
&lt;p>以&lt;code>ShellExecuteW&lt;/code>为例（在&lt;code>calc.exe&lt;/code>计算器中被导入），&lt;code>calc.exe&lt;/code>需要这个函数来支持它正常工作（当然，&lt;code>calc.exe&lt;/code>需要不止这一个外部函数），所以&lt;code>calc.exe&lt;/code>需要知道&lt;code>ShellExecuteW&lt;/code>这个函数的代码（机器码）在哪儿。&lt;/p>
&lt;p>但事实上，&lt;code>.dll&lt;/code> 只会在运行时被加载，而且加载后在内存中的位置并不确定。这意味着编译器编译时无从得知&lt;code>ShellExecuteW&lt;/code>的地址（开启ASLR的话就更不可能了），也就无法给调用该函数的&lt;code>call&lt;/code>指令提供正确的立即数地址。&lt;/p>
&lt;p>这就是为什么编译器要创建导入表，因为它期望一旦动态链接库加载完成，它就可以查找到&lt;code>ShellExecuteW&lt;/code>的地址，并在需要的时候调用。&lt;/p>
&lt;p>在调试器里，我们可以看到这样的汇编指令。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-01/call_IAT.jpg"
width="543"
height="125"
srcset="https://nnnewb.github.io/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_480x0_resize_q75_box.jpg 480w, https://nnnewb.github.io/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="import address table"
class="gallery-image"
data-flex-grow="434"
data-flex-basis="1042px"
>&lt;/p>
&lt;p>第一条&lt;code>call&lt;/code>指令是内部调用，调用对象是同一个模块内的函数。编译器知道被调用函数的地址，并使用&lt;code>E8&lt;/code> opcode 。这表示 &lt;em>relative call&lt;/em> 。当调用外部模块时，它调用了从IAT读取的地址，也就是图中&lt;code>ds:[&amp;lt;&amp;amp;ShellExecuteW&amp;gt;]&lt;/code>。&lt;/p>
&lt;p>x86 的 call 分 4 类。&lt;/p>
&lt;ul>
&lt;li>Near, relative (opcode E8) (&lt;code>call func&lt;/code>)&lt;/li>
&lt;li>Far, absolute (opcode 9A) (&lt;code>call 0x12:0x12345678&lt;/code>)&lt;/li>
&lt;li>Near, absolute, indirect (opcode FF /2) (&lt;code>call [edi]&lt;/code>)&lt;/li>
&lt;li>Far, absolute, indirect (opcode FF /3) (&lt;code>call far [edi]&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>具体问搜索引擎。&lt;/p>
&lt;p>补充，函数可以通过名字（ASCII编码的C字符串）或DLL导出表中的序号 &lt;em>ordinal&lt;/em> 导入。&lt;/p>
&lt;h3 id="32-data-directory-和-idt">3.2 Data Directory 和 IDT&lt;/h3>
&lt;p>说了这么多IAT，那么IAT到底在哪儿？以什么形式保存？还是用&lt;code>pefile&lt;/code>，先看看 PE 文件头中的 &lt;code>OPTIONAL_HEADER .DATA_DIRECTORY&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">In [10]: pe.OPTIONAL_HEADER.DATA_DIRECTORY
Out[10]:
[&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_EXPORT] 0x180 0x0 VirtualAddress: 0x0 0x184 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_IMPORT] 0x188 0x0 VirtualAddress: 0xDAA0 0x18C 0x4 Size: 0xC8&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_RESOURCE] 0x190 0x0 VirtualAddress: 0x16000 0x194 0x4 Size: 0x5D0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_EXCEPTION] 0x198 0x0 VirtualAddress: 0x0 0x19C 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_SECURITY] 0x1A0 0x0 VirtualAddress: 0x0 0x1A4 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_BASERELOC] 0x1A8 0x0 VirtualAddress: 0x17000 0x1AC 0x4 Size: 0xE0C&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_DEBUG] 0x1B0 0x0 VirtualAddress: 0x98E0 0x1B4 0x4 Size: 0x38&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_COPYRIGHT] 0x1B8 0x0 VirtualAddress: 0x0 0x1BC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_GLOBALPTR] 0x1C0 0x0 VirtualAddress: 0x0 0x1C4 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_TLS] 0x1C8 0x0 VirtualAddress: 0x0 0x1CC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG] 0x1D0 0x0 VirtualAddress: 0x9918 0x1D4 0x4 Size: 0x40&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT] 0x1D8 0x0 VirtualAddress: 0x0 0x1DC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_IAT] 0x1E0 0x0 VirtualAddress: 0xD000 0x1E4 0x4 Size: 0xAA0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT] 0x1E8 0x0 VirtualAddress: 0x0 0x1EC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR] 0x1F0 0x0 VirtualAddress: 0x0 0x1F4 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_RESERVED] 0x1F8 0x0 VirtualAddress: 0x0 0x1FC 0x4 Size: 0x0&amp;gt;]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Data directory&lt;/code> 实际就是15个结构组成的数组（忽略最后一个reserved），每个结构包含对应的RVA地址和大小（RVA和大小的具体含义之后讨论）。这个结构里我们关注的有&lt;code>IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/code>和&lt;code>IMAGE_DIRECTORY_ENTRY_IAT&lt;/code>，分别指向的是 &lt;em>Import Directory Table&lt;/em> ，&lt;em>IDT&lt;/em> ，和 &lt;em>Import Address Table&lt;/em> ， &lt;em>IAT&lt;/em> 。&lt;/p>
&lt;p>基本是，我们可以这么说， &lt;em>IDT&lt;/em> 指示需要导入哪些函数，这些函数导入后，地址存入 &lt;em>IAT&lt;/em> 。 &lt;em>IDT&lt;/em> 是我们要导入什么， &lt;em>IAT&lt;/em> 是我们导入后把地址放在哪儿。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-01/IDT-IAT.drawio.png"
width="650"
height="1012"
srcset="https://nnnewb.github.io/p/learning-packer-01/IDT-IAT.drawio_hu519af53fd6ddb5dd0f68ecccb2a04fc7_77938_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-01/IDT-IAT.drawio_hu519af53fd6ddb5dd0f68ecccb2a04fc7_77938_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="IDT-IAT"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="154px"
>&lt;/p>
&lt;p>&lt;em>Import Directory&lt;/em> 指向的是一个 &lt;code>NULL&lt;/code> 结尾的&lt;code>IMAGE_IMPORT_DESCRIPTOR&lt;/code>结构数组。之后在代码里会用到。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_IMAGE_IMPORT_DESCRIPTOR&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="n">_ANONYMOUS_UNION&lt;/span> &lt;span class="k">union&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pointer to dword[]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">DUMMYUNIONNAME&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">TimeDateStamp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">ForwarderChain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pointer to dll name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pointer to dword[]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PIMAGE_IMPORT_DESCRIPTOR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>OriginalFirstThunk&lt;/code> 和 &lt;code>FirstThunk&lt;/code> 都是指向一个 NULL 结尾的 DWORD 数组。&lt;code>OriginalFirstThunk&lt;/code> 是指向 &lt;em>IDT&lt;/em> &lt;code>DWORD&lt;/code> 数组的 RVA 指针。&lt;/p>
&lt;p>其中数组元素：&lt;/p>
&lt;ul>
&lt;li>如果首比特是1，则这个DWORD是 &lt;em>ordinal&lt;/em> ，函数的导出表序号。&lt;/li>
&lt;li>否则是指向 &lt;code>IMAGE_IMPORT_BY_NAME&lt;/code> 结构的 RVA 地址。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>FirstThunk&lt;/code>指向的是 &lt;em>IAT&lt;/em> ，和 &lt;em>IDT&lt;/em> 结构相同，当我们得到导入函数的地址后，需要把地址放进 &lt;em>IDT&lt;/em> 对应的 &lt;em>IAT&lt;/em> 中。&lt;/p>
&lt;h3 id="33--填充导入表">3.3 填充导入表&lt;/h3>
&lt;p>下面实际编写一下填充 &lt;em>IAT&lt;/em> 的代码。要注意填充 IAT 的代码必须在加载 PE 头和 Sections 之后，早于设置内存保护执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从文件头提取到 Import Directory 的地址（RVA）后，和镜像基址相加算出实际结构地址。接下来开始遍历这个结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意此处所说的 &lt;em>null terminated&lt;/em> 指的是最后一个数组元素填充了0，故用 &lt;code>OriginalFirstThunk&lt;/code> 判断。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;import module is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>import_descriptors[i].Name&lt;/code> 依然是一个 RVA，指向常量字符串。在这一步之前必须先完成 section 加载，不然取不到字符串。这里用 &lt;code>LoadLibraryA&lt;/code> 加载了 DLL 到内存。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着取 &lt;code>OriginalFirstThunk&lt;/code> 转为 &lt;code>IMAGE_THUNK_DATA&lt;/code> 指针，这就是 &lt;em>IDT&lt;/em> 了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再取 &lt;code>FirstThunk&lt;/code> 转为 &lt;code>IMAGE_THUNK_DATA&lt;/code> 指针，这是 &lt;em>IAT&lt;/em>，之后加载的函数地址会存放到这里。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后遍历 &lt;em>IDT&lt;/em> ，和遍历 &lt;code>import_descriptors&lt;/code> 时一样，注意 &lt;code>null terminated&lt;/code> 指的是最后一个元素用0填充。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function handle is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对每个 &lt;em>IDT&lt;/em> 元素，根据 &lt;em>IDT&lt;/em> 中保存的元素确定加载方式（字符串或者 &lt;em>ordinal&lt;/em>），调用 &lt;code>GetProcAddress&lt;/code> 加载后的地址存入 &lt;em>IAT&lt;/em> 。&lt;/p>
&lt;p>至此，&lt;em>IAT&lt;/em> 填充完成。&lt;/p>
&lt;p>完整代码如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;import module is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function handle is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x04-重定位">0x04 重定位&lt;/h2>
&lt;h3 id="41-重定位介绍">4.1 重定位介绍&lt;/h3>
&lt;p>回顾下前文我们做的事情：&lt;/p>
&lt;ol>
&lt;li>打开 calc.exe ，读取它的文件头。&lt;/li>
&lt;li>calc.exe 文件头中有一个 &lt;code>ImageBase&lt;/code> ，保存它倾向于使用的内存基址。&lt;/li>
&lt;li>calc.exe 启用了 ASLR 技术，所以理论上我们可以把它放到内存中任意位置。&lt;/li>
&lt;li>我们用 &lt;code>VirtualAlloc&lt;/code> 分配了内存，以&lt;code>NULL&lt;/code>作为首参数，让操作系统决定在哪儿分配，结果用作镜像基址。&lt;/li>
&lt;li>我们导入了必要的函数并把地址存放在 IAT 里。&lt;/li>
&lt;/ol>
&lt;p>然后现在，某时某刻，calc.exe 需要调用被导入的函数，用我们之前提过的方法。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-01/call_IAT.jpg"
width="543"
height="125"
srcset="https://nnnewb.github.io/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_480x0_resize_q75_box.jpg 480w, https://nnnewb.github.io/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="call_IAT"
class="gallery-image"
data-flex-grow="434"
data-flex-basis="1042px"
>&lt;/p>
&lt;p>仔细观察图中的 opcode：&lt;code>FF15&lt;/code>，紧跟着的是小端序的&lt;code>0x004b3038&lt;/code>，一个绝对地址（前文所述的VA），指向 &lt;em>IAT&lt;/em> 中 &lt;code>ShellExecuteW&lt;/code> 函数的地址。这对于一个预期自己会被映射到随机基址上的PE文件来说，是一个巨大的问题。&lt;/p>
&lt;p>比如说，我们把 calc.exe 放置在 &lt;code>0x00500000&lt;/code> 而不是文件头中”偏好“的镜像基址 &lt;code>0x00400000&lt;/code>，这条 &lt;code>call&lt;/code> 指令还保持不变的话，它会尝试去访问地址 &lt;code>0x004b3038&lt;/code> ——但这不是 calc.exe 的内存空间！那儿可能有任何东西，也可能什么也没有。&lt;/p>
&lt;p>我们这里看到的是，当我们移动了 PE 文件在内存中的基址，汇编代码也需要在运行时修补，来响应基址的变化。这就是重定位所关注的事情。&lt;/p>
&lt;h3 id="42-pe重定位结构">4.2 PE重定位结构&lt;/h3>
&lt;p>重定位结构比导入表简单得多。&lt;/p>
&lt;p>同样的，在 Data Directory 里有一个重定位表，结构和导入表类似，看图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/learning-packer-01/basereloc.png"
width="980"
height="793"
srcset="https://nnnewb.github.io/p/learning-packer-01/basereloc_hu4e0f540e5f0dc51830fd117d9f67457f_361570_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/learning-packer-01/basereloc_hu4e0f540e5f0dc51830fd117d9f67457f_361570_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20210927134554770"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;p>实际上每个&lt;code>IMAGE_BASE_RELOCATION&lt;/code>反应的就是一个 Windows 页（因为每个&lt;code>fixup&lt;/code>的偏移最大取值只有 12bits，0x1000，4KB）。&lt;/p>
&lt;p>其中每个 &lt;code>fixup&lt;/code> 都是一个 &lt;code>WORD&lt;/code> ，前 4bits 表示重定位类型，后 12bits 表示相对 &lt;code>IMAGE_BASE_RELOCATION.VirtualAddress&lt;/code> 的偏移值，偏移处需要应用重定位（就是加上真实基地址和PE头中基地址的差）。&lt;/p>
&lt;h3 id="43-修复重定位">4.3 修复重定位&lt;/h3>
&lt;p>修复重定位必须在PE头和Sections加载到内存之后，设置内存保护之前进行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在代码的开始，需要确认是不是有必要做重定位。如果基地址和PE文件头中给出的基地址相同，那就不用考虑重定位了。判断方式是拿真实基地址减去文件头里给出的基地址，非0则说明基地址需要重定位。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从RVA得到重定位表指针，然后就是遍历。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>SizeOfBlock&lt;/code>其实是包括&lt;code>IMAGE_BASE_RELOCATION&lt;/code>（Header）和属于这个块的所有 &lt;em>fixup&lt;/em> 组成的总大小，这里强制转换成 DWORD 后相加就得到了下一个 &lt;code>IMAGE_BASE_RELOCATION&lt;/code> 结构的地址。&lt;/p>
&lt;p>同样的，这也是前文所述的 &lt;code>null terminated array&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在循环体内，先计算出了元素总数（(总大小(字节) - &lt;code>IMAGE_BASE_RELOCATION&lt;/code> 结构大小(字节)) / 2 ），然后用指针算术取得第一个元素的地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>遍历所有元素。如上文所述的，把每个 &lt;code>fixup&lt;/code> 取高位4比特和低位12比特，计算出要修补的地址。再根据修补的类型来应用。&lt;/p>
&lt;p>参考&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#base-relocation-types" target="_blank" rel="noopener"
>微软文档的Base Relocation Types&lt;/a>。值得注意 type 就两个：&lt;code>IMAGE_REL_BASED_HIGHLOW&lt;/code> 和 &lt;code>IMAGE_REL_BASED_DIR64&lt;/code> ，分别是 32位和64位的重定向。其他16位重定向不多说了。&lt;/p>
&lt;p>完整代码如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x05-完整-loader-程序">0x05 完整 Loader 程序&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;missing path argument&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error opening file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Get file size : put pointer at the end
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_END&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// and read its position
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">file_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ftell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// put the pointer back at the beginning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_SET&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// allocate memory and read the whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// read whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n_read&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;reading error (%d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n_read&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// load the PE in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[+] Loading PE file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">entry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// call its entrypoint
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Set permission for the PE header to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;import module is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function handle is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x06-结论">0x06 结论&lt;/h2>
&lt;p>本文的背景知识基本是参考相关书籍，编写 Loader 的部分则来自 &lt;a class="link" href="https://bidouillesecurity.com/" target="_blank" rel="noopener"
>BidouilleSecurity&lt;/a> 。关于加壳脱壳原理，不乏形象直观的描述，也有很多脱壳相关文章，但适合萌新上手、能照着撸出代码的文章就很少，甚至可以说没地方找。抛开加壳脱壳这些特定领域话题不谈，程序的加载到执行本身对有好奇心的码农也是很值得一聊的内容。&lt;/p>
&lt;p>目前讨论的范围包括了如何加载并运行一个Windows程序（32位），大致流程如下：&lt;/p>
&lt;ul>
&lt;li>读取文件到内存&lt;/li>
&lt;li>映射文件头到基地址&lt;/li>
&lt;li>映射Sections&lt;/li>
&lt;li>填充IAT&lt;/li>
&lt;li>重定位&lt;/li>
&lt;li>跳转到入口点开始执行。&lt;/li>
&lt;/ul>
&lt;p>在对这些知识有了足够了解后，已经能写出基本的壳程序了。也许下一篇文章会谈。&lt;/p>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://bidouillesecurity.com/tutorial-writing-a-pe-packer-part-1/" target="_blank" rel="noopener"
>writing a PE packer - Part 1 : Load a PE in memory&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://bidouillesecurity.com/tutorial-writing-a-pe-packer-part-2/" target="_blank" rel="noopener"
>writing a PE packer - Part 2 : Imports and relocations&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://book.douban.com/subject/3652388/" target="_blank" rel="noopener"
>《程序员的自我修养——链接、装载与库》&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format" target="_blank" rel="noopener"
>微软文档 - PE Format&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>自娱自乐 crackme-03</title><link>https://nnnewb.github.io/p/crackme-03/</link><pubDate>Fri, 24 Sep 2021 16:58:00 +0800</pubDate><guid>https://nnnewb.github.io/p/crackme-03/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总得有个前言。&lt;/p>
&lt;p>一直玩命令行 crackme 看着就没啥意思，来点带界面的。依然是学习用，目标是把汇编和底层和内存这套东西读熟。这次是用 wxwidgets 做的简单 crackme，为了在 CrackME-02 基础上再增加点难度但又不至于太难，这次是 OTP 生成序列号，要求解出生成 OTP 的 SECRET。&lt;/p>
&lt;h2 id="源码">源码&lt;/h2>
&lt;p>越来越长了，贴上来没法看。现在托管到GitHub，包括前面的两个cm。&lt;/p>
&lt;p>前两个cm托管的代码编译参数有一点修改，可能造成结果和文章不一致，但大体是一样的，别在意。&lt;/p>
&lt;p>源码托管地址：&lt;a class="link" href="https://github.com/nnnewb/crackmes/" target="_blank" rel="noopener"
>github.com/nnnewb/crackmes&lt;/a>&lt;/p>
&lt;p>挑战一下C++代码开启优化的Hard模式。&lt;/p>
&lt;h2 id="观察">观察&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/01.png"
loading="lazy"
alt="image-20210923104439284"
>&lt;/p>
&lt;p>一个输入框，点击try it尝试。失败时提示Wrong，没有别的信息。&lt;/p>
&lt;h2 id="静态分析">静态分析&lt;/h2>
&lt;p>老规矩先静态分析一波，粗略扫一眼，捋一捋逻辑。用你喜欢的反汇编工具打开，我用Cutter先试试。&lt;/p>
&lt;p>因为是GUI程序，直接跳&lt;code>main&lt;/code>肯定是不行的。Win32 GUI程序的入口点（程序员视角）在&lt;code>WinMain&lt;/code>这个特殊函数，不过真拿Win32API手撸界面我是真没见过了，Win32 GUI程序设计也是玩的事件响应，找到主函数的意义不大。&lt;/p>
&lt;p>所以找关键跳这一步只能是从数据段找字符串查引用，或者调试器下合适的访问断点了。&lt;/p>
&lt;p>这里直接从数据段找到了字符串，定位到弹出错误对话框的逻辑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/02.png"
loading="lazy"
alt="image-20210923105415082"
>&lt;/p>
&lt;p>这里有个姿势点是&lt;code>__thiscall&lt;/code>，这是个微软自定义的调用约定，点这里看&lt;a class="link" href="https://docs.microsoft.com/zh-cn/cpp/cpp/thiscall?view=msvc-160" target="_blank" rel="noopener"
>微软的文档&lt;/a>。&lt;/p>
&lt;h3 id="__thiscall">__thiscall&lt;/h3>
&lt;p>&lt;code>__thiscall&lt;/code>的特点是被调用方清栈，&lt;code>this&lt;/code>指针通过&lt;code>ecx&lt;/code>寄存器传递，其他参数右至左压栈。对于可变长度参数（VAARG）的成员函数会特殊处理，采用&lt;code>cdecl&lt;/code>调用约定，&lt;code>this&lt;/code>指针最后压栈。&lt;/p>
&lt;p>这里简单读一下定位到的几句代码，分析下意图。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">
0x004064dc 68 34 e8 40 00 push str.Try_again ; 0x40e834
0x004064e1 8d 4d d0 lea ecx, [ebp - 0x30]
0x004064e4 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
0x004064ea 68 44 e8 40 00 push str.Wrong ; 0x40e844
0x004064ef 8d 4d b0 lea ecx, [ebp - 0x50]
0x004064f2 c6 45 fc 07 mov byte [ebp - 4], 7
0x004064f6 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
0x004064fc 6a ff push 0xffffffffffffffff
0x004064fe 6a ff push 0xffffffffffffffff
0x00406500 6a 00 push 0
0x00406502 6a 05 push 5 ; 5
0x00406504 8d 45 d0 lea eax, [ebp - 0x30]
0x00406507 c6 45 fc 08 mov byte [ebp - 4], 8
0x0040650b 50 push eax
0x0040650c 8d 45 b0 lea eax, [ebp - 0x50]
0x0040650f 50 push eax
0x00406510 ff 15 d4 3c 41 00 call dword [int __cdecl wxMessageBox(class wxString const &amp;amp;, class wxString const &amp;amp;, long int, class wxWindow *, int, int)] ; 0x413cd4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>反编译器对调用的第三方库的函数分析极大降低了肉眼判读的难度。可以看到前三步&lt;code>push&lt;/code>、&lt;code>lea ecx,...&lt;/code>、&lt;code>call&lt;/code> 是典型的 &lt;code>__thiscall&lt;/code> 调用，调用对象是&lt;code>wxString&lt;/code>的构造器，所以可以知道&lt;code>ecx&lt;/code>地址保存的是一个&lt;code>wxString&lt;/code>对象的指针。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">0x004064ea 68 44 e8 40 00 push str.Wrong ; 0x40e844
0x004064ef 8d 4d b0 lea ecx, [ebp - 0x50]
0x004064f2 c6 45 fc 07 mov byte [ebp - 4], 7
0x004064f6 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是另一个&lt;code>wxString&lt;/code>的构造。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">0x004064fc 6a ff push 0xffffffffffffffff
0x004064fe 6a ff push 0xffffffffffffffff
0x00406500 6a 00 push 0
0x00406502 6a 05 push 5 ; 5
0x00406504 8d 45 d0 lea eax, [ebp - 0x30]
0x00406507 c6 45 fc 08 mov byte [ebp - 4], 8
0x0040650b 50 push eax
0x0040650c 8d 45 b0 lea eax, [ebp - 0x50]
0x0040650f 50 push eax
0x00406510 ff 15 d4 3c 41 00 call dword [int __cdecl wxMessageBox(class wxString const &amp;amp;, class wxString const &amp;amp;, long int, class wxWindow *, int, int)] ; 0x413cd4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>连续推入多个参数后，调用了&lt;code>wxMessageBox&lt;/code>函数。我们知道&lt;code>[ebp-0x30]&lt;/code>是&lt;code>Try again&lt;/code>，&lt;code>[ebp-0x50]&lt;/code> 是 &lt;code>Wrong!&lt;/code>，这个调用用伪代码表示就是 &lt;code>wxMessageBox(&amp;quot;Wrong!&amp;quot;, &amp;quot;Try again!&amp;quot;, 5, 0, -1, -1)&lt;/code>。注意忽略中间的&lt;code>mov byte [ebp - 4], 8&lt;/code>，&lt;code>ebp-4&lt;/code>这个偏移显然不大可能是参数。&lt;/p>
&lt;h3 id="关键跳">关键跳&lt;/h3>
&lt;p>回到这段代码的开头，顺着界面上的绿色箭头找到关键跳。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/03.png"
loading="lazy"
alt="image-20210923111554787"
>&lt;/p>
&lt;p>一个&lt;code>je&lt;/code>跳转，&lt;code>je&lt;/code>指令检查&lt;code>ZF&lt;/code>，向上一行就是&lt;code>test&lt;/code>，&lt;code>test bl,bl&lt;/code>自己对自己逻辑与，其实就是求&lt;code>bl&lt;/code>是不是0。&lt;/p>
&lt;p>bl又来自前面的&lt;code>mov bl,al&lt;/code>，&lt;code>al&lt;/code>寄存器是&lt;code>eax&lt;/code>寄存器的低8位，再者大家也知道&lt;code>eax&lt;/code>寄存器是函数返回值保存的寄存器，而离这个&lt;code>mov&lt;/code>指令最近的&lt;code>call&lt;/code>就是截图上方的&lt;code>IsSameAs&lt;/code>函数了。&lt;/p>
&lt;p>到了这一步，改指令跳过验证已经接近成功了，但这要是做 keygen 的话还不行。&lt;/p>
&lt;p>继续往回翻，寻找密码生成的代码。&lt;/p>
&lt;h3 id="寻找密码生成算法">寻找密码生成算法&lt;/h3>
&lt;p>先一路回到关键跳所处的代码块顶部，挨个往下看有哪些函数调用。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/04.png"
loading="lazy"
alt="image-20210923113330184"
>&lt;/p>
&lt;p>还是那句话，感谢分析出了库函数，不然一堆未知函数看得满头雾水。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>调用是 &lt;code>wxString.AsWChar(void)&lt;/code>，顾名思义是取宽字符，返回指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用是&lt;code>wxString.DoFormatWchar(wchar_t*)&lt;/code>，查询文档可知是个类似&lt;code>sprintf&lt;/code>的字符串格式化函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用是析构函数，怀疑上面的两个调用其实是内联了什么wxwidgets库的代码。因为直觉告诉我如果还没离开作用域，编译器应该不会这么着急插入析构函数调用，这听起来就没什么好处，还违背码农直觉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数就比较迷惑了，一路看上去的话会发现这个偏移值经过了多次计算，目前看不出用意，但还挺可疑的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数顾名思义，比较字符串相等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>又是析构函数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>重点看字符串比较函数的参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040646c&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="no">a&lt;/span> &lt;span class="mi">01&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">; 1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x0040646e&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x70&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406471&lt;/span> &lt;span class="no">c6&lt;/span> &lt;span class="mi">45&lt;/span> &lt;span class="no">fc&lt;/span> &lt;span class="mi">04&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406475&lt;/span> &lt;span class="mi">51&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406476&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">b&lt;/span> &lt;span class="no">c8&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406478&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">d4&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">public&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">bool&lt;/span> &lt;span class="no">__thiscall&lt;/span> &lt;span class="no">wxString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">IsSameAs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">class&lt;/span> &lt;span class="no">wxString&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="err">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">bool&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="no">const&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 0x4133d4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把&lt;code>eax&lt;/code>当成了&lt;code>this&lt;/code>，暂且不看栈上的&lt;code>ebp-0x70&lt;/code>，看到&lt;code>eax&lt;/code>立刻就发现是来自第四个比较迷惑的函数调用，实锤这函数就是生成密码的函数。&lt;/p>
&lt;h2 id="动态调试">动态调试&lt;/h2>
&lt;p>水平有限，静态分析很快遇到了瓶颈，找不出这个偏移值算出来的函数到底在哪儿。&lt;/p>
&lt;p>于是启动调试器，先跟到我们定位到的这个特殊函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/05.png"
loading="lazy"
alt="image-20210923140108796"
>&lt;/p>
&lt;p>惊喜地发现胡乱分析出现了错误，&lt;code>eax+0x40&lt;/code>其实是获取输入框值的函数。。所以另一个参数，&lt;code>ebp-0x70&lt;/code>才是密码。&lt;/p>
&lt;p>往回看&lt;code>ebp-0x70&lt;/code>在&lt;code>DoFormatWchar&lt;/code>被当参数传递了进去，要注意的是&lt;code>DoFormatWchar&lt;/code>是一个有变长参数的函数，这意味着你没法得知传了几个参数（前面push的内容不一定是当参数传了），分析更困难。&lt;/p>
&lt;p>看一下&lt;code>DoFormatWchar&lt;/code>这段汇编。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040642c&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">70&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x90&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406432&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">e8&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">private&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">wchar_t&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="no">__thiscall&lt;/span> &lt;span class="no">wxFormatString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">AsWChar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">void&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="c">; 0x4133e8
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00406438&lt;/span> &lt;span class="mi">56&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">esi&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406439&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643a&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">45&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x70&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643d&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643e&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">d0&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">private&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">static&lt;/span> &lt;span class="no">class&lt;/span> &lt;span class="no">wxString&lt;/span> &lt;span class="no">__cdecl&lt;/span> &lt;span class="no">wxString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">DoFormatWchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">wchar_t&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="p">*)]&lt;/span> &lt;span class="c">; 0x4133d0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一共推了三个东西入栈，esi、eax（上一个调用的返回值）、还有&lt;code>[ebp-0x70]&lt;/code>。&lt;/p>
&lt;p>继续调试器跟一遍看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/06.png"
loading="lazy"
alt="image-20210923142010900"
>&lt;/p>
&lt;p>&lt;code>esi&lt;/code>的值比较怪，先忽略。&lt;/p>
&lt;p>&lt;code>eax&lt;/code>比较清楚，宽字符串&lt;code>%06d&lt;/code>，按压栈顺序，&lt;code>esi&lt;/code>的值是紧跟在格式化字符串后面的参数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/07.png"
loading="lazy"
alt="image-20210923142347785"
>&lt;/p>
&lt;p>最后压栈的eax，也就是ebp-0x70的地址，用伪代码表示就是：&lt;code>DoFormatWchar(&amp;amp;var_70, L&amp;quot;%06d&amp;quot;, 0x000F18D8)&lt;/code>。PS：有点怪，函数签名最左侧是format也就是格式化字符串，最后压栈这个ebp-0x70就有点莫名其妙。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/08.png"
loading="lazy"
alt="image-20210923143534148"
>&lt;/p>
&lt;p>不过用调试器单步步过后就知道用途了，和猜测的一样，存放的是格式化的结果，也就是正确的密码。&lt;/p>
&lt;p>既然如此，往回找esi是哪儿赋值的，因为inline了一大堆东西，Cutter连函数都认不出来了，控制流视图也挂了。。一直往上翻，找到&lt;code>0xcc&lt;/code>或者&lt;code>push ebp; mov ebp, esp&lt;/code>为止。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/09.png"
loading="lazy"
alt="image-20210923145922049"
>&lt;/p>
&lt;p>右键选择在此处定义函数，随便给个名字，然后等Cutter分析好函数体。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/10.png"
loading="lazy"
alt="image-20210923150100196"
>&lt;/p>
&lt;p>这样一来至少图形视图就能看了。粗略扫一眼，在底下找到&lt;code>IsSameAs&lt;/code>这个调用，再往回翻哪儿动了&lt;code>esi&lt;/code>这个寄存器，很快找到这两段。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/11.png"
loading="lazy"
alt="image-20210923150438821"
>&lt;/p>
&lt;p>有点杂，先看看。还是粗略按意图把指令分下段。&lt;code>esi&lt;/code>来源涉及&lt;code>eax&lt;/code>和&lt;code>ecx&lt;/code>，一路跟着赋值路径往回翻到第一个块，找到&lt;code>ecx&lt;/code>的赋值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004062f1&lt;/span> &lt;span class="no">e8&lt;/span> &lt;span class="mi">68&lt;/span> &lt;span class="no">b3&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.0040165e&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004062f6&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">b&lt;/span> &lt;span class="mi">08&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个未知函数，ctrl+左键点击跟进去后发现疑似是 libcrypto 内联的函数，调用了 HMAC-SHA1 算法。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/12.png"
loading="lazy"
alt="image-20210924092624224"
>&lt;/p>
&lt;p>先做个标记，猜测假设这个函数正确返回（下面的je跳转走到最后一个块），那返回结果应该是HMAC-SHA1的结果。这里通过调试器单步验证。&lt;/p>
&lt;p>因为 ASLR 的缘故，可执行文件 .text 段映射的地址不是 0x00401000，调试器没法直接转到静态分析工具中的地址，ASLR 确实折磨人&amp;hellip;&lt;/p>
&lt;p>anyway&amp;hellip;&lt;/p>
&lt;p>我投翔，特立独行是没好结果的，跑去下载了一个 IDA Free ，打开x32dbg确认 .text 段映射的基址后再到 IDA 的菜单 &lt;code>Edit&lt;/code> -&amp;gt; &lt;code>Segments&lt;/code> -&amp;gt; &lt;code>rebase program ...&lt;/code> 重新设定镜像基址，这样在反汇编界面看到的地址就能和调试器对上了。缺陷是每次打开调试器都要对一次镜像基址，比较麻烦。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/image-20210924154631893.png"
loading="lazy"
alt="image-20210924154631893"
>&lt;/p>
&lt;p>对好镜像基址后，把之前想调试的函数调用地址找到（0x003B62F1），下个断点，看调用后的&lt;code>eax&lt;/code>值，发现并不像纯c编译出来的结果，&lt;code>eax&lt;/code>并没有什么卵用。&lt;/p>
&lt;p>稍微往上瞟了一眼，很容易看到一个&lt;code>mov ecx,esi&lt;/code>，但没什么卵用。&lt;/p>
&lt;p>碰壁几次后决定跟进这个函数看看。无果。恼，作弊之（读过RFC可能注意到几个特殊常量，比如取哈希结果下标19，与0xf，作为偏移值向后再取4字节，作为bin code。跳过这个函数调用，直接看接下来的内容的话，会发现哈希值其实就存在&lt;code>ecx&lt;/code>保存的地址上了。）&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-03/image-20210924162043275.png"
loading="lazy"
alt="image-20210924162043275"
>&lt;/p>
&lt;p>只是这里的HMAC_SHA1值因为不是我们熟悉的ASCII表示，所以一眼有点难看出来。&lt;/p>
&lt;p>那么直接跳过上面不清不楚的地方，直接看取哈希后的做法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6307&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B630B&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">Fh&lt;/span> &lt;span class="c">; 取 hash[19] &amp;amp; 0xf 作为初始偏移
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B630E&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6310&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 取偏移处第一个字节，无符号
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6313&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 取偏移处第二个字节，无符号
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6317&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="no">Fh&lt;/span> &lt;span class="c">; 偏移处第一个字节 &amp;amp; 0x7f ，确保符号位归零
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B631A&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c">; 第一个字节左移8位后 | 第二个字节，就是把四个字节按顺序填进esi
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B631D&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B631F&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6323&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6326&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6328&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B632C&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>取得的就是4字节正整数了，按RFC的例子，接下来应该取模得到最大6位整数。看下一块汇编。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6331&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Block&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6334&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">431&lt;/span>&lt;span class="no">BDE83h&lt;/span> &lt;span class="c">; magic ?
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6339&lt;/span> &lt;span class="no">imul&lt;/span> &lt;span class="no">esi&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B633B&lt;/span> &lt;span class="no">sar&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B633E&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6340&lt;/span> &lt;span class="no">shr&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">Fh&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6343&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6345&lt;/span> &lt;span class="no">imul&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">F4240h&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634B&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634D&lt;/span> &lt;span class="no">test&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634F&lt;/span> &lt;span class="no">jz&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">loc_3B638F&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>431BDE83h&lt;/code> 这个魔术常量吓到我了。搜了一下找到篇&lt;a class="link" href="https://bbs.pediy.com/thread-100189.htm" target="_blank" rel="noopener"
>看雪的帖子&lt;/a>，看起来是编译器把一句&lt;code>%1000000&lt;/code>取模给编译成了上面这一串满是魔数的汇编。尝试跟到 &lt;code>sub esi,eax&lt;/code> 后，&lt;code>esi&lt;/code> 寄存器的结果的确变成了6位以内的整数。&lt;/p>
&lt;p>这玩意儿有什么特征吗？总不至于多做几次取模，生成的汇编就完全没法看了吧。。。&lt;/p>
&lt;h2 id="keygen">keygen？&lt;/h2>
&lt;p>实力有限，尽管亲手写下的C++代码真的很简单，但编译后的结果成了无法承受之重&amp;hellip;&lt;/p>
&lt;p>上面分析的内容，其实仔细对着RFC推敲（首先，你得知道是照着RFC写的，不然就多读几遍汇编&amp;hellip;），才能很勉强得到个粗糙的算法，至于能不能写出 keygen，我没啥信心。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>很难。&lt;/p>
&lt;p>如果说前面的 C 代码是小游戏的话，那 cm03 就是地球online。开启优化的C++无间地狱。&lt;/p>
&lt;p>完全溃败。&lt;/p></description></item><item><title>自娱自乐 crackme-02</title><link>https://nnnewb.github.io/p/crackme-02/</link><pubDate>Wed, 15 Sep 2021 15:43:00 +0800</pubDate><guid>https://nnnewb.github.io/p/crackme-02/</guid><description>&lt;h2 id="得有个前言">得有个前言&lt;/h2>
&lt;p>总之上一个 crackme-01 还过得去，稍微加强一点，把密码隐藏起来，不要随便被看到。&lt;/p>
&lt;h2 id="0x01-源码">0x01 源码&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">realloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">slen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strnlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">slen&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">strnlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 初始化固定8字节计算密钥的空间
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">input_buf_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">input_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 用用户输入替换初始化的数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy_s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 异或处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 初始化 Hex 输出
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">output_buf_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">17&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">output_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output_buf_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 转为可读字符串
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">output_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">output_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">output_buf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">serial&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">serial_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linesize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">username_len&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;username less than 8 letter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">username_len&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;serial:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">serial_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">serial_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linesize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">serial_len&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;serial has 16 letters&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">correct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strncmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">correct&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">correct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Good job!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wrong pwd!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">correct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译方式是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">clang main.c -o cm02-easy.exe -Wall -m32 -O0
clang main.c -o cm02-normal.exe -Wall -m32 -O1
clang main.c -o cm02-hard.exe -Wall -m32 -O2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x02-观察">0x02 观察&lt;/h2>
&lt;p>启动后观察行为（不截图了。）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">weakptr in cm02 ❯ .\cm02-easy.exe
username:abc
serial:123456
serial 长度为16
username:abc
serial:123456789012345
wrong pwd!
username:
serial:
serial 长度为16
username:abc
serial:aaaaaaaaaaaaaaa
wrong pwd!
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这次的目标是：&lt;/p>
&lt;ol>
&lt;li>得到某个用户名对应的序列号（&lt;code>serial&lt;/code>）。&lt;/li>
&lt;li>破解，总是正确或对任何输入都提示正确。&lt;/li>
&lt;li>注册机。&lt;/li>
&lt;/ol>
&lt;h2 id="0x03-静态分析---easy">0x03 静态分析 - easy&lt;/h2>
&lt;h3 id="31-主循环">3.1 主循环&lt;/h3>
&lt;p>在公司没IDA，用 &lt;a class="link" href="image/crackme-02/https://cutter.re/" >Cutter&lt;/a> 打开，在上方输入框输入 &lt;code>main&lt;/code> 跳转到 &lt;code>main&lt;/code> 函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-1.png"
loading="lazy"
alt="image-20210914114426600"
>&lt;/p>
&lt;p>然后点击 &lt;em>图表（main）&lt;/em> 进入类似 IDA 的控制流视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-2.png"
loading="lazy"
alt="image-20210914114547128"
>&lt;/p>
&lt;p>之后就能看到下面的控制流了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-3.png"
loading="lazy"
>&lt;/p>
&lt;p>easy难度下没有开启任何编译器优化，控制流和原始代码能直接对应上。瞧着困难很多对吧？&lt;/p>
&lt;p>先简单扫一眼，会发现很多分支直接跳回了&lt;code>0x0040139d&lt;/code>，也就是从上往下数第二个代码块，基本每个跳转都是下一个块或跳回这个块。按照 &lt;a class="link" href="https://nnnewb.github.io/blog/p/crackme-01/" target="_blank" rel="noopener"
>cm01&lt;/a>的经验，我们先找到关键的一跳。可以直接搜索字符串引用（&lt;code>wrong pwd!&lt;/code>），也可以逐个代码块看下去。&lt;/p>
&lt;p>很快，右下角的关键跳出现在眼前。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-4.png"
loading="lazy"
alt="image-20210914152834262"
>&lt;/p>
&lt;p>接着回头看跳转条件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-5.png"
loading="lazy"
alt="image-20210914153728179"
>&lt;/p>
&lt;p>虽然没有名字，但&lt;code>fcn.00403ef4&lt;/code> 是老熟人了。三个参数，&lt;code>ecx&lt;/code>、&lt;code>eax&lt;/code>、&lt;code>0x10&lt;/code>，返回结果和&lt;code>0&lt;/code>做比较，&lt;code>jne&lt;/code>条件跳转。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cmp&lt;/code>指令，操作数相减（&lt;code>dest&lt;/code>-&lt;code>src&lt;/code>），结果存入标志位 &lt;code>SF&lt;/code>和&lt;code>ZF&lt;/code>。
&lt;ul>
&lt;li>结果是负数（&lt;code>dest&lt;/code>&amp;lt;&lt;code>src&lt;/code>），&lt;code>SF&lt;/code>也就是结果符号位设置为1。&lt;/li>
&lt;li>结果是正数（&lt;code>dest&lt;/code>&amp;gt;&lt;code>src&lt;/code>），&lt;code>SF&lt;/code>也就是结果符号位设置为0。&lt;/li>
&lt;li>结果是0（&lt;code>dest&lt;/code>=&lt;code>src&lt;/code>），&lt;code>ZF&lt;/code>设置为1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>jne&lt;/code>或&lt;code>jnz&lt;/code>指令，非零跳转。&lt;code>ZF&lt;/code>标志位为&lt;code>1&lt;/code>时跳转。&lt;/li>
&lt;/ul>
&lt;p>猜测这个函数应该是&lt;code>strncmp&lt;/code>。继续往回看参数是怎么来的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-6.png"
loading="lazy"
alt="image-20210914155544252"
>&lt;/p>
&lt;p>&lt;code>eax&lt;/code>来自&lt;code>sub.02x_40298c&lt;/code>这个函数，后面两个脱裤子放屁的&lt;code>mov&lt;/code>忽略。&lt;code>ecx&lt;/code>则来来自&lt;code>mov ecx,dword [ebp-10h]&lt;/code>这一行。&lt;/p>
&lt;p>先不着急分析函数，继续往回找，找到&lt;code>[ebp-10h]&lt;/code>的来源。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-7.png"
loading="lazy"
alt="image-20210914161814604"
>&lt;/p>
&lt;p>在入口点附近，看到&lt;code>[ebp-10]&lt;/code>被初始化成了0。&lt;/p>
&lt;p>因为没有很明确的路径，手动计算栈上偏移又非常麻烦，这里本应该掏出调试器——但出于学习练手的目的，还是先尝试计算下。首先回顾下简化的栈内存布局，从上往下增长，如图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-8.png"
loading="lazy"
alt="stack-layout"
>&lt;/p>
&lt;p>接下来从&lt;code>mov ebp,esp&lt;/code>开始，往下列出所有函数调用，捋一捋逻辑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-9.png"
loading="lazy"
alt="image-20210914214920437"
>&lt;/p>
&lt;p>第一个框，&lt;code>[esp+2ch+Ix]&lt;/code> 计算结果是 &lt;code>[esp]&lt;/code>，也就是栈顶，栈顶设置为字符串 &lt;code>username:&lt;/code>，接着调用一个未知函数。从参数判断我们先认为是一个输出字符串的函数。&lt;/p>
&lt;p>再看第二个框，&lt;code>acrt_iob_func&lt;/code>，百度一下就会发现，&lt;code>__acrt_iob_func&lt;/code>函数是定义于 c 运行库里的函数，作用是返回 &lt;code>stdin/stdout/stderr&lt;/code> 。栈顶设置为0，所以获得的是 &lt;code>stdin&lt;/code>。&lt;/p>
&lt;p>再看第三个框，&lt;code>edx&lt;/code>和&lt;code>ecx&lt;/code>赋值为栈上两个变量的地址，再为参数。按顺序就是&lt;code>f(edx,ecx,stdin)&lt;/code>。暂时不明。函数返回值被赋值回了&lt;code>[ebp-18h]&lt;/code>。&lt;/p>
&lt;p>第四个框，从第三个框得到的返回值被当参数传给一个未知函数。&lt;code>f([ebp-8h], [ebp-18h])&lt;/code>，返回值被赋值回 &lt;code>[ebp-0Ch]&lt;/code>。&lt;/p>
&lt;p>结合最后的 &lt;code>cmp&lt;/code> 和 &lt;code>jbe&lt;/code> 指令分析，人肉反编译后用伪代码表示，就是下面这样。&lt;code>jbe&lt;/code>指令只在&lt;code>cmp&lt;/code>左操作数小于等于右操作数时执行跳转（&lt;code>CF&lt;/code>标志位和&lt;code>ZF&lt;/code>标志位其中一个为1时）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">var&lt;/span> &lt;span class="n">var_8&lt;/span> &lt;span class="c1"># 偏移值 ebp-8h&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_0C&lt;/span> &lt;span class="c1"># 偏移值 ebp-0Ch&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_18&lt;/span> &lt;span class="c1"># 偏移值 ebp-18h&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_0c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_0c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_18&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">var_0c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># jbe 跳转执行&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-10.png"
loading="lazy"
alt="image-20210914223919137"
>&lt;/p>
&lt;p>可以看出，当 &lt;code>var_0c&lt;/code> 小于 8 时，提示 &lt;code>username less than 8 letter&lt;/code> 。因此可以确定 &lt;code>[ebp-0Ch]&lt;/code> 这个变量就是 &lt;code>username&lt;/code> 字符串的长度，上一个函数会计算字符串长度返回。我们再根据这个发现修改下伪代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">var&lt;/span> &lt;span class="n">var_8&lt;/span> &lt;span class="c1"># 偏移值 ebp-8h&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="c1"># 偏移值 ebp-0Ch&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_18&lt;/span> &lt;span class="c1"># 偏移值 ebp-18h&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># var_8 可能是 username 指针&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_18&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 计算字符串长度&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># jbe 跳转执行&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># jmp 到开头&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个未知函数看起来已经呼之欲出了，&lt;code>stdin&lt;/code>和&lt;code>&amp;amp;username_len&lt;/code>作为参数，&lt;code>var_8&lt;/code> 有极大可能就是&lt;code>username&lt;/code>字符串指针。不过在进入调试器前，还不能马上下结论，继续看正确跳转的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">cmp&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-0Ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">jnz&lt;/span> &lt;span class="no">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这次是比较用户名长度和0，非0跳转。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-11.png"
loading="lazy"
alt="image-20210914224625891"
>&lt;/p>
&lt;p>可以看到为零时，经过一个未知函数 &lt;code>sub_4036FC(var_8)&lt;/code> 后，跳回开头。&lt;/p>
&lt;p>继续看正确流程，&lt;code>jmp $+5&lt;/code> ，&lt;code>$&lt;/code> 表示当前正在执行的代码在代码段内的偏移量，+5就是从当前代码开始往后跳过5个字节，我们直接看IDA分析好的跳转位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-12.png"
loading="lazy"
alt="image-20210914225052452"
>&lt;/p>
&lt;p>又是非常熟悉的代码，和读取 &lt;code>username&lt;/code> 的分析方式相同，以相同的顺序调用相同的函数，可以得到&lt;code>var_14&lt;/code>是&lt;code>serial_len&lt;/code>，&lt;code>Str1&lt;/code>可能是&lt;code>serial&lt;/code>字符串指针。不做重复分析，继续往下看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-13.png"
loading="lazy"
alt="image-20210914225322787"
>&lt;/p>
&lt;p>右边的代码块是关于长度的判断，分析方法不再重复。左侧代码就是我们的关键跳转了，其中出现两个函数调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Block&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; void *
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; size_t
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">sub_401250&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_1C&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>var_c&lt;/code>先前被判断是&lt;code>username_len&lt;/code>，&lt;code>Block&lt;/code>就是&lt;code>var_8&lt;/code>，先前被怀疑是用户键入的用户名字符串指针。未知函数的返回值保存在 &lt;code>[ebp-1ch]&lt;/code>中。&lt;/p>
&lt;p>这个&lt;code>1c&lt;/code>在随后的代码中立刻被用到。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_1C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; Str2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">MaxCount&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; MaxCount
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">_strncmp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_20&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Str1&lt;/code>在&lt;code>serial&lt;/code>输入这一步被怀疑是用户输入的序列号字符串指针，它和上一个函数调用返回的&lt;code>var_1c&lt;/code>被作为参数传递给&lt;code>strncmp&lt;/code>，字符串长度最大16字节。由此可见，&lt;code>var_1c&lt;/code>基本可以确定是正确序列号的指针，之前的未知函数可能就是生成序列号的函数。&lt;/p>
&lt;p>下一步分析序列号生成函数。&lt;/p>
&lt;h3 id="32-生成序列号">3.2 生成序列号&lt;/h3>
&lt;p>先看下控制流全览，能依稀分辨出三个循环。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-14.png"
loading="lazy"
alt="generate"
>&lt;/p>
&lt;p>自动分析出的变量表&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">; var uint32_t var_1ch @ ebp-0x1c
&lt;/span>&lt;span class="c">; var int32_t var_18h @ ebp-0x18
&lt;/span>&lt;span class="c">; var int32_t var_14h @ ebp-0x14
&lt;/span>&lt;span class="c">; var uint32_t var_10h @ ebp-0x10
&lt;/span>&lt;span class="c">; var uint32_t var_ch @ ebp-0xc
&lt;/span>&lt;span class="c">; var int32_t var_8h @ ebp-0x8
&lt;/span>&lt;span class="c">; var int32_t var_4h @ ebp-0x4
&lt;/span>&lt;span class="c">; arg uint32_t arg_8h @ ebp+0x8
&lt;/span>&lt;span class="c">; arg int32_t arg_ch @ ebp+0xc
&lt;/span>&lt;span class="c">; var int32_t var_sp_4h @ esp+0x4
&lt;/span>&lt;span class="c">; var int32_t var_sp_8h @ esp+0x8
&lt;/span>&lt;span class="c">; var int32_t var_sp_ch @ esp+0xc
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先看循环外的代码，简单按用途划一下分隔线。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f0&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f1&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f3&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x2c&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f6&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071fc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407203&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040720a&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00401302&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040720f&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407212&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>开头是惯例的两句栈帧准备动作，随后开辟 0x2c 大小的栈空间。&lt;/p>
&lt;p>两个没用的 &lt;code>mov eax,...&lt;/code>，之后是&lt;code>[ebp-4h]&lt;/code>设置为8，再把8作为参数调用了一个未知函数，返回值赋值给&lt;code>[ebp-8h]&lt;/code>，再初始化&lt;code>[ebp-ch]&lt;/code>为 0。伪代码表示就是下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h, ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">var_ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后是一个条件跳转。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407219&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040721d&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x407242&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>学习下&lt;code>jae&lt;/code>指令。&lt;code>jae&lt;/code>指令和&lt;code>jnc&lt;/code>指令相同，&lt;code>CF=0&lt;/code>则跳转。&lt;code>jae&lt;/code> 可以看作 &lt;em>Jump if above or equals&lt;/em>。上一句 &lt;code>cmp&lt;/code> 计算 &lt;code>var_ch - 0x8&lt;/code> ，对相关标志位赋值。&lt;code>jae&lt;/code>指令根据&lt;code>CF&lt;/code>标志位判断，由于&lt;code>cmp&lt;/code>指令是减法，所以判断的是减法中有没有出现 &lt;em>借位&lt;/em> 。&lt;/p>
&lt;p>简单的描述就是，&lt;code>cmp ax, bx&lt;/code>，如果&lt;code>ax &amp;lt; bx&lt;/code> 则 &lt;code>CF=1&lt;/code>，如果 &lt;code>ax &amp;gt;= bx&lt;/code> 则 &lt;code>CF=0&lt;/code>。&lt;/p>
&lt;p>因为我们知道 &lt;code>var_ch&lt;/code> 刚被初始化成了0，不成立，继续看不成立的分支。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407223&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407226&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x52&lt;/span> &lt;span class="c">; 82
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407229&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">al&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040722b&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040722e&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407231&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">dl&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407234&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407237&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040723a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040723d&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x407219&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把&lt;code>var_ch&lt;/code>移入寄存器&lt;code>eax&lt;/code>后，加上&lt;code>0x52&lt;/code>，又移动&lt;code>al&lt;/code>到&lt;code>dl&lt;/code>。后续&lt;code>eax&lt;/code>被用作别的用途，这一番操作其实就是给&lt;code>dl&lt;/code>赋值了一个&lt;code>(int16_t)0x52+var_ch&lt;/code>。&lt;/p>
&lt;p>随后把&lt;code>var_8h&lt;/code>和&lt;code>var_ch&lt;/code>相加后的地址赋值 &lt;code>dl&lt;/code>，也就是&lt;code>0x52&lt;/code>。&lt;/p>
&lt;p>接着&lt;code>var_ch&lt;/code>自增1，跳回 &lt;code>jae&lt;/code>判断前的 &lt;code>cmp&lt;/code>，形成循环，我们用伪代码表示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h, ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">var_ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从结构上看，是一个典型的 for 循环。 &lt;code>var_8h&lt;/code> 是一个未知函数返回的指针。我们稍微改下伪代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着继续看循环结束后的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407242&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp+ch 函数右往左数第二个入参
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407245&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_8h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp+8h 函数右往左数第一个入参
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407248&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp-8h
&lt;/span>&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x0040724b&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040724e&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407256&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040725a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040725e&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00407310&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407263&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从之前分析主循环的代码，我们可以发现 &lt;code>arg_8h&lt;/code> 其实是用户名字符串指针，&lt;code>arg_ch&lt;/code>是用户名字符串长度。&lt;/p>
&lt;p>接着这两个入参，和 &lt;code>var_8h&lt;/code>，也就是之前得到指针，传入一个未知函数，随后再初始化了一个变量 &lt;code>var_10h&lt;/code>。&lt;/p>
&lt;p>伪代码如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着又是一个条件跳转。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040726a&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040726e&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x407292&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>和先前的循环相同，不作重复分析，直接进入循环体。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407274&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407277&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040727a&lt;/span> &lt;span class="no">movsx&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040727e&lt;/span> &lt;span class="no">xor&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x25&lt;/span> &lt;span class="c">; 37
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407281&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">dl&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407284&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407287&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040728a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040728d&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x40726a&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前两条指令没什么可说的，&lt;code>movsx&lt;/code>还是第一次见，学习下。&lt;/p>
&lt;p>&lt;code>movsx&lt;/code> 从来源取数，不足的部分用来源的符号位填充，这里取的是&lt;code>var_8h[var_10h]&lt;/code>，一字节，到 &lt;code>edx&lt;/code> 寄存器。&lt;code>movsx&lt;/code>的好处是可以保留符号位，加载不同大小的数据时（比如来源是 &lt;code>word&lt;/code>，目标是 &lt;code>dword&lt;/code>），如果来源是负数，则填充符号位可以正确表示补码形式表示的负数。&lt;/p>
&lt;p>从&lt;code>var_8h[var_10h]&lt;/code>取数移入&lt;code>edx&lt;/code> 后，之后是一句简单的 &lt;code>xor&lt;/code>，逻辑异或运算。之后将&lt;code>xor&lt;/code>运算结果取低位1字节（&lt;code>dl&lt;/code>寄存器）移回&lt;code>var_8h[var_10h]&lt;/code>。&lt;/p>
&lt;p>之后自增，跳转循环，和之前的循环一样。将分析过的部分用伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>继续看循环结束后的动作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407292&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_14h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x11&lt;/span> &lt;span class="c">; 17
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407299&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x11&lt;/span> &lt;span class="c">; [0x11:4]=-1 ; 17
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x004072a0&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00401302&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072a5&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072a8&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>调用一个函数，返回值赋值给&lt;code>var_18h&lt;/code>，同时初始化&lt;code>var_1ch&lt;/code>为 0。伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来又是一个循环。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072af&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072b3&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x4072f2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不重复分析，进入循环体。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072b9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072bc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072bf&lt;/span> &lt;span class="no">movsx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c3&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c6&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c9&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072cc&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ce&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">str.02x&lt;/span> &lt;span class="c">; 0x45de50，内容是 %02x
&lt;/span>&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x004072d4&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072d7&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072db&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072df&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00403dcd&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072e4&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072e7&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ea&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ed&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x4072af&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依然是从 &lt;code>var_8h[var_1ch]&lt;/code> 取数，之后把 &lt;code>var_18h&lt;/code> 和 &lt;code>var_1ch&lt;/code> 也取数，分别放到 &lt;code>eax&lt;/code>、&lt;code>edx&lt;/code>、&lt;code>ecx&lt;/code>。&lt;/p>
&lt;p>接着是一个没见过的命令，&lt;code>shl&lt;/code>，学习下。&lt;/p>
&lt;p>&lt;code>shl&lt;/code>是逻辑左移，和 c 中的 &lt;code>&amp;lt;&amp;lt;&lt;/code> 运算符一样，两个操作数，命令格式&lt;code>shl 寄存器,立即数&lt;/code>。&lt;/p>
&lt;p>这里做的就是 &lt;code>ecx&lt;/code>，也就是 &lt;code>var_1ch&lt;/code> 的值左移1位，众所周知左移n位可以看作乘上2^n^ ，所以这句 &lt;code>shl&lt;/code> 其实就是 &lt;code>var_1ch*2&lt;/code>。左移后结果加到了&lt;code>edx&lt;/code>，&lt;code>edx&lt;/code>是&lt;code>var_18h&lt;/code>。&lt;/p>
&lt;p>之后是一个&lt;code>lea&lt;/code>，加载地址，内容是常量字符串 &lt;code>%02x&lt;/code>，看起来是一个 c 格式化字符串。&lt;/p>
&lt;p>接着压栈传参，调用未知函数，结果忽略。伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>随后是变量自增，跳转回循环开头。&lt;/p>
&lt;p>我们把分析出来的伪代码再合并下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后是循环结束后的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f2&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f5&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="mi">0x10&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072fc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ff&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00402a36&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407304&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407307&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x2c&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040730a&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040730b&lt;/span> &lt;span class="no">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先是把&lt;code>var_18h[0x10]&lt;/code> 的值设为0。&lt;/p>
&lt;p>接着&lt;code>var_8h&lt;/code>做参数调未知函数。&lt;/p>
&lt;p>把&lt;code>var_18h&lt;/code>移到&lt;code>eax&lt;/code>，也就是&lt;code>cdecl&lt;/code>约定下的返回值位置。&lt;/p>
&lt;p>最后平栈，恢复&lt;code>ebp&lt;/code>，返回，函数结束。我们把所有内容的伪代码合并起来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">var_18h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">var_18h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从这我们已经能看出具体算法了，未知函数可以猜测调试看看。&lt;/p>
&lt;h2 id="0x04-调试器---easy">0x04 调试器 - easy&lt;/h2>
&lt;p>调试的目标是确认生成序列号的算法，把分析出的伪代码中还不清楚用途的未知函数，分析出作用。&lt;/p>
&lt;h3 id="41-x32dbg">4.1 x32dbg&lt;/h3>
&lt;p>打开调试器后，先找到关键跳，在工具栏点击字符串工具图标，在下方搜索栏输入&lt;code>wrong pwd!&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-15.png"
loading="lazy"
alt="image-20210915140718400"
>&lt;/p>
&lt;p>跳到引用位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-18.png"
loading="lazy"
alt="image-20210915111455604"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-19.png"
loading="lazy"
alt="image-20210915111621678"
>&lt;/p>
&lt;p>之后可以按g，进入控制流视图，不过这个控制流视图有点不好看，我们也可以直接参考静态分析中的汇编，直接找到函数，并在入口下断点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-20.png"
loading="lazy"
alt="image-20210915112358449"
>&lt;/p>
&lt;p>尝试随便输入一点内容，调试器命中。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-21.png"
loading="lazy"
alt="image-20210915112552389"
>&lt;/p>
&lt;p>接下来就可以用左上角的单步调试了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-22.png"
loading="lazy"
alt="image-20210915140939909"
>&lt;/p>
&lt;p>不做更多介绍，汇编的分析已经进行过一次。这次我们找到对输入 &amp;ldquo;abc&amp;rdquo; 的正确序列号，完成一次解密。&lt;/p>
&lt;p>只需要在断点处点击&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-23.png"
loading="lazy"
alt="image-20210915141120060"
>按钮，然后观察&lt;code>eax&lt;/code>寄存器。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-24.png"
loading="lazy"
alt="image-20210915141405302"
>&lt;/p>
&lt;p>抄出来（居然不能右键复制后面的字符串），内容是&lt;code>4447467073727d7c&lt;/code>。&lt;/p>
&lt;p>接着继续运行，再把抄出来的答案复制进去看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-25.png"
loading="lazy"
alt="image-20210915141838395"
>&lt;/p>
&lt;p>到这里，我们拿到了一个可以用的序列号。&lt;/p>
&lt;h2 id="0x05-注册机">0x05 注册机&lt;/h2>
&lt;h3 id="51-python-脚本注册机">5.1 Python 脚本注册机&lt;/h3>
&lt;p>先把前面的伪代码贴一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">var_18h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">var_18h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>里面的未知函数（失策，clang默认静态链接了libcmt，很多库函数在x32dbg里认不出来）猜一猜吧。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;username:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytearray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>
&lt;span class="c1"># 这里的未知函数通过调试器可以看出，把入参复制到了 var_8h 里&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">username&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>
&lt;span class="c1"># for(int var_1ch = 0x0; var_1ch &amp;lt; 8; var_1ch++) {&lt;/span>
&lt;span class="c1"># unknown_func(var_18h + var_1ch * 2, &amp;#34;%02x&amp;#34;, var_8h[var_1ch]);&lt;/span>
&lt;span class="c1"># }&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 最后的那个循环中，函数判断为 sprintf 或其他啥，格式化明确是2位小写16进制数&lt;/span>
&lt;span class="c1"># 前面的计算看作是算偏移，一个 var_8h 的字节对应 2 字节16进制表示，所以 var_18h 加上 NUL 一共是 0x11 也就是 17 个字节&lt;/span>
&lt;span class="c1"># 循环的作用是把 var_8h 这个字节数组转换成16进制表示的字符串。&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 在 python 里用 hex() 就行了。&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行脚本，输入&lt;code>abc&lt;/code>，输出&lt;code>4447467073727d7c&lt;/code>，确认注册机可以生成序列号。&lt;/p>
&lt;h2 id="0x06-修改-exe">0x06 修改 exe&lt;/h2>
&lt;h3 id="61-x32dbg-修改关键跳">6.1 x32dbg 修改关键跳&lt;/h3>
&lt;p>用调试器打开后找到决定serial是否正确的关键跳转，右键二进制选择用NOP填充，确认即可。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-26.png"
loading="lazy"
alt="image-20210915150907420"
>&lt;/p>
&lt;p>修改后效果如图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-27.png"
loading="lazy"
alt="image-20210915150953046"
>&lt;/p>
&lt;p>接着把修改后的exe保存下来，在文件菜单里选择补丁。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-28.png"
loading="lazy"
alt="image-20210915151220354"
>&lt;/p>
&lt;p>全选，点修补文件，选择路径保存。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-29.png"
loading="lazy"
alt="image-20210915151322628"
>&lt;/p>
&lt;p>我保存在&lt;code>cm02-easy-patched.exe&lt;/code>，接着我们试试运行。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-30.png"
loading="lazy"
alt="image-20210915151903611"
>&lt;/p>
&lt;p>遗憾的是被x32dbg补丁功能导出的文件需要管理员权限运行，为了能截到图，图中用了名为&lt;code>sudo&lt;/code>的工具命令，可以用&lt;code>scoop install sudo&lt;/code>来安装&lt;code>sudo&lt;/code>，点击去&lt;a class="link" href="https://scoop.sh" target="_blank" rel="noopener"
>scoop首页&lt;/a>。&lt;/p>
&lt;h3 id="62-反编译器修改关键跳">6.2 反编译器修改关键跳&lt;/h3>
&lt;p>以Cutter为例，找到&lt;code>jne&lt;/code>指令后，右键修改为&lt;code>nop&lt;/code>即可。记得先备份。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-31.png"
loading="lazy"
alt="image-20210915152428449"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-02/cm02-easy-32.png"
loading="lazy"
alt="image-20210915152609774"
>&lt;/p>
&lt;p>修改后也能实现和x32导出一样的效果，而且不用管理员权限。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>总得有个结论。&lt;/p>
&lt;p>这次逆向应该能帮助学到下面的东西：&lt;/p>
&lt;ul>
&lt;li>栈帧结构和函数调用&lt;/li>
&lt;li>&lt;code>cmp&lt;/code>指令&lt;/li>
&lt;li>&lt;code>jne&lt;/code>、&lt;code>jbe&lt;/code>、&lt;code>jnz&lt;/code>、&lt;code>jae&lt;/code>指令&lt;/li>
&lt;li>&lt;code>movsx&lt;/code>指令&lt;/li>
&lt;li>&lt;code>shl&lt;/code>指令&lt;/li>
&lt;/ul>
&lt;p>库函数因为静态链接的缘故已经变成了文中的未知函数，造成了分析上的障碍。老实说如果不是自己写的源码，能不能这么顺利逆向出注册机还真不好说。&lt;/p>
&lt;p>开启优化的 &lt;em>normal&lt;/em> 和 &lt;em>hard&lt;/em> 难度就不进一步分析了，有兴趣可以看看。&lt;/p></description></item><item><title>自娱自乐 CrackMe-1</title><link>https://nnnewb.github.io/p/crackme-01/</link><pubDate>Fri, 10 Sep 2021 09:49:00 +0800</pubDate><guid>https://nnnewb.github.io/p/crackme-01/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总之得有个前言。从前有个老和尚（不是，掉光了头发的攻城狮），&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>以上略，于是作为萌新含量110%的萌新，出于练手、熟悉下反汇编调试的环境之类的目的，还是自己写crackme来把玩吧。&lt;/p>
&lt;h2 id="cm01-介绍">CM01 介绍&lt;/h2>
&lt;p>于是这个 CrackMe 就叫 CM01 好了，命令行无界面。适合差不多对这些东西懂个大概或者打算学习的萌新：&lt;/p>
&lt;ul>
&lt;li>反汇编/调试工具&lt;/li>
&lt;li>寄存器（主要是 ebp、esp、eip、eax）&lt;/li>
&lt;li>函数调用（cdecl）&lt;/li>
&lt;li>栈/栈帧&lt;/li>
&lt;li>内存模型和寻址&lt;/li>
&lt;/ul>
&lt;h2 id="cm01-源码">CM01 源码&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">realloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;secret&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;password:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strncmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pwd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Good job!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wrong pwd!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译工具链：&lt;/p>
&lt;ul>
&lt;li>因为VC++对单纯C的支持比较垃圾，所以用LLVM（Clang）-12.0.1，Clang&lt;/li>
&lt;/ul>
&lt;p>编译指令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">clang cm01.c -o cm01-easy.exe -m32 -O0
clang cm01.c -o cm01-normal.exe -m32 -O1
clang cm01.c -o cm01-hard.exe -m32 -O2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="观察">观察&lt;/h2>
&lt;p>假装没看到源码，先观察下程序的行为，确定目标。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">weakptr in assembly-play ❯ .\cm01-easy.exe
password:password?
wrong pwd!
password:asdf
wrong pwd!
password:wrong pwd!
password:
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个 &lt;em>password:&lt;/em> 提示符，随便输入了点什么会提示 &lt;em>wrong pwd!&lt;/em> 。&lt;/p>
&lt;p>确定目标是找出正确的密码。&lt;/p>
&lt;h2 id="静态分析">静态分析&lt;/h2>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>在逆向中有个说法叫*“关键跳转”*，如分析固定密码，字符串比较后跳转成功或跳转失败就是关键跳。对于简单的问题，找到关键跳即可破局。&lt;/p>
&lt;h3 id="反汇编---easy">反汇编 - Easy&lt;/h3>
&lt;p>Easy难度下，&lt;code>-O0&lt;/code>参数关闭了编译器优化，生成的汇编代码非常死板，基本能直接对照到C源码上。&lt;/p>
&lt;p>直接拿IDA打开。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-easy-1.png"
loading="lazy"
alt="image-20210912172521751"
>&lt;/p>
&lt;p>直接跳到了&lt;code>main&lt;/code>函数。接着看IDA汇编窗口中的的细节。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-easy-2.png"
loading="lazy"
alt="image-20210912173539972"
>&lt;/p>
&lt;p>IDA反汇编界面是包含一些伪代码的，有助于分析。&lt;/p>
&lt;p>左侧有长条和箭头的部分是控制流示意，箭头指的就是跳转方向。&lt;/p>
&lt;p>越过伪代码的部分，就能看到函数体开头例行公事的部分了。随后的便是函数体代码。&lt;/p>
&lt;p>具体看函数体前，先了解下IDA还提供了另一种控制流可视化的视图，可以极大帮助对函数逻辑的分析。&lt;/p>
&lt;p>在汇编视图里右键，选择 Graph View，即可进入控制流视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-easy-3.png"
loading="lazy"
alt="image-20210912174233891"
>&lt;/p>
&lt;p>在图片左下角的是视图的全览，原本的汇编文本变成了图中箭头连接的小汇编代码块，箭头指示了跳转的方向。&lt;/p>
&lt;p>在这个视图可以很清楚地看到所谓的关键跳：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-easy-4.png"
loading="lazy"
alt="image-20210912174738919"
>&lt;/p>
&lt;p>&lt;code>_strncmp&lt;/code>是经过了 name mangling 的 c 标准库函数&lt;code>strncmp&lt;/code>，函数如名字所示，用途就是比较字符串。&lt;/p>
&lt;p>又根据&lt;code>cdecl&lt;/code>调用约定，函数参数通过栈传递，参数从右往左压栈。我们看这个&lt;code>call&lt;/code>指令前的三句&lt;code>mov&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; Str2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">MaxCount&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="c">; MaxCount
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是没有用&lt;code>push&lt;/code>指令，所以三个&lt;code>mov&lt;/code>在栈上的顺序要根据偏移算。我们偷个懒直接看&lt;code>strncmp&lt;/code>函数的签名就行，IDA也分析出了压栈的地址在注释里。往上看，看看&lt;code>ecx&lt;/code>和&lt;code>eax&lt;/code>又是哪儿来的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再看&lt;code>ebp+var_8&lt;/code>和&lt;code>ebp+str1&lt;/code>又是什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">lea&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">aSecret&lt;/span> &lt;span class="c">; &amp;#34;secret&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以有一个参数是字符串 &lt;code>&amp;quot;secret&amp;quot;&lt;/code>，作为关键跳前 &lt;code>_strncmp&lt;/code> 的参数。&lt;/p>
&lt;p>让我们尝试一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-easy-7.png"
loading="lazy"
alt="image-20210912181959230"
>&lt;/p>
&lt;p>成功完成。&lt;/p>
&lt;h3 id="反汇编---normal">反汇编 - Normal&lt;/h3>
&lt;p>接下来看使用&lt;code>-O1&lt;/code>编译，开启了部分编译器优化的版本。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-normal-1.png"
loading="lazy"
alt="image-20210912183427553"
>&lt;/p>
&lt;p>可以看到，因为编译器优化的缘故，原本清晰的分支变成了一个仅有一个循环。&lt;/p>
&lt;p>还是先找到关键跳，肉眼过一遍循环中的函数调用，&lt;code>sub_401180&lt;/code>从参数看应该是一个往终端打印字符串的函数，忽略。&lt;code>___acrt_iob_func&lt;/code>意义不明也忽略。下一个&lt;code>sub_401000&lt;/code>依然有点意义不明，先跳过。再往下就看到了老熟人了，&lt;code>_strncmp&lt;/code>，&lt;code>&amp;quot;secret&amp;quot;&lt;/code>参数更是直接用一个push给压栈了，分析到此结束？&lt;/p>
&lt;p>不过还有一个问题没解决：失败的提示我们看到了，成功的跳转在哪儿呢？&lt;/p>
&lt;p>从&lt;code>call _strncmp&lt;/code>开始往下看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">call&lt;/span> &lt;span class="no">_strncmp&lt;/span> &lt;span class="c">; 调用，cdecl约定下，返回值在 eax
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">Ch&lt;/span> &lt;span class="c">; 清栈
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 函数返回值存入 esi
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">test&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; TEST 指令把操作数按位与并设置标志位，如果 eax 是 0 则 ZF 会设置成 1，否则就是 0。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">aWrongPwd&lt;/span> &lt;span class="c">; eax = &amp;#34;wrong pwd!\n&amp;#34;
&lt;/span>&lt;span class="c">; ebp 被设置为了字符串 &amp;#34;Good job!\n&amp;#34;
&lt;/span>&lt;span class="c">; cmovz 或者说 cmov* 系列的函数用后缀的单个字符表示用哪个标志位来决定是否mov，比如cmovz就是用ZF标志位决定是否执行mov。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">cmovz&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 如果 strncmp 返回 0 则是 Good job!\n ，反则 wrong pwd!\n
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">sub_401180&lt;/span> &lt;span class="c">; 调用一个输出字符串的函数
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用伪代码来表示，就是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Good job!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">compare_result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;wrong pwd!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="反汇编---hard">反汇编 - Hard&lt;/h3>
&lt;p>Hard启用了&lt;code>-O2&lt;/code>，也就是开启了大部分编译器优化。用IDA打开。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-hard-1.png"
loading="lazy"
alt="image-20210912185949657"
>&lt;/p>
&lt;p>因为编译器十分聪明地把一些函数给内联编译进了 main 函数，现在 main 函数的控制流已经乱的一批。挨个读下去虽然还可行，但实在费神费力。&lt;/p>
&lt;p>不过在这个条件下依然还有解决办法：我们可以通过错误或成功的提示字符串找关键跳。&lt;/p>
&lt;p>已知错误时会输出&amp;quot;wrong pwd!&amp;quot;，我们在IDA找到字符串视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-hard-2.png"
loading="lazy"
alt="image-20210912190657661"
>&lt;/p>
&lt;p>然后在视图中找到字符串。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-hard-3.png"
loading="lazy"
alt="image-20210912190827657"
>&lt;/p>
&lt;p>其实就是在内存数据段（Data Segment）或者PE的数据节（Data Section）中的字符串啦，一般手写的字符串字面量都会直接编译到这里。&lt;/p>
&lt;p>在我们要找的字符串上双击，就会跳到汇编视图中的字符串位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-hard-4.png"
loading="lazy"
alt="image-20210912191125747"
>&lt;/p>
&lt;p>然后再双击图中位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-hard-5.png"
loading="lazy"
alt="image-20210912191344967"
>&lt;/p>
&lt;p>即可跳转到引用。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/crackme-01/cm01-hard-6.png"
loading="lazy"
alt="image-20210912191435672"
>&lt;/p>
&lt;p>接着看跳转到的上下文，又变成了十分熟悉的正确错误分支。往前找到 &lt;code>_strncmp&lt;/code>的参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="mi">6&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">Str2&lt;/span> &lt;span class="c">; &amp;#34;secret&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">edx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">_strncmp&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是 &lt;code>strncmp(edx,&amp;quot;secret&amp;quot;,6)&lt;/code>，密钥就是 &lt;code>&amp;quot;secret&amp;quot;&lt;/code>没错了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这个 CrackMe （以后也许还有）的主要用途是学习逆向和汇编的基础知识，巩固记忆，学习和熟悉工具。所以尽可能去除干扰项，只保留想要巩固学习的部分，看起来很傻，基本没啥挑战性。&lt;/p>
&lt;p>有些公共的前置知识（比如寄存器和栈，调用约定，内存模型）我做了个笔记，大概是入不了大佬的眼的。可以在[这里](&lt;a class="link" href="https://nnnewb.github.io/blog/p/assembly-learning-note/" target="_blank" rel="noopener"
>32位 Windows x86 汇编语言学习 (nnnewb.github.io)&lt;/a>)看看。&lt;/p>
&lt;p>目前能找到很多 Delphi 和 VB 编写的 CrackMe，Delphi 现在搜搜还能看到些 &lt;em>Delphi still alive&lt;/em> 的文章，不过确实比较少见了吧。提到学 GUI 编程，不是推荐 C++/Qt 就是 .Net 全家桶。VB 更是早已完蛋（不是VB.Net），老实说这些 CrackMe 不知道转了几手，还能玩是还能玩，虽然但是吧，总之对我还是略难，看别人的 CrackMe 题解也挺迷茫。&lt;/p>
&lt;p>不过自己会编程就好了嘛！&lt;/p></description></item><item><title>一个安卓应用的逆向分析</title><link>https://nnnewb.github.io/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</link><pubDate>Tue, 29 Dec 2020 14:04:02 +0800</pubDate><guid>https://nnnewb.github.io/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</guid><description>&lt;p>说起来也不算什么新鲜的东西，现成的工具拼拼凑凑就搞定了，单纯算是点亮了新的技能。&lt;/p>
&lt;p>待破解应用的名字不透露了，避免引火烧身。&lt;/p>
&lt;p>需要准备的工具包括&lt;/p>
&lt;ul>
&lt;li>mumu 模拟器(或者别的什么有 root 权限、能装 xposed 的模拟器)&lt;/li>
&lt;li>FDex2 脱壳&lt;/li>
&lt;li>jadx 反编译 dex 源码&lt;/li>
&lt;li>apktools 拆解 apk&lt;/li>
&lt;li>mitmproxy 中间人拦截网络请求&lt;/li>
&lt;/ul>
&lt;!-- more -->
&lt;h2 id="0x01-目标和方向选择">0x01 目标和方向选择&lt;/h2>
&lt;p>首要的目标是破解这个软件的 api 加密。&lt;/p>
&lt;p>使用 mitmproxy 抓到 https 流量，发现请求体全部是 base64 ，解码发现乱码。基本断定是加密了。&lt;/p>
&lt;blockquote>
&lt;p>mitmproxy 怎么抓 https 流量不多说了，基本流程就是装证书，然后配置代理。能看到有流量进 mitmproxy 就算成功了。&lt;/p>
&lt;p>直接参考 mitmproxy 的文档快一点。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/01.png"
loading="lazy"
alt="01"
>&lt;/p>
&lt;p>搜了一圈没有什么现成的对这个 App 的破解的文章，于是决定自己动手。&lt;/p>
&lt;h2 id="0x02-解包和脱壳">0x02 解包和脱壳&lt;/h2>
&lt;p>先确认下电脑上装了 JDK 或者 JRE ，没有的话就装好。&lt;/p>
&lt;p>推荐一个 vscode 的插件，&lt;code>apklab&lt;/code>。会帮你装好 jadx 和 apktools / signer 这些工具。&lt;/p>
&lt;p>接下来直接用 &lt;code>apklab&lt;/code> 打开需要破解的 apk 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/02.png"
loading="lazy"
alt="02"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/03.png"
loading="lazy"
alt="03"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/04.png"
loading="lazy"
alt="04"
>&lt;/p>
&lt;p>apklab 会自动用 apktools 和 jadx 完成拆包和反编译。&lt;/p>
&lt;p>然后简单观察&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/05.png"
loading="lazy"
alt="05"
>&lt;/p>
&lt;p>应该是被 360 加固了。&lt;/p>
&lt;p>apk 加固的基本原理就是把易被反编译的 java 字节码转译或者加密后保存，运行的时候再释放出来。用过 upx 一类的软件应该会联想到，就是加壳、反调试什么的这一套。&lt;/p>
&lt;p>xposed 提供了一个&lt;a class="link" href="https://api.xposed.info/reference/de/robv/android/xposed/IXposedHookLoadPackage.html" target="_blank" rel="noopener"
>在安卓包加载时设置钩子的机会&lt;/a>，将 ClassLoader Hook 掉，以此获得真正的应用字节码。&lt;/p>
&lt;p>代码看参考资料。&lt;/p>
&lt;p>安装 xposed 框架和 FDex2 之后启动目标应用，即可获得对应的字节码 dex 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/06.png"
loading="lazy"
alt="06"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/07.png"
loading="lazy"
alt="07"
>&lt;/p>
&lt;p>接着把这些 dex 文件复制出来，即可使用 jadx 反编译到 java 了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">jadx -d out *.dex
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将反编译的结果用 vscode 打开，可以看到目标已经被我们脱干净了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/08.png"
loading="lazy"
alt="08"
>&lt;/p>
&lt;h2 id="0x03-寻找加解密代码">0x03 寻找加解密代码&lt;/h2>
&lt;p>目标是解密 Api 请求的内容，所以下一步就是找到哪里保存了加密代码。&lt;/p>
&lt;p>幸运的是这个 App 没有做过混淆，完成脱壳后就已经是全身赤裸的站在我们面前了。&lt;/p>
&lt;p>直接在代码里搜索之前我们观察到的 url：&lt;code>index_des.php&lt;/code>，仅有一个结果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/09.png"
loading="lazy"
alt="09"
>&lt;/p>
&lt;p>相关函数非常短，这个 HTTP 框架我没有使用过，不过从函数名看应该是一个中间件模式，对所有 Web 请求进行加密处理。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/10.png"
loading="lazy"
alt="10"
>&lt;/p>
&lt;p>&lt;code>getOverPost2&lt;/code> 源码如下&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/11.png"
loading="lazy"
alt="11"
>&lt;/p>
&lt;p>从代码里可以得出：&lt;/p>
&lt;ul>
&lt;li>g 的含义是 Get 请求的参数，应该就是 QueryString。函数名 &lt;code>getOverPost2&lt;/code> 字面意义就是把 GET 请求以 POST 方式发送出去。&lt;/li>
&lt;li>p 的含义大概就是 Post 的参数了。&lt;/li>
&lt;li>加密代码在 &lt;code>encryptByte&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>如此看来已经接近终点了，再点开 &lt;code>encryptByte&lt;/code> 的定义&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/12.png"
loading="lazy"
alt="12"
>&lt;/p>
&lt;p>密钥保存在 &lt;code>DesLib.sharedInstance().getAuthKey()&lt;/code> 中。&lt;/p>
&lt;p>接着点开 &lt;code>getAuthKey&lt;/code> 的定义:&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/13.png"
loading="lazy"
alt="13"
>&lt;/p>
&lt;p>&lt;code>native&lt;/code> 关键字一出，得，白高兴了。差点劝退成功。&lt;/p>
&lt;p>还是先看下怎么加密的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/14.png"
loading="lazy"
alt="14"
>&lt;/p>
&lt;p>再往回翻一下响应解密的代码，免得拆除密钥来又白高兴一场。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/15.png"
loading="lazy"
alt="15"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/16.png"
loading="lazy"
alt="16"
>&lt;/p>
&lt;p>很好，也是 DES 。&lt;/p>
&lt;p>其实到这一步已经基本完成解密了，唯一欠缺的就是密钥。&lt;/p>
&lt;p>抱着试一试的心情，还是找到了 &lt;code>libencry.so&lt;/code> ，用 IDA 打开分析了一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/17.png"
loading="lazy"
alt="17"
>&lt;/p>
&lt;p>一通操作猛如虎，结果发现看不懂汇编。=w=&lt;/p>
&lt;p>按下 F5，看看伪代码。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/18.png"
loading="lazy"
alt="18"
>&lt;/p>
&lt;p>还是看不懂。这都调的什么函数&amp;hellip; &lt;code>a1 + 668&lt;/code> 这个蜜汁偏移也不知道是在算什么。&lt;/p>
&lt;p>网上搜索了一圈，说道可以手动改一下函数签名，IDA 就能提示出函数了。试试看。&lt;/p>
&lt;p>先把函数签名纠正&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/19.png"
loading="lazy"
alt="19"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/20.png"
loading="lazy"
alt="20"
>&lt;/p>
&lt;p>再关掉类型转换&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/21.png"
loading="lazy"
alt="21"
>&lt;/p>
&lt;p>最终关键代码清晰了很多，看起来就是个直接返回字符串常量的函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/22.png"
loading="lazy"
alt="22"
>&lt;/p>
&lt;p>比较具有迷惑性的是上面的 v5-v9，可以看到 v5-v9 地址是增长、连续的，只有 v5 和 v6 有值。v7/v8/v9 都是 0 。而 v5 的地址被用作 &lt;code>NewStringUTF&lt;/code> 函数的参数。查阅 JNI 接口也可以看到这个参数应该是 &lt;code>const char*&lt;/code> 类型。&lt;/p>
&lt;p>所以 &amp;hellip;&lt;/p>
&lt;p>把数值转换成 16 进制再做观察。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/23.png"
loading="lazy"
alt="23"
>&lt;/p>
&lt;p>发现很有规律，每个字节的值都在 ASCII 范围内。于是右键转换成字符串，再按字节序翻转一下，即可得到密钥。&lt;/p>
&lt;p>到此，解密方法的探索已经完成。&lt;/p>
&lt;h2 id="0x04-mitmproxy-解密">0x04 mitmproxy 解密&lt;/h2>
&lt;p>mitmproxy 支持使用 python 脚本扩展，用法很简单就是 &lt;code>mitmweb.exe -s decrypt.py&lt;/code>&lt;/p>
&lt;p>可以参考 mitmproxy 的&lt;a class="link" href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/addons/contentview.py" target="_blank" rel="noopener"
>例子&lt;/a>&lt;/p>
&lt;p>最终效果应该是这样&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/image/Just-crack-an-android-app/25.png"
loading="lazy"
alt="24"
>&lt;/p>
&lt;p>核心的解密代码就一句，利用 mitmproxy 的扩展即可对每个请求进行统一的处理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pyDes&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAD_PKCS5&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">padmode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">PAD_PKCS5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x05-结语">0x05 结语&lt;/h2>
&lt;p>这个破解的最大意义还是完成了一次完整的安卓逆向，算是点亮了新技能。&lt;/p>
&lt;p>以后再遇到一些傻逼软件或者强制推广的东西就可以用这一手技能来研究吐槽下都什么傻逼代码了。&lt;/p>
&lt;p>当然非法的事情是不可能做的。&lt;/p>
&lt;p>这玩意儿破解完之后发现有泄露隐私、被脱裤的严重漏洞，我也给市政平台发了件。&lt;/p>
&lt;p>所以明年如果再硬推一次的话，到时候再拆了看看是不是有点长进。当然，没人管应该才是常态。&lt;/p></description></item></channel></rss>