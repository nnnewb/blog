<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/categories/python/</link><description>Recent content in python on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 14 Feb 2022 10:53:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>B树</title><link>https://nnnewb.github.io/blog/p/b-tree/</link><pubDate>Mon, 14 Feb 2022 10:53:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/b-tree/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>B树和B树的变体（B+树）因为对磁盘IO/缓存友好的原因，常被用做数据库索引和文件系统的数据结构。&lt;/p>
&lt;p>这篇博客主要是写一下B树如何插入和搜索，节点分裂机制以及如何自平衡。&lt;/p>
&lt;h2 id="节点结构">节点结构&lt;/h2>
&lt;p>B树和一般的二叉搜索树在节点结构上有很大区别。B树是一种多路搜索树，B树的节点可以有多个后继节点，一个节点会保存多个键。单个节点最多保存M个键的B树称作M阶B树。&lt;/p>
&lt;p>一个简单的 B 树节点结构如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">BTreeNode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parent&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;BTreeNode&amp;#39;&lt;/span>
&lt;span class="n">entries&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">children&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;BTreeNode&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>B树要求除根节点外，每个节点最少包含&lt;code>M/2&lt;/code>个元素，非叶子节点的 &lt;code>children&lt;/code> 数量是 &lt;code>len(entries)+1&lt;/code>。根节点不要求最少元素数量，其他约束不变。&lt;/p>
&lt;h2 id="插入节点">插入节点&lt;/h2>
&lt;p>B树要求新的键只能在叶子节点上插入。如果叶子节点的键数量超过了上限&lt;code>M&lt;/code>，则叶子节点执行 &lt;strong>分裂&lt;/strong> 操作，将键分成三部分：中位数，小于中位数的部分，大于中位数的部分。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 分裂前&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># 分裂后&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>中位数插入父节点，小于中位数的部分或大于中位数的部分创建新的子节点，插入父级节点。以插入元素 1-7 为例，图示如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113130112.png"
width="526"
height="214"
srcset="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113130112_hu5b12e769ccfd98fac492b0d669d71565_6441_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113130112_hu5b12e769ccfd98fac492b0d669d71565_6441_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="元素1-6"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113110231.png"
width="580"
height="214"
srcset="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113110231_hu367bf5992fa3acb17c83fa3ae5854998_8699_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113110231_hu367bf5992fa3acb17c83fa3ae5854998_8699_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="插入元素7"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="650px"
>&lt;/p>
&lt;p>对于中位数在 &lt;code>entries&lt;/code> 中间的情况不会更麻烦，只要记住新节点保存的都是大于中位数的部分，在&lt;code>entries&lt;/code>插入键之后，找到对应的&lt;code>children&lt;/code>下标插入即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">add_child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;非叶子节点添加新元素
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> entry (int): 新元素
&lt;/span>&lt;span class="s2"> child (BTreeNode): 分裂出的新孩子
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1"># 遍历寻找比新 entry 更大的元素，如果不存在，则新 entry 添加到最后&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整代码会在文末给出。&lt;/p>
&lt;h2 id="自平衡">自平衡&lt;/h2>
&lt;p>B树是一种自平衡树，B树做到自平衡的方式比较特别。下面的内容都是我个人对B树的理解，偏见警告。&lt;/p>
&lt;p>一般的二叉搜索树插入元素时，会把元素插入到叶子节点上，叶子节点就变成了中间节点，子树会随着插入的元素增长而变高，于是在子树之间出现不平衡。也就是说，一般的二叉搜索树生长方向是向下，往叶子方向扩展。&lt;/p>
&lt;p>但B树正好相反：叶子节点不会变成中间节点，只会分裂兄弟节点，向父级节点插入键。而父级节点也会因为键超过&lt;code>M&lt;/code>而分裂，一直到根节点。根节点分裂则会产生新的根，原来的根变成两个兄弟节点，树的高度随之上升。也就是说，B树的生长高度是向上的，插入操作对树高度的影响最终体现为根节点的分裂。&lt;/p>
&lt;p>删除节点的规则也设计为保持这一特性，删除键对树高度的影响最终会体现为根节点和子节点合并，使得树高度降低。&lt;/p>
&lt;h2 id="搜索">搜索&lt;/h2>
&lt;p>B树的搜索和二叉搜索树差不多，不同的是节点会表示多个键，所以二叉搜索树中的比较操作会变成在多个键里查找值，并在中间节点没找到的时候递归搜索子节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="c1"># 如果没找到，而且当前元素比搜索值要大了&lt;/span>
&lt;span class="c1"># 就从小于当前元素的子节点里递归搜索&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 没有比搜索的键大的值，则从末尾的子节点（大于本节点全部键）递归搜索&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分裂和需要注意的问题">分裂和需要注意的问题&lt;/h2>
&lt;p>分裂节点写起来很简单，比 AVL 旋转要好懂很多。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">grow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 检查和处理分裂&lt;/span>
&lt;span class="c1"># B-Tree 的增长方向是横向+纵向，横向是扩展兄弟节点，纵向是往根节点方向生长&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MAXIMUM_ENTRIES&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">middle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MIDDLE_ENTRY_IDX&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">split_entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MIDDLE_ENTRY_IDX&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;span class="n">split_children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MIDDLE_CHILD_IDX&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">MIDDLE_ENTRY_IDX&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">MIDDLE_CHILD_IDX&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">split_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">split_node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">split_entries&lt;/span>
&lt;span class="n">split_node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">split_children&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">split_children&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">split_node&lt;/span>
&lt;span class="c1"># 中间节点分裂的情况&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">middle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">split_node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="c1"># 根节点分裂，生成新的根节点&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">split_node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">split_node&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">middle&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要注意：&lt;/p>
&lt;ol>
&lt;li>选择合适的中位数。如果&lt;code>M&lt;/code>是奇数，&lt;code>M+1&lt;/code>除二没有余数，也选不出中位数。&lt;/li>
&lt;li>新节点（&lt;code>split_node&lt;/code>和&lt;code>split_children&lt;/code>）都需要重新调整&lt;code>parent&lt;/code>属性，不要漏了。&lt;/li>
&lt;li>中间节点的分裂要向上添加一个&lt;code>entry&lt;/code>和&lt;code>child&lt;/code>，分别表示键和大于这个键的节点。
&lt;ol>
&lt;li>这是个递归过程，上级节点也可能发生分裂，一直到根分裂。&lt;/li>
&lt;li>这个过程会保留原节点（&lt;code>self&lt;/code>），可以理解为&lt;code>children&lt;/code>的下标&lt;code>i&lt;/code>表示&lt;code>children[i]&lt;/code>这棵子树所有键小于&lt;code>entries[i]&lt;/code>。&lt;code>children[-1]&lt;/code>没有对应的&lt;code>entries&lt;/code>下标，表示的是大于节点所有键的子树，相当于是二叉搜索树中的右子树。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>根节点分裂会导致树的根发生改变，完成插入操作后需要重新确定根节点指针，不然会导致搜索出错或再次分裂的时候往错误的节点添加键，破坏搜索树的性质。&lt;/li>
&lt;/ol>
&lt;h2 id="b树性能">B树性能&lt;/h2>
&lt;p>B树的性能优势来自树的高度增长相对比较慢，选择合适的阶可以减少磁盘IO次数。另外就是一个节点包含多个键，提高键的储存密度，更符合局部性原理，相对于二叉搜索树来说对CPU缓存也更较友好。&lt;/p>
&lt;p>对这个场景我能想到的几个关键因素主要有：&lt;/p>
&lt;ul>
&lt;li>内存缓存。尽可能榨干可用的内存，避免频繁进行磁盘IO。&lt;/li>
&lt;li>局部性原理。&lt;/li>
&lt;/ul>
&lt;p>其中局部性原理又分几项。&lt;/p>
&lt;p>一个是内存的分页机制，在内存紧张的情况下如果节点集合大小不是一页的整数倍的话，会产生更多的缺页异常，造成更频繁地读盘（考虑使用了交换分区或 windows 页文件，又或者 &lt;code>mmap&lt;/code> 等方式读取）。&lt;/p>
&lt;p>另一个是CPU的高速缓存，如果结构填不满或者超出cache line 大小的话都会有影响。&lt;/p>
&lt;p>当然，最后还是具体问题具体分析。给这篇博客找资料的时候看到的这篇文章很不错 &lt;a class="link" href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener"
>gallery of processor cache effects&lt;/a>，挺喜欢的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>b树是多路搜索树。&lt;/p>
&lt;p>b树插入节点总是在叶子，b树向根方向生长。&lt;/p>
&lt;p>b树通过节点分裂和合并实现自平衡。&lt;/p>
&lt;p>b树搜索和一般的二叉搜索树差别不大。&lt;/p>
&lt;p>以及b树性能优势来自树更矮，节点更少，键更集中，符合局部性原理，减少磁盘io次数，合适的阶让结构对缓存更友好。&lt;/p></description></item><item><title>AVL树</title><link>https://nnnewb.github.io/blog/p/avl-tree/</link><pubDate>Fri, 11 Feb 2022 15:07:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/avl-tree/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>还记得很久以前学数据结构只看到二叉树，讲到平衡，但平衡方法当时看纸质书手头也没有实验环境，后来就没继续学下去。现在有闲就重新捡起来学一下。先从AVL树继续看。&lt;/p>
&lt;h2 id="avl树">AVL树&lt;/h2>
&lt;p>AVL 树是以提出者名字命名的，Adelson-Velskii &amp;amp; Landis，俄国人，后来移居以色列。人怎么样不管啦。&lt;/p>
&lt;p>AVL 树是一种平衡二叉树，左右子树高度差不超过1。保持平衡的方法是每次插入数据的时候发现子树不平衡，就把较高的子树提升为根，把根变成新的根的子树，把较高的子树变矮，较矮的子树变高，实现平衡。这个过程被叫做旋转，下面介绍旋转。&lt;/p>
&lt;h2 id="左旋转右旋转">左旋转/右旋转&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/640.webp"
width="1080"
height="302"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/640_hue4f2eb0b84b4ee9edbff095635b31765_16328_480x0_resize_q75_h2_box_2.webp 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/640_hue4f2eb0b84b4ee9edbff095635b31765_16328_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
alt="右旋转"
class="gallery-image"
data-flex-grow="357"
data-flex-basis="858px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/640-16445510501782.webp"
width="1080"
height="265"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/640-16445510501782_hu6ffc1b8ea7f9226d8e679d85cbb8998e_14524_480x0_resize_q75_h2_box_2.webp 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/640-16445510501782_hu6ffc1b8ea7f9226d8e679d85cbb8998e_14524_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
alt="左旋转"
class="gallery-image"
data-flex-grow="407"
data-flex-basis="978px"
>&lt;/p>
&lt;p>左旋转和右旋转的逻辑是一样的。如果右子树比左子树高，就把右子树提升成根。如果左子树比右子树高，就把左子树提升成根。提升右子树叫左旋转，提升左子树叫右旋转。&lt;/p>
&lt;p>把子树提升成根会有点麻烦。比如右子树提升为根，原来的根和左子树怎么办？我们并不想重新平衡树的时候把整个左子树都删掉，那原来的根和左子树就必须插回新的树里。&lt;/p>
&lt;p>我们知道右子树的 key 肯定比根和左子树所有节点大，所以根要插回树的话，一个很直接的想法就是把旧的根接到右子树左下角的叶子节点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211115435552.png"
width="442"
height="352"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211115435552_hudaf66137716a342688a9fcb78a9ab8fa_32310_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211115435552_hudaf66137716a342688a9fcb78a9ab8fa_32310_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="旧的根插回新根"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>的确，这样保持了二叉搜索树的特征，但新的树依然不平衡：节点5的左子树高度2，右子树高度0，高度差超过了1。稍微想想就知道，旧的根和左子树直接接到左下角叶子节点的话，会让原本平衡的新树左子树高度增加，进而失去平衡。&lt;/p>
&lt;p>解决方法也很简单，不要把旧的树接到新的树最小值上，而是把新树的左子树，移植成旧树的右子树，再把旧树移植成新树的左子树。这样一来，右子树的左子树和左子树的右子树不管怎么旋转，高度都一样。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211135807095.png"
width="559"
height="367"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211135807095_huce0ca6d6e6da680d37b57191522379d3_34024_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211135807095_huce0ca6d6e6da680d37b57191522379d3_34024_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211135807095"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>为什么这样可以保持平衡呢？首先AVL树的子树也是AVL树，所以子树的子树之间高度差也不超过1。左旋转、右旋转的的作用是让子树高度一侧升高，一侧降低——注意，左旋转只能降低右儿子的右子树高度，右儿子的左子树高度不变。右旋转只能降低左儿子的左子树高度，左儿子的右子树高度不变。&lt;/p>
&lt;p>举例来说，上图中右儿子的右子树（4-6-7-8）较高，旋转后变成了（6-7-8），而原本的（4-6-5）变成了（6-4-5），高度不变。&lt;/p>
&lt;p>这个规律很好理解，因为原来的右子树变成了根，整个右子树剩下的节点高度都降低了。而右子树的左子树变成了现在的左子树的右子树，和根的距离一样，所以高度不变。&lt;/p>
&lt;p>&lt;strong>左旋转让右子树的右子树高度-1，左子树的左子树高度+1。左子树的右子树高度等于右子树的左子树，旋转后新树的左右子树的高度相等。&lt;/strong>&lt;/p>
&lt;h2 id="双旋转">双旋转&lt;/h2>
&lt;p>对于往左儿子的左子树插入节点造成的不平衡，右旋转可以实现降低左儿子的左子树高度，再次平衡。往右儿子的右子树插入节点造成的不平衡，左旋转可以降低右儿子的右子树高度，再次平衡。但对于左儿子的右子树或右儿子的左子树插入节点造成的不平衡，一次左、右旋转无法实现再平衡。&lt;/p>
&lt;p>再看一个例子。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211141652944.png"
width="535"
height="399"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211141652944_hue06f3e4447c8c13119165b1bee1e7d22_36072_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211141652944_hue06f3e4447c8c13119165b1bee1e7d22_36072_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211141652944"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>旋转前，右儿子的左子树（4-7-6-5）高度是4，旋转后（7-4-6-5）高度不变，依然是4，树仍然不平衡。解决办法也很简单，先把右子树（7）右旋，让右儿子的左子树高度低于右子树，再对整棵树左旋，也就是AVL树的双旋转。&lt;/p>
&lt;p>一步一步看双旋转是怎么解决这个问题的。&lt;/p>
&lt;p>第一步，右儿子的左子树比右儿子右子树高，所以将右儿子右旋，使得右儿子的右子树高于右儿子的左子树。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211142847329.png"
width="490"
height="346"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211142847329_hudfe01573f636ba8f14106612b6b86fbd_23701_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211142847329_hudfe01573f636ba8f14106612b6b86fbd_23701_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211142847329"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>我们知道的左旋转时右儿子的左子树高度不变，右儿子的右子树高度-1。这一步前，直接对整棵树左旋时，最高的那颗子树（右儿子的左子树）高度没有变化，树依然不平衡，只是变成了右子树更矮，左子树更高而已。&lt;/p>
&lt;p>而这一步之后，最高的子树变成了右子树的右子树。现在对整棵树左旋，右子树的右子树高度下降了，和原本右子树的左子树高度一致，达成平衡。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211151253277.png"
width="573"
height="352"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211151253277_hu3754058aad682cd96a93972186837210_33976_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211151253277_hu3754058aad682cd96a93972186837210_33976_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211151253277"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>这个原则简单地说，就是左子树下最高的子树应该是左子树，右子树下最高的子树应该是右子树。如果新增节点后不满足这个条件，就要先对左子树左旋，或者对右子树右旋，来满足这个条件。&lt;/p>
&lt;h2 id="代码实现">代码实现&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">AVLTreeNode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;树节点
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;AVLTreeNode&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;AVLTreeNode&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;AVLTreeNode&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;子树高度
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> int: 子树高度
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_left_height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_right_height&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">_left_height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">_right_height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;是否平衡
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> bool: 是否平衡
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_left_height&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_right_height&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">right_rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;节点右旋
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;can not rotate tree with empty left node&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 旧的根成为右节点&lt;/span>
&lt;span class="c1"># 旧的根的左节点成为新的根&lt;/span>
&lt;span class="c1"># 新的根的右节点变成旧的根的左节点&lt;/span>
&lt;span class="c1"># 旧的根变成新的根的右节点&lt;/span>
&lt;span class="n">old_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="n">new_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="c1"># 新根替换旧根&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">left_rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;节点左旋
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;can not rotate tree with empty right node&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 旧的根成为左节点&lt;/span>
&lt;span class="c1"># 旧的根的右节点成为新的根&lt;/span>
&lt;span class="c1"># 新的根的左节点作为旧的根的右子树&lt;/span>
&lt;span class="c1"># 旧的根变成新的根的左子树&lt;/span>
&lt;span class="n">old_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="n">new_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="c1"># 新根替换旧根&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">_rebalance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_left_height&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_right_height&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># 如果最高的子树是左子树的右子树，先对左子树左旋&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># 如果最高的子树是右子树的左子树，先对右子树右旋&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;插入新节点
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): 要插入的数据
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_rebalance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;搜索值
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): 待搜索的值
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> bool: 值是否存在
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">AVLTree&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;AVL tree
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;AVL树高度
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> int: 树高度
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;树是否平衡
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> bool: 树是否平衡
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;insert new value
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): new value
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># AVL 树旋转后根节点可能不再是现在这个节点，需要重新寻找根节点&lt;/span>
&lt;span class="n">top&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">top&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">top&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">top&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">top&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;search a value
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): searching value
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>AVL树只要理解和左右旋转的方法和作用，就不难理解左右旋转与双旋转的意义了。&lt;/p>
&lt;p>单次旋转的目的都是将两侧子树，一颗子树高度+1，一颗子树高度-1，将高度相差2的两颗子树重新平衡。&lt;/p>
&lt;p>单次旋转的限制是只能降低子树中一颗子树的高度，左子树的左子树或右子树的右子树，所以一旦出现左右子树中最高的子树不是左-左或右-右，单次旋转就不能重新平衡。对这种情况，先旋转子树，令左-左或右-右成为最高的子树后，再对根节点旋转，就能重新平衡了。&lt;/p></description></item><item><title>pattern-match-in-python310</title><link>https://nnnewb.github.io/blog/p/pattern-match-in-python310/</link><pubDate>Fri, 19 Mar 2021 10:19:06 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/pattern-match-in-python310/</guid><description>&lt;h2 id="说明">说明&lt;/h2>
&lt;p>简单机翻润色一下 PEP-636&lt;/p>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>这个PEP是PEP 634引入的模式匹配教程。&lt;/p>
&lt;p>PEP 622提出了模式匹配的语法，社区和指导委员会对此进行了详细讨论。一个常见的问题是解释(和学习)这个特性是否容易。这个PEP关注的是提供开发人员可以用来学习Python中的模式匹配的文档类型。&lt;/p>
&lt;p>PEP 636 被认为是PEP 634(模式匹配的技术规范)和PEP 635(模式匹配的添加动机和理由与设计考虑)的支持材料。&lt;/p>
&lt;p>对于想要快速回顾而不是教程的读者，请参阅附录a。&lt;/p>
&lt;h2 id="教程">教程&lt;/h2>
&lt;p>作为本教程的一个例子，你将编写一个文本冒险游戏。这是一种互动小说形式，用户输入文本命令与虚构世界进行互动，并接收关于所发生事情的文本描述。命令将是简化形式的自然语言，如&lt;code>get sword&lt;/code>，&lt;code>attack dragon&lt;/code>，&lt;code>go north&lt;/code>，&lt;code>enter shop&lt;/code>或&lt;code>but cheese&lt;/code>。&lt;/p>
&lt;h3 id="匹配序列">匹配序列&lt;/h3>
&lt;p>你的主循环将需要从用户那里获取输入，并将它分割成单词，例如一个像这样的字符串列表:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;What are you doing next? &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># analyze the result of command.split()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下一步是解读这些单词。我们的大多数命令都有两个词:一个动作和一个对象。所以你可能会忍不住这样做:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这行代码的问题在于它遗漏了一些东西：如果用户输入的单词多于或少于2个单词怎么办?为了防止这个问题，您可以检查单词列表的长度，或者捕获上面的语句将引发的&lt;code>ValueError&lt;/code>。&lt;/p>
&lt;p>或者，你可以使用&lt;code>match&lt;/code>语句来代替:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>match&lt;/code>语句计算**“subject”**(&lt;code>match&lt;/code>关键字后面的值)，并根据模式(&lt;code>case&lt;/code>旁边的代码)检查它。一个模式可以做两件不同的事情:&lt;/p>
&lt;ul>
&lt;li>验证 subject 具有一定的结构。在您的示例中，&lt;code>[action, obj]&lt;/code>模式匹配任何恰好包含两个元素的序列。这叫做 &lt;strong>maching&lt;/strong>。&lt;/li>
&lt;li>它将模式中的一些名称绑定到 subject 的组件元素。在本例中，如果列表有两个元素，它将绑定&lt;code>action = subject[0]&lt;/code>和&lt;code>obj = subject[1]&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>如果匹配，则&lt;code>case&lt;/code>块内的语句将与绑定的变量一起执行。如果没有匹配，则什么也不发生，然后执行&lt;code>match&lt;/code>之后的语句。&lt;/p>
&lt;p>注意，与解包赋值(unpacking assignments)的方式类似，您可以使用圆括号、方括号或逗号分隔，它们含义相同。所以你可以写&lt;code>case action, obj&lt;/code>或者&lt;code>case (action, obj)&lt;/code>。上述任意形式都将匹配序列类型(例如&lt;code>list&lt;/code>或&lt;code>tuple&lt;/code>)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 译者补充，下述case等效&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="c1"># match (1,2,3) 也一样&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="匹配多个模式">匹配多个模式&lt;/h3>
&lt;p>即使大多数命令都是动作/对象形式，你也可能想要不同长度的用户命令。例如，你可能希望添加没有对象(如&lt;code>look&lt;/code>或&lt;code>quit&lt;/code>)的单个动词。一个&lt;code>match&lt;/code>语句可以(而且很可能)有不止一种情况:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret single-verb action&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>match&lt;/code>语句将从上到下检查模式。如果模式与 subject 不匹配，将尝试下一个模式。但是，一旦找到第一个匹配的模式，就会执行该&lt;code>case&lt;/code>的主体，并忽略所有后续的&lt;code>case&lt;/code>。这类似于&lt;code>if&lt;/code>/&lt;code>elif&lt;/code>/&lt;code>elif&lt;/code>/…语句的工作方式。&lt;/p>
&lt;h3 id="匹配特定值">匹配特定值&lt;/h3>
&lt;p>你的代码仍然需要查看特定的操作，并根据特定的操作有条件地执行不同的逻辑(例如，&lt;code>quit&lt;/code>、&lt;code>attack&lt;/code>或&lt;code>buy&lt;/code>)。你可以使用&lt;code>if&lt;/code>/&lt;code>elif&lt;/code>/&lt;code>elif&lt;/code>/…，或者使用函数字典，但是这里我们将利用模式匹配来解决这个任务。除了变量，你可以在模式中使用字面值(如&lt;code>&amp;quot;quit&amp;quot;&lt;/code>、&lt;code>42&lt;/code>或&lt;code>None&lt;/code>)。这允许你这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Goodbye!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">quit_game&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;look&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">character&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># The rest of your commands go here&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像&lt;code>[&amp;quot;get&amp;quot;， obj]&lt;/code>这样的模式将只匹配第一个元素等于&lt;code>&amp;quot;get&amp;quot;&lt;/code>的2个元素的序列。它还将绑定&lt;code>obj = subject[1]&lt;/code>。&lt;/p>
&lt;p>正如您在上述代码的&lt;code>go&lt;/code>模式中看到的，我们还可以在不同的模式中使用不同的变量名。&lt;/p>
&lt;p>除了与&lt;code>is&lt;/code>操作符比较的常量&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>之外，其他字面值是用&lt;code>==&lt;/code>操作符比较的。&lt;/p>
&lt;h3 id="匹配多个值">匹配多个值&lt;/h3>
&lt;p>玩家可以通过使用一系列的命令来投掷多个物品，如:&lt;code>drop key&lt;/code>, &lt;code>drop sword&lt;/code>, &lt;code>drop cheese&lt;/code>。这个接口可能很麻烦，您可能希望允许在一个命令中添加多个项，比如&lt;code>drop key sword cheese&lt;/code>。在这种情况下，你事先不知道命令中有多少个单词，但是你可以在模式中使用扩展解包(extended unpacking)，就像它们在解包赋值里的写法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;drop&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">obj&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">objects&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">character&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># The rest of your commands go here&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将匹配任何以&lt;code>“drop”&lt;/code>作为第一个元素的序列。所有剩余的元素都将在一个列表对象中被捕获，该列表对象将绑定到&lt;code>objects&lt;/code>变量。&lt;/p>
&lt;p>这种语法与序列解包有类似的限制:在一个模式中不能有多个带星号的名称。&lt;/p>
&lt;h3 id="添加通配符">添加通配符&lt;/h3>
&lt;p>您可能希望打印一条错误消息，说明当所有模式都失败时，无法识别该命令。您可以使用我们刚刚学习的特性，并将&lt;code>case [*ignored_words]&lt;/code>作为您的最后一个模式。然而，有一个更简单的方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Code omitted for brevity&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;drop&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Other cases&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Sorry, I couldn&amp;#39;t understand &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="si">!r}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个特殊的模式被写成&lt;code>_&lt;/code>(称为通配符)。不管 subject 是什么它总是能匹配到，但它不绑定任何变量。&lt;/p>
&lt;p>注意，这将匹配任何对象，而不仅仅是序列。因此，只有将它单独作为最后一个模式才有意义(为了防止错误，Python会阻止您在其他&lt;code>case&lt;/code>之前使用它)。&lt;/p>
&lt;h3 id="模式组合">模式组合&lt;/h3>
&lt;p>这是一个很好的时机，可以从示例中退后一步，了解您一直在使用的模式是如何构建的。模式可以相互嵌套，我们已经在上面的例子中隐式地这样做了。&lt;/p>
&lt;p>我们已经看到了一些“简单”模式(这里的“简单”意味着它们不包含其他模式):&lt;/p>
&lt;ul>
&lt;li>捕获模式 Capture patterns (独立名称，如方向、动作、对象)。我们从未单独讨论过这些，而是将它们作为其他模式的一部分使用。&lt;/li>
&lt;li>字面值模式 Literal patterns (字符串字面值、数字字面值、&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>)&lt;/li>
&lt;li>通配符模式 Wildcard pattern &lt;code>_&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>到目前为止，我们实验过的唯一一个非简单模式是序列模式。序列模式中的每个元素实际上都可以是任何其他模式。这意味着您可以编写像&lt;code>[&amp;quot;first&amp;quot;， (left, right)， _， *rest]&lt;/code>这样的模式。匹配的 subject 是一个至少包含三个元素的序列，其中第一个元素等于&lt;code>&amp;quot;first&amp;quot;&lt;/code>，第二个元素依次是两个元素的序列。它也会绑定&lt;code>left=subject[1][0]&lt;/code>， &lt;code>right=subject[1][1]&lt;/code>，&lt;code>rest =subject[3:]&lt;/code>&lt;/p>
&lt;h3 id="or-模式">or 模式&lt;/h3>
&lt;p>回到冒险游戏的例子中，你可能会发现你想要一些导致相同结果的模式。例如，您可能希望命令&lt;code>north&lt;/code>和&lt;code>go north&lt;/code>相等。您可能还希望为&lt;code>get X&lt;/code>可以有一些别名如&lt;code>pick x up&lt;/code>和&lt;code>pick up x&lt;/code>。&lt;/p>
&lt;p>模式中的|符号将它们组合为可选项。你可以这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Other cases&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;pick&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;up&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;pick&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;up&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Code for picking up the given object&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这被称为&lt;strong>or模式&lt;/strong>，并将产生预期的结果。模式从左到右尝试；如果有多个可选匹配，通过从左至右这一规则可以知道是匹配到了哪个模式。在编写or模式时，一个重要的限制是所有备选项都应该绑定相同的变量。所以模式&lt;code>[1,x] | [2, y]&lt;/code>是不允许的，因为它会使匹配成功后绑定哪个变量变得不清楚。&lt;code>[1, x] | [2, x]&lt;/code>非常好，如果成功，将始终绑定&lt;code>x&lt;/code>。&lt;/p>
&lt;h3 id="捕获匹配的子模式">捕获匹配的子模式&lt;/h3>
&lt;p>我们的&lt;code>“go”&lt;/code>命令的第一个版本是用&lt;code>[“go”，direction]&lt;/code>模式编写的。我们在上一个版本中使用模式&lt;code>[&amp;quot;north&amp;quot;] | [&amp;quot;go&amp;quot;， &amp;quot;north&amp;quot;]&lt;/code>所做的改变有一些好处，但也有一些缺点:最新版本允许别名，但也有硬编码的方向别名&lt;code>&amp;quot;north&amp;quot;&lt;/code>，这将迫使我们实际上有独立的模式，&lt;code>north&lt;/code>/&lt;code>south&lt;/code>/&lt;code>east&lt;/code>/&lt;code>west&lt;/code>。这将导致一些代码重复，但同时我们得到了更好的输入验证，并且如果用户输入的命令是&lt;code>“go figure!”&lt;/code>而不是方向，我们将不会进入那个分支。&lt;/p>
&lt;p>我们可以试着在两个方面都做到最好(为了简洁，我省略了不使用&lt;code>“go”&lt;/code>的别名版本):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;south&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;east&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;west&amp;#34;&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># how do I know which direction to go?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码是一个单独的分支，它验证&lt;code>“go”&lt;/code>之后的单词是否确实是一个方向。但移动玩家的代码需要知道选择了哪一个，但却无法做到这一点。我们需要的是一个行为类似于or模式但同时进行捕获的模式。我们可以使用&lt;strong>as模式&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;south&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;east&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;west&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as模式匹配左边的任何模式，同时也将值绑定到名称。&lt;/p>
&lt;h3 id="添加条件到模式">添加条件到模式&lt;/h3>
&lt;p>我们上面探讨的模式可以做一些强大的数据过滤，但有时您可能希望得到布尔表达式的全部功能。假设您实际上希望只允许&lt;code>“go”&lt;/code>命令出现在基于从&lt;code>current_room&lt;/code>的可能出口的受限方向集合中。我们可以通过在我们的案例中增加一个 &lt;strong>guard&lt;/strong> 来实现这一点。guard 由 if 关键字后跟任意表达式组成:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">direction&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exits&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Sorry, you can&amp;#39;t go that way&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>guard 不是模式的一部分，而是 case 的一部分。它只在模式匹配，并且所有模式变量都被绑定之后检查(这就是为什么条件可以在上面的例子中使用&lt;code>direction&lt;/code>变量)。如果模式匹配且条件为真，则 case body 正常执行。如果模式匹配，但条件为假，&lt;code>match&lt;/code>语句继续检查下一个条件，就好像模式没有匹配一样(可能的副作用是已经绑定了一些变量)。&lt;/p>
&lt;h3 id="添加ui-匹配对象">添加UI: 匹配对象&lt;/h3>
&lt;p>你的冒险游戏正走向成功，你被请求为游戏实现一个图形界面。您所选择的UI工具包允许您编写一个事件循环，您可以通过调用&lt;code>event.get()&lt;/code>来获取一个新的事件对象。根据用户的动作，结果对象可以有不同的类型和属性，例如:&lt;/p>
&lt;ul>
&lt;li>当用户按下某个键时，将生成&lt;code>KeyPress&lt;/code>对象。它有一个&lt;code>key_name&lt;/code>属性，其中包含所按键的名称，以及一些有关修饰符的其他属性。&lt;/li>
&lt;li>当用户单击鼠标时，将生成一个&lt;code>Click&lt;/code>对象。它有一个指针坐标的属性&lt;code>position&lt;/code>。&lt;/li>
&lt;li>当用户点击游戏窗口的关闭按钮时，会生成一个&lt;code>Quit&lt;/code>对象。&lt;/li>
&lt;/ul>
&lt;p>与其编写多个&lt;code>isinstance()&lt;/code>检查，你可以使用模式来识别不同类型的对象，也可以将模式应用到其属性上:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Q&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Quit&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;up arrow&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">go_north&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span> &lt;span class="c1"># Ignore other keystrokes&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">other_event&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Unrecognized event: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">other_event&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像&lt;code>Click(position=(x, y))&lt;/code>这样的模式仅在事件类型是&lt;code>Click&lt;/code>类的子类时才匹配。它还要求事件具有一个与&lt;code>(x, y)&lt;/code>模式匹配的位置属性。如果匹配，则局部变量&lt;code>x&lt;/code>和&lt;code>y&lt;/code>将得到期望的值。&lt;/p>
&lt;p>像&lt;code>KeyPress()&lt;/code>这样不带参数的模式将匹配任何&lt;code>KeyPress&lt;/code>类实例的对象。只有在模式中指定的属性才会匹配，其他任何属性都将被忽略。&lt;/p>
&lt;h3 id="匹配位置属性">匹配位置属性&lt;/h3>
&lt;p>前一节描述了在进行对象匹配时如何匹配命名属性。对于某些对象，可以方便地根据位置描述匹配的参数(特别是当只有几个属性并且它们有“标准”排序时)。如果您正在使用的类是命名元组 &lt;code>namedtuple&lt;/code> 或数据类 &lt;code>dataclass&lt;/code>，那么您可以按照构造对象时使用的相同顺序来实现这一点。例如，如果上面的UI框架像这样定义它们的类:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dataclasses&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">dataclass&lt;/span>
&lt;span class="nd">@dataclass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Click&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">tuple&lt;/span>
&lt;span class="n">button&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Button&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后你可以重写你的匹配语句来匹配上面的 subject:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>(x, y)&lt;/code>模式将自动匹配&lt;code>position&lt;/code>属性，因为模式中的第一个参数对应于数据类定义中的第一个属性。&lt;/p>
&lt;p>其他类的属性没有自然的顺序，因此需要在模式中使用显式名称来匹配它们的属性。但是，也可以手动指定属性的顺序，允许位置匹配，就像下面这个替代定义:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Click&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">__match_args__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;position&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;button&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">button&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>__match_args__&lt;/code>特殊属性定义了可以在&lt;code>case Click((x,y))&lt;/code>等模式中使用的属性的显式顺序。&lt;/p>
&lt;h3 id="匹配常量和枚举">匹配常量和枚举&lt;/h3>
&lt;p>上面的模式对所有鼠标按钮都一视同仁，但您已经决定只接受鼠标左键单击事件，而忽略其他鼠标按键。在做这一修改时，您注意到&lt;code>button&lt;/code>属性被定义为一个&lt;code>Button&lt;/code>，这是一个用&lt;code>enum.Enum&lt;/code>构建的枚举。实际上，你可以像这样匹配枚举值:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">button&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">LEFT&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># This is a left click&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span> &lt;span class="c1"># ignore other clicks&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将适用于任何带点的名称(如&lt;code>math.pi&lt;/code>)。然而，非限定名称(即没有点的裸名称)将总是被解释为捕获模式，因此在模式中始终使用限定常量可以避免这种歧义。&lt;/p>
&lt;h3 id="走进云服务匹配字典">走进云服务：匹配字典&lt;/h3>
&lt;p>你决定制作游戏的在线版本。您的所有逻辑都将在服务器中，而客户端中的UI将使用JSON消息进行通信。通过json模块，这些将被映射到Python字典、列表和其他内置对象。&lt;/p>
&lt;p>我们的客户端将收到一个字典列表(从JSON解析)，包含了要采取的动作，每个元素的查找示例如下:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{&amp;quot;text&amp;quot;: &amp;quot;The shop keeper says 'Ah! We have Camembert, yes sir'&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;blue&amp;quot;}&lt;/code>&lt;/li>
&lt;li>如果客户端应该暂停&lt;code>{&amp;quot;sleep&amp;quot;: 3}&lt;/code>&lt;/li>
&lt;li>播放声音 &lt;code>{&amp;quot;sound&amp;quot;: &amp;quot;filename.ogg&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;ogg&amp;quot;}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>到目前为止，我们的模式已经处理了序列，但是也有一些模式可以根据它们当前的键匹配映射。在这种情况下，你可以使用:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">actions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_text_color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">duration&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ogg&amp;#34;&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unsupported audio format&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>映射模式中的键需要是字面值，但是值可以是任何模式。与序列模式一样，所有子模式都必须匹配通用模式才能匹配。&lt;/p>
&lt;p>您可以在映射模式中使用&lt;code>**rest&lt;/code>来捕获 subject 中的附加键。请注意，如果你忽略了这一点，在匹配时，主题中的额外键将被忽略，例如，消息&lt;code>{&amp;quot;text&amp;quot;: &amp;quot;foo&amp;quot;， &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;， &amp;quot;style&amp;quot;: &amp;quot;bold&amp;quot;}&lt;/code>将匹配上面例子中的第一个模式。&lt;/p>
&lt;h3 id="匹配内建类-builtin-classes">匹配内建类 builtin classes&lt;/h3>
&lt;p>上面的代码可以需要一些验证。如果消息来自外部源，则字段的类型可能是错误的，从而导致错误或安全问题。&lt;/p>
&lt;p>任何类都是有效的匹配目标，其中包括&lt;code>bool&lt;/code>、&lt;code>str&lt;/code>或&lt;code>int&lt;/code>等内置类，这允许我们将上面的代码与类模式结合起来。因此，我们可以使用 &lt;code>{&amp;quot;text&amp;quot;: str() as message, &amp;quot;color&amp;quot;: str() as c}&lt;/code>来代替&lt;code>{&amp;quot;text&amp;quot;: message, &amp;quot;color&amp;quot;: c}&lt;/code>来确保&lt;code>message&lt;/code>和&lt;code>c&lt;/code>都是字符串。对于许多内置类(参见PEP-634了解整个列表)，可以使用位置参数作为简写，写成&lt;code>str(c)&lt;/code>而不是&lt;code>str() as c&lt;/code>。完全重写的版本如下所示:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">actions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_text_color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ogg&amp;#34;&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unsupported audio format&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录a----快速入门">附录A &amp;ndash; 快速入门&lt;/h2>
&lt;p>&lt;code>match&lt;/code>语句接受一个表达式，并将其值与作为一个或多个&lt;code>case&lt;/code>块给出的模式进行比较。这看起来类似于C、Java或JavaScript(以及许多其他语言)中的&lt;code>switch&lt;/code>语句，但功能要强大得多。&lt;/p>
&lt;p>最简单的形式是将一个 subject 值与一个或多个字面值进行比较:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">http_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Bad request&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Not found&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">418&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;I&amp;#39;m a teapot&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Something&amp;#39;s wrong with the Internet&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意最后一块:“变量名”&lt;code>_&lt;/code>充当通配符，永远不会失败。&lt;/p>
&lt;p>你可以使用&lt;code>|&lt;/code> (&amp;ldquo;or&amp;rdquo;)将几个字面值组合在一个模式中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">case&lt;/span> &lt;span class="mi">401&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">403&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Not allowed&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>模式看起来就像解包赋值，可以用来绑定变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># point is an (x, y) tuple&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a point&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仔细研究一下那个!第一个模式有两个字面量，可以认为是上面所示字面量模式的扩展。但是接下来的两个模式组合了一个字面量和一个变量，变量绑定来自 subject (&lt;code>point&lt;/code>)的值。第四个模式捕获两个值，这使得它在概念上类似于解包赋值&lt;code>(x, y) = point&lt;/code>。&lt;/p>
&lt;p>如果你使用类来构造数据，你可以使用类名后跟一个类似构造函数的参数列表，但是可以将属性捕获到变量中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">where_is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Somewhere else&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a point&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以在一些内置类中使用位置参数，这些类为它们的属性(例如数据类)提供排序。你也可以通过在你的类中设置&lt;code>__match_args__&lt;/code>特殊属性来定义模式中属性的特定位置。如果它被设置为&lt;code>(&amp;quot;x&amp;quot;， &amp;quot;y&amp;quot;)&lt;/code>，以下模式都是等价的(并且都将&lt;code>y&lt;/code>属性绑定到&lt;code>var&lt;/code>变量):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>模式可以任意嵌套。例如，如果我们有一个简短的点列表，我们可以这样匹配:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No points&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Single point &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Two on the Y axis at &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y1&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y2&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Something else&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以向模式添加一个&lt;code>if&lt;/code>子句，称为“guard”。如果 guard 为假，&lt;code>match&lt;/code> 继续尝试下一个&lt;code>case&lt;/code>块。注意，值捕获发生在guard求值之前:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=X at &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Not on the diagonal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他几个关键功能:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>与解包赋值一样，元组和列表模式具有完全相同的含义，并且实际上匹配任意序列。一个重要的异常是它们&lt;strong>不匹配&lt;/strong>迭代器或字符串。(技术上讲，subject 必须是&lt;code>collections.abc.Sequence&lt;/code>的一个实例。)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>序列模式支持通配符:&lt;code>[x, y， *rest]&lt;/code>和&lt;code>(x, y， *rest)&lt;/code>在解包赋值时的工作类似于通配符。*后面的名称也可以是&lt;code>_&lt;/code>，所以&lt;code>(x, y， *_)&lt;/code>匹配至少有两个项的序列，而不绑定其余的项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>映射模式:&lt;code>{&amp;quot;bandwidth&amp;quot;: b， &amp;quot;latency&amp;quot;: l}&lt;/code>从字典中捕获&lt;code>&amp;quot;bandwidth&amp;quot;&lt;/code>和&lt;code>&amp;quot;latency&amp;quot;&lt;/code>值。与序列模式不同，额外的键被忽略。还支持通配符&lt;code>**rest&lt;/code>。(但是&lt;code>**_&lt;/code>是多余的，所以不允许。)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以使用as关键字捕获子模式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>大多数字面值的比较是&lt;code>==&lt;/code>的，但是单例的&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>是通过&lt;code>id&lt;/code>进行比较的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模式可以使用命名的常量。这些必须用点命名，以防止它们被解释为捕获变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">enum&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Enum&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">RED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">GREEN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">BLUE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RED&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I see red!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">GREEN&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Grass is green&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">BLUE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I&amp;#39;m feeling the blues :(&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="原文档版权声明">原文档版权声明&lt;/h2>
&lt;p>This document is placed in the public domain or under the CC0-1.0-Universal license, whichever is more permissive.&lt;/p>
&lt;p>Source: &lt;a class="link" href="https://github.com/python/peps/blob/master/pep-0636.rst" target="_blank" rel="noopener"
>https://github.com/python/peps/blob/master/pep-0636.rst&lt;/a>&lt;/p></description></item><item><title>Flask源码阅读笔记：WSGI</title><link>https://nnnewb.github.io/blog/p/flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0wsgi/</link><pubDate>Sun, 17 Mar 2019 00:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0wsgi/</guid><description>&lt;h2 id="0-intro">0. Intro&lt;/h2>
&lt;p>Flask 是一个基于 WSGI 协议的上层应用框架，据我了解应该是和 Tornado、Django 流行程度相近，当然 Django 老大哥始终占据了最多的份额。Flask 是一个轻量级的 Micro Framework，源码值得一读。&lt;/p>
&lt;h2 id="1-回顾-wsgi">1. 回顾 WSGI&lt;/h2>
&lt;p>开始之前，需要先回顾以下 WSGI 协议。&lt;/p>
&lt;p>WSGI 是一个针对 Python 的协议，故说到的 App、Server、函数、参数等描述都是指 Python 对应的概念或实现。&lt;/p>
&lt;h3 id="11-pep-0333-到-pep-3333">1.1 PEP-0333 到 PEP-3333&lt;/h3>
&lt;p>PEP-0333 是初版的 WSGI 协议提案，PEP-3333 是 1.0.1 版本的 WSGI 提案，差别不大，主要是对 py3 和 py2 不兼容的部分作了更新说明（&lt;code>str&lt;/code>和&lt;code>unicode&lt;/code>方面的问题，python2 的 str 在 python3 是 bytes，故 python3 编写的 wsgi app 必须返回 bytes）。&lt;/p>
&lt;p>WSGI 协议规范了 Python Web 应用的两个层级：服务器层（Server）和应用层（Application），两者通过 WSGI 协议进行通信。&lt;/p>
&lt;p>其中 Server 负责处理请求，将请求转换成符合 WSGI 要求的模式（&lt;code>environ&lt;/code>参数）。 Application 完成处理后再通知 Server 返回 Response（&lt;code>start_response&lt;/code>参数）。&lt;/p>
&lt;p>WSGI 规定 App 必须是一个可以被调用的对象，接受指定数量的参数，WSGI Server 不关注任何其他 App 实现细节。而 WSGI App 也应当遵守这一要求，对 &lt;code>start_response&lt;/code> 参数也遵守不依赖于任何 WSGI Server 的实现细节。&lt;/p>
&lt;p>WSGI App 的接口规范声明如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>start_response&lt;/code>的声明如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">start_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response_headers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exc_info&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-wsgi-server">1.2 WSGI Server&lt;/h3>
&lt;p>常见的 WSGI Server 有几个。Nginx 和 Apache 都有 WSGI 插件，除此之外还有 gunicorn、gevent.wsgi 等。&lt;/p>
&lt;p>举一个典型的例子来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># app.py&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">wsgiserver&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">start_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;200 OK&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;text-plain&amp;#39;&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">wsgiserver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">WSGIServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;5000&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 windows 下使用如下命令安装 wsgiserver&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pip install wsgiserver
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">python app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-入口点">2. 入口点&lt;/h2>
&lt;p>看完 WSGI ，接下来看 Flask 请求的入口点在哪儿。&lt;/p>
&lt;h3 id="21-wsgi-server-与-run">2.1 WSGI Server 与 &lt;code>.run&lt;/code>&lt;/h3>
&lt;p>&lt;code>Flask&lt;/code>这个类定义于&lt;code>flask.app&lt;/code>，看这里的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_PackageBoundObject&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先不去管 &lt;code>_PackageBoundObject&lt;/code> 是啥。我们知道 &lt;code>Flask&lt;/code>有一个&lt;code>run&lt;/code>方法可以快速启动服务，直接跳转到那儿。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 844 ~ 949&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">debug&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">load_dotenv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; 略 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1"># Change this into a no-op if the server is invoked from the&lt;/span>
&lt;span class="c1"># command line. Have a look at cli.py for more information.&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;FLASK_RUN_FROM_CLI&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;true&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">.debughelpers&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">explain_ignored_app_run&lt;/span>
&lt;span class="n">explain_ignored_app_run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">get_load_dotenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">cli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># if set, let env vars override previous values&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="s1">&amp;#39;FLASK_ENV&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_env&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_debug_flag&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="s1">&amp;#39;FLASK_DEBUG&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_debug_flag&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># debug passed to method overrides all other sources&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">debug&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">_host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>
&lt;span class="n">_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5000&lt;/span>
&lt;span class="n">server_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;SERVER_NAME&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sn_host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">server_name&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">sn_host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">server_name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">partition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">sn_host&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">_host&lt;/span>
&lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">_port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;use_reloader&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;use_debugger&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;threaded&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show_server_banner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># reset the first request information if the development server&lt;/span>
&lt;span class="c1"># reset normally. This makes it possible to restart the server&lt;/span>
&lt;span class="c1"># without reloader and that stuff from an interactive shell.&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_got_first_request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>首先进入眼帘的是关于 flask/cli 的内容。 点进 &lt;code>explain_ignored_app_run&lt;/code> 可以得知这是一个防止用户犯蠢写下 app.run() 后又用 &lt;code>flask run&lt;/code>在命令行启动留下的说明性输出。&lt;/p>
&lt;p>其次是 dotenv 相关的玩意儿，没用过 dotenv 推荐去了解下 python-dotenv 这个包。可以很方便地配置好开发环境下的环境变量。&lt;/p>
&lt;p>经过一堆类型转换和检查之后，终于看到了这几行。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 941 ~ 949&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># reset the first request information if the development server&lt;/span>
&lt;span class="c1"># reset normally. This makes it possible to restart the server&lt;/span>
&lt;span class="c1"># without reloader and that stuff from an interactive shell.&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_got_first_request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;code>run_simple&lt;/code>？这就是 WSGI Server 启动的地方了。&lt;/p>
&lt;p>&lt;a class="link" href="http://werkzeug.pocoo.org/docs/0.14/serving/" target="_blank" rel="noopener"
>看看 werkzeug 文档吧&lt;/a>，我这里摘一段。&lt;/p>
&lt;blockquote>
&lt;p>Serving WSGI Applications
There are many ways to serve a WSGI application. While you’re developing it, you usually don’t want to have a full-blown webserver like Apache up and running, but instead a simple standalone one. Because of that Werkzeug comes with a builtin development server.
The easiest way is creating a small start-myproject.py file that runs the application using the builtin server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">myproject&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">make_app&lt;/span>
&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8080&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">use_reloader&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>从函数签名可以看得出，&lt;code>run_simple&lt;/code>启动时，flask 将自己作为 wsgi app 参数传给了 werkzeug，不难猜测出，Flask 本身是一个可调用对象，即重写了 &lt;code>__call__&lt;/code> 方法。&lt;/p>
&lt;h3 id="22-__call__">2.2 &lt;code>__call__&lt;/code>&lt;/h3>
&lt;p>来到&lt;code>__call__&lt;/code>，发现它调用了&lt;code>self.wsgi_app&lt;/code>，本身没做任何事。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 2323 ~ 2327&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__call__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;The WSGI server calls the Flask application object as the
&lt;/span>&lt;span class="s2"> WSGI application. This calls :meth:`wsgi_app` which can be
&lt;/span>&lt;span class="s2"> wrapped to applying middleware.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wsgi_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>再来到 &lt;code>wsgi_app&lt;/code> 的定义。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">wsgi_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; 略 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request_context&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full_dispatch_request&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">handle_exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exc_info&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">should_ignore_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">auto_pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里，就是整个 Flask 作为 wsgi app，处理 request 的入口点了。&lt;/p>
&lt;p>从这儿我们能鸟瞰整个 flask 框架的核心逻辑。&lt;code>environ&lt;/code>被包装成 &lt;code>request&lt;/code>，压栈，&lt;code>full_dispatch_request&lt;/code>路由至视图，处理异常，一切结束后清栈。&lt;/p></description></item><item><title>Django 的各种关系字段详解</title><link>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 06 Mar 2019 21:11:35 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</guid><description>&lt;blockquote>
&lt;p>参考资料如下&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/models/fields/" target="_blank" rel="noopener"
>Django 文档 - Model field reference&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://graycarl.me/2014/03/24/sqlalchemy-cascade-delete.html" target="_blank" rel="noopener"
>SQLAlchemy 中的级联删除&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="1-foreignkey">1. ForeignKey&lt;/h2>
&lt;p>&lt;code>ForeignKey&lt;/code>用于多对一关系，直接对应到数据库外键的概念。使用&lt;code>ForeignKey&lt;/code>需要指定引用的目标表，会自动关联到目标表的主键（一般是&lt;code>id&lt;/code>字段）。&lt;/p>
&lt;p>例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对比之 sqlalchemy，一行&lt;code>parent=models.ForeignKey(...)&lt;/code>包含了 sqlalchemy 中的&lt;code>ForeignKey&lt;/code>和&lt;code>relationship&lt;/code>两部分内容。&lt;/p>
&lt;h3 id="11-参数on_delete">1.1 参数：on_delete&lt;/h3>
&lt;p>&lt;code>on_delete&lt;/code>意为当&lt;code>ForeignKey&lt;/code>引用的对象被删除时进行的操作。&lt;/p>
&lt;p>有几个可以考虑的选项。&lt;/p>
&lt;h4 id="111-modelscascade">1.1.1 models.CASCADE&lt;/h4>
&lt;p>&lt;code>CASCADE&lt;/code>意为级联，&lt;code>on_delete&lt;/code>设置为&lt;code>CASCADE&lt;/code>时意为执行级联删除。依据文档，Django 会模仿 SQL 的&lt;code>ON DELETE CASCADE&lt;/code>，对包含了&lt;code>ForeignKey&lt;/code>的对象执行删除。&lt;/p>
&lt;p>需要注意的是不会调用被级联删除对象上的&lt;code>model.delete()&lt;/code>，但是会发送&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.pre_delete" target="_blank" rel="noopener"
>&lt;code>pre_delete&lt;/code>&lt;/a>和&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.post_delete" target="_blank" rel="noopener"
>&lt;code>post_delete&lt;/code>&lt;/a>信号。&lt;/p>
&lt;h4 id="1112-modelsprotect">1.1.1.2 models.PROTECT&lt;/h4>
&lt;p>&lt;code>PROTECT&lt;/code>意为保护，&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>意味着要阻止删除操作发生。删除关联的对象时，&lt;code>ForeignKey&lt;/code>的&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>会触发&lt;code>ProtectedError&lt;/code>。&lt;/p>
&lt;h4 id="1113-modelsset_null">1.1.1.3 models.SET_NULL&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>是 nullable 的，则关联的对象删除时将外键设置为 null。&lt;/p>
&lt;h4 id="1114-modelsset_default">1.1.1.4 models.SET_DEFAULT&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>设置了&lt;code>DEFAULT&lt;/code>，则关联的对象删除时设置这个外键为&lt;code>DEFAULT&lt;/code>值。&lt;/p>
&lt;h4 id="1115-modelsset">1.1.1.5 models.SET&lt;/h4>
&lt;p>在关联的对象删除时，设置为一个指定的值。这个参数可以接受一个可以赋值给这个 ForeignKey 的对象或者一个可调用对象。&lt;/p>
&lt;p>官方例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.contrib.auth&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_user_model&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_sentinel_user&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">get_user_model&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_or_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;deleted&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MyModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">AUTH_USER_MODEL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_sentinel_user&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1116-modelsdo_nothing">1.1.1.6 models.DO_NOTHING&lt;/h4>
&lt;p>应该不用多说了吧。Django 不会做多余的事情，但是如果后端的数据库服务有强制完整性约束，除非你在数据库一端自己定义了&lt;code>ON DELETE&lt;/code>，否则会触发&lt;code>IntegrityError&lt;/code>。&lt;/p>
&lt;h3 id="12-参数limited_choice_to">1.2 参数：limited_choice_to&lt;/h3>
&lt;p>强制约束为 django.admin 或者 ModelForm 渲染时提供有限的可选项。&lt;/p>
&lt;p>接受参数为&lt;code>dict&lt;/code>或者&lt;code>Q&lt;/code>对象、返回&lt;code>Q&lt;/code>对象的可调用对象。&lt;/p>
&lt;p>官方例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">staff_member&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">User&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">limit_choices_to&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;is_staff&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q 对象是什么玩意儿这个我搞明白了再说&amp;hellip;&lt;/p>
&lt;h3 id="13-参数related_name">1.3 参数：related_name&lt;/h3>
&lt;p>设置反向关联的字段名，和&lt;code>sqlalchemy&lt;/code>的&lt;code>backref&lt;/code>类似。&lt;/p>
&lt;p>举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child_set&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 未设置 related_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 设置 related_name=children&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-参数related_query_name">1.4 参数：related_query_name&lt;/h3>
&lt;p>related_query_name 和 related_name 类似，设置反向引用查询时条件的前缀名。举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CharField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Child__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 未设置 related_query_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myboy__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 设置 related_query_name=myboy&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="15-参数to_field">1.5 参数：to_field&lt;/h3>
&lt;p>得到&lt;code>ForeignKey&lt;/code>关联的模型的字段，默认是主键，如果指定的不是主键那么必须有&lt;code>unique&lt;/code>约束才行。&lt;/p>
&lt;h3 id="16-参数db_constraint">1.6 参数：db_constraint&lt;/h3>
&lt;p>要不要创建数据库层级的约束，也就是通过后端数据库服务确保数据完整性不受破坏。如果设置为 False 那么访问不存在的对象时会触发 DoesNotExists 异常。&lt;/p>
&lt;h3 id="17-参数swappable">1.7 参数：swappable&lt;/h3>
&lt;p>用于处理“我有一个抽象类模型但是这个模型有一个外键”的情况，典型就是&lt;code>AUTH_USER_MODEL&lt;/code>。&lt;/p>
&lt;p>一般不用改到，这个属性控制了数据库迁移时如何处理这个外键关联的表，总之保持默认值就行了。&lt;/p>
&lt;p>这个功能支持了使用自定义的用户模型替代 &lt;code>django.auth.models.User&lt;/code> 之类的玩意儿。&lt;/p>
&lt;h2 id="2-onetoonefield">2. OneToOneField&lt;/h2>
&lt;p>&lt;code>OneToOneField&lt;/code> 基本就是一个加了&lt;code>unique&lt;/code>约束的&lt;code>ForeignKey&lt;/code>。使用上与 ForeignKey 略有不同。&lt;/p>
&lt;p>首先是访问 &lt;code>OneToOneField&lt;/code> 时，得到的不是 &lt;code>QuerySet&lt;/code> 而是一个对象实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 优生优育政策（&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OneToOneField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Child&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Child 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次是反向引用的名字是模型名字小写。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Parent 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果指定 &lt;code>related_name&lt;/code> 那就和 &lt;code>ForeignKey&lt;/code> 一个表现。&lt;/p>
&lt;h2 id="3-manytomanyfield">3. ManyToManyField&lt;/h2>
&lt;p>基本和&lt;code>ForeignKey&lt;/code>相同。&lt;/p>
&lt;h3 id="31-和-foreignkey-相同的参数">3.1 和 &lt;code>ForeignKey&lt;/code> 相同的参数&lt;/h3>
&lt;ul>
&lt;li>related_name&lt;/li>
&lt;li>related_query_name&lt;/li>
&lt;li>limited_choices_to&lt;/li>
&lt;li>db_constraint&lt;/li>
&lt;li>swappable&lt;/li>
&lt;/ul>
&lt;p>limited_choices_to 在指定自定义中间表的情况下无效。&lt;/p>
&lt;h3 id="32-参数symmetrical">3.2 参数：symmetrical&lt;/h3>
&lt;p>用于处理一个表自己对自己的多对多引用对称性。&lt;/p>
&lt;p>Django 的默认行为是，我是你的朋友，那么你就是我的朋友。&lt;/p>
&lt;p>设置了这个参数则强迫 Django 改变这个行为，允许“被朋友”。&lt;/p>
&lt;h3 id="33-参数through">3.3 参数：through&lt;/h3>
&lt;p>默认情况下，Django 会自行创建中间表，这个参数强制指定中间表。&lt;/p>
&lt;p>默认中间表模型里包含三个字段。&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>&amp;lt;containing_model&amp;gt;_id&lt;/li>
&lt;li>&amp;lt;other_model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;p>如果是自己和自己的多对多关系，则&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>from_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;li>to_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;h3 id="34-参数through_fields">3.4 参数：through_fields&lt;/h3>
&lt;p>当自行指定中间表，中间表又包含了多个外键时，指定关联的外键用。&lt;/p>
&lt;p>举例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ModelB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时在中间表中&lt;code>a&lt;/code>和&lt;code>c&lt;/code>都是对&lt;code>ModelA&lt;/code>的外键，产生了歧义，Django 无法自行决定用哪个外键来关联 AB 两个表。&lt;/p>
&lt;p>这时提供参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through_fields&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ManyToManyField&lt;/code> 关联两个表总是不对称的关系（指我把你当兄弟，你却想当我爸爸这样的关系。此时“我”对“你”的“兄弟”关系就是单向的。），这就形成了&lt;strong>来源&lt;/strong>和&lt;strong>目标&lt;/strong>的概念。&lt;/p>
&lt;p>&lt;code>through_fields&lt;/code> 的第一个元素总被认为是&lt;strong>来源&lt;/strong>字段，第二个元素是&lt;strong>目标&lt;/strong>字段。&lt;/p>
&lt;h3 id="35-参数db_table">3.5 参数：db_table&lt;/h3>
&lt;p>指定 Django 创建的中间表的名字，默认根据两个表表名和 &lt;code>ManyToManyField&lt;/code> 的名字决定。&lt;/p></description></item><item><title>轻量级 django 阅读笔记：最小的 django 应用</title><link>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 03 Mar 2019 12:26:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>找不到工作十分难受，在家看书，恰巧翻到这本《轻量级 Django》，看起来还蛮有意思的，做个读书笔记。&lt;/p>
&lt;h2 id="1-最小的-django-app">1. 最小的 Django App&lt;/h2>
&lt;p>Django 是个重量级框架，所谓最小指的是写最少的代码，理解一个 Django App 的最小组成元素。&lt;/p>
&lt;p>作为开场，先创建一个 &lt;code>app.py&lt;/code> 文件，作为整个 Django App 存储的地方。&lt;/p>
&lt;h3 id="11-djangoconfsettings">1.1 django.conf.settings&lt;/h3>
&lt;p>书中使用 &lt;code>django.core.management.execute_from_command_line&lt;/code> 作为启动 Django app 的手段。&lt;/p>
&lt;p>&lt;code>execute_from_command_line&lt;/code>，就是通过 &lt;code>django startproject&lt;/code>的方式创建的&lt;code>manage.py&lt;/code>内的主要内容，这种方式启动必须要配置&lt;code>settings&lt;/code>才行。&lt;/p>
&lt;p>在一个常规方式创建的 Django App 中，&lt;code>settings.py&lt;/code>是一个独立的 python 模块，&lt;code>Django&lt;/code>通过&lt;code>DJANGO_SETTINGS_MODULE&lt;/code>这个环境变量来确定配置信息存储位置。&lt;/p>
&lt;p>但是换一种方式，&lt;code>django.conf.settings.configure()&lt;/code>可以手动完成配置。&lt;/p>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一个 keyword argument 都和 &lt;code>settings.py&lt;/code>这个模块内的名字相同，去除所有不必要的元素之后，剩下的就是&lt;code>DEBUG&lt;/code>和&lt;code>ROOT_URLCONF&lt;/code>了。&lt;/p>
&lt;p>阅读源码可知&lt;code>configure&lt;/code>只能被调用一次。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 摘自 django.conf.settings.configure 源码&lt;/span>
&lt;span class="c1"># Django 版本号:&lt;/span>
&lt;span class="c1"># VERSION = (2, 1, 7, &amp;#39;final&amp;#39;, 0)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default_settings&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">global_settings&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> Called to manually configure the settings. The &amp;#39;default_settings&amp;#39;
&lt;/span>&lt;span class="s2"> parameter sets where to retrieve any unspecified values from (its
&lt;/span>&lt;span class="s2"> argument must support attribute access (__getattr__)).
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Settings already configured.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UserSettingsHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default_settings&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">setattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">holder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">holder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-urlpatterns">1.2 urlpatterns&lt;/h3>
&lt;p>都知道 &lt;code>Django&lt;/code> 的路由是需要手动写明的，和&lt;code>flask&lt;/code>等以装饰器的方式配置路由的风格迥异。哪种风格更好，就看用户自己见仁见智了。&lt;/p>
&lt;p>上文的&lt;code>settings.configure&lt;/code>中可以看到有一句&lt;code>ROOT_URLCONF=__name__&lt;/code>，意义明确，就是指定哪个 python 模块保存了路由配置信息，而这里指定的&lt;code>__name__&lt;/code>正是自己。&lt;/p>
&lt;p>所以我们的&lt;code>urlpatterns&lt;/code>也应当如配置所述，写到这个文件中。&lt;/p>
&lt;p>见代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="13-__main__">1.3 &lt;code>__main__&lt;/code>&lt;/h3>
&lt;p>最后将所有的代码整合起来，就形成了这样一个 python 程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>算上所有的 import 在内共 12 行，4 行空行，5 行 import，3 行代码，即构成了一个麻雀虽小五脏俱全的 Django hello world。&lt;/p>
&lt;p>在命令行执行&lt;code>python app.py runserver&lt;/code>即可看到以下输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">PS&lt;/span> &lt;span class="n">D&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">GitHub&lt;/span>\&lt;span class="n">minimum&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">django&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">python&lt;/span> &lt;span class="o">.&lt;/span>\&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">runserver&lt;/span>
&lt;span class="n">Performing&lt;/span> &lt;span class="n">system&lt;/span> &lt;span class="n">checks&lt;/span>&lt;span class="o">...&lt;/span>
&lt;span class="n">System&lt;/span> &lt;span class="n">check&lt;/span> &lt;span class="n">identified&lt;/span> &lt;span class="n">no&lt;/span> &lt;span class="n">issues&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">silenced&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="n">March&lt;/span> &lt;span class="mi">03&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2019&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="n">Django&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="mf">2.1.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">using&lt;/span> &lt;span class="n">settings&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="n">Starting&lt;/span> &lt;span class="n">development&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8000&lt;/span>&lt;span class="o">/&lt;/span>
&lt;span class="n">Quit&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">CTRL&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">BREAK&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-wsgi">1.4 wsgi&lt;/h3>
&lt;p>完成了最小的 django app，依然有一个问题。&lt;/p>
&lt;p>如何部署这个 django app？&lt;/p>
&lt;p>固然，使用 runserver 的方式执行，再 nginx 反向代理是一个不错的主意，但 uwsgi 之类的部署方式依然有其独到的优势。&lt;/p>
&lt;p>使用 uwsgi 或者 gunicorn 之类的基于 wsgi 协议的服务器就必须取得一个 wsgi app 实例才行。&lt;/p>
&lt;p>Django 提供了函数 &lt;code>django.core.wsgi.get_wsgi_application&lt;/code> 用于取得 wsgi app。&lt;/p>
&lt;p>手头没 linux 机器，懒得演示 output 了。就这样吧。&lt;/p>
&lt;p>最终代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.wsgi&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="n">application&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;code>gunicorn app.py --log-file=-&lt;/code>启动。&lt;/p></description></item><item><title>sqlalchemy 各种表关系</title><link>https://nnnewb.github.io/blog/p/sqlalchemy-%E5%90%84%E7%A7%8D%E8%A1%A8%E5%85%B3%E7%B3%BB/</link><pubDate>Fri, 01 Mar 2019 15:52:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/sqlalchemy-%E5%90%84%E7%A7%8D%E8%A1%A8%E5%85%B3%E7%B3%BB/</guid><description>&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;h3 id="foreignkey">ForeignKey&lt;/h3>
&lt;p>&lt;code>db.ForeginKey&lt;/code>的参数是&lt;code>&amp;lt;表名&amp;gt;.&amp;lt;键名&amp;gt;&lt;/code>，而不是&lt;code>&amp;lt;类名&amp;gt;.&amp;lt;字段名&amp;gt;&lt;/code>，务必注意这个区别。&lt;/p>
&lt;h3 id="back_populates-和-backref-在多对多关系中使用的区别">back_populates 和 backref 在多对多关系中使用的区别&lt;/h3>
&lt;p>&lt;code>back_populates&lt;/code>是更推荐的写法。&lt;/p>
&lt;p>多对多关系中使用&lt;code>backref&lt;/code>并指定了&lt;code>secondary&lt;/code>的话，另一张表关联的&lt;code>relationship&lt;/code>字段会使用相同的&lt;code>secondary&lt;/code>。&lt;/p>
&lt;p>&lt;code>back_populates&lt;/code>则需要在两张表的&lt;code>relationship&lt;/code>中都写上相同的&lt;code>secondary&lt;/code>中间表。&lt;/p>
&lt;h3 id="可调用的-secondary">可调用的 secondary&lt;/h3>
&lt;p>&lt;code>secondary&lt;/code>参数可以是一个可调用对象，做一些 trick 的时候应该有用。姑且记下。&lt;/p>
&lt;h2 id="一对多关系">一对多关系&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;child&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parent_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;parent.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;child&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>parent&lt;/code>包含多个&lt;code>child&lt;/code>的一对多关系。&lt;code>child&lt;/code>里写&lt;code>ForeignKey&lt;/code>为&lt;code>parent&lt;/code>的主键，&lt;code>child&lt;/code>里写&lt;code>relationship&lt;/code>，&lt;code>parent&lt;/code>里同样写&lt;code>relationship&lt;/code>，&lt;code>back_populates&lt;/code>填充上，完事。&lt;/p>
&lt;h2 id="一对一关系">一对一关系&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uselist&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;child&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parent_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;parent.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;child&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一对一关系中&lt;code>parent&lt;/code>需要在&lt;code>relationship&lt;/code>里加入参数&lt;code>uselist&lt;/code>，其他相同，完事儿。&lt;/p>
&lt;h2 id="多对多关系">多对多关系&lt;/h2>
&lt;p>多对多关系需要一个中间表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">association_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;association&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;left_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;left.id&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;right_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;right.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;left&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">secondary&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">association_table&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parents&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;right&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parents&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">secondary&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">association_table&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;children&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>中间表里写上&lt;code>parent&lt;/code>和&lt;code>child&lt;/code>的主键作为&lt;code>foreignkey&lt;/code>，&lt;code>parent&lt;/code>和&lt;code>child&lt;/code>里的&lt;code>relationship&lt;/code>加入参数&lt;code>secondary&lt;/code>，指定为中间表。&lt;/p></description></item><item><title>利用 descriptor 实现自己的 property</title><link>https://nnnewb.github.io/blog/p/%E5%88%A9%E7%94%A8-descriptor-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84-property/</link><pubDate>Thu, 21 Feb 2019 17:53:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%88%A9%E7%94%A8-descriptor-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84-property/</guid><description>&lt;h2 id="1概念简介">1.概念简介&lt;/h2>
&lt;h3 id="11-property">1.1 property&lt;/h3>
&lt;p>在 python 代码中，property 是非常常见的一个内置函数。property 可以为一个 python 类的 attribute 设置 getter/setter，可以类比之 C# 的 &lt;a class="link" href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/classes#properties" target="_blank" rel="noopener"
>properties&lt;/a>。&lt;/p>
&lt;p>见下面的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="nd">@property&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span>
&lt;span class="nd">@hello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># 1&lt;/span>
&lt;span class="n">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">obj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># hello world&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-descriptor">1.2 descriptor&lt;/h3>
&lt;p>python 中的 descriptor 指的是实现了&lt;code>__get__&lt;/code>、&lt;code>__set__&lt;/code>、&lt;code>__delete__&lt;/code>三个方法之一的类。&lt;/p>
&lt;p>当一个 descriptor 类的实例作为其他类的成员时，通过&lt;code>obj.attr&lt;/code>语法访问该实例将会调用 descriptor 实例的&lt;code>__get__&lt;/code>方法。同理，&lt;code>__set__&lt;/code>和&lt;code>__delete__&lt;/code>也是相似的逻辑。&lt;/p>
&lt;p>先看个例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">DescriptorClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">owner&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;some value&amp;#39;&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">some_attr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DescriptorClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SomeClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">some_attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># &amp;lt;__main__.DescriptorClass object at 0x0000027AAE777160&amp;gt;&lt;/span>
&lt;span class="c1"># &amp;lt;__main__.SomeClass object at 0x0000027AAE777198&amp;gt;&lt;/span>
&lt;span class="c1"># &amp;lt;class &amp;#39;__main__.SomeClass&amp;#39;&amp;gt;&lt;/span>
&lt;span class="c1"># some value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-实现">2. 实现&lt;/h2>
&lt;p>property 的逻辑在于，&lt;strong>当实例访问这个属性时，调用方法&lt;/strong>。descriptor 刚好处在那个正确的位置上。&lt;/p>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">PropertyDescriptor&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fn&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__set__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">setter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">func&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">my_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">PropertyDescriptor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nd">@my_property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">simple_attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;a simple property&amp;#39;&lt;/span>
&lt;span class="nd">@simple_attr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">simple_attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;simple attr setter&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">simple_attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">simple_attr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;something&amp;#39;&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># a simple property&lt;/span>
&lt;span class="c1"># simple attr setter&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-总结">3. 总结&lt;/h2>
&lt;blockquote>
&lt;p>个人看法，谨慎参考&lt;/p>
&lt;/blockquote>
&lt;p>descriptor 避免了重复编写&lt;code>getter&lt;/code>和&lt;code>setter&lt;/code>方法，非常直觉的一种用途就是类似于&lt;code>SQLAlchemy&lt;/code>这样的 ORM 框架的的字段映射。不需要为每一个特定类型的字段在基类或元类里编写大量样板代码。&lt;/p>
&lt;p>但这种设计是侵入式的（需要修改目标类的代码），而且非常不直观。在合适的地方使用相信可以有其发光发热的空间。&lt;/p>
&lt;p>对可读性来讲，结合元类，这俩被一起滥用的话对维护者而言完全是地狱吧&amp;hellip;&lt;/p></description></item><item><title>python3元类深入解读</title><link>https://nnnewb.github.io/blog/p/python3%E5%85%83%E7%B1%BB%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BB/</link><pubDate>Thu, 20 Dec 2018 19:46:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/python3%E5%85%83%E7%B1%BB%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BB/</guid><description>&lt;h2 id="0-intro">0. intro&lt;/h2>
&lt;p>元类是 python 里被说烂了的一个东西，然而日常用到的地方实在不多，每次想到都得查一下谷歌，想想干脆在博客留个笔记好了。&lt;/p>
&lt;p>元类的主要用途是定制&lt;strong>类&lt;/strong>的产生过程，以便于根据类声明包含的信息来创建出不同的类。&lt;/p>
&lt;h2 id="1-type">1. type&lt;/h2>
&lt;p>提到元类不得不说一下 python 的类型系统。&lt;/p>
&lt;p>python 的 class 也被视作一个对象，定制一个 class 的构造过程其实就和平时在 class 定义里写&lt;code>__init__&lt;/code>没啥区别。&lt;/p>
&lt;p>python3 里类的类型是&lt;code>type&lt;/code>，&lt;code>type&lt;/code>又继承自&lt;code>object&lt;/code>，&lt;code>object&lt;/code>的父类是自己，构成一个奇怪的闭环。其中，&lt;code>type&lt;/code>本身是一个特殊的类，他是自己的实例。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">graph TB;
type --&amp;gt; |inherite|object;
type --&amp;gt; |instance-of| type;
object --&amp;gt; |instance-of|type;
other-cls --&amp;gt; |instance-of| type;
other-cls --&amp;gt; |inherite| object;
other-cls-instance --&amp;gt; |instance-of|other-cls;
&lt;/code>&lt;/pre>&lt;p>&lt;code>type&lt;/code>有两种调用方式，一种是最常用的接受一个对象参数，返回该对象的类型，另一种是不怎么常用的，直接创建一个新的类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># usage with one argument&lt;/span>
&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 返回对象的类型，这里返回的是 `type`&lt;/span>
&lt;span class="c1"># usage with three arguments&lt;/span>
&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 返回新创建的类型&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-meta-class">2. meta class&lt;/h2>
&lt;p>元类语法如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basecls1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">basecls2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaClass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般的元类可以是一个真正的&lt;code>class&lt;/code>或者一个函数。&lt;/p>
&lt;p>以函数为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">meta_f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">meta_f&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以类为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaC&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>元类可以接受参数，参数必须是命名的，传递参数的方式是写在类声明的继承列表里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">meta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optional_arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">named_arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">option&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">optional_arg&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">meta&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># output: hi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>位置参数都会被当成继承列表，作为&lt;code>bases&lt;/code>参数(list)的一部分传入元类。&lt;/p>
&lt;h2 id="3-元类继承规则">3. 元类继承规则&lt;/h2>
&lt;p>有了元类那么就有了相应继承规则，显而易见。元类用于构造一个类，两个父类分别有一个不同的元类显然会造成冲突：这个子类用哪个元类构造？&lt;/p>
&lt;p>首先看元类的在创建类的过程中的位置，摘自 python 文档&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html#metaclasses" target="_blank" rel="noopener"
>3.3.3.1. Metaclasses&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>MRO entries are resolved&lt;/li>
&lt;li>the appropriate metaclass is determined&lt;/li>
&lt;li>the class namespace is prepared&lt;/li>
&lt;li>the class body is executed&lt;/li>
&lt;li>the class object is created&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>一旦处理完继承链（mro, method resolve order）之后，就会决定采用哪个 metaclass 作为构造这个类的元类。&lt;/p>
&lt;p>在 python 文档的&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html#determining-the-appropriate-metaclass" target="_blank" rel="noopener"
>3.3.3.3 determining the appropriate metaclass&lt;/a>中描述了如何确定合适的元类，摘录如下。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>if no bases and no explicit metaclass are given, then type() is used&lt;/li>
&lt;li>if an explicit metaclass is given and it is not an instance of type(), then it is used directly as the metaclass&lt;/li>
&lt;li>if an instance of type() is given as the explicit metaclass, or bases are defined, then the most derived metaclass is used&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>翻译如下&lt;/p>
&lt;ul>
&lt;li>如果没有基类也没有指定 metaclass，那么&lt;code>type()&lt;/code>将作为元类使用。&lt;/li>
&lt;li>如果指定了元类，并且该元类不是 type 的实例，那么直接使用这个元类。&lt;/li>
&lt;li>如果元类是一个 type 的实例，或者存在基类，那么使用最衍生的元类。&lt;/li>
&lt;/ul>
&lt;p>有一个比较难理解的点是&lt;/p>
&lt;blockquote>
&lt;p>most derived metaclass&lt;/p>
&lt;/blockquote>
&lt;p>也就是所谓的&lt;strong>最衍生的元类&lt;/strong>。惯例，先放文档解释&lt;/p>
&lt;blockquote>
&lt;p>The most derived metaclass is selected from the explicitly specified metaclass (if any) and the metaclasses (i.e. type(cls)) of all specified base classes. The most derived metaclass is one which is a subtype of all of these candidate metaclasses. If none of the candidate metaclasses meets that criterion, then the class definition will fail with TypeError.&lt;/p>
&lt;/blockquote>
&lt;p>简单翻译如下&lt;/p>
&lt;blockquote>
&lt;p>最衍生的元类会从类声明中明确提供的元类，还有所有明确继承的基类的元类中选择。最衍生的元类是以上所有候选元类的子类型，如果没有类型符合这一条件，则抛出&lt;code>TypeError&lt;/code>异常。&lt;/p>
&lt;/blockquote>
&lt;p>重点在于，&lt;strong>最衍生的元类必须是&lt;/strong>，所有继承的基类的元类和指定元类的&lt;strong>子类型&lt;/strong>。&lt;/p>
&lt;p>在这里提醒一下，&lt;code>issubclass(cls, cls)&lt;/code>的结果是&lt;code>True&lt;/code>。换句话说，必须有一个类是所有元类的子类，或者所有基类有相同的元类。&lt;/p>
&lt;p>代码举例如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MetaA &amp;lt;- &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MetaB &amp;lt;- &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaB&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="c1"># 未指定元类，基类元类分别是type和type的子类，则选择继承链底部的那个类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BaseB&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok,元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，元类和基类元类相同的情况下，元类就是那个元类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，元类并不处于继承链底端的情况下，元类选择继承链底端的类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，但元类和父类无父子类关系&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">E&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># TypeError&lt;/span>
&lt;span class="c1"># 不指定元类，基类具有不同的元类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseA&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BaseC&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># TypeError&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">MetaA &amp;lt;- A
MetaA &amp;lt;- C
MetaA &amp;lt;- D
In [71]: class E(BaseC, metaclass=MetaA): ... # TypeError
---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
&amp;lt;ipython-input-71-9129a36c52b2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 class E(BaseC, metaclass=MetaA): ... # TypeError
TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
In [72]: class F(BaseA,BaseB,BaseC): ... # TypeError
---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
&amp;lt;ipython-input-72-1c510edd69d1&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 class F(BaseA,BaseB,BaseC): ... # TypeError
TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但元类是函数的情况下会有比较特殊的表现，注意规则二。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>如果指定了元类，并且该元类不是 type 的实例，那么直接使用这个元类。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果函数形式的元类作为父类的元类时不会列入选择，除非指定当前类的元类为函数，才会调用函数形式的元类，而且是无条件选择这个函数形式的元类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">MetaA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;MetaA &amp;lt;- &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MetaB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，无条件选择元类 MetaA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python 实现 redis 分布式锁</title><link>https://nnnewb.github.io/blog/p/python-%E5%AE%9E%E7%8E%B0-redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link><pubDate>Mon, 17 Dec 2018 14:57:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/python-%E5%AE%9E%E7%8E%B0-redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>分布式不是啥黑魔法，究其理念无非是用多台服务器处理更多的请求。提高每秒处理的数据量，并发就不可避免了。&lt;/p>
&lt;p>在单机并发的情况下，我们可以用 mutex，可以用 os 的文件锁，全局锁，多台服务器的并发就需要另一个持有并保护锁的角色了。&lt;/p>
&lt;p>概述如何使用 redis 实现一个分布式锁。&lt;/p>
&lt;h2 id="为何是-lua">为何是 Lua&lt;/h2>
&lt;p>redis 保证了 lua 解释器执行脚本的事务性，即执行结果要么不可见，要么已完成。&lt;/p>
&lt;p>参考&lt;a class="link" href="http://redisdoc.com/script/eval.html" target="_blank" rel="noopener"
>这篇文档&lt;/a>。&lt;/p>
&lt;h2 id="简单锁">简单锁&lt;/h2>
&lt;p>简单锁指的是简单互斥锁，一旦锁定，则其他锁定请求都必须等待。&lt;/p>
&lt;h3 id="加锁">加锁&lt;/h3>
&lt;p>直觉的想法是通过 redis 的键来保持锁，故准备一个用于锁定互斥的名字（比如说 mutex-1）然后指定为键。&lt;/p>
&lt;p>直接使用 set 是显然不正确的，如果临界区内程序崩溃或意外断网将导致死锁，所以 setnx 和 expire 是必选项。&lt;/p>
&lt;p>加锁需要判断锁的键为空，才能加锁，这两步必须保证原子性，要么都执行，要么一个都不执行。幸好 redis 提供了这方面保证，只要使用 lua 脚本的话。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 加锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;setnx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;expire&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的 lua 代码用 python 再封装一层，就是这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 加锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == nil then
&lt;/span>&lt;span class="s1"> if redis.call(&amp;#34;setnx&amp;#34;, KEYS[1], ARGV[1]) ~= nil then
&lt;/span>&lt;span class="s1"> redis.call(&amp;#34;expire&amp;#34;, KEYS[1], ARGV[2])
&lt;/span>&lt;span class="s1"> return 1
&lt;/span>&lt;span class="s1"> else
&lt;/span>&lt;span class="s1"> return
&lt;/span>&lt;span class="s1"> end
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lock&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解锁">解锁&lt;/h3>
&lt;p>解锁代码同样是通过 lua 实现。&lt;/p>
&lt;p>下面是&lt;strong>错误实现例子&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误之处在于会解除非自己加的锁。如果临界区内的工作时间超过预期时间，那么就会造成误解锁的问题。&lt;/p>
&lt;p>下面是&lt;strong>正确例子&lt;/strong>。&lt;/p>
&lt;p>为了标记锁持有者，需要修改加锁代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 加锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == nil then
&lt;/span>&lt;span class="s1"> if redis.call(&amp;#34;setnx&amp;#34;, KEYS[1], ARGV[1]) ~= nil then
&lt;/span>&lt;span class="s1"> redis.call(&amp;#34;expire&amp;#34;, KEYS[1], ARGV[2])
&lt;/span>&lt;span class="s1"> return 1
&lt;/span>&lt;span class="s1"> else
&lt;/span>&lt;span class="s1"> return
&lt;/span>&lt;span class="s1"> end
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解锁的 lua 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解锁的 python 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 解锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == ARGV[1] then
&lt;/span>&lt;span class="s1"> return redis.call(&amp;#34;del&amp;#34;, KEYS[1])
&lt;/span>&lt;span class="s1">else
&lt;/span>&lt;span class="s1"> return 0
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="超时和一致性">超时和一致性&lt;/h3>
&lt;p>关于超时有这样一个问题在。如果超时时间过长，那么超时的设置意义就不大，服务宕机 1 小时和宕机 24 小时都是事故。如果超时时间过短，那么超时就可能造成一致性上的损害。&lt;/p>
&lt;p>举例来说，付款处理花了 2.1s，但是锁超时 2.0s。这 0.1s 的数据竞争时间里，更新&lt;code>update balance where id = xxx&lt;/code>和下一个更新 blance 的请求就指不定谁先执行了。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">sequenceDiagram
participant 付款
participant 汇款
participant 锁
付款-&amp;gt;&amp;gt;锁:请求锁
锁--&amp;gt;&amp;gt;付款:已锁定
汇款-&amp;gt;&amp;gt;锁:请求锁
note over 付款,锁: 锁在2秒后超时，付款程序在2.1秒后完成
note over 锁: 2.0s到了，超时解锁
锁--&amp;gt;&amp;gt;汇款:已锁定
note over 付款,汇款:数据竞争
note over 付款:完成。
&lt;/code>&lt;/pre>&lt;p>所以，设置了超时，那么必须保证一致性，整个处理要么全部完成，要么超时全部未完成，对编程能力提出了挑战。&lt;/p>
&lt;p>后续再想想能不能写篇博文。&lt;/p>
&lt;h2 id="读写锁">读写锁&lt;/h2>
&lt;p>读写锁的实现和简单锁别无二致，特征是多个读，一个写。在大量读取，少量写入的情况下，读写锁可以有效提高效率。&lt;/p>
&lt;h3 id="加读锁">加读锁&lt;/h3>
&lt;p>读锁实现和简单锁差别不大，在简单锁基础上稍作修改即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 读锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hset&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="加写锁">加写锁&lt;/h3>
&lt;p>写锁实现差别也不大，这里使用 hash table 解决标记持有人的问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 写锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hlen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;setnx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解读锁">解读锁&lt;/h3>
&lt;p>读锁的解除只需要删除 hash table 里的自己就行了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解读锁&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hdel&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解写锁">解写锁&lt;/h3>
&lt;p>写锁解除如解除简单锁一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>