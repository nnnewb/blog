<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>weakptr's 笔记</title><link>https://nnnewb.github.io/blog/</link><description>Recent content on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 24 Sep 2021 16:58:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>自娱自乐 crackme-03</title><link>https://nnnewb.github.io/blog/p/crackme-03/</link><pubDate>Fri, 24 Sep 2021 16:58:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/crackme-03/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总得有个前言。&lt;/p>
&lt;p>一直玩命令行 crackme 看着就没啥意思，来点带界面的。依然是学习用，目标是把汇编和底层和内存这套东西读熟。这次是用 wxwidgets 做的简单 crackme，为了在 CrackME-02 基础上再增加点难度但又不至于太难，这次是 OTP 生成序列号，要求解出生成 OTP 的 SECRET。&lt;/p>
&lt;h2 id="源码">源码&lt;/h2>
&lt;p>越来越长了，贴上来没法看。现在托管到GitHub，包括前面的两个cm。&lt;/p>
&lt;p>前两个cm托管的代码编译参数有一点修改，可能造成结果和文章不一致，但大体是一样的，别在意。&lt;/p>
&lt;p>源码托管地址：&lt;a class="link" href="https://github.com/nnnewb/crackmes/" target="_blank" rel="noopener"
>github.com/nnnewb/crackmes&lt;/a>&lt;/p>
&lt;p>挑战一下C++代码开启优化的Hard模式。&lt;/p>
&lt;h2 id="观察">观察&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/01.png" alt="image-20210923104439284" />&lt;/p>
&lt;p>一个输入框，点击try it尝试。失败时提示Wrong，没有别的信息。&lt;/p>
&lt;h2 id="静态分析">静态分析&lt;/h2>
&lt;p>老规矩先静态分析一波，粗略扫一眼，捋一捋逻辑。用你喜欢的反汇编工具打开，我用Cutter先试试。&lt;/p>
&lt;p>因为是GUI程序，直接跳&lt;code>main&lt;/code>肯定是不行的。Win32 GUI程序的入口点（程序员视角）在&lt;code>WinMain&lt;/code>这个特殊函数，不过真拿Win32API手撸界面我是真没见过了，Win32 GUI程序设计也是玩的事件响应，找到主函数的意义不大。&lt;/p>
&lt;p>所以找关键跳这一步只能是从数据段找字符串查引用，或者调试器下合适的访问断点了。&lt;/p>
&lt;p>这里直接从数据段找到了字符串，定位到弹出错误对话框的逻辑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/02.png" alt="image-20210923105415082" />&lt;/p>
&lt;p>这里有个姿势点是&lt;code>__thiscall&lt;/code>，这是个微软自定义的调用约定，点这里看&lt;a class="link" href="https://docs.microsoft.com/zh-cn/cpp/cpp/thiscall?view=msvc-160" target="_blank" rel="noopener"
>微软的文档&lt;/a>。&lt;/p>
&lt;h3 id="__thiscall">__thiscall&lt;/h3>
&lt;p>&lt;code>__thiscall&lt;/code>的特点是被调用方清栈，&lt;code>this&lt;/code>指针通过&lt;code>ecx&lt;/code>寄存器传递，其他参数右至左压栈。对于可变长度参数（VAARG）的成员函数会特殊处理，采用&lt;code>cdecl&lt;/code>调用约定，&lt;code>this&lt;/code>指针最后压栈。&lt;/p>
&lt;p>这里简单读一下定位到的几句代码，分析下意图。&lt;/p>
&lt;pre>&lt;code>
0x004064dc 68 34 e8 40 00 push str.Try_again ; 0x40e834
0x004064e1 8d 4d d0 lea ecx, [ebp - 0x30]
0x004064e4 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
0x004064ea 68 44 e8 40 00 push str.Wrong ; 0x40e844
0x004064ef 8d 4d b0 lea ecx, [ebp - 0x50]
0x004064f2 c6 45 fc 07 mov byte [ebp - 4], 7
0x004064f6 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
0x004064fc 6a ff push 0xffffffffffffffff
0x004064fe 6a ff push 0xffffffffffffffff
0x00406500 6a 00 push 0
0x00406502 6a 05 push 5 ; 5
0x00406504 8d 45 d0 lea eax, [ebp - 0x30]
0x00406507 c6 45 fc 08 mov byte [ebp - 4], 8
0x0040650b 50 push eax
0x0040650c 8d 45 b0 lea eax, [ebp - 0x50]
0x0040650f 50 push eax
0x00406510 ff 15 d4 3c 41 00 call dword [int __cdecl wxMessageBox(class wxString const &amp;amp;, class wxString const &amp;amp;, long int, class wxWindow *, int, int)] ; 0x413cd4
&lt;/code>&lt;/pre>&lt;p>反编译器对调用的第三方库的函数分析极大降低了肉眼判读的难度。可以看到前三步&lt;code>push&lt;/code>、&lt;code>lea ecx,...&lt;/code>、&lt;code>call&lt;/code> 是典型的 &lt;code>__thiscall&lt;/code> 调用，调用对象是&lt;code>wxString&lt;/code>的构造器，所以可以知道&lt;code>ecx&lt;/code>地址保存的是一个&lt;code>wxString&lt;/code>对象的指针。&lt;/p>
&lt;pre>&lt;code>0x004064ea 68 44 e8 40 00 push str.Wrong ; 0x40e844
0x004064ef 8d 4d b0 lea ecx, [ebp - 0x50]
0x004064f2 c6 45 fc 07 mov byte [ebp - 4], 7
0x004064f6 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
&lt;/code>&lt;/pre>&lt;p>这是另一个&lt;code>wxString&lt;/code>的构造。&lt;/p>
&lt;pre>&lt;code>0x004064fc 6a ff push 0xffffffffffffffff
0x004064fe 6a ff push 0xffffffffffffffff
0x00406500 6a 00 push 0
0x00406502 6a 05 push 5 ; 5
0x00406504 8d 45 d0 lea eax, [ebp - 0x30]
0x00406507 c6 45 fc 08 mov byte [ebp - 4], 8
0x0040650b 50 push eax
0x0040650c 8d 45 b0 lea eax, [ebp - 0x50]
0x0040650f 50 push eax
0x00406510 ff 15 d4 3c 41 00 call dword [int __cdecl wxMessageBox(class wxString const &amp;amp;, class wxString const &amp;amp;, long int, class wxWindow *, int, int)] ; 0x413cd4
&lt;/code>&lt;/pre>&lt;p>连续推入多个参数后，调用了&lt;code>wxMessageBox&lt;/code>函数。我们知道&lt;code>[ebp-0x30]&lt;/code>是&lt;code>Try again&lt;/code>，&lt;code>[ebp-0x50]&lt;/code> 是 &lt;code>Wrong!&lt;/code>，这个调用用伪代码表示就是 &lt;code>wxMessageBox(&amp;quot;Wrong!&amp;quot;, &amp;quot;Try again!&amp;quot;, 5, 0, -1, -1)&lt;/code>。注意忽略中间的&lt;code>mov byte [ebp - 4], 8&lt;/code>，&lt;code>ebp-4&lt;/code>这个偏移显然不大可能是参数。&lt;/p>
&lt;h3 id="关键跳">关键跳&lt;/h3>
&lt;p>回到这段代码的开头，顺着界面上的绿色箭头找到关键跳。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/03.png" alt="image-20210923111554787" />&lt;/p>
&lt;p>一个&lt;code>je&lt;/code>跳转，&lt;code>je&lt;/code>指令检查&lt;code>ZF&lt;/code>，向上一行就是&lt;code>test&lt;/code>，&lt;code>test bl,bl&lt;/code>自己对自己逻辑与，其实就是求&lt;code>bl&lt;/code>是不是0。&lt;/p>
&lt;p>bl又来自前面的&lt;code>mov bl,al&lt;/code>，&lt;code>al&lt;/code>寄存器是&lt;code>eax&lt;/code>寄存器的低8位，再者大家也知道&lt;code>eax&lt;/code>寄存器是函数返回值保存的寄存器，而离这个&lt;code>mov&lt;/code>指令最近的&lt;code>call&lt;/code>就是截图上方的&lt;code>IsSameAs&lt;/code>函数了。&lt;/p>
&lt;p>到了这一步，改指令跳过验证已经接近成功了，但这要是做 keygen 的话还不行。&lt;/p>
&lt;p>继续往回翻，寻找密码生成的代码。&lt;/p>
&lt;h3 id="寻找密码生成算法">寻找密码生成算法&lt;/h3>
&lt;p>先一路回到关键跳所处的代码块顶部，挨个往下看有哪些函数调用。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/04.png" alt="image-20210923113330184" />&lt;/p>
&lt;p>还是那句话，感谢分析出了库函数，不然一堆未知函数看得满头雾水。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>调用是 &lt;code>wxString.AsWChar(void)&lt;/code>，顾名思义是取宽字符，返回指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用是&lt;code>wxString.DoFormatWchar(wchar_t*)&lt;/code>，查询文档可知是个类似&lt;code>sprintf&lt;/code>的字符串格式化函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用是析构函数，怀疑上面的两个调用其实是内联了什么wxwidgets库的代码。因为直觉告诉我如果还没离开作用域，编译器应该不会这么着急插入析构函数调用，这听起来就没什么好处，还违背码农直觉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数就比较迷惑了，一路看上去的话会发现这个偏移值经过了多次计算，目前看不出用意，但还挺可疑的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数顾名思义，比较字符串相等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>又是析构函数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>重点看字符串比较函数的参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040646c&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="no">a&lt;/span> &lt;span class="mi">01&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">; 1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x0040646e&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x70&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406471&lt;/span> &lt;span class="no">c6&lt;/span> &lt;span class="mi">45&lt;/span> &lt;span class="no">fc&lt;/span> &lt;span class="mi">04&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406475&lt;/span> &lt;span class="mi">51&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406476&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">b&lt;/span> &lt;span class="no">c8&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406478&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">d4&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">public&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">bool&lt;/span> &lt;span class="no">__thiscall&lt;/span> &lt;span class="no">wxString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">IsSameAs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">class&lt;/span> &lt;span class="no">wxString&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="err">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">bool&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="no">const&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 0x4133d4
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把&lt;code>eax&lt;/code>当成了&lt;code>this&lt;/code>，暂且不看栈上的&lt;code>ebp-0x70&lt;/code>，看到&lt;code>eax&lt;/code>立刻就发现是来自第四个比较迷惑的函数调用，实锤这函数就是生成密码的函数。&lt;/p>
&lt;h2 id="动态调试">动态调试&lt;/h2>
&lt;p>水平有限，静态分析很快遇到了瓶颈，找不出这个偏移值算出来的函数到底在哪儿。&lt;/p>
&lt;p>于是启动调试器，先跟到我们定位到的这个特殊函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/05.png" alt="image-20210923140108796" />&lt;/p>
&lt;p>惊喜地发现胡乱分析出现了错误，&lt;code>eax+0x40&lt;/code>其实是获取输入框值的函数。。所以另一个参数，&lt;code>ebp-0x70&lt;/code>才是密码。&lt;/p>
&lt;p>往回看&lt;code>ebp-0x70&lt;/code>在&lt;code>DoFormatWchar&lt;/code>被当参数传递了进去，要注意的是&lt;code>DoFormatWchar&lt;/code>是一个有变长参数的函数，这意味着你没法得知传了几个参数（前面push的内容不一定是当参数传了），分析更困难。&lt;/p>
&lt;p>看一下&lt;code>DoFormatWchar&lt;/code>这段汇编。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040642c&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">70&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x90&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406432&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">e8&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">private&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">wchar_t&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="no">__thiscall&lt;/span> &lt;span class="no">wxFormatString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">AsWChar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">void&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="c">; 0x4133e8
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00406438&lt;/span> &lt;span class="mi">56&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">esi&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406439&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643a&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">45&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x70&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643d&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643e&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">d0&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">private&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">static&lt;/span> &lt;span class="no">class&lt;/span> &lt;span class="no">wxString&lt;/span> &lt;span class="no">__cdecl&lt;/span> &lt;span class="no">wxString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">DoFormatWchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">wchar_t&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="p">*)]&lt;/span> &lt;span class="c">; 0x4133d0
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一共推了三个东西入栈，esi、eax（上一个调用的返回值）、还有&lt;code>[ebp-0x70]&lt;/code>。&lt;/p>
&lt;p>继续调试器跟一遍看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/06.png" alt="image-20210923142010900" />&lt;/p>
&lt;p>&lt;code>esi&lt;/code>的值比较怪，先忽略。&lt;/p>
&lt;p>&lt;code>eax&lt;/code>比较清楚，宽字符串&lt;code>%06d&lt;/code>，按压栈顺序，&lt;code>esi&lt;/code>的值是紧跟在格式化字符串后面的参数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/07.png" alt="image-20210923142347785" />&lt;/p>
&lt;p>最后压栈的eax，也就是ebp-0x70的地址，用伪代码表示就是：&lt;code>DoFormatWchar(&amp;amp;var_70, L&amp;quot;%06d&amp;quot;, 0x000F18D8)&lt;/code>。PS：有点怪，函数签名最左侧是format也就是格式化字符串，最后压栈这个ebp-0x70就有点莫名其妙。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/08.png" alt="image-20210923143534148" />&lt;/p>
&lt;p>不过用调试器单步步过后就知道用途了，和猜测的一样，存放的是格式化的结果，也就是正确的密码。&lt;/p>
&lt;p>既然如此，往回找esi是哪儿赋值的，因为inline了一大堆东西，Cutter连函数都认不出来了，控制流视图也挂了。。一直往上翻，找到&lt;code>0xcc&lt;/code>或者&lt;code>push ebp; mov ebp, esp&lt;/code>为止。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/09.png" alt="image-20210923145922049" />&lt;/p>
&lt;p>右键选择在此处定义函数，随便给个名字，然后等Cutter分析好函数体。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/10.png" alt="image-20210923150100196" />&lt;/p>
&lt;p>这样一来至少图形视图就能看了。粗略扫一眼，在底下找到&lt;code>IsSameAs&lt;/code>这个调用，再往回翻哪儿动了&lt;code>esi&lt;/code>这个寄存器，很快找到这两段。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/11.png" alt="image-20210923150438821" />&lt;/p>
&lt;p>有点杂，先看看。还是粗略按意图把指令分下段。&lt;code>esi&lt;/code>来源涉及&lt;code>eax&lt;/code>和&lt;code>ecx&lt;/code>，一路跟着赋值路径往回翻到第一个块，找到&lt;code>ecx&lt;/code>的赋值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004062f1&lt;/span> &lt;span class="no">e8&lt;/span> &lt;span class="mi">68&lt;/span> &lt;span class="no">b3&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.0040165e&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004062f6&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">b&lt;/span> &lt;span class="mi">08&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个未知函数，ctrl+左键点击跟进去后发现疑似是 libcrypto 内联的函数，调用了 HMAC-SHA1 算法。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/12.png" alt="image-20210924092624224" />&lt;/p>
&lt;p>先做个标记，猜测假设这个函数正确返回（下面的je跳转走到最后一个块），那返回结果应该是HMAC-SHA1的结果。这里通过调试器单步验证。&lt;/p>
&lt;p>因为 ASLR 的缘故，可执行文件 .text 段映射的地址不是 0x00401000，调试器没法直接转到静态分析工具中的地址，ASLR 确实折磨人&amp;hellip;&lt;/p>
&lt;p>anyway&amp;hellip;&lt;/p>
&lt;p>我投翔，特立独行是没好结果的，跑去下载了一个 IDA Free ，打开x32dbg确认 .text 段映射的基址后再到 IDA 的菜单 &lt;code>Edit&lt;/code> -&amp;gt; &lt;code>Segments&lt;/code> -&amp;gt; &lt;code>rebase program ...&lt;/code> 重新设定镜像基址，这样在反汇编界面看到的地址就能和调试器对上了。缺陷是每次打开调试器都要对一次镜像基址，比较麻烦。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/image-20210924154631893.png" alt="image-20210924154631893" />&lt;/p>
&lt;p>对好镜像基址后，把之前想调试的函数调用地址找到（0x003B62F1），下个断点，看调用后的&lt;code>eax&lt;/code>值，发现并不像纯c编译出来的结果，&lt;code>eax&lt;/code>并没有什么卵用。&lt;/p>
&lt;p>稍微往上瞟了一眼，很容易看到一个&lt;code>mov ecx,esi&lt;/code>，但没什么卵用。&lt;/p>
&lt;p>碰壁几次后决定跟进这个函数看看。无果。恼，作弊之（读过RFC可能注意到几个特殊常量，比如取哈希结果下标19，与0xf，作为偏移值向后再取4字节，作为bin code。跳过这个函数调用，直接看接下来的内容的话，会发现哈希值其实就存在&lt;code>ecx&lt;/code>保存的地址上了。）&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/image-20210924162043275.png" alt="image-20210924162043275" />&lt;/p>
&lt;p>只是这里的HMAC_SHA1值因为不是我们熟悉的ASCII表示，所以一眼有点难看出来。&lt;/p>
&lt;p>那么直接跳过上面不清不楚的地方，直接看取哈希后的做法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6307&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B630B&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">Fh&lt;/span> &lt;span class="c">; 取 hash[19] &amp;amp; 0xf 作为初始偏移
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B630E&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6310&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 取偏移处第一个字节，无符号
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6313&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 取偏移处第二个字节，无符号
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6317&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="no">Fh&lt;/span> &lt;span class="c">; 偏移处第一个字节 &amp;amp; 0x7f ，确保符号位归零
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B631A&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c">; 第一个字节左移8位后 | 第二个字节，就是把四个字节按顺序填进esi
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B631D&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B631F&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6323&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6326&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6328&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B632C&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取得的就是4字节正整数了，按RFC的例子，接下来应该取模得到最大6位整数。看下一块汇编。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6331&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Block&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6334&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">431&lt;/span>&lt;span class="no">BDE83h&lt;/span> &lt;span class="c">; magic ?
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6339&lt;/span> &lt;span class="no">imul&lt;/span> &lt;span class="no">esi&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B633B&lt;/span> &lt;span class="no">sar&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B633E&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6340&lt;/span> &lt;span class="no">shr&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">Fh&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6343&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6345&lt;/span> &lt;span class="no">imul&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">F4240h&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634B&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634D&lt;/span> &lt;span class="no">test&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634F&lt;/span> &lt;span class="no">jz&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">loc_3B638F&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>431BDE83h&lt;/code> 这个魔术常量吓到我了。搜了一下找到篇&lt;a class="link" href="https://bbs.pediy.com/thread-100189.htm" target="_blank" rel="noopener"
>看雪的帖子&lt;/a>，看起来是编译器把一句&lt;code>%1000000&lt;/code>取模给编译成了上面这一串满是魔数的汇编。尝试跟到 &lt;code>sub esi,eax&lt;/code> 后，&lt;code>esi&lt;/code> 寄存器的结果的确变成了6位以内的整数。&lt;/p>
&lt;p>这玩意儿有什么特征吗？总不至于多做几次取模，生成的汇编就完全没法看了吧。。。&lt;/p>
&lt;h2 id="keygen">keygen？&lt;/h2>
&lt;p>实力有限，尽管亲手写下的C++代码真的很简单，但编译后的结果成了无法承受之重&amp;hellip;&lt;/p>
&lt;p>上面分析的内容，其实仔细对着RFC推敲（首先，你得知道是照着RFC写的，不然就多读几遍汇编&amp;hellip;），才能很勉强得到个粗糙的算法，至于能不能写出 keygen，我没啥信心。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>很难。&lt;/p>
&lt;p>如果说前面的 C 代码是小游戏的话，那 cm03 就是地球online。开启优化的C++无间地狱。&lt;/p>
&lt;p>完全溃败。&lt;/p></description></item><item><title>自娱自乐 crackme-02</title><link>https://nnnewb.github.io/blog/p/crackme-02/</link><pubDate>Wed, 15 Sep 2021 15:43:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/crackme-02/</guid><description>&lt;h2 id="得有个前言">得有个前言&lt;/h2>
&lt;p>总之上一个 crackme-01 还过得去，稍微加强一点，把密码隐藏起来，不要随便被看到。&lt;/p>
&lt;h2 id="0x01-源码">0x01 源码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">realloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">slen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strnlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">slen&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">strnlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 初始化固定8字节计算密钥的空间
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">input_buf_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">input_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 用用户输入替换初始化的数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy_s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 异或处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 初始化 Hex 输出
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">output_buf_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">17&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">output_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output_buf_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 转为可读字符串
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">output_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">output_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">output_buf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">serial&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">serial_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linesize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">username_len&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;username less than 8 letter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">username_len&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;serial:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">serial_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">serial_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linesize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">serial_len&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;serial has 16 letters&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">correct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strncmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">correct&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">correct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Good job!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wrong pwd!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">correct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译方式是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">clang main.c -o cm02-easy.exe -Wall -m32 -O0
clang main.c -o cm02-normal.exe -Wall -m32 -O1
clang main.c -o cm02-hard.exe -Wall -m32 -O2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x02-观察">0x02 观察&lt;/h2>
&lt;p>启动后观察行为（不截图了。）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">weakptr in cm02 ❯ .\cm02-easy.exe
username:abc
serial:123456
serial 长度为16
username:abc
serial:123456789012345
wrong pwd!
username:
serial:
serial 长度为16
username:abc
serial:aaaaaaaaaaaaaaa
wrong pwd!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这次的目标是：&lt;/p>
&lt;ol>
&lt;li>得到某个用户名对应的序列号（&lt;code>serial&lt;/code>）。&lt;/li>
&lt;li>破解，总是正确或对任何输入都提示正确。&lt;/li>
&lt;li>注册机。&lt;/li>
&lt;/ol>
&lt;h2 id="0x03-静态分析---easy">0x03 静态分析 - easy&lt;/h2>
&lt;h3 id="31-主循环">3.1 主循环&lt;/h3>
&lt;p>在公司没IDA，用 &lt;a class="link" href="image/crackme-02/https://cutter.re/" >Cutter&lt;/a> 打开，在上方输入框输入 &lt;code>main&lt;/code> 跳转到 &lt;code>main&lt;/code> 函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-1.png" alt="image-20210914114426600" />&lt;/p>
&lt;p>然后点击 &lt;em>图表（main）&lt;/em> 进入类似 IDA 的控制流视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-2.png" alt="image-20210914114547128" />&lt;/p>
&lt;p>之后就能看到下面的控制流了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-3.png" alt="" />&lt;/p>
&lt;p>easy难度下没有开启任何编译器优化，控制流和原始代码能直接对应上。瞧着困难很多对吧？&lt;/p>
&lt;p>先简单扫一眼，会发现很多分支直接跳回了&lt;code>0x0040139d&lt;/code>，也就是从上往下数第二个代码块，基本每个跳转都是下一个块或跳回这个块。按照 &lt;a class="link" href="https://nnnewb.github.io/blog/p/crackme-01/" target="_blank" rel="noopener"
>cm01&lt;/a>的经验，我们先找到关键的一跳。可以直接搜索字符串引用（&lt;code>wrong pwd!&lt;/code>），也可以逐个代码块看下去。&lt;/p>
&lt;p>很快，右下角的关键跳出现在眼前。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-4.png" alt="image-20210914152834262" />&lt;/p>
&lt;p>接着回头看跳转条件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-5.png" alt="image-20210914153728179" />&lt;/p>
&lt;p>虽然没有名字，但&lt;code>fcn.00403ef4&lt;/code> 是老熟人了。三个参数，&lt;code>ecx&lt;/code>、&lt;code>eax&lt;/code>、&lt;code>0x10&lt;/code>，返回结果和&lt;code>0&lt;/code>做比较，&lt;code>jne&lt;/code>条件跳转。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cmp&lt;/code>指令，操作数相减（&lt;code>dest&lt;/code>-&lt;code>src&lt;/code>），结果存入标志位 &lt;code>SF&lt;/code>和&lt;code>ZF&lt;/code>。
&lt;ul>
&lt;li>结果是负数（&lt;code>dest&lt;/code>&amp;lt;&lt;code>src&lt;/code>），&lt;code>SF&lt;/code>也就是结果符号位设置为1。&lt;/li>
&lt;li>结果是正数（&lt;code>dest&lt;/code>&amp;gt;&lt;code>src&lt;/code>），&lt;code>SF&lt;/code>也就是结果符号位设置为0。&lt;/li>
&lt;li>结果是0（&lt;code>dest&lt;/code>=&lt;code>src&lt;/code>），&lt;code>ZF&lt;/code>设置为1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>jne&lt;/code>或&lt;code>jnz&lt;/code>指令，非零跳转。&lt;code>ZF&lt;/code>标志位为&lt;code>1&lt;/code>时跳转。&lt;/li>
&lt;/ul>
&lt;p>猜测这个函数应该是&lt;code>strncmp&lt;/code>。继续往回看参数是怎么来的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-6.png" alt="image-20210914155544252" />&lt;/p>
&lt;p>&lt;code>eax&lt;/code>来自&lt;code>sub.02x_40298c&lt;/code>这个函数，后面两个脱裤子放屁的&lt;code>mov&lt;/code>忽略。&lt;code>ecx&lt;/code>则来来自&lt;code>mov ecx,dword [ebp-10h]&lt;/code>这一行。&lt;/p>
&lt;p>先不着急分析函数，继续往回找，找到&lt;code>[ebp-10h]&lt;/code>的来源。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-7.png" alt="image-20210914161814604" />&lt;/p>
&lt;p>在入口点附近，看到&lt;code>[ebp-10]&lt;/code>被初始化成了0。&lt;/p>
&lt;p>因为没有很明确的路径，手动计算栈上偏移又非常麻烦，这里本应该掏出调试器——但出于学习练手的目的，还是先尝试计算下。首先回顾下简化的栈内存布局，从上往下增长，如图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-8.png" alt="stack-layout" />&lt;/p>
&lt;p>接下来从&lt;code>mov ebp,esp&lt;/code>开始，往下列出所有函数调用，捋一捋逻辑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-9.png" alt="image-20210914214920437" />&lt;/p>
&lt;p>第一个框，&lt;code>[esp+2ch+Ix]&lt;/code> 计算结果是 &lt;code>[esp]&lt;/code>，也就是栈顶，栈顶设置为字符串 &lt;code>username:&lt;/code>，接着调用一个未知函数。从参数判断我们先认为是一个输出字符串的函数。&lt;/p>
&lt;p>再看第二个框，&lt;code>acrt_iob_func&lt;/code>，百度一下就会发现，&lt;code>__acrt_iob_func&lt;/code>函数是定义于 c 运行库里的函数，作用是返回 &lt;code>stdin/stdout/stderr&lt;/code> 。栈顶设置为0，所以获得的是 &lt;code>stdin&lt;/code>。&lt;/p>
&lt;p>再看第三个框，&lt;code>edx&lt;/code>和&lt;code>ecx&lt;/code>赋值为栈上两个变量的地址，再为参数。按顺序就是&lt;code>f(edx,ecx,stdin)&lt;/code>。暂时不明。函数返回值被赋值回了&lt;code>[ebp-18h]&lt;/code>。&lt;/p>
&lt;p>第四个框，从第三个框得到的返回值被当参数传给一个未知函数。&lt;code>f([ebp-8h], [ebp-18h])&lt;/code>，返回值被赋值回 &lt;code>[ebp-0Ch]&lt;/code>。&lt;/p>
&lt;p>结合最后的 &lt;code>cmp&lt;/code> 和 &lt;code>jbe&lt;/code> 指令分析，人肉反编译后用伪代码表示，就是下面这样。&lt;code>jbe&lt;/code>指令只在&lt;code>cmp&lt;/code>左操作数小于等于右操作数时执行跳转（&lt;code>CF&lt;/code>标志位和&lt;code>ZF&lt;/code>标志位其中一个为1时）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">var&lt;/span> &lt;span class="n">var_8&lt;/span> &lt;span class="c1"># 偏移值 ebp-8h&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_0C&lt;/span> &lt;span class="c1"># 偏移值 ebp-0Ch&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_18&lt;/span> &lt;span class="c1"># 偏移值 ebp-18h&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_0c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_0c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_18&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">var_0c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># jbe 跳转执行&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-10.png" alt="image-20210914223919137" />&lt;/p>
&lt;p>可以看出，当 &lt;code>var_0c&lt;/code> 小于 8 时，提示 &lt;code>username less than 8 letter&lt;/code> 。因此可以确定 &lt;code>[ebp-0Ch]&lt;/code> 这个变量就是 &lt;code>username&lt;/code> 字符串的长度，上一个函数会计算字符串长度返回。我们再根据这个发现修改下伪代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">var&lt;/span> &lt;span class="n">var_8&lt;/span> &lt;span class="c1"># 偏移值 ebp-8h&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="c1"># 偏移值 ebp-0Ch&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_18&lt;/span> &lt;span class="c1"># 偏移值 ebp-18h&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># var_8 可能是 username 指针&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_18&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 计算字符串长度&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># jbe 跳转执行&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># jmp 到开头&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个未知函数看起来已经呼之欲出了，&lt;code>stdin&lt;/code>和&lt;code>&amp;amp;username_len&lt;/code>作为参数，&lt;code>var_8&lt;/code> 有极大可能就是&lt;code>username&lt;/code>字符串指针。不过在进入调试器前，还不能马上下结论，继续看正确跳转的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">cmp&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-0Ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">jnz&lt;/span> &lt;span class="no">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这次是比较用户名长度和0，非0跳转。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-11.png" alt="image-20210914224625891" />&lt;/p>
&lt;p>可以看到为零时，经过一个未知函数 &lt;code>sub_4036FC(var_8)&lt;/code> 后，跳回开头。&lt;/p>
&lt;p>继续看正确流程，&lt;code>jmp $+5&lt;/code> ，&lt;code>$&lt;/code> 表示当前正在执行的代码在代码段内的偏移量，+5就是从当前代码开始往后跳过5个字节，我们直接看IDA分析好的跳转位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-12.png" alt="image-20210914225052452" />&lt;/p>
&lt;p>又是非常熟悉的代码，和读取 &lt;code>username&lt;/code> 的分析方式相同，以相同的顺序调用相同的函数，可以得到&lt;code>var_14&lt;/code>是&lt;code>serial_len&lt;/code>，&lt;code>Str1&lt;/code>可能是&lt;code>serial&lt;/code>字符串指针。不做重复分析，继续往下看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-13.png" alt="image-20210914225322787" />&lt;/p>
&lt;p>右边的代码块是关于长度的判断，分析方法不再重复。左侧代码就是我们的关键跳转了，其中出现两个函数调用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Block&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; void *
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; size_t
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">sub_401250&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_1C&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>var_c&lt;/code>先前被判断是&lt;code>username_len&lt;/code>，&lt;code>Block&lt;/code>就是&lt;code>var_8&lt;/code>，先前被怀疑是用户键入的用户名字符串指针。未知函数的返回值保存在 &lt;code>[ebp-1ch]&lt;/code>中。&lt;/p>
&lt;p>这个&lt;code>1c&lt;/code>在随后的代码中立刻被用到。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_1C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; Str2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">MaxCount&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; MaxCount
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">_strncmp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_20&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Str1&lt;/code>在&lt;code>serial&lt;/code>输入这一步被怀疑是用户输入的序列号字符串指针，它和上一个函数调用返回的&lt;code>var_1c&lt;/code>被作为参数传递给&lt;code>strncmp&lt;/code>，字符串长度最大16字节。由此可见，&lt;code>var_1c&lt;/code>基本可以确定是正确序列号的指针，之前的未知函数可能就是生成序列号的函数。&lt;/p>
&lt;p>下一步分析序列号生成函数。&lt;/p>
&lt;h3 id="32-生成序列号">3.2 生成序列号&lt;/h3>
&lt;p>先看下控制流全览，能依稀分辨出三个循环。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-14.png" alt="generate" />&lt;/p>
&lt;p>自动分析出的变量表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">; var uint32_t var_1ch @ ebp-0x1c
&lt;/span>&lt;span class="c">; var int32_t var_18h @ ebp-0x18
&lt;/span>&lt;span class="c">; var int32_t var_14h @ ebp-0x14
&lt;/span>&lt;span class="c">; var uint32_t var_10h @ ebp-0x10
&lt;/span>&lt;span class="c">; var uint32_t var_ch @ ebp-0xc
&lt;/span>&lt;span class="c">; var int32_t var_8h @ ebp-0x8
&lt;/span>&lt;span class="c">; var int32_t var_4h @ ebp-0x4
&lt;/span>&lt;span class="c">; arg uint32_t arg_8h @ ebp+0x8
&lt;/span>&lt;span class="c">; arg int32_t arg_ch @ ebp+0xc
&lt;/span>&lt;span class="c">; var int32_t var_sp_4h @ esp+0x4
&lt;/span>&lt;span class="c">; var int32_t var_sp_8h @ esp+0x8
&lt;/span>&lt;span class="c">; var int32_t var_sp_ch @ esp+0xc
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先看循环外的代码，简单按用途划一下分隔线。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f0&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f1&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f3&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x2c&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f6&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071fc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407203&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040720a&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00401302&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040720f&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407212&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开头是惯例的两句栈帧准备动作，随后开辟 0x2c 大小的栈空间。&lt;/p>
&lt;p>两个没用的 &lt;code>mov eax,...&lt;/code>，之后是&lt;code>[ebp-4h]&lt;/code>设置为8，再把8作为参数调用了一个未知函数，返回值赋值给&lt;code>[ebp-8h]&lt;/code>，再初始化&lt;code>[ebp-ch]&lt;/code>为 0。伪代码表示就是下面这样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h, ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">var_ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后是一个条件跳转。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407219&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040721d&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x407242&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>学习下&lt;code>jae&lt;/code>指令。&lt;code>jae&lt;/code>指令和&lt;code>jnc&lt;/code>指令相同，&lt;code>CF=0&lt;/code>则跳转。&lt;code>jae&lt;/code> 可以看作 &lt;em>Jump if above or equals&lt;/em>。上一句 &lt;code>cmp&lt;/code> 计算 &lt;code>var_ch - 0x8&lt;/code> ，对相关标志位赋值。&lt;code>jae&lt;/code>指令根据&lt;code>CF&lt;/code>标志位判断，由于&lt;code>cmp&lt;/code>指令是减法，所以判断的是减法中有没有出现 &lt;em>借位&lt;/em> 。&lt;/p>
&lt;p>简单的描述就是，&lt;code>cmp ax, bx&lt;/code>，如果&lt;code>ax &amp;lt; bx&lt;/code> 则 &lt;code>CF=1&lt;/code>，如果 &lt;code>ax &amp;gt;= bx&lt;/code> 则 &lt;code>CF=0&lt;/code>。&lt;/p>
&lt;p>因为我们知道 &lt;code>var_ch&lt;/code> 刚被初始化成了0，不成立，继续看不成立的分支。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407223&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407226&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x52&lt;/span> &lt;span class="c">; 82
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407229&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">al&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040722b&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040722e&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407231&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">dl&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407234&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407237&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040723a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040723d&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x407219&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>把&lt;code>var_ch&lt;/code>移入寄存器&lt;code>eax&lt;/code>后，加上&lt;code>0x52&lt;/code>，又移动&lt;code>al&lt;/code>到&lt;code>dl&lt;/code>。后续&lt;code>eax&lt;/code>被用作别的用途，这一番操作其实就是给&lt;code>dl&lt;/code>赋值了一个&lt;code>(int16_t)0x52+var_ch&lt;/code>。&lt;/p>
&lt;p>随后把&lt;code>var_8h&lt;/code>和&lt;code>var_ch&lt;/code>相加后的地址赋值 &lt;code>dl&lt;/code>，也就是&lt;code>0x52&lt;/code>。&lt;/p>
&lt;p>接着&lt;code>var_ch&lt;/code>自增1，跳回 &lt;code>jae&lt;/code>判断前的 &lt;code>cmp&lt;/code>，形成循环，我们用伪代码表示。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h, ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">var_ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从结构上看，是一个典型的 for 循环。 &lt;code>var_8h&lt;/code> 是一个未知函数返回的指针。我们稍微改下伪代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着继续看循环结束后的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407242&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp+ch 函数右往左数第二个入参
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407245&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_8h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp+8h 函数右往左数第一个入参
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407248&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp-8h
&lt;/span>&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x0040724b&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040724e&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407256&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040725a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040725e&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00407310&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407263&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从之前分析主循环的代码，我们可以发现 &lt;code>arg_8h&lt;/code> 其实是用户名字符串指针，&lt;code>arg_ch&lt;/code>是用户名字符串长度。&lt;/p>
&lt;p>接着这两个入参，和 &lt;code>var_8h&lt;/code>，也就是之前得到指针，传入一个未知函数，随后再初始化了一个变量 &lt;code>var_10h&lt;/code>。&lt;/p>
&lt;p>伪代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着又是一个条件跳转。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040726a&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040726e&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x407292&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和先前的循环相同，不作重复分析，直接进入循环体。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407274&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407277&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040727a&lt;/span> &lt;span class="no">movsx&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040727e&lt;/span> &lt;span class="no">xor&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x25&lt;/span> &lt;span class="c">; 37
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407281&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">dl&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407284&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407287&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040728a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040728d&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x40726a&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前两条指令没什么可说的，&lt;code>movsx&lt;/code>还是第一次见，学习下。&lt;/p>
&lt;p>&lt;code>movsx&lt;/code> 从来源取数，不足的部分用来源的符号位填充，这里取的是&lt;code>var_8h[var_10h]&lt;/code>，一字节，到 &lt;code>edx&lt;/code> 寄存器。&lt;code>movsx&lt;/code>的好处是可以保留符号位，加载不同大小的数据时（比如来源是 &lt;code>word&lt;/code>，目标是 &lt;code>dword&lt;/code>），如果来源是负数，则填充符号位可以正确表示补码形式表示的负数。&lt;/p>
&lt;p>从&lt;code>var_8h[var_10h]&lt;/code>取数移入&lt;code>edx&lt;/code> 后，之后是一句简单的 &lt;code>xor&lt;/code>，逻辑异或运算。之后将&lt;code>xor&lt;/code>运算结果取低位1字节（&lt;code>dl&lt;/code>寄存器）移回&lt;code>var_8h[var_10h]&lt;/code>。&lt;/p>
&lt;p>之后自增，跳转循环，和之前的循环一样。将分析过的部分用伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>继续看循环结束后的动作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407292&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_14h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x11&lt;/span> &lt;span class="c">; 17
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407299&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x11&lt;/span> &lt;span class="c">; [0x11:4]=-1 ; 17
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x004072a0&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00401302&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072a5&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072a8&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用一个函数，返回值赋值给&lt;code>var_18h&lt;/code>，同时初始化&lt;code>var_1ch&lt;/code>为 0。伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来又是一个循环。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072af&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072b3&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x4072f2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不重复分析，进入循环体。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072b9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072bc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072bf&lt;/span> &lt;span class="no">movsx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c3&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c6&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c9&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072cc&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ce&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">str.02x&lt;/span> &lt;span class="c">; 0x45de50，内容是 %02x
&lt;/span>&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x004072d4&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072d7&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072db&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072df&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00403dcd&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072e4&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072e7&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ea&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ed&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x4072af&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>依然是从 &lt;code>var_8h[var_1ch]&lt;/code> 取数，之后把 &lt;code>var_18h&lt;/code> 和 &lt;code>var_1ch&lt;/code> 也取数，分别放到 &lt;code>eax&lt;/code>、&lt;code>edx&lt;/code>、&lt;code>ecx&lt;/code>。&lt;/p>
&lt;p>接着是一个没见过的命令，&lt;code>shl&lt;/code>，学习下。&lt;/p>
&lt;p>&lt;code>shl&lt;/code>是逻辑左移，和 c 中的 &lt;code>&amp;lt;&amp;lt;&lt;/code> 运算符一样，两个操作数，命令格式&lt;code>shl 寄存器,立即数&lt;/code>。&lt;/p>
&lt;p>这里做的就是 &lt;code>ecx&lt;/code>，也就是 &lt;code>var_1ch&lt;/code> 的值左移1位，众所周知左移n位可以看作乘上2^n^ ，所以这句 &lt;code>shl&lt;/code> 其实就是 &lt;code>var_1ch*2&lt;/code>。左移后结果加到了&lt;code>edx&lt;/code>，&lt;code>edx&lt;/code>是&lt;code>var_18h&lt;/code>。&lt;/p>
&lt;p>之后是一个&lt;code>lea&lt;/code>，加载地址，内容是常量字符串 &lt;code>%02x&lt;/code>，看起来是一个 c 格式化字符串。&lt;/p>
&lt;p>接着压栈传参，调用未知函数，结果忽略。伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>随后是变量自增，跳转回循环开头。&lt;/p>
&lt;p>我们把分析出来的伪代码再合并下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后是循环结束后的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f2&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f5&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="mi">0x10&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072fc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ff&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00402a36&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407304&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407307&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x2c&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040730a&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040730b&lt;/span> &lt;span class="no">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先是把&lt;code>var_18h[0x10]&lt;/code> 的值设为0。&lt;/p>
&lt;p>接着&lt;code>var_8h&lt;/code>做参数调未知函数。&lt;/p>
&lt;p>把&lt;code>var_18h&lt;/code>移到&lt;code>eax&lt;/code>，也就是&lt;code>cdecl&lt;/code>约定下的返回值位置。&lt;/p>
&lt;p>最后平栈，恢复&lt;code>ebp&lt;/code>，返回，函数结束。我们把所有内容的伪代码合并起来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">var_18h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">var_18h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从这我们已经能看出具体算法了，未知函数可以猜测调试看看。&lt;/p>
&lt;h2 id="0x04-调试器---easy">0x04 调试器 - easy&lt;/h2>
&lt;p>调试的目标是确认生成序列号的算法，把分析出的伪代码中还不清楚用途的未知函数，分析出作用。&lt;/p>
&lt;h3 id="41-x32dbg">4.1 x32dbg&lt;/h3>
&lt;p>打开调试器后，先找到关键跳，在工具栏点击字符串工具图标，在下方搜索栏输入&lt;code>wrong pwd!&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-15.png" alt="image-20210915140718400" />&lt;/p>
&lt;p>跳到引用位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-18.png" alt="image-20210915111455604" />&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-19.png" alt="image-20210915111621678" />&lt;/p>
&lt;p>之后可以按g，进入控制流视图，不过这个控制流视图有点不好看，我们也可以直接参考静态分析中的汇编，直接找到函数，并在入口下断点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-20.png" alt="image-20210915112358449" />&lt;/p>
&lt;p>尝试随便输入一点内容，调试器命中。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-21.png" alt="image-20210915112552389" />&lt;/p>
&lt;p>接下来就可以用左上角的单步调试了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-22.png" alt="image-20210915140939909" />&lt;/p>
&lt;p>不做更多介绍，汇编的分析已经进行过一次。这次我们找到对输入 &amp;ldquo;abc&amp;rdquo; 的正确序列号，完成一次解密。&lt;/p>
&lt;p>只需要在断点处点击&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-23.png" alt="image-20210915141120060" />按钮，然后观察&lt;code>eax&lt;/code>寄存器。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-24.png" alt="image-20210915141405302" />&lt;/p>
&lt;p>抄出来（居然不能右键复制后面的字符串），内容是&lt;code>4447467073727d7c&lt;/code>。&lt;/p>
&lt;p>接着继续运行，再把抄出来的答案复制进去看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-25.png" alt="image-20210915141838395" />&lt;/p>
&lt;p>到这里，我们拿到了一个可以用的序列号。&lt;/p>
&lt;h2 id="0x05-注册机">0x05 注册机&lt;/h2>
&lt;h3 id="51-python-脚本注册机">5.1 Python 脚本注册机&lt;/h3>
&lt;p>先把前面的伪代码贴一下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">var_18h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">var_18h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>里面的未知函数（失策，clang默认静态链接了libcmt，很多库函数在x32dbg里认不出来）猜一猜吧。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;username:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytearray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>
&lt;span class="c1"># 这里的未知函数通过调试器可以看出，把入参复制到了 var_8h 里&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">username&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>
&lt;span class="c1"># for(int var_1ch = 0x0; var_1ch &amp;lt; 8; var_1ch++) {&lt;/span>
&lt;span class="c1"># unknown_func(var_18h + var_1ch * 2, &amp;#34;%02x&amp;#34;, var_8h[var_1ch]);&lt;/span>
&lt;span class="c1"># }&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 最后的那个循环中，函数判断为 sprintf 或其他啥，格式化明确是2位小写16进制数&lt;/span>
&lt;span class="c1"># 前面的计算看作是算偏移，一个 var_8h 的字节对应 2 字节16进制表示，所以 var_18h 加上 NUL 一共是 0x11 也就是 17 个字节&lt;/span>
&lt;span class="c1"># 循环的作用是把 var_8h 这个字节数组转换成16进制表示的字符串。&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 在 python 里用 hex() 就行了。&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行脚本，输入&lt;code>abc&lt;/code>，输出&lt;code>4447467073727d7c&lt;/code>，确认注册机可以生成序列号。&lt;/p>
&lt;h2 id="0x06-修改-exe">0x06 修改 exe&lt;/h2>
&lt;h3 id="61-x32dbg-修改关键跳">6.1 x32dbg 修改关键跳&lt;/h3>
&lt;p>用调试器打开后找到决定serial是否正确的关键跳转，右键二进制选择用NOP填充，确认即可。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-26.png" alt="image-20210915150907420" />&lt;/p>
&lt;p>修改后效果如图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-27.png" alt="image-20210915150953046" />&lt;/p>
&lt;p>接着把修改后的exe保存下来，在文件菜单里选择补丁。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-28.png" alt="image-20210915151220354" />&lt;/p>
&lt;p>全选，点修补文件，选择路径保存。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-29.png" alt="image-20210915151322628" />&lt;/p>
&lt;p>我保存在&lt;code>cm02-easy-patched.exe&lt;/code>，接着我们试试运行。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-30.png" alt="image-20210915151903611" />&lt;/p>
&lt;p>遗憾的是被x32dbg补丁功能导出的文件需要管理员权限运行，为了能截到图，图中用了名为&lt;code>sudo&lt;/code>的工具命令，可以用&lt;code>scoop install sudo&lt;/code>来安装&lt;code>sudo&lt;/code>，点击去&lt;a class="link" href="https://scoop.sh" target="_blank" rel="noopener"
>scoop首页&lt;/a>。&lt;/p>
&lt;h3 id="62-反编译器修改关键跳">6.2 反编译器修改关键跳&lt;/h3>
&lt;p>以Cutter为例，找到&lt;code>jne&lt;/code>指令后，右键修改为&lt;code>nop&lt;/code>即可。记得先备份。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-31.png" alt="image-20210915152428449" />&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-32.png" alt="image-20210915152609774" />&lt;/p>
&lt;p>修改后也能实现和x32导出一样的效果，而且不用管理员权限。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>总得有个结论。&lt;/p>
&lt;p>这次逆向应该能帮助学到下面的东西：&lt;/p>
&lt;ul>
&lt;li>栈帧结构和函数调用&lt;/li>
&lt;li>&lt;code>cmp&lt;/code>指令&lt;/li>
&lt;li>&lt;code>jne&lt;/code>、&lt;code>jbe&lt;/code>、&lt;code>jnz&lt;/code>、&lt;code>jae&lt;/code>指令&lt;/li>
&lt;li>&lt;code>movsx&lt;/code>指令&lt;/li>
&lt;li>&lt;code>shl&lt;/code>指令&lt;/li>
&lt;/ul>
&lt;p>库函数因为静态链接的缘故已经变成了文中的未知函数，造成了分析上的障碍。老实说如果不是自己写的源码，能不能这么顺利逆向出注册机还真不好说。&lt;/p>
&lt;p>开启优化的 &lt;em>normal&lt;/em> 和 &lt;em>hard&lt;/em> 难度就不进一步分析了，有兴趣可以看看。&lt;/p></description></item><item><title>自娱自乐 CrackMe-1</title><link>https://nnnewb.github.io/blog/p/crackme-01/</link><pubDate>Fri, 10 Sep 2021 09:49:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/crackme-01/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总之得有个前言。从前有个老和尚（不是，掉光了头发的攻城狮），&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>以上略，于是作为萌新含量110%的萌新，出于练手、熟悉下反汇编调试的环境之类的目的，还是自己写crackme来把玩吧。&lt;/p>
&lt;h2 id="cm01-介绍">CM01 介绍&lt;/h2>
&lt;p>于是这个 CrackMe 就叫 CM01 好了，命令行无界面。适合差不多对这些东西懂个大概或者打算学习的萌新：&lt;/p>
&lt;ul>
&lt;li>反汇编/调试工具&lt;/li>
&lt;li>寄存器（主要是 ebp、esp、eip、eax）&lt;/li>
&lt;li>函数调用（cdecl）&lt;/li>
&lt;li>栈/栈帧&lt;/li>
&lt;li>内存模型和寻址&lt;/li>
&lt;/ul>
&lt;h2 id="cm01-源码">CM01 源码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">realloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;secret&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;password:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strncmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pwd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Good job!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wrong pwd!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译工具链：&lt;/p>
&lt;ul>
&lt;li>因为VC++对单纯C的支持比较垃圾，所以用LLVM（Clang）-12.0.1，Clang&lt;/li>
&lt;/ul>
&lt;p>编译指令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">clang cm01.c -o cm01-easy.exe -m32 -O0
clang cm01.c -o cm01-normal.exe -m32 -O1
clang cm01.c -o cm01-hard.exe -m32 -O2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="观察">观察&lt;/h2>
&lt;p>假装没看到源码，先观察下程序的行为，确定目标。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">weakptr in assembly-play ❯ .\cm01-easy.exe
password:password?
wrong pwd!
password:asdf
wrong pwd!
password:wrong pwd!
password:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个 &lt;em>password:&lt;/em> 提示符，随便输入了点什么会提示 &lt;em>wrong pwd!&lt;/em> 。&lt;/p>
&lt;p>确定目标是找出正确的密码。&lt;/p>
&lt;h2 id="静态分析">静态分析&lt;/h2>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>在逆向中有个说法叫*“关键跳转”*，如分析固定密码，字符串比较后跳转成功或跳转失败就是关键跳。对于简单的问题，找到关键跳即可破局。&lt;/p>
&lt;h3 id="反汇编---easy">反汇编 - Easy&lt;/h3>
&lt;p>Easy难度下，&lt;code>-O0&lt;/code>参数关闭了编译器优化，生成的汇编代码非常死板，基本能直接对照到C源码上。&lt;/p>
&lt;p>直接拿IDA打开。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-1.png" alt="image-20210912172521751" />&lt;/p>
&lt;p>直接跳到了&lt;code>main&lt;/code>函数。接着看IDA汇编窗口中的的细节。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-2.png" alt="image-20210912173539972" />&lt;/p>
&lt;p>IDA反汇编界面是包含一些伪代码的，有助于分析。&lt;/p>
&lt;p>左侧有长条和箭头的部分是控制流示意，箭头指的就是跳转方向。&lt;/p>
&lt;p>越过伪代码的部分，就能看到函数体开头例行公事的部分了。随后的便是函数体代码。&lt;/p>
&lt;p>具体看函数体前，先了解下IDA还提供了另一种控制流可视化的视图，可以极大帮助对函数逻辑的分析。&lt;/p>
&lt;p>在汇编视图里右键，选择 Graph View，即可进入控制流视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-3.png" alt="image-20210912174233891" />&lt;/p>
&lt;p>在图片左下角的是视图的全览，原本的汇编文本变成了图中箭头连接的小汇编代码块，箭头指示了跳转的方向。&lt;/p>
&lt;p>在这个视图可以很清楚地看到所谓的关键跳：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-4.png" alt="image-20210912174738919" />&lt;/p>
&lt;p>&lt;code>_strncmp&lt;/code>是经过了 name mangling 的 c 标准库函数&lt;code>strncmp&lt;/code>，函数如名字所示，用途就是比较字符串。&lt;/p>
&lt;p>又根据&lt;code>cdecl&lt;/code>调用约定，函数参数通过栈传递，参数从右往左压栈。我们看这个&lt;code>call&lt;/code>指令前的三句&lt;code>mov&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; Str2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">MaxCount&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="c">; MaxCount
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是没有用&lt;code>push&lt;/code>指令，所以三个&lt;code>mov&lt;/code>在栈上的顺序要根据偏移算。我们偷个懒直接看&lt;code>strncmp&lt;/code>函数的签名就行，IDA也分析出了压栈的地址在注释里。往上看，看看&lt;code>ecx&lt;/code>和&lt;code>eax&lt;/code>又是哪儿来的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看&lt;code>ebp+var_8&lt;/code>和&lt;code>ebp+str1&lt;/code>又是什么。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">lea&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">aSecret&lt;/span> &lt;span class="c">; &amp;#34;secret&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以有一个参数是字符串 &lt;code>&amp;quot;secret&amp;quot;&lt;/code>，作为关键跳前 &lt;code>_strncmp&lt;/code> 的参数。&lt;/p>
&lt;p>让我们尝试一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-7.png" alt="image-20210912181959230" />&lt;/p>
&lt;p>成功完成。&lt;/p>
&lt;h3 id="反汇编---normal">反汇编 - Normal&lt;/h3>
&lt;p>接下来看使用&lt;code>-O1&lt;/code>编译，开启了部分编译器优化的版本。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-normal-1.png" alt="image-20210912183427553" />&lt;/p>
&lt;p>可以看到，因为编译器优化的缘故，原本清晰的分支变成了一个仅有一个循环。&lt;/p>
&lt;p>还是先找到关键跳，肉眼过一遍循环中的函数调用，&lt;code>sub_401180&lt;/code>从参数看应该是一个往终端打印字符串的函数，忽略。&lt;code>___acrt_iob_func&lt;/code>意义不明也忽略。下一个&lt;code>sub_401000&lt;/code>依然有点意义不明，先跳过。再往下就看到了老熟人了，&lt;code>_strncmp&lt;/code>，&lt;code>&amp;quot;secret&amp;quot;&lt;/code>参数更是直接用一个push给压栈了，分析到此结束？&lt;/p>
&lt;p>不过还有一个问题没解决：失败的提示我们看到了，成功的跳转在哪儿呢？&lt;/p>
&lt;p>从&lt;code>call _strncmp&lt;/code>开始往下看。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">call&lt;/span> &lt;span class="no">_strncmp&lt;/span> &lt;span class="c">; 调用，cdecl约定下，返回值在 eax
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">Ch&lt;/span> &lt;span class="c">; 清栈
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 函数返回值存入 esi
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">test&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; TEST 指令把操作数按位与并设置标志位，如果 eax 是 0 则 ZF 会设置成 1，否则就是 0。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">aWrongPwd&lt;/span> &lt;span class="c">; eax = &amp;#34;wrong pwd!\n&amp;#34;
&lt;/span>&lt;span class="c">; ebp 被设置为了字符串 &amp;#34;Good job!\n&amp;#34;
&lt;/span>&lt;span class="c">; cmovz 或者说 cmov* 系列的函数用后缀的单个字符表示用哪个标志位来决定是否mov，比如cmovz就是用ZF标志位决定是否执行mov。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">cmovz&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 如果 strncmp 返回 0 则是 Good job!\n ，反则 wrong pwd!\n
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">sub_401180&lt;/span> &lt;span class="c">; 调用一个输出字符串的函数
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用伪代码来表示，就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Good job!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">compare_result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;wrong pwd!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="反汇编---hard">反汇编 - Hard&lt;/h3>
&lt;p>Hard启用了&lt;code>-O2&lt;/code>，也就是开启了大部分编译器优化。用IDA打开。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-1.png" alt="image-20210912185949657" />&lt;/p>
&lt;p>因为编译器十分聪明地把一些函数给内联编译进了 main 函数，现在 main 函数的控制流已经乱的一批。挨个读下去虽然还可行，但实在费神费力。&lt;/p>
&lt;p>不过在这个条件下依然还有解决办法：我们可以通过错误或成功的提示字符串找关键跳。&lt;/p>
&lt;p>已知错误时会输出&amp;quot;wrong pwd!&amp;quot;，我们在IDA找到字符串视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-2.png" alt="image-20210912190657661" />&lt;/p>
&lt;p>然后在视图中找到字符串。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-3.png" alt="image-20210912190827657" />&lt;/p>
&lt;p>其实就是在内存数据段（Data Segment）或者PE的数据节（Data Section）中的字符串啦，一般手写的字符串字面量都会直接编译到这里。&lt;/p>
&lt;p>在我们要找的字符串上双击，就会跳到汇编视图中的字符串位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-4.png" alt="image-20210912191125747" />&lt;/p>
&lt;p>然后再双击图中位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-5.png" alt="image-20210912191344967" />&lt;/p>
&lt;p>即可跳转到引用。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-6.png" alt="image-20210912191435672" />&lt;/p>
&lt;p>接着看跳转到的上下文，又变成了十分熟悉的正确错误分支。往前找到 &lt;code>_strncmp&lt;/code>的参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="mi">6&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">Str2&lt;/span> &lt;span class="c">; &amp;#34;secret&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">edx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">_strncmp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是 &lt;code>strncmp(edx,&amp;quot;secret&amp;quot;,6)&lt;/code>，密钥就是 &lt;code>&amp;quot;secret&amp;quot;&lt;/code>没错了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这个 CrackMe （以后也许还有）的主要用途是学习逆向和汇编的基础知识，巩固记忆，学习和熟悉工具。所以尽可能去除干扰项，只保留想要巩固学习的部分，看起来很傻，基本没啥挑战性。&lt;/p>
&lt;p>有些公共的前置知识（比如寄存器和栈，调用约定，内存模型）我做了个笔记，大概是入不了大佬的眼的。可以在[这里](&lt;a class="link" href="https://nnnewb.github.io/blog/p/assembly-learning-note/" target="_blank" rel="noopener"
>32位 Windows x86 汇编语言学习 (nnnewb.github.io)&lt;/a>)看看。&lt;/p>
&lt;p>目前能找到很多 Delphi 和 VB 编写的 CrackMe，Delphi 现在搜搜还能看到些 &lt;em>Delphi still alive&lt;/em> 的文章，不过确实比较少见了吧。提到学 GUI 编程，不是推荐 C++/Qt 就是 .Net 全家桶。VB 更是早已完蛋（不是VB.Net），老实说这些 CrackMe 不知道转了几手，还能玩是还能玩，虽然但是吧，总之对我还是略难，看别人的 CrackMe 题解也挺迷茫。&lt;/p>
&lt;p>不过自己会编程就好了嘛！&lt;/p></description></item><item><title>32位 Windows x86 汇编语言学习</title><link>https://nnnewb.github.io/blog/p/assembly-learning-note/</link><pubDate>Thu, 09 Sep 2021 16:14:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/assembly-learning-note/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近迷上了 Crack Me，入门无果。老是看到有大佬发52pojie又有哪个佬把什么黄油给手撕了，心痒痒。干脆也正正经经地去学一下好了。&lt;/p>
&lt;p>这当然也算是程序员本职的正经知识（心虚而且超大声）。&lt;/p>
&lt;h2 id="常规知识和速记">常规知识和速记&lt;/h2>
&lt;p>笔记内容是关于 8086/x86 汇编。&lt;/p>
&lt;p>x86体系结构下内存和寄存器都是小端序。小端序指低位在右，高位在左。如&lt;code>0x1&lt;/code>的小端序表示是&lt;code>0000 0001&lt;/code>。&lt;/p>
&lt;p>8比特能表示2位16进制数（&lt;code>0xFF&lt;/code>，也就是&lt;code>255&lt;/code>），16比特能表示4位16进制数（&lt;code>0xFFFF&lt;/code>，&lt;code>65535&lt;/code>），32比特能表示8位16进制数（&lt;code>0XFFFFFFFF&lt;/code>，&lt;code>4294967295&lt;/code>）。&lt;/p>
&lt;p>数据类型：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>助记符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>dword&lt;/code>&lt;/td>
&lt;td>双字（double word），32比特整型数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>word&lt;/code>&lt;/td>
&lt;td>字，16比特整型数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>byte&lt;/code>&lt;/td>
&lt;td>字节，8比特整型数据。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>常用的16进制数记法：&lt;/p>
&lt;ul>
&lt;li>&lt;code>0x2A&lt;/code>，前缀&lt;code>0x&lt;/code>&lt;/li>
&lt;li>&lt;code>2AH&lt;/code>，后缀&lt;code>H&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="寄存器">寄存器&lt;/h2>
&lt;h3 id="通用寄存器">通用寄存器&lt;/h3>
&lt;p>参考：&lt;a class="link" href="https://zh.wikibooks.org/wiki/X86_%E6%B1%87%E7%BC%96/X86_%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener"
>x86汇编 - 维基百科&lt;/a>&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/x64-architecture" target="_blank" rel="noopener"
>x64体系结构 - windows hardware&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>64位寄存器&lt;/th>
&lt;th>32位寄存器&lt;/th>
&lt;th>16位寄存器&lt;/th>
&lt;th>8位寄存器&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>RAX&lt;/code>或&lt;code>R0&lt;/code>&lt;/td>
&lt;td>&lt;code>EAX&lt;/code>&lt;/td>
&lt;td>&lt;code>AX&lt;/code>&lt;/td>
&lt;td>&lt;code>AL&lt;/code>和&lt;code>AH&lt;/code>&lt;/td>
&lt;td>Accumlator，累加寄存器，用于算术运算。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RBX&lt;/code>或&lt;code>R3&lt;/code>&lt;/td>
&lt;td>&lt;code>EBX&lt;/code>&lt;/td>
&lt;td>&lt;code>BX&lt;/code>&lt;/td>
&lt;td>&lt;code>BL&lt;/code>和&lt;code>BH&lt;/code>&lt;/td>
&lt;td>Base，基址寄存器，指向数据块基址（段模式存于段寄存器&lt;code>DS&lt;/code>）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RCX&lt;/code>或&lt;code>R1&lt;/code>&lt;/td>
&lt;td>&lt;code>ECX&lt;/code>&lt;/td>
&lt;td>&lt;code>CX&lt;/code>&lt;/td>
&lt;td>&lt;code>CL&lt;/code>和&lt;code>CH&lt;/code>&lt;/td>
&lt;td>Counter，用于用于移/环指令及循环（没懂）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RDX&lt;/code>或&lt;code>R2&lt;/code>&lt;/td>
&lt;td>&lt;code>EDX&lt;/code>&lt;/td>
&lt;td>&lt;code>DX&lt;/code>&lt;/td>
&lt;td>&lt;code>DL&lt;/code>和&lt;code>DH&lt;/code>&lt;/td>
&lt;td>Data，用于数学运算和IO操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RSI&lt;/code>或&lt;code>R6&lt;/code>&lt;/td>
&lt;td>&lt;code>ESI&lt;/code>&lt;/td>
&lt;td>&lt;code>SI&lt;/code>&lt;/td>
&lt;td>&lt;code>SIL&lt;/code>&lt;/td>
&lt;td>Source Index，指向指令流操作中的源。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RDI&lt;/code>或&lt;code>R7&lt;/code>&lt;/td>
&lt;td>&lt;code>EDI&lt;/code>&lt;/td>
&lt;td>&lt;code>DI&lt;/code>&lt;/td>
&lt;td>&lt;code>DIL&lt;/code>&lt;/td>
&lt;td>Destination Index，指向指令流操作中的目标。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RBP&lt;/code>或&lt;code>R5&lt;/code>&lt;/td>
&lt;td>&lt;code>EBP&lt;/code>&lt;/td>
&lt;td>&lt;code>BP&lt;/code>&lt;/td>
&lt;td>&lt;code>BPL&lt;/code>&lt;/td>
&lt;td>Stack Base Pointer，指向栈的基地址。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RSP&lt;/code>或&lt;code>R4&lt;/code>&lt;/td>
&lt;td>&lt;code>ESP&lt;/code>&lt;/td>
&lt;td>&lt;code>SP&lt;/code>&lt;/td>
&lt;td>&lt;code>SPL&lt;/code>&lt;/td>
&lt;td>Stack Pointer，指向栈顶的地址。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R8&lt;/code>&lt;/td>
&lt;td>&lt;code>R8D&lt;/code>&lt;/td>
&lt;td>&lt;code>R8W&lt;/code>&lt;/td>
&lt;td>&lt;code>R8B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R9&lt;/code>&lt;/td>
&lt;td>&lt;code>R9D&lt;/code>&lt;/td>
&lt;td>&lt;code>R9W&lt;/code>&lt;/td>
&lt;td>&lt;code>R9B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R10&lt;/code>&lt;/td>
&lt;td>&lt;code>R10D&lt;/code>&lt;/td>
&lt;td>&lt;code>R10W&lt;/code>&lt;/td>
&lt;td>&lt;code>R10B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R11&lt;/code>&lt;/td>
&lt;td>&lt;code>R11D&lt;/code>&lt;/td>
&lt;td>&lt;code>R11W&lt;/code>&lt;/td>
&lt;td>&lt;code>R11B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R12&lt;/code>&lt;/td>
&lt;td>&lt;code>R12D&lt;/code>&lt;/td>
&lt;td>&lt;code>R12W&lt;/code>&lt;/td>
&lt;td>&lt;code>R12B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R13&lt;/code>&lt;/td>
&lt;td>&lt;code>R13D&lt;/code>&lt;/td>
&lt;td>&lt;code>R13W&lt;/code>&lt;/td>
&lt;td>&lt;code>R13B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R14&lt;/code>&lt;/td>
&lt;td>&lt;code>R14D&lt;/code>&lt;/td>
&lt;td>&lt;code>R14W&lt;/code>&lt;/td>
&lt;td>&lt;code>R14B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R15&lt;/code>&lt;/td>
&lt;td>&lt;code>R15D&lt;/code>&lt;/td>
&lt;td>&lt;code>R15W&lt;/code>&lt;/td>
&lt;td>&lt;code>R15B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>后续还是用 32 位寄存器的名字称呼这些寄存器。&lt;/p>
&lt;p>通用寄存器的用途并不是绝对的，程序可以根据自己的需要将通用寄存器挪作它用。&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>16位寄存器本身是32位寄存器的低16位。32位寄存器的高16位没有单独的助记符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>16位寄存器又可以单独分成两个8位寄存器使用。其中如&lt;code>AH&lt;/code>形式的寄存器表示&lt;code>AX&lt;/code>高位8比特，&lt;code>AL&lt;/code>则表示低位8比特。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="edi-和-esi">EDI 和 ESI&lt;/h3>
&lt;p>关于&lt;code>EDI&lt;/code>和&lt;code>ESI&lt;/code>这两个寄存器的用途可以参考 &lt;a class="link" href="https://stackoverflow.com/questions/1856320/purpose-of-esi-edi-registers" target="_blank" rel="noopener"
>stack overflow 的这篇问答&lt;/a>。摘一段例子，下面的C代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">srcp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">srcidx&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以被编译成下面的汇编语句：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">edx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">edi-54&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ecx&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">edi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ebp+0c&lt;/code>包含了&lt;code>argv&lt;/code>内容，&lt;code>ebx&lt;/code>就是&lt;code>j&lt;/code>，&lt;code>edi&lt;/code>就是&lt;code>srcidx&lt;/code>。&lt;/p>
&lt;h3 id="段寄存器">段寄存器&lt;/h3>
&lt;p>现代操作系统采用内存分页模式，把所有段寄存器指向同址来禁用内存分段模式。然而&lt;code>FS&lt;/code>和&lt;code>GS&lt;/code>依然用于内存分段模式，用于线程内数据存取。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>段寄存器助记符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SS&lt;/code>&lt;/td>
&lt;td>Stack Segment，栈段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CS&lt;/code>&lt;/td>
&lt;td>Code Segment，代码段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DS&lt;/code>&lt;/td>
&lt;td>Data Segment，数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ES&lt;/code>&lt;/td>
&lt;td>Extra Segment，额外数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>FS&lt;/code>&lt;/td>
&lt;td>更额外的数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>GS&lt;/code>&lt;/td>
&lt;td>更额外的数据段&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>x86一共有6个段寄存器，所有段寄存器都是16比特位宽。&lt;/p>
&lt;p>关于段寄存器用途和计算放在主存一节中。&lt;/p>
&lt;h3 id="指令指针-eip">指令指针 EIP&lt;/h3>
&lt;p>IP 寄存器全称是 Instruction Pointer 寄存器，保存总是保存下一指令的地址。&lt;/p>
&lt;p>x86实模式下使用段内存管理，可寻址1MB内存空间，采用基址（段寄存器）左移4位加上偏移量，相当于20比特位宽地址总线。实模式下EIP可以和CS代码段寄存器结合求取下一指令的具体地址。&lt;/p>
&lt;h3 id="标志寄存器">标志寄存器&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>助记符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>CF&lt;/code>&lt;/td>
&lt;td>Carry Flag，进位或借位溢出时记为1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>PF&lt;/code>&lt;/td>
&lt;td>Parity Flag，运算结果最低字节有偶数个1位时记为1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AF&lt;/code>&lt;/td>
&lt;td>Auxiliary Flag，BCD码算术运算中进位或借位溢出，即运算结果第三位发生进借位时记1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZF&lt;/code>&lt;/td>
&lt;td>Zero Flag，运算结果为0时记1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SF&lt;/code>&lt;/td>
&lt;td>Sign Flag，记运算结果最高位（符号位）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TF&lt;/code>&lt;/td>
&lt;td>Trap Flag，单步调试记1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>IF&lt;/code>&lt;/td>
&lt;td>Interrupt Enable Flag，是否允许响应中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DF&lt;/code>&lt;/td>
&lt;td>Direction Flag，串方向标记，指示串指令从高地址向低地址还是低地址向高地址处理。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>OF&lt;/code>&lt;/td>
&lt;td>Overflow Flag，指示算术运算是否溢出。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>IOPL&lt;/code>&lt;/td>
&lt;td>I/O Privilege Level，I/O特权级，2比特宽，&lt;code>CPL&lt;/code>小于等于&lt;code>IOPL&lt;/code>才允许访问I/O地址空间。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>NT&lt;/code>&lt;/td>
&lt;td>Nested Task Flag，当前任务链接上衣任务时置1，否则0。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RF&lt;/code>&lt;/td>
&lt;td>Resume Flag，控制处理器对除障异常的响应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VM&lt;/code>&lt;/td>
&lt;td>Virtual-8086 Mode Flag，虚拟8086模式标志，置1时进入虚拟8086模式，清0返回保护模式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AC&lt;/code>&lt;/td>
&lt;td>Alignment Check Flag，该标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VIF&lt;/code>&lt;/td>
&lt;td>Virtual interrupt flag，该标志是IF标志的虚拟镜像(Virtual image)，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展(virtual mode extensions)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VIP&lt;/code>&lt;/td>
&lt;td>Virtual interrupt pending flag，该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零。与VIF标志结合使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ID&lt;/code>&lt;/td>
&lt;td>Identification flag，程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="主存">主存&lt;/h2>
&lt;h3 id="运行模式和地址模型">运行模式和地址模型&lt;/h3>
&lt;p>x86 CPU 运行模式主要考虑&lt;strong>实模式&lt;/strong>和&lt;strong>保护模式&lt;/strong>，以及特殊的&lt;strong>虚拟8086模式&lt;/strong>。&lt;/p>
&lt;p>实模式有自己的独特地址空间模型，下可视作16位CPU+20比特无保护地址空间，使用段寄存器和通用16位通用寄存器组合寻址，算法&lt;code>base&amp;lt;&amp;lt;4+offset&lt;/code>。最大可寻址1MB。&lt;/p>
&lt;p>虚拟8086模式用于在保护模式下运行实模式程序，并不是真正的CPU模式，CPU实际还是运行在保护模式。一些程序利用虚拟8086模式可以实现在保护模式下运行实模式程序，如 dosbox、dosemu 。&lt;/p>
&lt;p>保护模式下可以用&lt;strong>逻辑地址&lt;/strong>访问主存，逻辑地址又称&lt;strong>远指针&lt;/strong>（&lt;code>far ptr&lt;/code>），逻辑地址由段选择器加上偏移寻址组成。运行于 IA-32 体系的程序，段选择器最多可以选择 2^14^-1 个段，每个段可以长达 2^32^ 字节。&lt;/p>
&lt;h3 id="nearfarhuge-指针">near/far/huge 指针&lt;/h3>
&lt;p>near 指针是给定段内用16比特表示的偏移值，最大访问地址空间64KB。&lt;/p>
&lt;p>far 指针是32比特表示的偏移值，在16位架构下可以访问段外的内存，32/64位架构下则依然是段内。&lt;/p>
&lt;p>huge指针和far指针大小相同，大体目标就是在16位限制下访问更大的地址空间。&lt;/p>
&lt;h3 id="平坦内存模型线性内存模型">平坦内存模型/线性内存模型&lt;/h3>
&lt;p>参考：&lt;a class="link" href="https://en.wikipedia.org/wiki/Flat_memory_model" target="_blank" rel="noopener"
>flat memory model - wiki&lt;/a>&lt;/p>
&lt;p>平坦内存模型也叫线性内存模型，定义是程序中的内存在同一个连续的地址空间中，不需要通过分段或分页机制间接取址。（从操作系统或硬件角度来说，可能依然有分页或分段，但对用户程序来说无感知）。&lt;/p>
&lt;h3 id="intel-内存模型">Intel 内存模型&lt;/h3>
&lt;p>下述内存模型是实模式下的，保护模式下更近似于线性模型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>数据段指针&lt;/th>
&lt;th>代码段指针&lt;/th>
&lt;th>定义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Tiny&lt;/td>
&lt;td>near&lt;/td>
&lt;td>near&lt;/td>
&lt;td>CS=DS=SS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Small&lt;/td>
&lt;td>near&lt;/td>
&lt;td>near&lt;/td>
&lt;td>DS=SS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Medium&lt;/td>
&lt;td>near&lt;/td>
&lt;td>far&lt;/td>
&lt;td>DS=SS，多个代码段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compact&lt;/td>
&lt;td>far&lt;/td>
&lt;td>near&lt;/td>
&lt;td>一个代码段，多个数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Large&lt;/td>
&lt;td>far&lt;/td>
&lt;td>far&lt;/td>
&lt;td>多个代码段和数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Huge&lt;/td>
&lt;td>huge&lt;/td>
&lt;td>far&lt;/td>
&lt;td>多个代码段和数据段，单个数组可能超过64KB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>在Tiny模型下，所有段寄存器指针指向相同的段。&lt;/li>
&lt;li>在所有DS=SS的模型里，数据段指针总是near。&lt;/li>
&lt;li>栈总是限制在最高64KB。&lt;/li>
&lt;/ul>
&lt;h2 id="函数">函数&lt;/h2>
&lt;h3 id="栈">栈&lt;/h3>
&lt;p>参考：&lt;a class="link" href="https://www.zhihu.com/question/36103513" target="_blank" rel="noopener"
>栈的增长方向？ - 知乎&lt;/a>&lt;/p>
&lt;p>讨论对象是 Windows x86 32位程序。栈从高位向低位增长，需要注意看栈视图的地址是高地址在上还是低地址在上，被调用方的栈帧总是在调用方的增长方向上。&lt;/p>
&lt;p>例如下面的汇编指令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 把eax当参数入栈 esp=75f888
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 把eax当参数入栈 esp=75f884
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 把eax当参数入栈 esp=75f880
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">example.fn&lt;/span> &lt;span class="c">; 调用
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0xc&lt;/span> &lt;span class="c">; 调用方清栈，cdecl调用约定
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行call指令，跳转到被调用函数时，栈上会压入函数的返回地址。&lt;/p>
&lt;h3 id="栈指针-frame-pointer">栈指针 frame pointer&lt;/h3>
&lt;p>栈指针可以通过编译参数 &lt;code>-fomit-frame-pointer&lt;/code> 或 &lt;code>/Oy-&lt;/code> 来关闭。&lt;/p>
&lt;p>在有栈指针（frame pointer）的情况下，每个函数开头会做一个&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">esp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>的动作，这个动作做完后，新栈帧的栈底就是 ebp 了，ebp正好指向旧栈帧基地址，在ebp下（和栈增长方向相反）就是函数返回地址和调用方给的实参。&lt;/p>
&lt;p>在函数返回前，又会做一个&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>来完成平栈。&lt;/p>
&lt;p>下面就是被调函数执行完函数开头的指令后的栈。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>地址（栈向下增长）&lt;/th>
&lt;th>内容含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[ebp+0x10]&lt;/code>&lt;/td>
&lt;td>第3个参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp+0xc]&lt;/code>&lt;/td>
&lt;td>第2个参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp+0x8]&lt;/code>&lt;/td>
&lt;td>第1个参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp+0x4]&lt;/code>&lt;/td>
&lt;td>函数的返回地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp]&lt;/code>&lt;/td>
&lt;td>上一个栈帧基地址，此时&lt;code>esp&lt;/code>和&lt;code>ebp&lt;/code>相同。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>关闭栈指针的情况下，函数不会在开头保存ebp了，对函数参数的引用也会改为相对esp的偏移。&lt;/p>
&lt;h3 id="调用约定">调用约定&lt;/h3>
&lt;p>先讨论 cdecl 调用约定，函数调用的一般过程是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="mi">0x0&lt;/span> &lt;span class="c">; 压栈参数 0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">example.50be50&lt;/span> &lt;span class="c">; 压栈参数 &amp;#34;%d&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">example._printf&lt;/span> &lt;span class="c">; 调用 printf(&amp;#34;%d&amp;#34;, 0)
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0x8&lt;/span> &lt;span class="c">; cdecl 约定下，调用者清栈
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>stdcall&lt;/code>调用约定和&lt;code>cdecl&lt;/code>调用约定的区别在于&lt;code>stdcall&lt;/code>是被调用方清栈：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">ret&lt;/span> &lt;span class="mi">0x8&lt;/span> &lt;span class="c">; ret 有一个的可选参数，指示要从栈上弹出多少空间。相当于是先 add esp,0x8 再 ret
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>cdecl&lt;/code>是大部分编译器包括微软VC++默认的调用约定，&lt;code>stdcall&lt;/code>是所有 Windows API 的调用约定。&lt;/p>
&lt;h3 id="name-mangling">name mangling&lt;/h3>
&lt;p>好像没有广泛使用的译名，可以叫名字修饰、名字重整或改编，意会吧。&lt;/p>
&lt;p>对于有使用c/c++编程经验的人可能已经见过很多链接错误：&lt;/p>
&lt;ul>
&lt;li>undefined reference to &amp;hellip;&lt;/li>
&lt;li>无法解析的外部符号 &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>如果注意过提示中的符号名应该会发现这些符号名称都不是代码里写的函数名称，而是经过了变形的。&lt;/p>
&lt;p>&lt;code>cdecl&lt;/code>调用约定下，name mangling 的规则是在符号前加下划线。比如C库的&lt;code>printf&lt;/code>函数，经过name mangling后是&lt;code>_printf&lt;/code>。&lt;/p>
&lt;p>&lt;code>stdcall&lt;/code>调用约定下，name mangling 的规则是在符号前加下划线，符号后加 &lt;em>@参数长度&lt;/em>。需要注意的是对于C中的变长参数 variadic function，是不能用 &lt;code>stdcall&lt;/code> 调用约定的。&lt;/p>
&lt;p>用函数 &lt;code>int fn(int a, int b)&lt;/code> 举例，认为 int 是 4 字节长，此时&lt;code>cdecl&lt;/code>下叫&lt;code>_fn&lt;/code>，&lt;code>stdcall&lt;/code>下叫&lt;code>_fn@8&lt;/code>。&lt;/p></description></item><item><title>信号量 vs 互斥锁</title><link>https://nnnewb.github.io/blog/p/%E4%BF%A1%E5%8F%B7%E9%87%8F-vs-%E4%BA%92%E6%96%A5%E9%94%81/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%BF%A1%E5%8F%B7%E9%87%8F-vs-%E4%BA%92%E6%96%A5%E9%94%81/</guid><description>&lt;p>看 &lt;a class="link" href="https://github.com/tmrts/go-patterns/blob/master/synchronization/semaphore.md" target="_blank" rel="noopener"
>go-patterns/semaphore.md at master · tmrts/go-patterns (github.com)&lt;/a> 时产生了疑问，信号量为啥长得和互斥锁没啥区别呢。于是就谷歌了一圈，重温下一些关于并发的知识，对比信号量 &lt;em>semaphore&lt;/em> 和互斥锁 &lt;em>mutex&lt;/em> 。&lt;/p>
&lt;h2 id="互斥锁-mutex">互斥锁 mutex&lt;/h2>
&lt;p>以 &lt;em>pthread&lt;/em> 自带的互斥锁为例，提供了三种不同类型的互斥锁：&lt;/p>
&lt;ul>
&lt;li>&lt;em>PTHREAD_MUTEX_NORMAL&lt;/em> ，普通的互斥锁，不支持死锁检测（&lt;em>does not detect deadlock&lt;/em>），不支持递归加锁（&lt;em>relock without first unlocking it&lt;/em> 会导致死锁），不检测解锁线程，解锁一个未加锁的互斥锁是未定义行为（&lt;em>undefined behavior&lt;/em>）。&lt;/li>
&lt;li>&lt;em>PTHREAD_MUTEX_ERRORCHECK&lt;/em>，带错误检查的互斥锁，不支持递归加锁（会返回错误），解锁其他线程的互斥锁会返回错误，解锁未加锁的互斥锁会返回错误。&lt;/li>
&lt;li>&lt;em>PTHREAD_MUTEX_RECURSIVE&lt;/em>，递归加锁（&lt;em>relock with out unlocking it&lt;/em>）会成功，解锁时需要调用解锁的次数和加锁时调用加锁的次数相同。解锁其他线程的互斥锁会返回错误。解锁未加锁的互斥锁会返回错误。&lt;/li>
&lt;li>&lt;em>PTHREAD_MUTEX_DEFAULT&lt;/em>，默认互斥锁类型，对这一类型的互斥锁递归加锁时行为是未定义的，解锁未加锁的互斥锁行为是未定义的，解锁其他线程的互斥锁行为是未定义的。这一类型的互斥锁通常映射为另外几种互斥锁之一。&lt;/li>
&lt;/ul>
&lt;p>可以比较清楚地看出，互斥锁有三个基本特征：&lt;/p>
&lt;ul>
&lt;li>是否可重复加锁&lt;/li>
&lt;li>是否可解锁未加锁的互斥锁&lt;/li>
&lt;li>是否可解锁被其他人加锁的互斥锁&lt;/li>
&lt;/ul>
&lt;p>最严格的 &lt;em>PTHREAD_MUTEX_ERRORCHECK&lt;/em> 类型互斥锁，对此定义是 NO、NO、NO 。&lt;/p>
&lt;p>互斥锁的基本使用方式和使用场景有点像厕所的坑位：&lt;/p>
&lt;ol>
&lt;li>抢坑位，锁门&lt;/li>
&lt;li>你懂的&lt;/li>
&lt;li>解锁，出门&lt;/li>
&lt;/ol>
&lt;p>其中有隐含的信息包括：&lt;/p>
&lt;ol>
&lt;li>坑位是提前选择好的，你只能抢一个坑位，不能抢多个坑位。&lt;/li>
&lt;li>坑位在使用期间是独占的，你不能和别人分享一个坑位。&lt;/li>
&lt;li>只有你自己能解锁坑位，谁也不想办事儿的时候有人闯进来吧？&lt;/li>
&lt;/ol>
&lt;p>而递归加锁这一特殊场景，我寻思吧，有点难拿坑位比喻。反正也不重要，就别管了。&lt;/p>
&lt;h2 id="信号量-semaphore">信号量 semaphore&lt;/h2>
&lt;p>信号量本质上是一个整型值，不细分什么类型了。还是用 &lt;em>pthread&lt;/em> 举例吧，依据 &lt;em>POSIX&lt;/em> 标准。&lt;/p>
&lt;p>对信号量的操作可以先简单分5种。&lt;/p>
&lt;ul>
&lt;li>&lt;code>sem_init(sem,pshared,value)&lt;/code>，初始化一个信号量，可以指定要不要在 &lt;code>fork()&lt;/code> 创建的进程间共享，还可以指定信号量初始值。&lt;/li>
&lt;li>&lt;code>sem_wait(sem)&lt;/code>，等待信号量，信号量等于0时阻塞，其他线程通过&lt;code>sem_post&lt;/code>唤醒。&lt;/li>
&lt;li>&lt;code>sem_post(sem)&lt;/code>，发送信号量，唤醒阻塞在&lt;code>sem_wait&lt;/code>的线程。&lt;/li>
&lt;li>&lt;code>sem_getvalue(sem,valp)&lt;/code>，获取信号量当前值。&lt;/li>
&lt;li>&lt;code>sem_destroy(sem)&lt;/code>，销毁信号量。&lt;/li>
&lt;/ul>
&lt;p>信号量的主要特征就是它的值：&lt;/p>
&lt;ul>
&lt;li>当值等于0时，&lt;code>sem_wait&lt;/code> 会阻塞。&lt;/li>
&lt;li>当值大于0时，&lt;code>sem_wait&lt;/code> 返回并使值-1。&lt;/li>
&lt;/ul>
&lt;p>可以注意到，信号量的确可以做到互斥锁能做到的事情：设定好初始值1，然后&lt;code>sem_wait&lt;/code>等同于加锁，&lt;code>sem_post&lt;/code>等同于解锁，的确模拟出了互斥锁的功能。&lt;/p>
&lt;p>不过信号量去模拟互斥锁会有一些问题。比如说无法实现递归加锁（信号量值等于0时，&lt;code>sem_wait&lt;/code>会阻塞），无法检测解锁线程是不是加锁线程（除非你自己再封装一次，把信号量和线程ID绑定），解锁未加锁会导致信号量值大于1，进而造成&lt;code>sem_wait&lt;/code>会允许多个线程并行执行（还是一样，你得自己封装，在&lt;code>sem_post&lt;/code>前检查当前信号量的值）。&lt;/p>
&lt;p>好，模拟互斥锁的话题到此为止。回到屎尿屁的比喻上。互斥锁可以比作公厕收费的老大爷。&lt;/p>
&lt;ul>
&lt;li>老规矩，不排队，大家从老大爷手里抢坑位。&lt;/li>
&lt;li>坑位满员的时候老大爷谁也不让进。&lt;/li>
&lt;li>每出来一个人，老大爷就放进去一个人。&lt;/li>
&lt;/ul>
&lt;p>其中隐含的信息包括：&lt;/p>
&lt;ul>
&lt;li>当然，可用的坑位或者说资源依然是有限的，数量不确定。&lt;/li>
&lt;li>你只能独占一部分资源，而且每个人独占的资源都一样多。不然老大爷看到有一个坑位放你进去了，但你想要用两个坑位，那你就只能继续等着，或者和别人分享坑位了。&lt;/li>
&lt;/ul>
&lt;p>信号量最好用的场景还是 &lt;strong>生产者-消费者&lt;/strong> 模型的队列，来统计队列中元素数量。消费者可以用一个简单的 &lt;code>sem_timedwait&lt;/code> 调用实现等待新元素加入队列，用互斥锁来确保队列操作是线程安全的。&lt;/p>
&lt;p>可见管公厕的老大爷也是非常有生活智慧哈，充分利用了年轻时的编程经验来提高晚年生活质量。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>互斥锁和信号量都能处理数据竞争，但各有侧重。&lt;/p>
&lt;p>典型的数据竞争场景当然是互斥锁好用，但信号量也不是完全不行。&lt;/p>
&lt;p>信号量的典型场景也一样，互斥锁即便能行也会显得别扭。&lt;/p></description></item><item><title>面试题之 goroutine 运行顺序</title><link>https://nnnewb.github.io/blog/p/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B-goroutine-%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link><pubDate>Wed, 04 Aug 2021 10:37:24 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B-goroutine-%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid><description>&lt;p>不是我做的沙雕面试题，在 segmentfault 上看到的。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="原题">原题&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;runtime&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GOMAXPROCS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>问：代码输出结果是什么？&lt;/p>
&lt;h2 id="胡乱分析">胡乱分析&lt;/h2>
&lt;p>第一眼进去看到 &lt;code>runtime.GOMAXPROCS(1)&lt;/code> ，初步怀疑是又在考什么 GMP 面试题了。&lt;/p>
&lt;p>但凡说到 Go 面试好像就一定要考一下 goroutine 调度和 GMP 模型，招进来又只让你写 curd 。搞得面试跟考试背书一样。&lt;/p>
&lt;p>先不吐槽，继续看。跳过两行 &lt;code>sync.WaitGroup&lt;/code> 之后就是一个经典 for 循环陷阱。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就是个典型的闭包捕获问题，&lt;code>i&lt;/code> 被以引用形式捕获进匿名函数，循环中的 &lt;code>i++&lt;/code> 会导致所有匿名函数捕获的 &lt;code>i&lt;/code> 的值都跟着变。&lt;/p>
&lt;p>但有所区别的是，这个匿名函数被当 goroutine 执行了。之后再细说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就是上面错误例子的正确写法，把闭包捕获变成了参数传递，将 &lt;code>i&lt;/code> 复制了一份进匿名函数。&lt;/p>
&lt;p>好了，那么根据上面的分析，最终结果是&amp;hellip;？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">A: 5
A: 5
A: 5
A: 5
A: 5
B: 0
B: 1
B: 2
B: 3
B: 4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>是这样吗？&lt;/p>
&lt;h2 id="再次胡乱分析">再次胡乱分析&lt;/h2>
&lt;p>遗憾的是实际跑起来结果是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">B: 4
A: 5
A: 5
A: 5
A: 5
A: 5
B: 0
B: 1
B: 2
B: 3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到最后一个启动的 goroutine 的输出跑到了最开头。其他顺序倒是没啥变化。为啥呢？&lt;/p>
&lt;p>先看 &lt;code>runtime.GOMAXPROCS(1)&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/goroutines-schedule-order/G-M-P.png" alt="GMP" />&lt;/p>
&lt;p>从 GMP 模型可以得知这一句代码实际限制了所有 goroutine 只能被顺序串行执行（所有 g 都只能在这唯一一个 p 的本地队列里等待 m）。&lt;/p>
&lt;p>而 &lt;code>main()&lt;/code> 函数里创建 goroutine 的顺序是明确的，5 个 A，5 个 B。&lt;/p>
&lt;p>按照一般理解的话，队列是先进先出 FIFO 的结构，一个 p 又限制了其他 m 即使唤醒了，抢占了 p，也不能做 work stealing（也用不着做），那么 goroutine 的执行顺序自然只能是先进先出了。&lt;/p>
&lt;p>那么这个程序的行为就很奇怪了，先创建的 goroutine 先执行的话，那么输出顺序应该和我们预料的一样。实际运行结果为什么会变成这样呢？&lt;/p>
&lt;h2 id="不卖关子了">不卖关子了&lt;/h2>
&lt;p>直接说结论嗷。&lt;/p>
&lt;p>&lt;strong>不知道。&lt;/strong>&lt;/p>
&lt;p>别笑，真的不知道。特地上&lt;a class="link" href="https://stackoverflow.com/questions/35153010/goroutines-always-execute-last-in-first-out" target="_blank" rel="noopener"
>爆栈搜了下&lt;/a>，得到的结论就是，不知道。&lt;/p>
&lt;blockquote>
&lt;p>In Go 1.5, the order in which goroutines are scheduled has been changed. &lt;strong>The properties of the scheduler were never defined by the language&lt;/strong>, but programs that depend on the scheduling order may be broken by this change. We have seen a few (erroneous) programs affected by this change. If you have programs that implicitly depend on the scheduling order, you will need to update them.&lt;/p>
&lt;/blockquote>
&lt;p>从一个 Go 语言使用者的角度来说，goroutine 调度器的实现细节（像是多个 goroutine 之间的运行顺序）并不是能依赖的东西。&lt;/p>
&lt;p>如果写过一段时间的 C/C++ ，那么面试官应该很清楚，C/C++ 有几样臭名昭著的东西： &lt;em>Undefined Behavior&lt;/em>, &lt;em>Unspecified Behavior&lt;/em>。而 goroutine 执行顺序就是一个 Go 中的 &lt;em>Undefined Behavior&lt;/em>。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>我理解中的拿来主义，既不能被动地等待，也不能不加分辨地拿来，而既然加以分辨了，自然更不应该将拿来的事物当成解决一切问题的万能药。&lt;/p>
&lt;p>Go 虽然是一门不错的语言，试图将语言细节尽可能明确定义来避免再次陷入 C/C++的陷阱，但显然 Go 用户不这么想。至少，有部分 Go 用户不这么想，他们想搞清楚 Go 的一切，然后把这一切都当作至高无上的准则，来鞭挞其余人。&lt;/p>
&lt;p>目前为止，GMP 很好，作为面试题也说得过去。&lt;/p>
&lt;p>到底我只是厌恶这世上的一部分人罢了。&lt;/p></description></item><item><title>用 tree-sitter 写一个代码高亮</title><link>https://nnnewb.github.io/blog/p/%E7%94%A8-tree-sitter-%E5%86%99%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</link><pubDate>Tue, 03 Aug 2021 15:52:21 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E7%94%A8-tree-sitter-%E5%86%99%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</guid><description>&lt;p>这次用 tree-sitter 写一个简单的代码高亮。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我寻思代码高亮是什么应该没啥可解释的，也有叫“语法高亮”，总之都是一个意思。就是给编辑器里的代码涂上颜色，便于阅读。&lt;/p>
&lt;p>一般来说，简单的代码高亮只需要正则表达式就能搞定（比如说关键字高亮，Camel Case 标识符高亮等），不过正则表达式来实现高亮还是有很大的局限性。&lt;/p>
&lt;p>举例来说，当我把函数当参数传给另一个函数的时候——&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">higher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">higher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>higher(f)&lt;/code> 这一行中的 &lt;code>f&lt;/code> 不会以函数名的颜色标出。这就引出了一种新基于语义的代码高亮，让编辑器真正“认识”你的代码，并提供更聪明的提示。&lt;/p>
&lt;h2 id="开始">开始&lt;/h2>
&lt;p>还是在 vscode 折腾。&lt;/p>
&lt;p>先创建一个 vscode 插件项目，用 &lt;code>yo code&lt;/code> 完成。&lt;/p>
&lt;p>然后编辑 &lt;code>package.json&lt;/code> ，添加你的语言和插件的激活事件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;activationEvents&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;onLanguage:proto&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;contributes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;languages&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;proto&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;extensions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;.proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后修改 &lt;code>src/extension.ts&lt;/code>，去掉默认创建的 hello world 代码，留一个 &lt;code>console.log&lt;/code>，然后 F5 启动，打开一个 &lt;code>.proto&lt;/code> 文件，检查插件是否已经激活。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="c1">// The module &amp;#39;vscode&amp;#39; contains the VS Code extensibility API
&lt;/span>&lt;span class="c1">// Import the module and reference it with the alias vscode in your code below
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">vscode&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this method is called when your extension is activated
&lt;/span>&lt;span class="c1">// your extension is activated the very first time the command is executed
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">activate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>: &lt;span class="kt">vscode.ExtensionContext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;activated!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// this method is called when your extension is deactivated
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">deactivate() {&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建和注册-documentsemantictokensprovider">创建和注册 DocumentSemanticTokensProvider&lt;/h2>
&lt;p>创建文件 &lt;code>src/providers/SemanticTokensProvider.ts&lt;/code> ，编写一个类，实现接口 &lt;code>vscode.DocumentSemanticTokensProvider&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">vscode&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;web-tree-sitter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">SemanticTokenProvider&lt;/span>
&lt;span class="kr">implements&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DocumentSemanticTokensProvider&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">public&lt;/span> &lt;span class="nx">legend&lt;/span>: &lt;span class="kt">vscode.SemanticTokensLegend&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Language&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;../../assets/tree-sitter-proto.wasm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Parser&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setLanguage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">onDidChangeSemanticTokens?&lt;/span>: &lt;span class="kt">vscode.Event&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">provideDocumentSemanticTokens&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TextDocument&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">token&lt;/span>: &lt;span class="kt">vscode.CancellationToken&lt;/span>
&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ProviderResult&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">vscode.SemanticTokens&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not implemented&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再到 &lt;code>src/extension.ts&lt;/code> 里注册。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">activate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>: &lt;span class="kt">vscode.ExtensionContext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;activated!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// register semantic tokens provider
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">tokenTypes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;enum&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;class&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;function&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;comment&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;string&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;keyword&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;parameter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">modifiers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;definition&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;deprecated&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;documentation&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">selector&lt;/span>: &lt;span class="kt">vscode.DocumentSelector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">language&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;proto&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">scheme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">legend&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SemanticTokensLegend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tokenTypes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">modifiers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">provider&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">SemanticTokenProvider&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">legend&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscriptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">languages&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">registerDocumentSemanticTokensProvider&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">selector&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">provider&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">legend&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 &lt;code>tree-sitter-proto.wasm&lt;/code> 是编译好的语法定义，参考&lt;a class="link" href="./play-with-tree-sitter.md" >另一篇文章&lt;/a>。&lt;/p>
&lt;p>这样一来，&lt;code>new SemanticTokenProvider(legend)&lt;/code> 时就会初始化 parser 了。&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>先写个简单的 &lt;code>provideDocumentSemanticTokens&lt;/code> 实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">class&lt;/span> &lt;span class="nx">SemanticTokenProvider&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">provideDocumentSemanticTokens&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TextDocument&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">token&lt;/span>: &lt;span class="kt">vscode.CancellationToken&lt;/span>
&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ProviderResult&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">vscode.SemanticTokens&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getText&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">query&lt;/span>: &lt;span class="kt">Parser.Query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>
&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getLanguage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;(&amp;#34;message&amp;#34;) @keyword&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">captures&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">captures&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tree&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootNode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SemanticTokensBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">legend&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">capture&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">captures&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Range&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tokens&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最核心的部分就是 &lt;code>getLanguage().query()&lt;/code> 了，这里用了 tree-sitter 的查询语言 DSL 实现快速从语法树里提取对应的节点。&lt;/p>
&lt;p>放个&lt;a class="link" href="https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax" target="_blank" rel="noopener"
>查询语言的文档&lt;/a>，再简要介绍下。&lt;/p>
&lt;blockquote>
&lt;p>A query consists of one or more patterns, where each pattern is an S-expression that matches a certain set of nodes in a syntax tree.&lt;/p>
&lt;/blockquote>
&lt;p>本质上查询语言是个模式匹配工具，以 s-expression 作为模式语言。例如下面的查询。&lt;/p>
&lt;pre>&lt;code>(number)
&lt;/code>&lt;/pre>&lt;p>就是查询 ast 里所有的 number 节点。而 number 节点的定义在 tree-sitter 项目语法定义 &lt;code>grammar.js&lt;/code> 中给出。&lt;/p>
&lt;p>再看复杂一点的查询：&lt;/p>
&lt;pre>&lt;code>(binary_expression
(number)
(number)
)
&lt;/code>&lt;/pre>&lt;p>就是查询语法树中的 包含两个 number 子节点的 binary_expression 节点，不限定 number 节点的位置，只要是子节点就行。&lt;/p>
&lt;p>语法树的结构可以参考 &lt;code>tree-sitter parse&lt;/code> 命令的输出。&lt;/p>
&lt;p>当然也可以以子节点的值为条件来查询。&lt;/p>
&lt;pre>&lt;code>(binary_expression
left:(number)
)
&lt;/code>&lt;/pre>&lt;p>再看如何捕获查询结果。&lt;/p>
&lt;pre>&lt;code>(function
name: (identifier) @function_name
)
&lt;/code>&lt;/pre>&lt;p>用 &lt;code>@&lt;/code> 开头的标识符指定捕获的名称，通过 &lt;code>query.captures()&lt;/code> 即可完成捕获，返回 &lt;code>{name: string, node: Node}&lt;/code> 这样子的对象的列表。&lt;/p>
&lt;p>这样一来，上面的代码就很容易理解了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">const&lt;/span> &lt;span class="nx">query&lt;/span>: &lt;span class="kt">Parser.Query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>
&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getLanguage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;(&amp;#34;message&amp;#34;) @keyword&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">captures&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">captures&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tree&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootNode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两句话查询出了语法树里所有的 &lt;code>message&lt;/code> 关键字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SemanticTokensBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">legend&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">capture&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">captures&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Range&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这一段循环将捕获的结果构造出高亮 token，注意这里用了 &lt;code>capture.name&lt;/code> 作为标识符的类型，也就是上面的 query 里指定的 &lt;code>keyword&lt;/code> 。&lt;/p>
&lt;p>最终，将分词的结果返回出去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tokens&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>F5 运行即可看到源码中所有 &lt;code>message&lt;/code> 都被标上了关键字的颜色。&lt;/p></description></item><item><title>玩玩 tree-sitter</title><link>https://nnnewb.github.io/blog/p/%E7%8E%A9%E7%8E%A9-tree-sitter/</link><pubDate>Thu, 29 Jul 2021 10:14:36 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E7%8E%A9%E7%8E%A9-tree-sitter/</guid><description>&lt;p>什么是tree-sitter呢？&lt;/p>
&lt;p>tree-sitter 是一个 parser-generator，也是一个增量解析库（incremental parsing library）。它可以为源文件构建完整的语法树，并在源文件被编辑时高效地更新。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;p>tree-sitter 本身是一个 parser generator ，使用 javascript 来作为描述语法规则的语言（不像其他，如 yacc 一类的工具，以类似 EBNF 的 DSL 来描述语法规则）。&lt;/p>
&lt;p>我们写 tree-sitter 语法规则本质上是类似于写一个 tree-sitter 的语法支持包，可以参考下 &lt;a class="link" href="https://github.com/tree-sitter/tree-sitter-go" target="_blank" rel="noopener"
>tree-sitter/tree-sitter-go: Go grammar for tree-sitter (github.com)&lt;/a> 的项目结构。&lt;/p>
&lt;p>废话不多说，先写个简单的 demo 跑起来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir tree-sitter-hello &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> tree-sitter-hello
npm init
npm i --save nan
npm i --save-dev tree-sitter-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化好项目目录，在 package.json 里写个简单的命令，方便之后用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;span class="nt">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;tree-sitter generate &amp;amp;&amp;amp; tree-sitter parse test.txt&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在开始干正事儿，创建一个 grammar.js&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">grammar&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">rules&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">source_file&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">word&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 非终结符，0或更多的 word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">word&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="sr">/ /&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="nx">非常简单的终结符&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nx">表示一个词&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nx">可以是数字字母下划线组成&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再写一个 test.txt 作为输入&lt;/p>
&lt;pre>&lt;code>amazing tree sitter
&lt;/code>&lt;/pre>&lt;p>最后运行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">npm run &lt;span class="nb">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果&lt;/p>
&lt;pre>&lt;code>
&amp;gt; tree-sitter-hello@0.1.0 test
&amp;gt; tree-sitter generate &amp;amp;&amp;amp; tree-sitter parse test.txt
(source_file [0, 0] - [1, 0]
(word [0, 0] - [0, 7])
(word [0, 8] - [0, 12])
(word [0, 13] - [0, 19]))
&lt;/code>&lt;/pre>&lt;p>就是这样！&lt;/p>
&lt;h2 id="规则-dsl">规则 DSL&lt;/h2>
&lt;p>所有规则都用这种格式编写&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">rule_name1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">terminal&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">rule_name2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;non&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;terminal&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;symbol&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>正则表达式或字符串表示终结符，规则函数表示非终结符（token函数是例外）&lt;/p>
&lt;p>一些函数来标识 ENBF 里出现的规则：&lt;/p>
&lt;ul>
&lt;li>&lt;code>repeat&lt;/code> 就是重复0或多次，类似 EBNF 的 &lt;code>{ }&lt;/code> 含义&lt;/li>
&lt;li>&lt;code>repeat1&lt;/code> 至少出现一次，可以重复多次，类似 EBNF 的 &lt;code> SYM { SYM }&lt;/code> 这样的形式&lt;/li>
&lt;li>&lt;code>optional&lt;/code> 可选，类似 EBNF 的 &lt;code>[ ]&lt;/code> 含义&lt;/li>
&lt;li>&lt;code>choice&lt;/code> 多选一，类似 EBNF 的 &lt;code>|&lt;/code> 含义&lt;/li>
&lt;li>&lt;code>seq&lt;/code> 序列，表示前后顺序，在 EBNF 里就是符号出现的顺序&lt;/li>
&lt;li>&lt;code>token&lt;/code> ，把一个复杂规则合并成一个 token，一般是难以用一个正则表达式解决的终结符会用 &lt;code>token(choice(/hex/,/octal/,/decimals/))&lt;/code> 这种形式编写。&lt;/li>
&lt;/ul>
&lt;p>还有其他的，用于设置左右联结性优先级什么的，就不多介绍了。可以自己看tree-sitter的文档。&lt;/p>
&lt;h2 id="更复杂一点的例子">更复杂一点的例子&lt;/h2>
&lt;p>贴一个参考 protocol buffer 3 的 spec 写出来的 grammar.js&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">grammar&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;protobuf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">extras&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">comment&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/\s/&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nx">rules&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// top
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">source_file&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">syntax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">import&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">package&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">enum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="c1">// comment
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">comment&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">token&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;//&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/.*/&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="c1">// syntax
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">syntax&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;syntax&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/&amp;#34;proto3&amp;#34;/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// package
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">package&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;package&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// imports
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">import&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;import&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">strLit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// option
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">option&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;option&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">optionName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">optionName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// enum
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">enum&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;enum&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumBody&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">enumBody&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumField&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">enumField&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumValueOption&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumValueOption&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">enumValueOption&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">optionName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// message
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">messageName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">messageBody&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">messageBody&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">enum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneof&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mapField&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reserved&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;service&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">serviceName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rpc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;rpc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rpcName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;stream&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumMessageType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;returns&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;stream&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumMessageType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// field and inline option
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">field&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;repeated&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOption&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOption&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="nx">fieldOption&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">optionName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// oneof
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">oneof&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;oneof&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneofName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneofField&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">oneofField&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// map
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mapField&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;map&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;&amp;lt;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mapName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">keyType&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;int32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;int64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;bool&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// reserved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">reserved&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;reserved&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ranges&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNames&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nx">ranges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">range&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">range&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="nx">range&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;to&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;max&amp;#39;&lt;/span>&lt;span class="p">)))),&lt;/span>
&lt;span class="nx">fieldNames&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="c1">// integer literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">intLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">xX&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">da&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">fA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">F&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// floating-point literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">floatLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\d\.\d*([eE][+-]\d*)?/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/\d*[eE][+-]\d*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/\.\d*[eE][+-]\d*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;inf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;nan&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// boolean literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">boolLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// string literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">strLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/([^&amp;#34;\n\\]|\\[xX][\da-fA-F]{2}|\\[0-7]{3}|\\[abfnrtv\\&amp;#39;&amp;#34;])*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/([^&amp;#39;\n\\]|\\[xX][\da-fA-F]{2}|\\[0-7]{3}|\\[abfnrtv\\&amp;#39;&amp;#34;])*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// built-in field type
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;double&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;float&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;int32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;int64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;bool&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;bytes&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumMessageType&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// empty statement
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">emptyStatement&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// constant
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">constant&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[+-]/&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[+-]/&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floatLit&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">strLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boolLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">msgLit&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">msgLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// identifier
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ident&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z_&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="err">/,&lt;/span>
&lt;span class="nx">fullIdent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="nx">messageName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">mapName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">enumName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">oneofName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">rpcName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">enumMessageType&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">messageName&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译和使用">编译和使用&lt;/h2>
&lt;p>生成的是c代码，默认是编译成机器码，和cpu指令集架构强相关。有很多语言提供了基于 C 接口的绑定。&lt;/p>
&lt;p>不过现在也支持编译成 wasm，只需要用下面的命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">tree-sitter build-wasm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>加载方式也是用 &lt;code>Language.load&lt;/code> ，不过只有 web-tree-sitter 能加载。web-tree-sitter 可以用 &lt;code>npm i --save tree-sitter&lt;/code> 来安装。&lt;/p>
&lt;p>于是写个 main.js ，加载代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;web-tree-sitter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Language&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tree-sitter-hello.wasm&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Parser&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setLanguage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ast&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;amazing tree parser&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终输出是&lt;/p>
&lt;pre>&lt;code>(source_file (word) (word) (word))
&lt;/code>&lt;/pre>&lt;h2 id="编辑和更新">编辑和更新&lt;/h2>
&lt;p>这个还没搞明白。&lt;/p>
&lt;p>回头参考下别的 repo 的代码，看看别人是怎么做语法树更新的。&lt;/p></description></item><item><title>csr 方式创建 kubernetes 用户出了点差错</title><link>https://nnnewb.github.io/blog/p/csr-%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA-kubernetes-%E7%94%A8%E6%88%B7%E5%87%BA%E4%BA%86%E7%82%B9%E5%B7%AE%E9%94%99/</link><pubDate>Mon, 19 Jul 2021 09:52:38 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/csr-%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA-kubernetes-%E7%94%A8%E6%88%B7%E5%87%BA%E4%BA%86%E7%82%B9%E5%B7%AE%E9%94%99/</guid><description>&lt;p>越是在 kubernetes 的浑水里摸索，越是发现这就是个不顺手的锤子。&lt;/p>
&lt;p>网上很多人喜欢把东西用不惯叫做懒，蠢，要是多反驳几句，那就还得搭上个“坏”的帽子。感觉吧，就这帮人看来，大神放个屁也值得学习，从里面“悟”出什么道理。&lt;/p>
&lt;p>这帮人就跟传教士一样，但凡说个不字，就是在亵渎他们的“大神”。可谓人类迷惑行为。&lt;/p>
&lt;p>好吧。技术别饭圈化行吗？&lt;/p>
&lt;p>你说尤大强吗？Richard Stallman 是不是值得尊敬？Google 是不是最好的技术公司？Android 天下无敌？&lt;/p>
&lt;p>然后全摆上神坛，挂上赛博天神的牌匾，插上网线一天 25 小时膜拜？&lt;/p>
&lt;p>这帮人哪天搞个崇拜互联网和计算机的教派，把冯·诺依曼奉为先知我都不奇怪。&lt;/p>
&lt;p>拜托，你们真的好怪欸。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="完整脚本">完整脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash -e
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 创建用户 gitlab 并授予权限&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># reference:&lt;/span>
&lt;span class="c1"># https://kubernetes.io/zh/docs/reference/access-authn-authz/certificate-signing-requests/#normal-user&lt;/span>
&lt;span class="c1"># if `gitlab` does not exists,&lt;/span>
&lt;span class="c1"># create csr and approve&lt;/span>
&lt;span class="k">if&lt;/span> ! kubectl get csr gitlab &amp;gt;/dev/null&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># create credential&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -f gitlab.csr &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
openssl genrsa -out gitlab.key &lt;span class="m">2048&lt;/span>
openssl req -new -key gitlab.key -out gitlab.csr
&lt;span class="k">fi&lt;/span>
&lt;span class="nv">csr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>cat gitlab.csr &lt;span class="p">|&lt;/span> base64 &lt;span class="p">|&lt;/span> tr -d &lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
cat &lt;span class="s">&amp;lt;&amp;lt;EOF | tee gitlab-csr.yaml
&lt;/span>&lt;span class="s">apiVersion: certificates.k8s.io/v1beta1
&lt;/span>&lt;span class="s">kind: CertificateSigningRequest
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: gitlab
&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="s"> groups:
&lt;/span>&lt;span class="s"> - system:authenticated
&lt;/span>&lt;span class="s"> request: $csr
&lt;/span>&lt;span class="s"> signerName: kubernetes.io/kube-apiserver-client
&lt;/span>&lt;span class="s"> usages:
&lt;/span>&lt;span class="s"> - client auth
&lt;/span>&lt;span class="s">EOF&lt;/span>
kubectl create -f gitlab-csr.yaml
kubectl certificate approve gitlab
&lt;span class="k">fi&lt;/span>
&lt;span class="c1"># get signed credential&lt;/span>
kubectl get csr gitlab -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.status.certificate}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span> base64 -d &amp;gt; gitlab.crt
&lt;span class="c1"># create role and rolebinding&lt;/span>
kubectl create role gitlab-ci &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>create &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>git &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>list &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>update &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>delete &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>pods &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>deployment &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>statefulset &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>service &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>configmap
kubectl create rolebinding gitlab-ci-binding-gitlab --role&lt;span class="o">=&lt;/span>gitlab-ci --user&lt;span class="o">=&lt;/span>gitlab
kubectl config set-credentials gitlab --client-key&lt;span class="o">=&lt;/span>gitlab.key --client-certificate&lt;span class="o">=&lt;/span>gitlab.crt --embed-certs&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
kubectl config set-context ci --cluster&lt;span class="o">=&lt;/span>office --user&lt;span class="o">=&lt;/span>gitlab --namespace&lt;span class="o">=&lt;/span>version4
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存在的问题">存在的问题&lt;/h2>
&lt;p>脚本跑完后发现还不能使用 &lt;code>kubectl get pods&lt;/code>，错误 Unauthorized。&lt;/p>
&lt;p>再看了一遍文档，发现有这么一句。&lt;/p>
&lt;blockquote>
&lt;p>下面的脚本展示了如何生成 PKI 私钥和 CSR。 设置 CSR 的 CN 和 O 属性很重要。CN 是用户名，O 是该用户归属的组。 你可以参考 RBAC 了解标准组的信息。&lt;/p>
&lt;/blockquote>
&lt;p>顺着链接去看了下 RBAC，结果也没找到什么“标准组”。&lt;/p>
&lt;p>对于文中说的两个“很重要”的字段，CN 我猜测是 Common Name，O 就是 Organization。现在就不知道怎么填 O，行吧。&lt;/p>
&lt;p>等啥时候搞清楚了再补一篇。&lt;/p></description></item><item><title>升级公司的 GitLab</title><link>https://nnnewb.github.io/blog/p/%E5%8D%87%E7%BA%A7%E5%85%AC%E5%8F%B8%E7%9A%84-gitlab/</link><pubDate>Thu, 15 Jul 2021 16:02:41 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%8D%87%E7%BA%A7%E5%85%AC%E5%8F%B8%E7%9A%84-gitlab/</guid><description>&lt;p>公司目前跑的 gitlab 是很久以前部署的，当前版本 &lt;em>8.4.2&lt;/em> 。升级目标是 &lt;em>13.12.Z&lt;/em> 。部署方式是 docker 。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>宿主机配置不高，系统 &lt;em>Ubuntu 15.04&lt;/em> 。眼下这个时间，这个Ubuntu版本，基本宣告没法用了。直接在线升级容易把引导搞挂，到时候还得亲自去实体机上折腾引导，麻烦。暂时不管宿主机。&lt;/p>
&lt;h2 id="情况概述">情况概述&lt;/h2>
&lt;p>因为 GitLab 版本实在太低了，以至于连一个能集成的 CI/CD 工具都找不到。即使 jenkins 都只能很勉强地动起来，偏偏 jenkins 还不能满足需要（也可能是我太菜，反正公司没人玩得转 jenkins）。&lt;/p>
&lt;p>但开发需要 CI/CD 来解决持续构建和部署的问题，不得不考虑升级了。&lt;/p>
&lt;h2 id="1-备份">1. 备份&lt;/h2>
&lt;p>什么都别说了，开干前最重要的事情就是备份，免得把自己玩死。&lt;/p>
&lt;p>最常用的备份手段自然是 &lt;code>tar&lt;/code> 。不过 gitlab 数据目录实在太大了，要是直接运行 &lt;code>tar -czpf gitlab.tar.gz ./gitlab&lt;/code> 不知道跑多久，也不知道有没有卡死。&lt;/p>
&lt;p>于是上技术手段：用 &lt;code>pv&lt;/code> 显示个进度条。&lt;/p>
&lt;p>pv 项目的首页在 &lt;a class="link" href="http://www.ivarch.com/programs/pv.shtml" target="_blank" rel="noopener"
>ivarch.com&lt;/a>。因为服务器还在跑&lt;em>ubuntu 15.10&lt;/em>，现在连个能用的源都没啦。只好下载了源码，在 wsl 里编译好推上去。&lt;/p>
&lt;p>最终命令如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo tar cf - ./gitlab -P &lt;span class="p">|&lt;/span> pv -s &lt;span class="k">$(&lt;/span>sudo du -sb ./gitlab &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="p">|&lt;/span> gzip &amp;gt; gitlab.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为啥 sudo 呢，postgres 数据库和 redis 数据都没有读权限，没辙。&lt;/p>
&lt;h2 id="2-升级总体思路">2. 升级总体思路&lt;/h2>
&lt;p>gitlab 的手册还是比较全面的。在&lt;a class="link" href="https://docs.gitlab.com/ee/update/index.html#upgrading-to-a-new-major-version" target="_blank" rel="noopener"
>upgrading to a new major version&lt;/a> 这篇文档提到的说法，跨大版本升级主要分三步：&lt;/p>
&lt;ol>
&lt;li>升级至当前大版本(&lt;em>major version&lt;/em>)的最新小版本(&lt;em>latest minor version&lt;/em>)&lt;/li>
&lt;li>升级至目标大版本(&lt;em>target major version&lt;/em>)的首个小版本(&lt;em>first minor version&lt;/em>)&lt;/li>
&lt;li>继续升级至更新的版本&lt;/li>
&lt;/ol>
&lt;p>根据 &lt;a class="link" href="https://docs.gitlab.com/ee/update/index.html#upgrades-from-versions-earlier-than-812" target="_blank" rel="noopener"
>gitlab upgrading guide 的说法&lt;/a>，版本低于 &lt;em>8.11.Z&lt;/em> 时，先更新到 &lt;em>8.12.0&lt;/em> 是比较稳妥的方案。&lt;/p>
&lt;p>so 开干。&lt;/p>
&lt;h2 id="3-升级至-8120">3. 升级至 8.12.0&lt;/h2>
&lt;p>由于部署方式是 docker（准确的说是 docker-compose），所以按照&lt;a class="link" href="https://docs.gitlab.com/ee/install/docker.html#update-gitlab-using-docker-engine" target="_blank" rel="noopener"
>Update GitLab Using Docker Engine&lt;/a> 的说法，我们先停止容器，然后直接修改镜像标签。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker-compose stop
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">gitlab&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sameersbn/gitlab:8.12.0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># &amp;lt;= sameersbn/gitlab:8.4.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker-compose up -d
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="故障gitlab_secrets_otp_key_base-must-set">故障：GITLAB_SECRETS_OTP_KEY_BASE must set&lt;/h3>
&lt;p>使用的镜像 &lt;code>sameersbn/docker-gitlab&lt;/code> 需要这几个环境变量，&lt;a class="link" href="https://github.com/sameersbn/docker-gitlab#quick-start" target="_blank" rel="noopener"
>参考文档&lt;/a>完成设置。&lt;/p>
&lt;h3 id="故障you-must-enable-the-pg_trgm-extension">故障：You must enable the pg_trgm extension&lt;/h3>
&lt;p>这个故障就比较奇怪了，但还是可以处理。&lt;/p>
&lt;p>先设置一下 postgres 账号密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker &lt;span class="nb">exec&lt;/span> -it gitlab_postgresql_1 psql -U postgres
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="err">\&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入新密码，按 ctrl+d 退出。&lt;/p>
&lt;p>再用随便啥连接上去，运行 &lt;code>create extension pg_trgm;&lt;/code> 就完事了。&lt;/p>
&lt;p>最后就是重启下容器，gitlab 自动迁移完成后即可访问。&lt;/p>
&lt;h2 id="4-升级至-v8174">4. 升级至 v8.17.4&lt;/h2>
&lt;p>原本应该升级到 v8.17.7，但 &lt;code>sameersbn/docker-gitlab&lt;/code> 没提供这个版本的镜像，只能先升级到 v8.17.4 ，求老天保佑别折腾出问题。&lt;/p>
&lt;p>老规矩改了 docker-compose ，然后 up 。&lt;/p>
&lt;p>直接成功，没有错误。&lt;/p>
&lt;h2 id="5-升级至-v955">5. 升级至 v9.5.5&lt;/h2>
&lt;p>老规矩，还是缺少镜像，原本应该升级到 v9.5.10。&lt;/p>
&lt;p>改了 docker-compose 再 up。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="6-升级至-v1084">6. 升级至 v10.8.4&lt;/h2>
&lt;p>原本应该升级 v10.8.7 。懒得说了。改了 compose 再 up 。&lt;/p>
&lt;h3 id="故障this-probably-isnt-the-expected-value-for-this-secret">故障：This probably isn&amp;rsquo;t the expected value for this secret&lt;/h3>
&lt;p>错误内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">This probably isn&amp;#39;t the expected value for this secret. To keep using a literal Erb string in config/secrets.yml, replace &amp;amp;lt;%with&amp;amp;lt;%%.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不知道为什么，重启了一次容器后就恢复了。&lt;/p>
&lt;p>可以参考下&lt;a class="link" href="https://github.com/sameersbn/docker-gitlab/issues/1625" target="_blank" rel="noopener"
>这个&lt;/a>。&lt;/p>
&lt;h2 id="7-升级至-v11113">7. 升级至 v11.11.3&lt;/h2>
&lt;p>根据 v12 的升级指引，&lt;/p>
&lt;blockquote>
&lt;p>In 12.0.0 we made various database related changes. These changes require that users first upgrade to the latest 11.11 patch release.&lt;/p>
&lt;/blockquote>
&lt;p>必须先升级到 v11.11.Z 版本，再升级 v12.0.Z 才能完成数据库迁移。&lt;/p>
&lt;p>于是先升级到 v11.11.3 (也是因为没有 v11.11.8 的镜像)。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="8-升级至-v1204">8. 升级至 v12.0.4&lt;/h2>
&lt;p>根据 12.0 升级指引，先升级到 12.0.Z 版本来完成 11-&amp;gt;12 的迁移，再继续升级。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="9-升级至-v1216">9. 升级至 v12.1.6&lt;/h2>
&lt;p>根据 12.1 升级指引，在升级到 12.10.Z 之前，必须先升级到 12.1.Z 。&lt;/p>
&lt;blockquote>
&lt;p>If you are planning to upgrade from 12.0.Z to 12.10.Z, it is necessary to perform an intermediary upgrade to 12.1.Z before upgrading to 12.10.Z to avoid issues like #215141.&lt;/p>
&lt;/blockquote>
&lt;p>成功。&lt;/p>
&lt;h2 id="10-升级至-v12106-1">10. 升级至 v12.10.6-1&lt;/h2>
&lt;p>缺少最新的 12.10.Z 镜像，先升级到能升级到的 12.10.Z 最高版本。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="11-升级至-v1306">11. 升级至 v13.0.6&lt;/h2>
&lt;p>这个版本对 postgres 数据库版本有要求，故升级 postgresql 到 9.6.4 版本。镜像自动完成了数据迁移。&lt;/p>
&lt;p>之后启动 gitlab 完成升级。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="12-升级至-v13124">12. 升级至 v13.12.4&lt;/h2>
&lt;p>这个版本对 postgres 数据库版本又有要求，最低在 11 以上，故升级 postgresql 到 11-20200524 (sameersbn/postgresql)。&lt;/p>
&lt;p>同时，需要安装插件 &lt;code>btree_gist&lt;/code>，故连接 postgresql 数据库创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">extension&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">btree_gist&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后启动 gitlab 完成升级。&lt;/p>
&lt;h2 id="13-总结">13. 总结&lt;/h2>
&lt;p>由于 gitlab 设计良好，升级基本没有太大难度。按照文档的升级路线逐个版本升级即可。&lt;/p>
&lt;p>也是我运气好，在升级 10.8.Z 版本的时候遇到的问题重启后自己消失了，不然光是这个问题可能就要折腾很久。&lt;/p>
&lt;p>最终 gitlab 版本停留在 13.12.Z ，14.0 虽然已经发布了，但出于稳定考虑还是先不升级。&lt;/p></description></item><item><title>MySQL XA 事务和分布式事务处理模型：2阶段提交</title><link>https://nnnewb.github.io/blog/p/mysql-xa-%E4%BA%8B%E5%8A%A1%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B2%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link><pubDate>Fri, 09 Jul 2021 09:29:22 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-xa-%E4%BA%8B%E5%8A%A1%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B2%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid><description>&lt;p>关于 MySQL XA 事务和 2PC（两阶段提交）分布式事务处理模型（&lt;em>Distributed Transaction Processing, DTP Model&lt;/em>）的学习笔记。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="事务">事务&lt;/h2>
&lt;h3 id="分布式事务xa">分布式事务XA&lt;/h3>
&lt;h4 id="介绍">介绍&lt;/h4>
&lt;p>MySQL内建分布式事务支持（&lt;code>XA&lt;/code>），参考文档列出如下&lt;/p>
&lt;ul>
&lt;li>[MySQL Manual - XA](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_xa" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary&lt;/a>)&lt;/li>
&lt;li>[MySQL Manual - XA Transaction](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa.html" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: 13.3.8 XA Transactions&lt;/a>)&lt;/li>
&lt;li>[MySQL Manual - XA Transaction Statements](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa-statements.html" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: 13.3.8.1 XA Transaction SQL Statements&lt;/a>)&lt;/li>
&lt;li>[MySQL Manual - XA Transaction State](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa-states.html" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: 13.3.8.2 XA Transaction States&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>XA 事务在 InnoDB 引擎中可用。MySQL XA 事务实现基于 X/Open CAE 文档 《Distributed Transaction Processing: The XA Specification》。这份文档由 &lt;em>Open Group&lt;/em> 发布，可以在 &lt;a class="link" href="http://www.opengroup.org/public/pubs/catalog/c193.htm" target="_blank" rel="noopener"
>http://www.opengroup.org/public/pubs/catalog/c193.htm&lt;/a> 访问。当前 XA 实现的局限可以在 &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa-restrictions.html" target="_blank" rel="noopener"
>Section 13.3.8.3, “Restrictions on XA Transactions”&lt;/a> 查看。&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>XA 事务是全局事务关联的一组事务性动作，要么全部成功，要么全部回滚。本质上，这是让 ACID 属性“提升了一层”，让多个ACID事务可以作为一个全局操作的一部分执行，使得这个全局操作也具备ACID属性。（对于非分布式事务，应用如果对读敏感，则&lt;code>SERIALIZABLE&lt;/code>更推荐。&lt;code>REPEATABLE READ&lt;/code> 在分布式事务中并不是很有效。）&lt;/p>
&lt;h4 id="事务模型">事务模型&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/MySQL-XA-and-2PC-DTP-model/%e4%ba%8b%e5%8a%a1%e6%a8%a1%e5%9e%8b.webp" alt="DTM" />&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>**AP：**用户程序&lt;/li>
&lt;li>**RMs：**数据库&lt;/li>
&lt;li>**TM：**事务管理器&lt;/li>
&lt;/ul>
&lt;p>用户程序不用介绍。&lt;/p>
&lt;p>根据 Open Group 在 Distributed Transaction Processing Model 中的定义，一个典型的 RM 可以是一个支持事务的数据库（DBMS）。&lt;/p>
&lt;p>TM 则是协调整个二阶段提交过程的中介。AP从TM获得XID，完成 &lt;code>XA START&lt;/code> 到 &lt;code>XA END&lt;/code> ，然后告知 TM 就绪。TM提取本次事务的所有XID，向RMs发出&lt;code>XA PREPARE&lt;/code>请求，如果失败则对每个 XID 发出 &lt;code>XA ROLLBACK&lt;/code> ，成功则继续发出 &lt;code>XA COMMIT&lt;/code> 。&lt;/p>
&lt;p>需注意的是，&lt;code>XA PREPARE&lt;/code> 失败可以通知其他事务回滚，但&lt;code>XA COMMIT&lt;/code> 失败则只能等待数据库恢复，再行重试。&lt;code>XA PREPARE&lt;/code>一旦成功，则&lt;code>XA COMMIT&lt;/code> 一定成功（或者说必须成功）。&lt;/p>
&lt;p>TM 实现要求自身崩溃后必须能清理恢复，防止出现XA事务死锁。&lt;/p>
&lt;ul>
&lt;li>继续 PREPARE 需要提交的事务&lt;/li>
&lt;li>继续 ROLLBACK 未完成 ROLLBACK 的事务&lt;/li>
&lt;li>继续 COMMIT 未能 COMMIT 的事务
&lt;ul>
&lt;li>未能 COMMIT 成功则需要重试直到成功&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>几个 TM 角色（或整套方案）的实现：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/seata/seata/" target="_blank" rel="noopener"
>seata/seata: Seata is an easy-to-use, high-performance, open source distributed transaction solution. (github.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://open.unionpay.com/tjweb/product/detail?proId=43" target="_blank" rel="noopener"
>UPSQL Proxy-技术产品- 中国银联开放平台 (unionpay.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cloud.tencent.com/product/dcdb/" target="_blank" rel="noopener"
>分布式数据库TDSQL MySQL版_企业级分布式数据库解决方案 - 腾讯云 (tencent.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="基本用法">基本用法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">START&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">BEGIN&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">RESUME&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SUSPEND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MIGRATE&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PREPARE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ONE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PHASE&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ROLLBACK&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RECOVER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">CONVERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XID&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>XA START&lt;/code> 后跟随的 &lt;code>JOIN&lt;/code>和&lt;code>RESUME&lt;/code>子句没有任何效果。&lt;/p>
&lt;p>&lt;code>XA END&lt;/code> 后跟随的 &lt;code>SUSPEND&lt;/code> 和 &lt;code>FOR MIGRATE&lt;/code> 子句也没有任何效果。&lt;/p>
&lt;p>任何&lt;code>XA&lt;/code>语句都以&lt;code>XA&lt;/code>关键字开头，大多&lt;code>XA&lt;/code>语句都需要&lt;code>xid&lt;/code>值。&lt;code>xid&lt;/code> 是 &lt;strong>XA事务的标识符&lt;/strong> ，它确定语句应用到哪个XA事务上。&lt;/p>
&lt;p>&lt;code>xid&lt;/code>值可以由客户端指定或 MySQL 服务器生成。&lt;/p>
&lt;p>一个&lt;code>xid&lt;/code>值有一到三个部分：&lt;/p>
&lt;pre>&lt;code>xid: gtrid [, bqual [, formatID ]]
&lt;/code>&lt;/pre>&lt;p>&lt;code>gtrid&lt;/code> 是&lt;strong>全局事务标识符&lt;/strong> ，&lt;code>bqual&lt;/code> 是&lt;strong>分支修饰符&lt;/strong>，&lt;code>formatID&lt;/code>是一个标记 &lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 格式的数字。&lt;/p>
&lt;p>&lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 必须是字符串字面量，最多不超过 64 &lt;strong>字节&lt;/strong> 长。&lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 可以以多种方式指定，可以用引号包围的字符串（&lt;code>'ab'&lt;/code>）；十六进制字符串（&lt;code>X'6162'&lt;/code>，&lt;code>0x6162&lt;/code>）；或者二进制值（&lt;code>b'nnn'&lt;/code>）。&lt;/p>
&lt;p>&lt;code>formatID&lt;/code> 必须是一个无符号整数。&lt;/p>
&lt;p>&lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 值在 MySQL 服务器的底层 XA 支持程序中被解释为字节。不过，服务器在解释包含XA语句的SQL时，可能设置了特定字符集。安全起见，最好将 &lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 写作十六进制字符串形式。&lt;/p>
&lt;p>&lt;code>xid&lt;/code> 值通常是由事务管理器生成。一个事务管理器产生的&lt;code>xid&lt;/code>必须与另一个事务管理器产生的&lt;code>xid&lt;/code>不同。一个给定的事务管理器必须能在 &lt;code>XA RECOVER&lt;/code> 返回的 &lt;code>xid&lt;/code> 列表中识别出属于自己的 &lt;code>xid&lt;/code> 。&lt;/p>
&lt;p>&lt;code>XA START xid&lt;/code> 以指定的 &lt;code>xid&lt;/code> 开启一个新 XA 事务。每个 XA 事务必须包含一个唯一的 &lt;code>xid&lt;/code> ，&lt;code>xid&lt;/code> 不能正在被另一个 XA 事务使用。唯一性通过 &lt;code>gtrid&lt;/code> 与 &lt;code>bqual&lt;/code> 评估。该 XA 事务的后续 XA 语句都必须指定&lt;code>XA START&lt;/code>中指定的 &lt;code>xid&lt;/code>。如果使用XA语句但没有指定一个对应XA事务的&lt;code>xid&lt;/code>，则产生一个错误。&lt;/p>
&lt;p>多个XA事务可以是同一个全局事务的组成部分。在同一个全局事务中所有XA事务的&lt;code>xid&lt;/code>必须使用同一个 &lt;code>gtrid&lt;/code> 值。因此，&lt;code>gtrid&lt;/code> 必须全局唯一以避免混淆。全局事务中XA事务&lt;code>xid&lt;/code> 的 &lt;code>bqual&lt;/code> 部分必须互不相同。（要求 &lt;code>bqual&lt;/code> 不同是当前MySQL实现的限制，并不是XA规范的一部分。）&lt;/p>
&lt;p>&lt;code>XA RECOVER&lt;/code> 语句返回 MySQL 服务器中处于 &lt;code>PREPARED&lt;/code> 状态的 XA 事务信息。输出中每一行都是一个服务器上的 XA 事务，不论是哪个客户端启动的事务。&lt;/p>
&lt;p>执行 &lt;code>XA RECOVER&lt;/code> 需要 &lt;code>XA_RECOVER_ADMIN&lt;/code> 特权。这个特权需求是为了防止用户发现其他不属于自己的事务&lt;code>xid&lt;/code>，不影响XA事务的正常提交和回滚。&lt;/p>
&lt;p>&lt;code>XA RECOVER&lt;/code> 输出类似下面这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RECOVER&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+----------+--------------+--------------+--------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">formatID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gtrid_length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bqual_length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+----------+--------------+--------------+--------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">abcdef&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+----------+--------------+--------------+--------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>formatID&lt;/code> 是 &lt;code>xid&lt;/code> 中的 &lt;code>formatID&lt;/code> 部分&lt;/li>
&lt;li>&lt;code>gtrid_length&lt;/code> 是 &lt;code>xid&lt;/code> 中 &lt;code>gtrid&lt;/code> 部分的长度（字节单位）&lt;/li>
&lt;li>&lt;code>bqual_length&lt;/code> 是 &lt;code>xid&lt;/code> 中 &lt;code>bqual&lt;/code> 部分的长度（字节单位）&lt;/li>
&lt;/ul>
&lt;p>XID值可能包含不可打印的字符。&lt;code>XA RECOVER&lt;/code> 允许一个可选的 &lt;code>CONVERT XID&lt;/code> 子句，以便客户端可以请求十六进制格式的 XID 值。&lt;/p>
&lt;h4 id="事务状态">事务状态&lt;/h4>
&lt;p>一个 XA 事务经历以下状态&lt;/p>
&lt;ol>
&lt;li>使用&lt;code>XA START&lt;/code>启动的XA事务，进入&lt;code>ACTIVE&lt;/code>状态。&lt;/li>
&lt;li>一个处于&lt;code>ACTIVE&lt;/code>状态的XA事务，可以发出SQL语句填充事务，然后发出&lt;code>XA END&lt;/code>语句。&lt;code>XA END&lt;/code>语句令XA事务进入&lt;code>IDLE&lt;/code>状态。&lt;/li>
&lt;li>一个处于&lt;code>IDLE&lt;/code>状态的XA事务，可以发出&lt;code>XA PREPARE&lt;/code>语句或&lt;code>XA COMMIT ... ONE PHASE&lt;/code>语句。
&lt;ul>
&lt;li>&lt;code>XA PREPARE&lt;/code> 语句令XA事务进入&lt;code>PREPARED&lt;/code> 状态。&lt;code>XA RECOVER&lt;/code> 语句此时可以发现并列出此事务的 XID。&lt;code>XA RECOVER&lt;/code> 可以列出所有处于 &lt;code>PREPARED&lt;/code> 状态的 XA 事务的 XID。&lt;/li>
&lt;li>&lt;code>XA COMMIT ... ONE PHASE&lt;/code> 准备并提交XA事务。&lt;code>xid&lt;/code>不会列出在&lt;code>XA RECOVER&lt;/code>中，因为XA事务实际在执行语句后就结束了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一个处于&lt;code>PREPARED&lt;/code>状态的XA事务，可以发出&lt;code>XA COMMIT&lt;/code>语句来提交并结束XA事务，或发出&lt;code>XA ROLLBACK&lt;/code>来回滚并结束事务。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/MySQL-XA-and-2PC-DTP-model/xa-state-transition-diagram.png" alt="image-20210831105435330" />&lt;/p>
&lt;p>下面是一个简单的XA事务例子，作为一个全局事务，插入一个行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">START&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">mytable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">04&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PREPARE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在给定客户端连接的上下文中，XA事务和本地事务彼此互斥。举例来说，如果&lt;code>XA START&lt;/code>发出并启动了一个XA事务，此时不能再启动一个本地事务直到XA事务被提交或回滚。反过来说，如果一个本地事务已经通过&lt;code>START TRANSACTION&lt;/code>启动，则不能执行任何XA语句直到本地事务被提交或回滚。&lt;/p>
&lt;p>如果一个XA事务在&lt;code>ACTIVE&lt;/code>状态，则不能发出任何产生隐式提交的语句（如 &lt;code>create table&lt;/code>），因为这违反了XA协议，导致不能回滚XA事务。尝试执行这类语句会导致一个错误：&lt;/p>
&lt;pre>&lt;code>ERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be executed
when global transaction is in the ACTIVE state
&lt;/code>&lt;/pre>&lt;h4 id="xa-事务实验">XA 事务实验&lt;/h4>
&lt;p>准备数据库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">database&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test123&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">bigint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kp">auto_increment&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动一个 XA 事务，插入表，最后提交。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test123&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;distributed transaction!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 准备
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">prepare&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 应该看到上一步 prepare 的 xa 事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recover&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 提交 xa 事务。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 或者 rollback
&lt;/span>&lt;span class="c1">-- xa rollback &amp;#39;this-is-gtrid&amp;#39;,&amp;#39;this-is-bqual&amp;#39;;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完成后，可以发现表中多了一条记录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">test123&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>不常用的 Git 命令</title><link>https://nnnewb.github.io/blog/p/%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-git-%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 09 Jul 2021 09:25:16 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-git-%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>大概是不太常用的一些 Git 命令。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="找回数据">找回数据&lt;/h2>
&lt;p>两种办法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git reflog show
git reset --hard HEAD@&lt;span class="o">{&lt;/span>1&lt;span class="o">}&lt;/span> &lt;span class="c1"># 从上一步找到希望回退的位置&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git fsck --lost-found
&lt;span class="nb">cd&lt;/span> .git/lost-found/
&lt;span class="c1"># 用 git show hash 查看悬空对象的内容&lt;/span>
&lt;span class="c1"># 用 git merge hash 或者 git rebase hash 来恢复到当前分支里&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="合并分支时创建合并commit">合并分支时创建合并commit&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git config branch.master.mergeoptions &lt;span class="s2">&amp;#34;--no-ff&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除远程分支">删除远程分支&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git push --delete origin branch
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除已经合并的分支">删除已经合并的分支&lt;/h2>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;h3 id="删除已合并的本地分支">删除已合并的本地分支&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git branch --merged &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s2">&amp;#34;^\\s+(patch|feat|refactor|test|misc)&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> xargs -I&lt;span class="o">{}&lt;/span> git branch -d &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除已合并的远程分支">删除已合并的远程分支&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git branch -r --merged &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s2">&amp;#34;^\\s+origin/(patch|feat|refactor|test|misc)&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/origin\///&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> xargs -I&lt;span class="o">{}&lt;/span> &lt;span class="nb">echo&lt;/span> git push --delete origin &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>从零实现一个容器</title><link>https://nnnewb.github.io/blog/p/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 31 May 2021 16:16:52 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>自从看了&lt;code>cocker&lt;/code>项目的 ppt 之后就有点念念不忘的意思了，实现一个 docker 或 docker 的类似物看起来并不是做不到的事情。&lt;/p>
&lt;p>于是就动手试一试。&lt;/p>
&lt;h2 id="核心技术">核心技术&lt;/h2>
&lt;h3 id="namespace">namespace&lt;/h3>
&lt;p>命名空间包装全局系统资源，让在命名空间中的进程看起来就像是有自己独立隔离的全局资源一样。命名空间中的全局资源对命名空间中的其他进程都是可见的，但对命名空间外的进程不可见。命名空间用途之一就是实现容器。&lt;/p>
&lt;blockquote>
&lt;pre>&lt;code>Linux provides the following namespaces:
Namespace Constant Isolates
Cgroup CLONE_NEWCGROUP Cgroup root directory
IPC CLONE_NEWIPC System V IPC, POSIX message queues
Network CLONE_NEWNET Network devices, stacks, ports, etc.
Mount CLONE_NEWNS Mount points
PID CLONE_NEWPID Process IDs
User CLONE_NEWUSER User and group IDs
UTS CLONE_NEWUTS Hostname and NIS domain name
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;p>几个命名空间的 API&lt;/p>
&lt;ul>
&lt;li>&lt;code>clone&lt;/code>&lt;/li>
&lt;li>&lt;code>setns&lt;/code>&lt;/li>
&lt;li>&lt;code>unshare&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>不得不说 &lt;code>man 7 namespaces&lt;/code> 对 &lt;code>namespace&lt;/code> 的解释已经非常到位了。&lt;/p>
&lt;h3 id="chroot">chroot&lt;/h3>
&lt;p>这个 Linux 用户应该还是比较熟悉的，如 Arch Linux 这样的发行版在安装时就有用到。&lt;/p>
&lt;p>使用 &lt;code>man 2 chroot&lt;/code> 查看这个 api 的文档。&lt;/p>
&lt;blockquote>
&lt;p>chroot() changes the root directory of the calling process to that specified in path. This directory will be used for pathnames beginning with /. The root directory is inherited by all children of the calling process.&lt;/p>
&lt;p>Only a privileged process (Linux: one with the CAP_SYS_CHROOT capability in its user namespace) may call chroot().&lt;/p>
&lt;/blockquote>
&lt;p>基本作用是把调用进程的根目录 &lt;code>/&lt;/code> 切换到指定目录，子进程会继承这个 &lt;code>/&lt;/code> 位置；调用 API 需要特权。&lt;/p>
&lt;p>举例说调完 &lt;code>chroot(&amp;quot;/home/xxx&amp;quot;)&lt;/code>，你再用 &lt;code>ls&lt;/code> 之类的命令看 &lt;code>/&lt;/code> 下有什么文件，看到的就是 &lt;code>/home/xxx&lt;/code> 下的内容了。&lt;/p>
&lt;p>&lt;code>man 2 chroot&lt;/code> 还有一些有意思的内容，不做赘述。&lt;/p>
&lt;h3 id="mount">mount&lt;/h3>
&lt;p>也是 Linux 用户很熟悉的东西。老规矩，&lt;code>man 2 mount&lt;/code> 看看文档。&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/mount.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">filesystemtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">mountflags&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>mount() attaches the filesystem specified by source (which is often a pathname referring to a device, but can also be the pathname of a directory or file, or a dummy string) to the location (a directory or file) specified by the pathname in target.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>mount&lt;/code> 会挂载(attaches) &lt;code>source&lt;/code> 参数指定的文件系统（通常是设备路径，也可以是文件夹、文件的路径或虚拟字符串（如&lt;code>proc&lt;/code>））到 &lt;code>target&lt;/code> 指定的位置（目录或文件）。同样需要特权来执行。&lt;/p>
&lt;p>&lt;code>source&lt;/code>/&lt;code>target&lt;/code> 都不难理解，&lt;code>filesystemtype&lt;/code>可以从&lt;code>/proc/filesystems&lt;/code>里读到可用值，或者自己搜一搜；比较重要的就是 &lt;code>mountflags&lt;/code> 了，可以指定诸如&lt;code>MS_RDONLY&lt;/code>之类的选项来挂载只读文件系统等等。具体还是自己查手册。&lt;/p>
&lt;h3 id="clone">clone&lt;/h3>
&lt;p>最后就是系统调用 &lt;code>clone&lt;/code> 了。还是先 &lt;code>man 2 clone&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cm">/* Prototype for the glibc wrapper function */&lt;/span>
&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">child_stack&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>
&lt;span class="cm">/* pid_t *ptid, void *newtls, pid_t *ctid */&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="cm">/* For the prototype of the raw system call, see NOTES */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>clone() creates a new process, in a manner similar to fork(2).&lt;/p>
&lt;/blockquote>
&lt;p>总体类似于&lt;code>fork()&lt;/code>，但可以指定一个入口函数，函数结束则子进程退出，也可以共享内存空间，所以行为也可以类似线程。看怎么用。&lt;/p>
&lt;p>&lt;code>flags&lt;/code>依然是关注的重点，&lt;code>CLONE_NEWUTS&lt;/code>、&lt;code>CLONE_NEWNS&lt;/code>、&lt;code>CLONE_NEWPID&lt;/code>这些参数允许将子进程运行在独立的命名空间里。&lt;/p>
&lt;p>&lt;code>man 2 clone&lt;/code> 还提供了一个 C 语言编写的例子可以参考。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/wait.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/utsname.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define errExit(msg) \
&lt;/span>&lt;span class="cp"> do \
&lt;/span>&lt;span class="cp"> { \
&lt;/span>&lt;span class="cp"> perror(msg); \
&lt;/span>&lt;span class="cp"> exit(EXIT_FAILURE); \
&lt;/span>&lt;span class="cp"> } while (0)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="cm">/* Start function for cloned child */&lt;/span>
&lt;span class="n">childFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">utsname&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/* Change hostname in UTS namespace of child */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sethostname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sethostname&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* Retrieve and display hostname */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">uts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uname&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uts.nodename in child: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">nodename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* Keep the namespace open for a while, by sleeping.
&lt;/span>&lt;span class="cm"> This allows some experimentation--for example, another
&lt;/span>&lt;span class="cm"> process might join the namespace. */&lt;/span>
&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Child terminates now */&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">#define STACK_SIZE (1024 * 1024) &lt;/span>&lt;span class="cm">/* Stack size for cloned child */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Start of stack buffer */&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stackTop&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* End of stack buffer */&lt;/span>
&lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">utsname&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Usage: %s &amp;lt;child-hostname&amp;gt;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cm">/* Allocate stack for child */&lt;/span>
&lt;span class="n">stack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STACK_SIZE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stack&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;malloc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">stackTop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stack&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">STACK_SIZE&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Assume stack grows downward */&lt;/span>
&lt;span class="cm">/* Create child that has its own UTS namespace;
&lt;/span>&lt;span class="cm"> child commences execution in childFunc() */&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">childFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stackTop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CLONE_NEWUTS&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">SIGCHLD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clone&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clone() returned %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* Parent falls through to here */&lt;/span>
&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="cm">/* Give child time to change its hostname */&lt;/span>
&lt;span class="cm">/* Display hostname in parent&amp;#39;s UTS namespace. This will be
&lt;/span>&lt;span class="cm"> different from hostname in child&amp;#39;s UTS namespace. */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">uts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uname&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uts.nodename in parent: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">nodename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">waitpid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="cm">/* Wait for child */&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;waitpid&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;child has terminated&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>把上面的代码保存到 &lt;code>main.c&lt;/code> 之后，使用命令 &lt;code>gcc main.c -o clone-demo&lt;/code> 编译。&lt;/p>
&lt;p>编译完成后，&lt;code>sudo ./clone-demo new-hostname&lt;/code> 执行。&lt;/p>
&lt;p>最终结果类似这样&lt;/p>
&lt;pre>&lt;code>DESKTOP-HEKKTQ9 :: ~/repos/container » sudo ./clone-demo new-hostname
clone() returned 1515
uts.nodename in child: new-hostname
uts.nodename in parent: DESKTOP-HEKKTQ9
child has terminated
DESKTOP-HEKKTQ9 :: ~/repos/container »
&lt;/code>&lt;/pre>&lt;h3 id="setns">setns&lt;/h3>
&lt;p>&lt;code>setns&lt;/code> 把调用这个函数的线程加入指定 fd 的命名空间里。这个 &lt;code>fd&lt;/code> 指的是 &lt;code>/proc/1234/ns/uts&lt;/code> 这些特殊文件的文件描述符。&lt;/p>
&lt;p>举例来说，我们把 &lt;code>clone-demo&lt;/code> 的源码里，&lt;code>sleep(3)&lt;/code> 改为 &lt;code>sleep(200)&lt;/code>，再执行&lt;code>sudo clone-demo new-hostname &amp;amp;&lt;/code> 把进程放到后台。&lt;/p>
&lt;p>然后编译下面的代码并测试加入 clone-demo 的 uts 名称空间。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define errExit(msg) \
&lt;/span>&lt;span class="cp"> do \
&lt;/span>&lt;span class="cp"> { \
&lt;/span>&lt;span class="cp"> perror(msg); \
&lt;/span>&lt;span class="cp"> exit(EXIT_FAILURE); \
&lt;/span>&lt;span class="cp"> } while (0)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%s /proc/PID/ns/FILE cmd args...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_FAILURE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">O_RDONLY&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="cm">/* Get file descriptor for namespace */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;open&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">setns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="cm">/* Join that namespace */&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;setns&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">execvp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="cm">/* Execute a command in namespace */&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;execvp&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终结果如下&lt;/p>
&lt;pre>&lt;code>root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# ./clone-demo new-hostname &amp;amp;
[1] 1826
clone() returned 1827
uts.nodename in child: new-hostname
uts.nodename in parent: DESKTOP-HEKKTQ9
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# ./setns-demo /proc/1827/ns/uts /bin/bash
root@new-hostname:/home/weakptr/repos/container# uname -n
new-hostname
root@new-hostname:/home/weakptr/repos/container# exit
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# exit
DESKTOP-HEKKTQ9 :: ~/repos/container » uname -n
DESKTOP-HEKKTQ9
&lt;/code>&lt;/pre>&lt;h3 id="unshare">unshare&lt;/h3>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">unshare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;code>unshare&lt;/code> 用于主动解除当前进程或线程从父进程继承的执行上下文（例如命名空间）。&lt;/p>
&lt;p>&lt;code>unshare&lt;/code>的主要用途就是在不创建新的进程的前提下，控制自己的共享执行上下文（还是指命名空间）。&lt;/p>
&lt;p>参数 &lt;code>flags&lt;/code> 依然是 &lt;code>CLONE_NEWNS&lt;/code> 这些常量。惯例还是有个 demo 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cm">/* unshare.c
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> A simple implementation of the unshare(1) command: unshare
&lt;/span>&lt;span class="cm"> namespaces and execute a command.
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;wait.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cm">/* A simple error-handling function: print an error message based
&lt;/span>&lt;span class="cm"> on the value in &amp;#39;errno&amp;#39; and terminate the calling process */&lt;/span>
&lt;span class="cp">#define errExit(msg) \
&lt;/span>&lt;span class="cp"> do \
&lt;/span>&lt;span class="cp"> { \
&lt;/span>&lt;span class="cp"> perror(msg); \
&lt;/span>&lt;span class="cp"> exit(EXIT_FAILURE); \
&lt;/span>&lt;span class="cp"> } while (0)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span>
&lt;span class="nf">usage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pname&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Usage: %s [options] program [arg...]&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pname&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Options can be:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -i unshare IPC namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -m unshare mount namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -n unshare network namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -p unshare PID namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -u unshare UTS namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -U unshare user namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_FAILURE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getopt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;imnpuU&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWIPC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;m&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWNS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;n&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWNET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;p&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWPID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;u&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWUTS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;U&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWUSER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">usage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">optind&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">usage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">unshare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unshare&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;child process&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">execvp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">optind&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">optind&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;execvp&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;waitpid %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">waitpid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存成 &lt;code>unshare.c&lt;/code>，使用&lt;code>gcc unshare.c -o unshare&lt;/code> 编译。&lt;/p>
&lt;p>之后可以通过下面的命令来检查效果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo ./unshare -pm /bin/bash &lt;span class="c1"># 隔离 mount 和 pid 两个 namespace&lt;/span>
waitpid &lt;span class="m">2178&lt;/span>
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# mount -t proc proc /proc
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# ps -ef
UID PID PPID C STIME TTY TIME CMD
root &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 15:22 pts/0 00:00:00 /bin/bash
root &lt;span class="m">3&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> 15:22 pts/0 00:00:00 ps -ef
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container#
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意几个点：&lt;/p>
&lt;ol>
&lt;li>&lt;code>unshare&lt;/code> 最后必须是 &lt;code>fork&lt;/code> 新进程再 &lt;code>execvp&lt;/code>，否则会出现 &lt;code>cannot allocate memory&lt;/code> 错误&lt;/li>
&lt;li>&lt;code>unshare&lt;/code> 启动新的 &lt;code>/bin/bash&lt;/code> 进程后，&lt;code>/proc&lt;/code> 挂载点还没有真正隔离，此时可以手动使用 &lt;code>mount -t proc proc /proc&lt;/code> 命令挂载当前命名空间的 &lt;code>procfs&lt;/code>。&lt;/li>
&lt;li>mount namespace 中挂载事件传播，可以查看文档 &lt;code>man 7 mount_namespaces&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>debian 系的 Linux 发行版在 util-linux 包里提供了一个 &lt;code>unshare&lt;/code> 程序，比上面的 demo 更强大，甚至可以用一行命令实现一个基本的&lt;em>容器&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 我在 workspace 目录里装了 busybox，所以能直接跑起来 chroot 和 /bin/ash&lt;/span>
&lt;span class="c1"># busybox 的安装方法参考 busybox 源码目录下的 INSTALL 文件&lt;/span>
&lt;span class="c1"># vim Config.in 修改 config STATIC 下的 default 为 y&lt;/span>
&lt;span class="c1"># make defconfig &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install CONFIG_PREFIX=你的workspace目录&lt;/span>
sudo unshare -pumf --mount-proc&lt;span class="o">=&lt;/span>workspace/proc chroot workspace /bin/ash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;/p>
&lt;pre>&lt;code>/ # ps -ef
PID USER TIME COMMAND
1 0 0:00 /bin/ash
2 0 0:00 ps -ef
/ # ls
bin linuxrc proc sbin usr
/ # mount
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
/ #
&lt;/code>&lt;/pre>&lt;h2 id="用-go-实现">用 go 实现&lt;/h2>
&lt;h3 id="syscall">syscall&lt;/h3>
&lt;p>go 对系统调用其实做了不少封装，基本在 &lt;code>os&lt;/code> 和 &lt;code>syscall&lt;/code> 下，但有很多区别。比如在 go 里找不到 &lt;code>clone&lt;/code>、&lt;code>setns&lt;/code> 这些接口，取而代之的是 &lt;code>os/exec&lt;/code> 下的 &lt;code>Cmd&lt;/code> 结构。不过 &lt;code>syscall.Unshare&lt;/code> 倒是很忠实的还原了。诸如 &lt;code>CLONE_NEWNS&lt;/code> 这些常量也可以找到对应的 &lt;code>syscall.CLONE_NEWNS&lt;/code>。&lt;/p>
&lt;p>不重复上面的代码了，写一个简短的启动 busybox 容器的 go 程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os/exec&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;syscall&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">flagBootstrap&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BoolVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">flagBootstrap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bootstrap&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bootstrap busybox container&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">runBusybox&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Start `busybox ash` in process %d\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Getpid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">cmd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">exec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/bin/busybox&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;ash&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Env&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;PATH=/bin:/sbin:/usr/bin:/usr/sbin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Chroot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;workspace&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;/proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unmount proc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unmount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">runContainerizedCommand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">cmd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">exec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/proc/self/exe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Path&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;/proc/self/exe&amp;#34;&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;-bootstrap&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SysProcAttr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SysProcAttr&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Cloneflags&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWUTS&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWNS&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWPID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Unshareflags&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWNS&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;starting current process %d\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Getpid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">flagBootstrap&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">runBusybox&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">runContainerizedCommand&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存为 &lt;code>demo.go&lt;/code> 后用 &lt;code>go build -o demo demo.go&lt;/code> 编译，然后执行 &lt;code>sudo ./demo&lt;/code> 。&lt;/p>
&lt;p>结果像是这样：&lt;/p>
&lt;pre>&lt;code>DESKTOP-HEKKTQ9 :: ~/repos/container » sudo ./demo
starting current process 2954
Start `busybox ash` in process 1
/ # ps -ef
PID USER TIME COMMAND
1 0 0:00 /proc/self/exe -bootstrap
6 0 0:00 /bin/busybox ash
7 0 0:00 ps -ef
/ # mount
proc on /proc type proc (rw,relatime)
/ #
unmount proc
DESKTOP-HEKKTQ9 :: ~/repos/container »
&lt;/code>&lt;/pre>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>上面的 demo 仅仅是创建了一个看起来像容器的玩具，连 cgroup 都没有，距离真正的 OCI 运行时还有不小差距。不过已经足够展示创建一个隔离的环境并不是特别困难的事情，这必须感谢 Linux 内核的开发者们让容器技术有了存在的可能，而且还能这么简单地使用。&lt;/p>
&lt;p>可以点击[这个链接](&lt;a class="link" href="https://github.com/opencontainers/runtime-spec/blob/master/spec.md" target="_blank" rel="noopener"
>runtime-spec/spec.md at master · opencontainers/runtime-spec (github.com)&lt;/a>)查看 OCI 运行时的规格说明。&lt;/p>
&lt;p>涉及概念：&lt;/p>
&lt;ul>
&lt;li>namespace&lt;/li>
&lt;/ul>
&lt;p>重要系统调用&lt;/p>
&lt;ul>
&lt;li>&lt;code>clone&lt;/code>&lt;/li>
&lt;li>&lt;code>setns&lt;/code>&lt;/li>
&lt;li>&lt;code>unshare&lt;/code>&lt;/li>
&lt;li>&lt;code>mount&lt;/code>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>本篇还不涉及网络，仅在文件系统和 PID、用户等层级做了隔离。网络隔离可以参考 &lt;code>man 7 network_namespaces&lt;/code> ，不过谷歌搜了一大圈也还没找到怎么创建虚拟网卡，暂且先放着了。&lt;/p></description></item><item><title>2021-04-25 无事发生</title><link>https://nnnewb.github.io/blog/p/2021-04-25-%E6%97%A0%E4%BA%8B%E5%8F%91%E7%94%9F/</link><pubDate>Sun, 25 Apr 2021 10:40:30 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2021-04-25-%E6%97%A0%E4%BA%8B%E5%8F%91%E7%94%9F/</guid><description>&lt;p>4月25日好像也不是什么节日，对我个人来说也没有什么特殊意义。仅仅是普通的一天——如果不算五一调休导致今天明明是周日但还要上班这一点的话。&lt;/p>
&lt;p>想想也挺不可思议的，不知不觉已经到2021年这个在不少科学幻想中的“未来”时代了，光算工作年限，我也干了有四五年的程序了吧。&lt;/p>
&lt;p>从最开始抱着“不写代码还能干啥”到“写代码也挺不错的”，再到现在，“还能写几年代码呢”。&lt;/p>
&lt;p>反思一下这几年，几乎没干出什么成绩，工作一年一换，工作几年下来，也没几个认识、熟悉到可以称之为“朋友”的人。倒不是我孤僻（这么说的人一般都确实孤僻吧），主要是确实没什么主观能动性。&lt;/p>
&lt;p>如今这家公司写写 go，折腾折腾 kubernetes，也算清闲，反倒开始忧心起将来了。&lt;/p>
&lt;p>现在的工作，说好，也就那样。说不好，这个大环境下，但凡没失业，我觉得都算不上不好吧。&lt;/p>
&lt;p>又是疫情，又是新冷战，又是各种各样的奇葩事。当笑话看，看久了也笑不出来了。&lt;/p>
&lt;p>我这人爱看小说，以前也是动画漫画来者不拒，特效大片就饭，总之蛮快乐的。过去还写过同人小说，可惜没得家里支持，最后也就是40万字左右就切了。&lt;/p>
&lt;p>不过起码这段经历算是给我找第一份码农工作加了点助力（大概）。自从开始写代码拿工资，好像写小说这回事就和我没什么关系了的样子。&lt;/p>
&lt;p>不过我还是一直想写的，几乎每次换工作，心里想的都是空闲的时间多了，就会用来做点有意义的事情。比如学学钢琴啊（买了电钢琴吃灰中），比如写写小说啊（也就开了个头），比如学点新技术啊（有倒是有，新工作新技术栈），总之就是自我提升下。&lt;/p>
&lt;p>结果当然是没有的。&lt;/p>
&lt;p>好像从前读书的时候捧着本 C Primer Plus/C++ Primer 看的激情已经完全从身体里消失了一样。不管是什么事情，虽然总是想到，啊，这个想要，那个想要。但一到行动，就完全没了动力。“做了也没用”，“学了也是浪费时间”这种想法就从脑子里冒出来了。&lt;/p>
&lt;p>不能说和家庭完全没关系——但把责任都推给父母、老师，大概也不合适。&lt;/p>
&lt;p>我是相信环境会改变人的，当然人也能发挥主观能动性，改造环境。像是叶子随波逐流进了下水道，不能说是水有错，也不能怪叶子没有奋力闪躲，秋风更是无辜。于是环视四周，最后悲哀地发现只能感叹一句命运无常。&lt;/p>
&lt;p>诸如未来可以改变之类的鸡汤喝了又喝，脑子也有了抗性，不切实际的期待也越来越少，然后发现即使是切实可行的期待也开始落向不切实际的一侧。&lt;/p>
&lt;p>那便不想未来了吧。俗话说，“把握当下”。于是便来上班，对着屏幕，无事可做，等待 call of work。&lt;/p>
&lt;p>那便是这样了吧。&lt;/p>
&lt;p>2021年4月25日，无事发生。&lt;/p></description></item><item><title>pattern-match-in-python310</title><link>https://nnnewb.github.io/blog/p/pattern-match-in-python310/</link><pubDate>Fri, 19 Mar 2021 10:19:06 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/pattern-match-in-python310/</guid><description>&lt;h2 id="说明">说明&lt;/h2>
&lt;p>简单机翻润色一下 PEP-636&lt;/p>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>这个PEP是PEP 634引入的模式匹配教程。&lt;/p>
&lt;p>PEP 622提出了模式匹配的语法，社区和指导委员会对此进行了详细讨论。一个常见的问题是解释(和学习)这个特性是否容易。这个PEP关注的是提供开发人员可以用来学习Python中的模式匹配的文档类型。&lt;/p>
&lt;p>PEP 636 被认为是PEP 634(模式匹配的技术规范)和PEP 635(模式匹配的添加动机和理由与设计考虑)的支持材料。&lt;/p>
&lt;p>对于想要快速回顾而不是教程的读者，请参阅附录a。&lt;/p>
&lt;h2 id="教程">教程&lt;/h2>
&lt;p>作为本教程的一个例子，你将编写一个文本冒险游戏。这是一种互动小说形式，用户输入文本命令与虚构世界进行互动，并接收关于所发生事情的文本描述。命令将是简化形式的自然语言，如&lt;code>get sword&lt;/code>，&lt;code>attack dragon&lt;/code>，&lt;code>go north&lt;/code>，&lt;code>enter shop&lt;/code>或&lt;code>but cheese&lt;/code>。&lt;/p>
&lt;h3 id="匹配序列">匹配序列&lt;/h3>
&lt;p>你的主循环将需要从用户那里获取输入，并将它分割成单词，例如一个像这样的字符串列表:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;What are you doing next? &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># analyze the result of command.split()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下一步是解读这些单词。我们的大多数命令都有两个词:一个动作和一个对象。所以你可能会忍不住这样做:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这行代码的问题在于它遗漏了一些东西：如果用户输入的单词多于或少于2个单词怎么办?为了防止这个问题，您可以检查单词列表的长度，或者捕获上面的语句将引发的&lt;code>ValueError&lt;/code>。&lt;/p>
&lt;p>或者，你可以使用&lt;code>match&lt;/code>语句来代替:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>match&lt;/code>语句计算**“subject”**(&lt;code>match&lt;/code>关键字后面的值)，并根据模式(&lt;code>case&lt;/code>旁边的代码)检查它。一个模式可以做两件不同的事情:&lt;/p>
&lt;ul>
&lt;li>验证 subject 具有一定的结构。在您的示例中，&lt;code>[action, obj]&lt;/code>模式匹配任何恰好包含两个元素的序列。这叫做 &lt;strong>maching&lt;/strong>。&lt;/li>
&lt;li>它将模式中的一些名称绑定到 subject 的组件元素。在本例中，如果列表有两个元素，它将绑定&lt;code>action = subject[0]&lt;/code>和&lt;code>obj = subject[1]&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>如果匹配，则&lt;code>case&lt;/code>块内的语句将与绑定的变量一起执行。如果没有匹配，则什么也不发生，然后执行&lt;code>match&lt;/code>之后的语句。&lt;/p>
&lt;p>注意，与解包赋值(unpacking assignments)的方式类似，您可以使用圆括号、方括号或逗号分隔，它们含义相同。所以你可以写&lt;code>case action, obj&lt;/code>或者&lt;code>case (action, obj)&lt;/code>。上述任意形式都将匹配序列类型(例如&lt;code>list&lt;/code>或&lt;code>tuple&lt;/code>)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 译者补充，下述case等效&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="c1"># match (1,2,3) 也一样&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="匹配多个模式">匹配多个模式&lt;/h3>
&lt;p>即使大多数命令都是动作/对象形式，你也可能想要不同长度的用户命令。例如，你可能希望添加没有对象(如&lt;code>look&lt;/code>或&lt;code>quit&lt;/code>)的单个动词。一个&lt;code>match&lt;/code>语句可以(而且很可能)有不止一种情况:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret single-verb action&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>match&lt;/code>语句将从上到下检查模式。如果模式与 subject 不匹配，将尝试下一个模式。但是，一旦找到第一个匹配的模式，就会执行该&lt;code>case&lt;/code>的主体，并忽略所有后续的&lt;code>case&lt;/code>。这类似于&lt;code>if&lt;/code>/&lt;code>elif&lt;/code>/&lt;code>elif&lt;/code>/…语句的工作方式。&lt;/p>
&lt;h3 id="匹配特定值">匹配特定值&lt;/h3>
&lt;p>你的代码仍然需要查看特定的操作，并根据特定的操作有条件地执行不同的逻辑(例如，&lt;code>quit&lt;/code>、&lt;code>attack&lt;/code>或&lt;code>buy&lt;/code>)。你可以使用&lt;code>if&lt;/code>/&lt;code>elif&lt;/code>/&lt;code>elif&lt;/code>/…，或者使用函数字典，但是这里我们将利用模式匹配来解决这个任务。除了变量，你可以在模式中使用字面值(如&lt;code>&amp;quot;quit&amp;quot;&lt;/code>、&lt;code>42&lt;/code>或&lt;code>None&lt;/code>)。这允许你这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Goodbye!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">quit_game&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;look&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">character&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># The rest of your commands go here&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像&lt;code>[&amp;quot;get&amp;quot;， obj]&lt;/code>这样的模式将只匹配第一个元素等于&lt;code>&amp;quot;get&amp;quot;&lt;/code>的2个元素的序列。它还将绑定&lt;code>obj = subject[1]&lt;/code>。&lt;/p>
&lt;p>正如您在上述代码的&lt;code>go&lt;/code>模式中看到的，我们还可以在不同的模式中使用不同的变量名。&lt;/p>
&lt;p>除了与&lt;code>is&lt;/code>操作符比较的常量&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>之外，其他字面值是用&lt;code>==&lt;/code>操作符比较的。&lt;/p>
&lt;h3 id="匹配多个值">匹配多个值&lt;/h3>
&lt;p>玩家可以通过使用一系列的命令来投掷多个物品，如:&lt;code>drop key&lt;/code>, &lt;code>drop sword&lt;/code>, &lt;code>drop cheese&lt;/code>。这个接口可能很麻烦，您可能希望允许在一个命令中添加多个项，比如&lt;code>drop key sword cheese&lt;/code>。在这种情况下，你事先不知道命令中有多少个单词，但是你可以在模式中使用扩展解包(extended unpacking)，就像它们在解包赋值里的写法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;drop&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">obj&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">objects&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">character&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># The rest of your commands go here&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将匹配任何以&lt;code>“drop”&lt;/code>作为第一个元素的序列。所有剩余的元素都将在一个列表对象中被捕获，该列表对象将绑定到&lt;code>objects&lt;/code>变量。&lt;/p>
&lt;p>这种语法与序列解包有类似的限制:在一个模式中不能有多个带星号的名称。&lt;/p>
&lt;h3 id="添加通配符">添加通配符&lt;/h3>
&lt;p>您可能希望打印一条错误消息，说明当所有模式都失败时，无法识别该命令。您可以使用我们刚刚学习的特性，并将&lt;code>case [*ignored_words]&lt;/code>作为您的最后一个模式。然而，有一个更简单的方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Code omitted for brevity&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;drop&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Other cases&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Sorry, I couldn&amp;#39;t understand &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="si">!r}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个特殊的模式被写成&lt;code>_&lt;/code>(称为通配符)。不管 subject 是什么它总是能匹配到，但它不绑定任何变量。&lt;/p>
&lt;p>注意，这将匹配任何对象，而不仅仅是序列。因此，只有将它单独作为最后一个模式才有意义(为了防止错误，Python会阻止您在其他&lt;code>case&lt;/code>之前使用它)。&lt;/p>
&lt;h3 id="模式组合">模式组合&lt;/h3>
&lt;p>这是一个很好的时机，可以从示例中退后一步，了解您一直在使用的模式是如何构建的。模式可以相互嵌套，我们已经在上面的例子中隐式地这样做了。&lt;/p>
&lt;p>我们已经看到了一些“简单”模式(这里的“简单”意味着它们不包含其他模式):&lt;/p>
&lt;ul>
&lt;li>捕获模式 Capture patterns (独立名称，如方向、动作、对象)。我们从未单独讨论过这些，而是将它们作为其他模式的一部分使用。&lt;/li>
&lt;li>字面值模式 Literal patterns (字符串字面值、数字字面值、&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>)&lt;/li>
&lt;li>通配符模式 Wildcard pattern &lt;code>_&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>到目前为止，我们实验过的唯一一个非简单模式是序列模式。序列模式中的每个元素实际上都可以是任何其他模式。这意味着您可以编写像&lt;code>[&amp;quot;first&amp;quot;， (left, right)， _， *rest]&lt;/code>这样的模式。匹配的 subject 是一个至少包含三个元素的序列，其中第一个元素等于&lt;code>&amp;quot;first&amp;quot;&lt;/code>，第二个元素依次是两个元素的序列。它也会绑定&lt;code>left=subject[1][0]&lt;/code>， &lt;code>right=subject[1][1]&lt;/code>，&lt;code>rest =subject[3:]&lt;/code>&lt;/p>
&lt;h3 id="or-模式">or 模式&lt;/h3>
&lt;p>回到冒险游戏的例子中，你可能会发现你想要一些导致相同结果的模式。例如，您可能希望命令&lt;code>north&lt;/code>和&lt;code>go north&lt;/code>相等。您可能还希望为&lt;code>get X&lt;/code>可以有一些别名如&lt;code>pick x up&lt;/code>和&lt;code>pick up x&lt;/code>。&lt;/p>
&lt;p>模式中的|符号将它们组合为可选项。你可以这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Other cases&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;pick&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;up&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;pick&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;up&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Code for picking up the given object&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这被称为&lt;strong>or模式&lt;/strong>，并将产生预期的结果。模式从左到右尝试；如果有多个可选匹配，通过从左至右这一规则可以知道是匹配到了哪个模式。在编写or模式时，一个重要的限制是所有备选项都应该绑定相同的变量。所以模式&lt;code>[1,x] | [2, y]&lt;/code>是不允许的，因为它会使匹配成功后绑定哪个变量变得不清楚。&lt;code>[1, x] | [2, x]&lt;/code>非常好，如果成功，将始终绑定&lt;code>x&lt;/code>。&lt;/p>
&lt;h3 id="捕获匹配的子模式">捕获匹配的子模式&lt;/h3>
&lt;p>我们的&lt;code>“go”&lt;/code>命令的第一个版本是用&lt;code>[“go”，direction]&lt;/code>模式编写的。我们在上一个版本中使用模式&lt;code>[&amp;quot;north&amp;quot;] | [&amp;quot;go&amp;quot;， &amp;quot;north&amp;quot;]&lt;/code>所做的改变有一些好处，但也有一些缺点:最新版本允许别名，但也有硬编码的方向别名&lt;code>&amp;quot;north&amp;quot;&lt;/code>，这将迫使我们实际上有独立的模式，&lt;code>north&lt;/code>/&lt;code>south&lt;/code>/&lt;code>east&lt;/code>/&lt;code>west&lt;/code>。这将导致一些代码重复，但同时我们得到了更好的输入验证，并且如果用户输入的命令是&lt;code>“go figure!”&lt;/code>而不是方向，我们将不会进入那个分支。&lt;/p>
&lt;p>我们可以试着在两个方面都做到最好(为了简洁，我省略了不使用&lt;code>“go”&lt;/code>的别名版本):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;south&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;east&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;west&amp;#34;&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># how do I know which direction to go?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码是一个单独的分支，它验证&lt;code>“go”&lt;/code>之后的单词是否确实是一个方向。但移动玩家的代码需要知道选择了哪一个，但却无法做到这一点。我们需要的是一个行为类似于or模式但同时进行捕获的模式。我们可以使用&lt;strong>as模式&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;south&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;east&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;west&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as模式匹配左边的任何模式，同时也将值绑定到名称。&lt;/p>
&lt;h3 id="添加条件到模式">添加条件到模式&lt;/h3>
&lt;p>我们上面探讨的模式可以做一些强大的数据过滤，但有时您可能希望得到布尔表达式的全部功能。假设您实际上希望只允许&lt;code>“go”&lt;/code>命令出现在基于从&lt;code>current_room&lt;/code>的可能出口的受限方向集合中。我们可以通过在我们的案例中增加一个 &lt;strong>guard&lt;/strong> 来实现这一点。guard 由 if 关键字后跟任意表达式组成:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">direction&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exits&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Sorry, you can&amp;#39;t go that way&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>guard 不是模式的一部分，而是 case 的一部分。它只在模式匹配，并且所有模式变量都被绑定之后检查(这就是为什么条件可以在上面的例子中使用&lt;code>direction&lt;/code>变量)。如果模式匹配且条件为真，则 case body 正常执行。如果模式匹配，但条件为假，&lt;code>match&lt;/code>语句继续检查下一个条件，就好像模式没有匹配一样(可能的副作用是已经绑定了一些变量)。&lt;/p>
&lt;h3 id="添加ui-匹配对象">添加UI: 匹配对象&lt;/h3>
&lt;p>你的冒险游戏正走向成功，你被请求为游戏实现一个图形界面。您所选择的UI工具包允许您编写一个事件循环，您可以通过调用&lt;code>event.get()&lt;/code>来获取一个新的事件对象。根据用户的动作，结果对象可以有不同的类型和属性，例如:&lt;/p>
&lt;ul>
&lt;li>当用户按下某个键时，将生成&lt;code>KeyPress&lt;/code>对象。它有一个&lt;code>key_name&lt;/code>属性，其中包含所按键的名称，以及一些有关修饰符的其他属性。&lt;/li>
&lt;li>当用户单击鼠标时，将生成一个&lt;code>Click&lt;/code>对象。它有一个指针坐标的属性&lt;code>position&lt;/code>。&lt;/li>
&lt;li>当用户点击游戏窗口的关闭按钮时，会生成一个&lt;code>Quit&lt;/code>对象。&lt;/li>
&lt;/ul>
&lt;p>与其编写多个&lt;code>isinstance()&lt;/code>检查，你可以使用模式来识别不同类型的对象，也可以将模式应用到其属性上:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Q&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Quit&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;up arrow&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">go_north&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span> &lt;span class="c1"># Ignore other keystrokes&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">other_event&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Unrecognized event: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">other_event&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像&lt;code>Click(position=(x, y))&lt;/code>这样的模式仅在事件类型是&lt;code>Click&lt;/code>类的子类时才匹配。它还要求事件具有一个与&lt;code>(x, y)&lt;/code>模式匹配的位置属性。如果匹配，则局部变量&lt;code>x&lt;/code>和&lt;code>y&lt;/code>将得到期望的值。&lt;/p>
&lt;p>像&lt;code>KeyPress()&lt;/code>这样不带参数的模式将匹配任何&lt;code>KeyPress&lt;/code>类实例的对象。只有在模式中指定的属性才会匹配，其他任何属性都将被忽略。&lt;/p>
&lt;h3 id="匹配位置属性">匹配位置属性&lt;/h3>
&lt;p>前一节描述了在进行对象匹配时如何匹配命名属性。对于某些对象，可以方便地根据位置描述匹配的参数(特别是当只有几个属性并且它们有“标准”排序时)。如果您正在使用的类是命名元组 &lt;code>namedtuple&lt;/code> 或数据类 &lt;code>dataclass&lt;/code>，那么您可以按照构造对象时使用的相同顺序来实现这一点。例如，如果上面的UI框架像这样定义它们的类:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dataclasses&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">dataclass&lt;/span>
&lt;span class="nd">@dataclass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Click&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">tuple&lt;/span>
&lt;span class="n">button&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Button&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后你可以重写你的匹配语句来匹配上面的 subject:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>(x, y)&lt;/code>模式将自动匹配&lt;code>position&lt;/code>属性，因为模式中的第一个参数对应于数据类定义中的第一个属性。&lt;/p>
&lt;p>其他类的属性没有自然的顺序，因此需要在模式中使用显式名称来匹配它们的属性。但是，也可以手动指定属性的顺序，允许位置匹配，就像下面这个替代定义:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Click&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">__match_args__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;position&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;button&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">button&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>__match_args__&lt;/code>特殊属性定义了可以在&lt;code>case Click((x,y))&lt;/code>等模式中使用的属性的显式顺序。&lt;/p>
&lt;h3 id="匹配常量和枚举">匹配常量和枚举&lt;/h3>
&lt;p>上面的模式对所有鼠标按钮都一视同仁，但您已经决定只接受鼠标左键单击事件，而忽略其他鼠标按键。在做这一修改时，您注意到&lt;code>button&lt;/code>属性被定义为一个&lt;code>Button&lt;/code>，这是一个用&lt;code>enum.Enum&lt;/code>构建的枚举。实际上，你可以像这样匹配枚举值:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">button&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">LEFT&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># This is a left click&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span> &lt;span class="c1"># ignore other clicks&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将适用于任何带点的名称(如&lt;code>math.pi&lt;/code>)。然而，非限定名称(即没有点的裸名称)将总是被解释为捕获模式，因此在模式中始终使用限定常量可以避免这种歧义。&lt;/p>
&lt;h3 id="走进云服务匹配字典">走进云服务：匹配字典&lt;/h3>
&lt;p>你决定制作游戏的在线版本。您的所有逻辑都将在服务器中，而客户端中的UI将使用JSON消息进行通信。通过json模块，这些将被映射到Python字典、列表和其他内置对象。&lt;/p>
&lt;p>我们的客户端将收到一个字典列表(从JSON解析)，包含了要采取的动作，每个元素的查找示例如下:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{&amp;quot;text&amp;quot;: &amp;quot;The shop keeper says 'Ah! We have Camembert, yes sir'&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;blue&amp;quot;}&lt;/code>&lt;/li>
&lt;li>如果客户端应该暂停&lt;code>{&amp;quot;sleep&amp;quot;: 3}&lt;/code>&lt;/li>
&lt;li>播放声音 &lt;code>{&amp;quot;sound&amp;quot;: &amp;quot;filename.ogg&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;ogg&amp;quot;}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>到目前为止，我们的模式已经处理了序列，但是也有一些模式可以根据它们当前的键匹配映射。在这种情况下，你可以使用:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">actions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_text_color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">duration&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ogg&amp;#34;&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unsupported audio format&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>映射模式中的键需要是字面值，但是值可以是任何模式。与序列模式一样，所有子模式都必须匹配通用模式才能匹配。&lt;/p>
&lt;p>您可以在映射模式中使用&lt;code>**rest&lt;/code>来捕获 subject 中的附加键。请注意，如果你忽略了这一点，在匹配时，主题中的额外键将被忽略，例如，消息&lt;code>{&amp;quot;text&amp;quot;: &amp;quot;foo&amp;quot;， &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;， &amp;quot;style&amp;quot;: &amp;quot;bold&amp;quot;}&lt;/code>将匹配上面例子中的第一个模式。&lt;/p>
&lt;h3 id="匹配内建类-builtin-classes">匹配内建类 builtin classes&lt;/h3>
&lt;p>上面的代码可以需要一些验证。如果消息来自外部源，则字段的类型可能是错误的，从而导致错误或安全问题。&lt;/p>
&lt;p>任何类都是有效的匹配目标，其中包括&lt;code>bool&lt;/code>、&lt;code>str&lt;/code>或&lt;code>int&lt;/code>等内置类，这允许我们将上面的代码与类模式结合起来。因此，我们可以使用 &lt;code>{&amp;quot;text&amp;quot;: str() as message, &amp;quot;color&amp;quot;: str() as c}&lt;/code>来代替&lt;code>{&amp;quot;text&amp;quot;: message, &amp;quot;color&amp;quot;: c}&lt;/code>来确保&lt;code>message&lt;/code>和&lt;code>c&lt;/code>都是字符串。对于许多内置类(参见PEP-634了解整个列表)，可以使用位置参数作为简写，写成&lt;code>str(c)&lt;/code>而不是&lt;code>str() as c&lt;/code>。完全重写的版本如下所示:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">actions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_text_color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ogg&amp;#34;&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unsupported audio format&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录a----快速入门">附录A &amp;ndash; 快速入门&lt;/h2>
&lt;p>&lt;code>match&lt;/code>语句接受一个表达式，并将其值与作为一个或多个&lt;code>case&lt;/code>块给出的模式进行比较。这看起来类似于C、Java或JavaScript(以及许多其他语言)中的&lt;code>switch&lt;/code>语句，但功能要强大得多。&lt;/p>
&lt;p>最简单的形式是将一个 subject 值与一个或多个字面值进行比较:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">http_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Bad request&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Not found&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">418&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;I&amp;#39;m a teapot&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Something&amp;#39;s wrong with the Internet&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意最后一块:“变量名”&lt;code>_&lt;/code>充当通配符，永远不会失败。&lt;/p>
&lt;p>你可以使用&lt;code>|&lt;/code> (&amp;ldquo;or&amp;rdquo;)将几个字面值组合在一个模式中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">case&lt;/span> &lt;span class="mi">401&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">403&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Not allowed&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>模式看起来就像解包赋值，可以用来绑定变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># point is an (x, y) tuple&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a point&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仔细研究一下那个!第一个模式有两个字面量，可以认为是上面所示字面量模式的扩展。但是接下来的两个模式组合了一个字面量和一个变量，变量绑定来自 subject (&lt;code>point&lt;/code>)的值。第四个模式捕获两个值，这使得它在概念上类似于解包赋值&lt;code>(x, y) = point&lt;/code>。&lt;/p>
&lt;p>如果你使用类来构造数据，你可以使用类名后跟一个类似构造函数的参数列表，但是可以将属性捕获到变量中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">where_is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Somewhere else&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a point&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以在一些内置类中使用位置参数，这些类为它们的属性(例如数据类)提供排序。你也可以通过在你的类中设置&lt;code>__match_args__&lt;/code>特殊属性来定义模式中属性的特定位置。如果它被设置为&lt;code>(&amp;quot;x&amp;quot;， &amp;quot;y&amp;quot;)&lt;/code>，以下模式都是等价的(并且都将&lt;code>y&lt;/code>属性绑定到&lt;code>var&lt;/code>变量):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>模式可以任意嵌套。例如，如果我们有一个简短的点列表，我们可以这样匹配:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No points&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Single point &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Two on the Y axis at &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y1&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y2&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Something else&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以向模式添加一个&lt;code>if&lt;/code>子句，称为“guard”。如果 guard 为假，&lt;code>match&lt;/code> 继续尝试下一个&lt;code>case&lt;/code>块。注意，值捕获发生在guard求值之前:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=X at &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Not on the diagonal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他几个关键功能:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>与解包赋值一样，元组和列表模式具有完全相同的含义，并且实际上匹配任意序列。一个重要的异常是它们&lt;strong>不匹配&lt;/strong>迭代器或字符串。(技术上讲，subject 必须是&lt;code>collections.abc.Sequence&lt;/code>的一个实例。)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>序列模式支持通配符:&lt;code>[x, y， *rest]&lt;/code>和&lt;code>(x, y， *rest)&lt;/code>在解包赋值时的工作类似于通配符。*后面的名称也可以是&lt;code>_&lt;/code>，所以&lt;code>(x, y， *_)&lt;/code>匹配至少有两个项的序列，而不绑定其余的项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>映射模式:&lt;code>{&amp;quot;bandwidth&amp;quot;: b， &amp;quot;latency&amp;quot;: l}&lt;/code>从字典中捕获&lt;code>&amp;quot;bandwidth&amp;quot;&lt;/code>和&lt;code>&amp;quot;latency&amp;quot;&lt;/code>值。与序列模式不同，额外的键被忽略。还支持通配符&lt;code>**rest&lt;/code>。(但是&lt;code>**_&lt;/code>是多余的，所以不允许。)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以使用as关键字捕获子模式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>大多数字面值的比较是&lt;code>==&lt;/code>的，但是单例的&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>是通过&lt;code>id&lt;/code>进行比较的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模式可以使用命名的常量。这些必须用点命名，以防止它们被解释为捕获变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">enum&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Enum&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">RED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">GREEN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">BLUE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RED&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I see red!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">GREEN&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Grass is green&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">BLUE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I&amp;#39;m feeling the blues :(&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="原文档版权声明">原文档版权声明&lt;/h2>
&lt;p>This document is placed in the public domain or under the CC0-1.0-Universal license, whichever is more permissive.&lt;/p>
&lt;p>Source: &lt;a class="link" href="https://github.com/python/peps/blob/master/pep-0636.rst" target="_blank" rel="noopener"
>https://github.com/python/peps/blob/master/pep-0636.rst&lt;/a>&lt;/p></description></item><item><title>go 的 defer 语句</title><link>https://nnnewb.github.io/blog/p/go-%E7%9A%84-defer-%E8%AF%AD%E5%8F%A5/</link><pubDate>Tue, 05 Jan 2021 10:01:48 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/go-%E7%9A%84-defer-%E8%AF%AD%E5%8F%A5/</guid><description>&lt;p>昨天对项目做了个小重构，主要是对以前手写的 stmt.Close 没处理返回值的问题、还有各种该记录日志的地方没记日志等等，做了下处理。&lt;/p>
&lt;p>老实说这事儿做着做着还有种奇妙的快感，类似于看高压水枪清污视频的感觉。哈哈，也亏领导不管事，代码也不 Review ，测试=摆设。&lt;/p>
&lt;p>这不一上班就发现好多问题，幸好只推送到内网。&lt;/p>
&lt;p>笑中带泪.gif&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="0x01-问题描述">0x01 问题描述&lt;/h2>
&lt;p>问题倒是挺简单的，看下面的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">stmt&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Prepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nf">SilentLogError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;stmt close failed&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryRow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Scan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">vars&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">vars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么，请问上面的代码有什么问题呢？&lt;/p>
&lt;p>标题都说了 defer 了，那问题肯定是出在 defer 这一行上。&lt;/p>
&lt;h2 id="0x02-defer-的求值">0x02 defer 的求值&lt;/h2>
&lt;p>简单的结论就是: &lt;em>defer f() 的参数在 defer 这一行求值&lt;/em>&lt;/p>
&lt;p>具体到上面的例子，&lt;code>defer f(i())&lt;/code> 这样的形式，可以先分成三个部分。&lt;/p>
&lt;ol>
&lt;li>&lt;code>defer&lt;/code> 本身的执行时机&lt;/li>
&lt;li>&lt;code>i()&lt;/code> 的求值时机&lt;/li>
&lt;li>&lt;code>f()&lt;/code> 的求值时机&lt;/li>
&lt;/ol>
&lt;p>把这三部分排一下序:&lt;/p>
&lt;ol>
&lt;li>&lt;code>i()&lt;/code>&lt;/li>
&lt;li>&lt;code>defer&lt;/code>
&lt;blockquote>
&lt;p>defer 把参数求值后包装成一个新函数延迟执行&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;code>f()&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="0x03-循环内-defer">0x03 循环内 defer&lt;/h2>
&lt;p>循环内 defer 主要有两个问题&lt;/p>
&lt;ol>
&lt;li>可能产生造成巨量的 defer 函数，耗尽内存或拖垮执行速度&lt;/li>
&lt;li>在一些情况下会造成意料外的结果&lt;/li>
&lt;/ol>
&lt;p>看例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Conn&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ID&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewConn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;close %d!\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">ID&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终输出是&lt;/p>
&lt;pre>&lt;code>close 4!
close 4!
close 4!
close 4!
close 4!
&lt;/code>&lt;/pre>&lt;p>造成这一结果的原因是接收器(receiver)也作为函数参数的一部分在 defer 时被求值。&lt;/p>
&lt;p>&lt;code>for _, conn := range arr&lt;/code> 这一行代码中，&lt;code>conn&lt;/code> 本质是一个局部变量，其内存在循环期间可以视作固定的，而&lt;code>func (c *Conn) Close() error&lt;/code> 接收器取了这个局部变量的地址：每一次循环，调用 Close 时，取得的都是同一个地址。最终导致 Close 的全部都是 conn 在函数结束时最后得到的值。&lt;/p>
&lt;p>类似的，如果把接收器从指针改成值呢？接收器变成了值传递，将&lt;code>conn&lt;/code>复制一次后保留作为 defer 函数执行时的参数，就会有正常的结果。&lt;/p>
&lt;p>但并不是说循环内 defer &lt;strong>一定是&lt;/strong> 不好的。&lt;/p>
&lt;p>比如一个常见的场景，在循环里使用 SQL 查询。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">queries&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以明确知道 &lt;code>rows&lt;/code> 是指针，而且 &lt;code>rows.Close&lt;/code> 有指针接收器，就可以确定不会有问题。&lt;/p>
&lt;h2 id="0x04-defer-和闭包">0x04 defer 和闭包&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Conn&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ID&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewConn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;close %d!\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">conn&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}()&lt;/span>
&lt;span class="nx">conn&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和上面类似，这次输出是:&lt;/p>
&lt;pre>&lt;code>close 2!
close 2!
&lt;/code>&lt;/pre>&lt;p>问题出现在 defer 后面这个画蛇添足的 &lt;code>func(){}()&lt;/code> 上。众所周知 defer 会对参数求值，但闭包捕获的变量并不会。&lt;/p>
&lt;p>因此，即使 &lt;code>defer conn.Close()&lt;/code> 工作正常，但 defer &lt;code>defer func() {conn.Close()}()&lt;/code> 就不一定了。两者在部分情况下并不能等价代换，除非你确信了解自己做了什么。&lt;/p>
&lt;p>如果一定要用 &lt;code>func(){}()&lt;/code> 的形式，那么 conn 只能通过参数形式传递给这个匿名函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">conn&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对，说的就是烦人的&lt;em>未处理的错误&lt;/em>警告。&lt;/p>
&lt;h2 id="0x05-happy-hacking">0x05 Happy Hacking!&lt;/h2>
&lt;p>惯例，完。&lt;/p></description></item><item><title>在 slackware 上安装 neovim</title><link>https://nnnewb.github.io/blog/p/%E5%9C%A8-slackware-%E4%B8%8A%E5%AE%89%E8%A3%85-neovim/</link><pubDate>Mon, 04 Jan 2021 15:00:20 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%9C%A8-slackware-%E4%B8%8A%E5%AE%89%E8%A3%85-neovim/</guid><description>&lt;p>最近在虚拟机里折腾 slackware ，发现 slackware 14.2 的 vim 版本还停留在 7.4 ，于是考虑还是装个 neovim 算了。毕竟升级 vim8 还得自己写 SlackBuild，万一和原本的 vim 7.4 冲突就更头疼了。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="0x01-确定依赖">0x01 确定依赖&lt;/h2>
&lt;p>到处翻 slackbuild 之间依赖关系的时候发现 sbopkg 提供了一个解决依赖的脚本，&lt;code>sqg&lt;/code>。&lt;/p>
&lt;p>于是简单点，拿 &lt;code>sqg -p neovim&lt;/code> 生成 neovim 的安装队列 neovim.sqf 文件。&lt;/p>
&lt;p>sqg 和 sbopkg 一起提供了，所以不用另外安装。&lt;/p>
&lt;h2 id="0x02-安装">0x02 安装&lt;/h2>
&lt;p>一条命令：&lt;code>sudo sbopkg -i neovim.sqf&lt;/code>&lt;/p>
&lt;p>然后等完成吧。&lt;/p>
&lt;h2 id="0x03-可选依赖">0x03 可选依赖&lt;/h2>
&lt;p>上述步骤完成后还只是装好基本的 neovim ，但 python2/python3/ruby/nodejs 支持都是没有的。&lt;/p>
&lt;p>打开 nvim，输入命令 &lt;code>:checkhealth&lt;/code> 后会显示缺少支持，同时也提供了解决办法：&lt;code>pip install pynvim&lt;/code>。&lt;/p>
&lt;p>然后就是另一个坑：pip 也不在默认的 python2 包里。于是为了解决这个问题，还得先装上 pip : &lt;code>sudo sbopkg -i python-pip&lt;/code>&lt;/p>
&lt;p>然后执行 &lt;code>sudo pip install pynvim&lt;/code>，此时 python2 支持已经装好。&lt;/p>
&lt;p>不过众所周知 python2 的生命周期已经结束了，python3 才是正道。所以还得装一下 python3 : &lt;code>sudo sbopkg -i python3&lt;/code>&lt;/p>
&lt;p>slackbuild 的 python3 包自带了 pip 所以一切安好。完成后直接装 pynvim 即可: &lt;code>sudo pip3 install pynvim&lt;/code>&lt;/p>
&lt;p>nodejs 和 ruby 不是我的工作语言就不管了。&lt;/p>
&lt;h2 id="0x04-使用-vim-配置">0x04 使用 vim 配置&lt;/h2>
&lt;p>另一个问题是我的 vimrc 配置是针对 vim8 写的，neovim 不认 .vimrc 和 .vim 。这个问题网上有很多解决办法，我复制粘贴下。&lt;/p>
&lt;blockquote>
&lt;p>Transitioning from Vim &lt;em>nvim-from-vim&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>To start the transition, create your |init.vim| (user config) file:&lt;/p>
&lt;p>:call mkdir(stdpath(&amp;lsquo;config&amp;rsquo;), &amp;lsquo;p&amp;rsquo;)
:exe &amp;lsquo;edit &amp;lsquo;.stdpath(&amp;lsquo;config&amp;rsquo;).'/init.vim&amp;rsquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add these contents to the file:&lt;/p>
&lt;p>set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &amp;amp;packpath = &amp;amp;runtimepath
source ~/.vimrc&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Restart Nvim, your existing Vim config will be loaded.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>完事即可认出 vim 配置。&lt;/p>
&lt;h2 id="0x05-happy-hacking-">0x05 Happy Hacking !&lt;/h2>
&lt;p>&lt;em>完&lt;/em>&lt;/p></description></item><item><title>slackware 和虚拟机基本配置</title><link>https://nnnewb.github.io/blog/p/slackware-%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 30 Dec 2020 11:11:56 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/slackware-%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>slackware 是一个非常有极客味的 Linux 发行版，因为官方维护的包不多，基本靠 slackbuilds 续命。&lt;/p>
&lt;p>slackware 的一个特色是包管理系统不处理依赖关系，这一点劝退不少人。&lt;/p>
&lt;p>实际上，虽然我不是很赞同 &lt;a class="link" href="https://docs.slackware.com/start?id=slackware:package_and_dependency_management_shouldn_t_put_you_off_slackware" target="_blank" rel="noopener"
>这个观点&lt;/a> ，不过并不妨碍 slackware 成为可玩性相对高的 Linux 发行版之一（另外几个可玩性不错的发行版包括 Arch Linux 和 Gentoo）。&lt;/p>
&lt;p>这篇博文实际上就是安利下 slackware 并且简要介绍下怎么在虚拟机里搭建个基本环境来体验游玩。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="0x01-安装">0x01 安装&lt;/h2>
&lt;p>安装的参考文档太多了，个人认为主要的难点在分区和引导。毕竟不像其他更流行的发行版的 GUI 安装引导，对 fdisk 和 parted 这些工具不熟悉、对操作系统引导启动的一些基本概念、原理不了解的人很容易犯下错误而不自知。&lt;/p>
&lt;p>这里提供一篇之前在贴吧写的 &lt;a class="link" href="https://tieba.baidu.com/p/4863103375" target="_blank" rel="noopener"
>安装教程&lt;/a> ，不做赘述了。&lt;/p>
&lt;h2 id="0x02-桌面">0x02 桌面&lt;/h2>
&lt;p>对习惯了装完就有桌面的用户来说，安装完 slackware 之后遇到的第一个问题就是怎么进入桌面——甚至会问怎么登陆。&lt;/p>
&lt;p>这里就挂一张 gif 好了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/slackware-vm-setup/01.gif" alt="01" />&lt;/p>
&lt;p>假设没手贱在安装的时候把 x/kde/xfce 之类的软件包组给去掉的话，就不会有什么问题。&lt;/p>
&lt;p>如果需要自动进入桌面，需要手动修改 &lt;code>/etc/inittab&lt;/code> 文件，把默认的 runlevel 修改为 4 。&lt;/p>
&lt;p>具体怎么改，看 gif 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/slackware-vm-setup/02.gif" alt="02" />&lt;/p>
&lt;h2 id="0x03-slackpkg-包管理">0x03 slackpkg 包管理&lt;/h2>
&lt;p>如果用过 ubuntu ，那么下一个问题可能就是 &amp;ldquo;怎么没有 apt-get 命令？&amp;rdquo; 或者 &amp;ldquo;slackware 用什么命令安装软件？&amp;rdquo;&lt;/p>
&lt;p>答案是有好几个相关命令。&lt;/p>
&lt;ul>
&lt;li>installpkg&lt;/li>
&lt;li>removepkg&lt;/li>
&lt;li>upgradepkg&lt;/li>
&lt;li>makepkg&lt;/li>
&lt;li>explodepkg&lt;/li>
&lt;li>rpm2targz&lt;/li>
&lt;/ul>
&lt;p>大部分命令顾名思义，也不需要额外说明。如果说和 apt 或者 pacman 类似的一个统一的包管理器的话，那就是 slackpkg 。&lt;/p>
&lt;p>使用 slackpkg 之前，需要手动修改 /etc/slackpkg/mirrors 文件，选择一个网络状况比较好的软件源地址，把行开头的 # 号去掉。&lt;/p>
&lt;p>完事之后用命令 &lt;code>slackpkg update&lt;/code> 更新一下本地索引，就可以正常用了。&lt;/p>
&lt;p>常用的命令包括&lt;/p>
&lt;ul>
&lt;li>slackpkg search&lt;/li>
&lt;li>slackpkg file-search&lt;/li>
&lt;li>slackpkg install&lt;/li>
&lt;li>slackpkg install-new&lt;/li>
&lt;li>slackpkg upgrade&lt;/li>
&lt;li>slackpkg upgrade-all&lt;/li>
&lt;/ul>
&lt;p>具体不细说了，看参考链接，或者自己看看 &lt;code>man slackpkg&lt;/code> 或者 &lt;code>slackpkg help&lt;/code>&lt;/p>
&lt;p>此外还有个不常用的，和安装时的 &lt;code>setup&lt;/code> 风格比较类似的工具，&lt;code>pkgtool&lt;/code>。具体可以自己看看命令。&lt;/p>
&lt;h2 id="0x04-slackbuilds">0x04 SlackBuilds&lt;/h2>
&lt;p>用过 Arch Linux 的 AUR 的用户对这种第三方维护的软件包会比较熟悉， SlackBuilds 对这些用户来说就是另一个 AUR 而已。&lt;/p>
&lt;p>不同之处在于，SlackBuilds 需要手动下载脚本和源码，然后自己看 README 再运行编译。&lt;/p>
&lt;p>当然这不是说 SlackBuilds 没有类似 yaourt 或者 yay 之类的自动工具，你可以试试 sbopkg 。&lt;/p>
&lt;p>这里给个简单的例子，用 sbopkg 安装 fbterm 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/slackware-vm-setup/03.gif" alt="03.gif" />&lt;/p>
&lt;h2 id="0x05-编写-slackbuilds">0x05 编写 SlackBuilds&lt;/h2>
&lt;p>讲道理，slackware 常用的软件太少，基本全靠 slackbuilds 撑场面。如果 SlackBuilds 上也没有呢？&lt;/p>
&lt;p>那只能自己写吧。&lt;/p>
&lt;p>对于熟悉 bash 脚本的用户来说这不是什么难事。这篇 &lt;a class="link" href="https://slackwiki.com/Writing_A_SlackBuild_Script" target="_blank" rel="noopener"
>HOWTO 文章&lt;/a> 很好地说明了怎么写一个 SlackBuilds 脚本。&lt;/p>
&lt;h2 id="0x06-参与社区">0x06 参与社区&lt;/h2>
&lt;p>slackware 中文社区太小了，或者说根本不存在。&lt;/p>
&lt;p>能聊几句的基本只有贴吧（实际上现在也找不到人了）或者 GitHub 上（slackwarecn 社区也不活跃）。&lt;/p>
&lt;p>如果对 slackware 感兴趣，可以玩一玩，写几个常用软件的 SlackBuilds 脚本什么的。&lt;/p>
&lt;p>就这样吧。&lt;/p></description></item><item><title>一个安卓应用的逆向分析</title><link>https://nnnewb.github.io/blog/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</link><pubDate>Tue, 29 Dec 2020 14:04:02 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</guid><description>&lt;p>说起来也不算什么新鲜的东西，现成的工具拼拼凑凑就搞定了，单纯算是点亮了新的技能。&lt;/p>
&lt;p>待破解应用的名字不透露了，避免引火烧身。&lt;/p>
&lt;p>需要准备的工具包括&lt;/p>
&lt;ul>
&lt;li>mumu 模拟器(或者别的什么有 root 权限、能装 xposed 的模拟器)&lt;/li>
&lt;li>FDex2 脱壳&lt;/li>
&lt;li>jadx 反编译 dex 源码&lt;/li>
&lt;li>apktools 拆解 apk&lt;/li>
&lt;li>mitmproxy 中间人拦截网络请求&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h2 id="0x01-目标和方向选择">0x01 目标和方向选择&lt;/h2>
&lt;p>首要的目标是破解这个软件的 api 加密。&lt;/p>
&lt;p>使用 mitmproxy 抓到 https 流量，发现请求体全部是 base64 ，解码发现乱码。基本断定是加密了。&lt;/p>
&lt;blockquote>
&lt;p>mitmproxy 怎么抓 https 流量不多说了，基本流程就是装证书，然后配置代理。能看到有流量进 mitmproxy 就算成功了。&lt;/p>
&lt;p>直接参考 mitmproxy 的文档快一点。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/01.png" alt="01" />&lt;/p>
&lt;p>搜了一圈没有什么现成的对这个 App 的破解的文章，于是决定自己动手。&lt;/p>
&lt;h2 id="0x02-解包和脱壳">0x02 解包和脱壳&lt;/h2>
&lt;p>先确认下电脑上装了 JDK 或者 JRE ，没有的话就装好。&lt;/p>
&lt;p>推荐一个 vscode 的插件，&lt;code>apklab&lt;/code>。会帮你装好 jadx 和 apktools / signer 这些工具。&lt;/p>
&lt;p>接下来直接用 &lt;code>apklab&lt;/code> 打开需要破解的 apk 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/02.png" alt="02" />&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/03.png" alt="03" />&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/04.png" alt="04" />&lt;/p>
&lt;p>apklab 会自动用 apktools 和 jadx 完成拆包和反编译。&lt;/p>
&lt;p>然后简单观察&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/05.png" alt="05" />&lt;/p>
&lt;p>应该是被 360 加固了。&lt;/p>
&lt;p>apk 加固的基本原理就是把易被反编译的 java 字节码转译或者加密后保存，运行的时候再释放出来。用过 upx 一类的软件应该会联想到，就是加壳、反调试什么的这一套。&lt;/p>
&lt;p>xposed 提供了一个&lt;a class="link" href="https://api.xposed.info/reference/de/robv/android/xposed/IXposedHookLoadPackage.html" target="_blank" rel="noopener"
>在安卓包加载时设置钩子的机会&lt;/a>，将 ClassLoader Hook 掉，以此获得真正的应用字节码。&lt;/p>
&lt;p>代码看参考资料。&lt;/p>
&lt;p>安装 xposed 框架和 FDex2 之后启动目标应用，即可获得对应的字节码 dex 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/06.png" alt="06" />&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/07.png" alt="07" />&lt;/p>
&lt;p>接着把这些 dex 文件复制出来，即可使用 jadx 反编译到 java 了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">jadx -d out *.dex
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将反编译的结果用 vscode 打开，可以看到目标已经被我们脱干净了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/08.png" alt="08" />&lt;/p>
&lt;h2 id="0x03-寻找加解密代码">0x03 寻找加解密代码&lt;/h2>
&lt;p>目标是解密 Api 请求的内容，所以下一步就是找到哪里保存了加密代码。&lt;/p>
&lt;p>幸运的是这个 App 没有做过混淆，完成脱壳后就已经是全身赤裸的站在我们面前了。&lt;/p>
&lt;p>直接在代码里搜索之前我们观察到的 url：&lt;code>index_des.php&lt;/code>，仅有一个结果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/09.png" alt="09" />&lt;/p>
&lt;p>相关函数非常短，这个 HTTP 框架我没有使用过，不过从函数名看应该是一个中间件模式，对所有 Web 请求进行加密处理。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/10.png" alt="10" />&lt;/p>
&lt;p>&lt;code>getOverPost2&lt;/code> 源码如下&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/11.png" alt="11" />&lt;/p>
&lt;p>从代码里可以得出：&lt;/p>
&lt;ul>
&lt;li>g 的含义是 Get 请求的参数，应该就是 QueryString。函数名 &lt;code>getOverPost2&lt;/code> 字面意义就是把 GET 请求以 POST 方式发送出去。&lt;/li>
&lt;li>p 的含义大概就是 Post 的参数了。&lt;/li>
&lt;li>加密代码在 &lt;code>encryptByte&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>如此看来已经接近终点了，再点开 &lt;code>encryptByte&lt;/code> 的定义&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/12.png" alt="12" />&lt;/p>
&lt;p>密钥保存在 &lt;code>DesLib.sharedInstance().getAuthKey()&lt;/code> 中。&lt;/p>
&lt;p>接着点开 &lt;code>getAuthKey&lt;/code> 的定义:&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/13.png" alt="13" />&lt;/p>
&lt;p>&lt;code>native&lt;/code> 关键字一出，得，白高兴了。差点劝退成功。&lt;/p>
&lt;p>还是先看下怎么加密的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/14.png" alt="14" />&lt;/p>
&lt;p>再往回翻一下响应解密的代码，免得拆除密钥来又白高兴一场。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/15.png" alt="15" />&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/16.png" alt="16" />&lt;/p>
&lt;p>很好，也是 DES 。&lt;/p>
&lt;p>其实到这一步已经基本完成解密了，唯一欠缺的就是密钥。&lt;/p>
&lt;p>抱着试一试的心情，还是找到了 &lt;code>libencry.so&lt;/code> ，用 IDA 打开分析了一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/17.png" alt="17" />&lt;/p>
&lt;p>一通操作猛如虎，结果发现看不懂汇编。=w=&lt;/p>
&lt;p>按下 F5，看看伪代码。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/18.png" alt="18" />&lt;/p>
&lt;p>还是看不懂。这都调的什么函数&amp;hellip; &lt;code>a1 + 668&lt;/code> 这个蜜汁偏移也不知道是在算什么。&lt;/p>
&lt;p>网上搜索了一圈，说道可以手动改一下函数签名，IDA 就能提示出函数了。试试看。&lt;/p>
&lt;p>先把函数签名纠正&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/19.png" alt="19" />&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/20.png" alt="20" />&lt;/p>
&lt;p>再关掉类型转换&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/21.png" alt="21" />&lt;/p>
&lt;p>最终关键代码清晰了很多，看起来就是个直接返回字符串常量的函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/22.png" alt="22" />&lt;/p>
&lt;p>比较具有迷惑性的是上面的 v5-v9，可以看到 v5-v9 地址是增长、连续的，只有 v5 和 v6 有值。v7/v8/v9 都是 0 。而 v5 的地址被用作 &lt;code>NewStringUTF&lt;/code> 函数的参数。查阅 JNI 接口也可以看到这个参数应该是 &lt;code>const char*&lt;/code> 类型。&lt;/p>
&lt;p>所以 &amp;hellip;&lt;/p>
&lt;p>把数值转换成 16 进制再做观察。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/23.png" alt="23" />&lt;/p>
&lt;p>发现很有规律，每个字节的值都在 ASCII 范围内。于是右键转换成字符串，再按字节序翻转一下，即可得到密钥。&lt;/p>
&lt;p>到此，解密方法的探索已经完成。&lt;/p>
&lt;h2 id="0x04-mitmproxy-解密">0x04 mitmproxy 解密&lt;/h2>
&lt;p>mitmproxy 支持使用 python 脚本扩展，用法很简单就是 &lt;code>mitmweb.exe -s decrypt.py&lt;/code>&lt;/p>
&lt;p>可以参考 mitmproxy 的&lt;a class="link" href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/addons/contentview.py" target="_blank" rel="noopener"
>例子&lt;/a>&lt;/p>
&lt;p>最终效果应该是这样&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/25.png" alt="24" />&lt;/p>
&lt;p>核心的解密代码就一句，利用 mitmproxy 的扩展即可对每个请求进行统一的处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pyDes&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAD_PKCS5&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">padmode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">PAD_PKCS5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x05-结语">0x05 结语&lt;/h2>
&lt;p>这个破解的最大意义还是完成了一次完整的安卓逆向，算是点亮了新技能。&lt;/p>
&lt;p>以后再遇到一些傻逼软件或者强制推广的东西就可以用这一手技能来研究吐槽下都什么傻逼代码了。&lt;/p>
&lt;p>当然非法的事情是不可能做的。&lt;/p>
&lt;p>这玩意儿破解完之后发现有泄露隐私、被脱裤的严重漏洞，我也给市政平台发了件。&lt;/p>
&lt;p>所以明年如果再硬推一次的话，到时候再拆了看看是不是有点长进。当然，没人管应该才是常态。&lt;/p></description></item><item><title>在C++中嵌入Python解释器</title><link>https://nnnewb.github.io/blog/p/%E5%9C%A8c-%E4%B8%AD%E5%B5%8C%E5%85%A5python%E8%A7%A3%E9%87%8A%E5%99%A8/</link><pubDate>Fri, 07 Feb 2020 21:59:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%9C%A8c-%E4%B8%AD%E5%B5%8C%E5%85%A5python%E8%A7%A3%E9%87%8A%E5%99%A8/</guid><description>&lt;p>先不说废话，项目地址：https://github.com/nnnewb/CQPy 。欢迎给个 Star 什么的。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>想给最近在玩的酷 Q 写个插件，发现没有合适的直接使用 Python 的解决方案。&lt;/p>
&lt;p>Richard Chien 提供了一个比较通用的插件，&lt;code>CQHttp&lt;/code>。&lt;code>CQHttp&lt;/code>本体是用 C++ 编写的插件，将酷 Q 的回调包装成 HTTP 请求转发至指定的地址，支持&lt;code>http&lt;/code>和&lt;code>websocket&lt;/code>两种协议。&lt;/p>
&lt;p>不过由于个人想折腾折腾的想法，打算试试把 Python 解释器直接嵌入到 C++ 里得了。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>整个思路如下。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">graph LR;
CQP[酷Q] --事件回调--&amp;gt; dll[插件DLL];
dll --事件回调--&amp;gt; python[Python脚本];
python --调用API--&amp;gt; dll;
dll --调用API--&amp;gt; CQP;
&lt;/code>&lt;/pre>&lt;h2 id="依赖">依赖&lt;/h2>
&lt;p>为了简化操作 Python 接口，我没有使用 Python 自带的 C API，而是&lt;code>pybind11&lt;/code>，使用&lt;code>vcpkg&lt;/code>管理依赖。&lt;/p>
&lt;p>安装命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">vcpkg install pybind11:x86-windows
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x1-编译-dll">0x1 编译 DLL&lt;/h2>
&lt;p>我使用 CMake 作为编译系统，因此可以很简单地写一个编译出 DLL 的 &lt;code>CMakeLists.txt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="nb">cmake_minimum_required&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VERSION&lt;/span> &lt;span class="s">3.15&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">top.weak-ptr.cqpy&lt;/span> &lt;span class="s">LANGUAGES&lt;/span> &lt;span class="s">CXX&lt;/span> &lt;span class="s">VERSION&lt;/span> &lt;span class="s">0.1.0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">src&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">aux_source_directory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">src&lt;/span> &lt;span class="s">SOURCES&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">CMAKE_CXX_STANDARD&lt;/span> &lt;span class="s">17&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># 引入 pybind11
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">pybind11&lt;/span> &lt;span class="s">CONFIG&lt;/span> &lt;span class="s">REQUIRED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># 添加 target
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">OUT_NAME&lt;/span> &lt;span class="s2">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">OUT_NAME&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="s">SHARED&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">SOURCES&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">set_target_properties&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">OUT_NAME&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="s">PROPERTIES&lt;/span> &lt;span class="s">LINKER_LANGUAGE&lt;/span> &lt;span class="s">CXX&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">OUT_NAME&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">pybind11::embed&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>源代码使用 MSVC 和 MinGW 编译，另外再处理下源码编码的问题和宏。&lt;/p>
&lt;p>主要涉及的几个问题：&lt;/p>
&lt;ol>
&lt;li>MSVC 编译时通过&lt;code>/utf-8&lt;/code>编译参数指定源码文件的编码。&lt;/li>
&lt;li>MSVC 编译&lt;code>pybind11&lt;/code>时需要指定 &lt;code>-DNOMINMAX&lt;/code>，这是&lt;code>pybind11&lt;/code>要求的。&lt;/li>
&lt;li>因为使用 VCPKG 管理依赖，MSVC 编译时还需要设置链接属性。&lt;/li>
&lt;li>MinGW 编译时，指定 &lt;code>-static&lt;/code> 避免依赖 &lt;code>libgcc&lt;/code> 之类的 dll，最终编译结果只依赖于 &lt;code>libpython3.7.dll&lt;/code>。&lt;/li>
&lt;li>MinGW 编译时，指定 &lt;code>-Wl,--kill-at,--enable-stdcall-fixup&lt;/code>，来确保导出的 DLL API 名字没有下划线开头和&lt;code>@&amp;lt;参数大小&amp;gt;&lt;/code>的后缀。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="c"># 添加编译参数
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">add_compile_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">APP_ID=&lt;/span>&lt;span class="s2">&amp;#34;${PROJECT_NAME}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">-DAPP_ID=&lt;/span>&lt;span class="s2">&amp;#34;top.weak-ptr.cqpy&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">MSVC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">add_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">/utf-8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">add_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">-DNOMINMAX&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="c"># 设置静态链接
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VCPKG_CRT_LINKAGE&lt;/span> &lt;span class="s">STATIC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VCPKG_LIBRARY_LINKAGE&lt;/span> &lt;span class="s">STATIC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">else&lt;/span> &lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">add_link_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">-static&lt;/span> &lt;span class="s">-Wl,--kill-at,--enable-stdcall-fixup&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">endif&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">MSVC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后的构建命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="k">mkdir&lt;/span> build
&lt;span class="k">cd&lt;/span> build
cmake .. \
&lt;span class="s2">&amp;#34;-GVisual Studio 16 2019&amp;#34;&lt;/span> \
-AWin32 \
-DCMAKE_TOOLCHAIN_FILE=/path/to/your/vcpkg/scripts/buildsystems/vcpkg.cmake \
cmake --build .
cmake install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>MinGW 对应改下 Generator，去掉&lt;code>-AWin32&lt;/code>和后面的&lt;code>-DCMAKE_TOOLCHAIN_FILE=/path/to/your/vcpkg/scripts/buildsystems/vcpkg.cmake&lt;/code>即可。&lt;/p>
&lt;h2 id="0x2-msvc-编译导出-dll-的问题">0x2 MSVC 编译导出 DLL 的问题&lt;/h2>
&lt;p>参考 MSDN 的文档，使用下面的方式无法正确导出 DLL 接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span> &lt;span class="kr">__declspec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dllexport&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="kr">__stdcall&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终采用的是&lt;code>__pragma&lt;/code>的方式指定导出名，如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#define DLL_EXPORT extern &amp;#34;C&amp;#34; __declspec(dllexport)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define CQ_EXPORT(ReturnType, FuncName, ParamsSize, ...) \
&lt;/span>&lt;span class="cp"> __pragma( \
&lt;/span>&lt;span class="cp"> comment(linker, &amp;#34;/EXPORT:&amp;#34; #FuncName &amp;#34;=_&amp;#34; #FuncName &amp;#34;@&amp;#34; #ParamsSize)) \
&lt;/span>&lt;span class="cp"> DLL_EXPORT ReturnType __stdcall FuncName(__VA_ARGS__)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意&lt;code>__pragma&lt;/code>只能在 MSVC 中使用，所以要加上条件判断。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#define DLL_EXPORT extern &amp;#34;C&amp;#34; __declspec(dllexport)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#if defined(_MSC_VER)
&lt;/span>&lt;span class="cp">#define CQ_EXPORT(ReturnType, FuncName, ParamsSize, ...) \
&lt;/span>&lt;span class="cp"> __pragma( \
&lt;/span>&lt;span class="cp"> comment(linker, &amp;#34;/EXPORT:&amp;#34; #FuncName &amp;#34;=_&amp;#34; #FuncName &amp;#34;@&amp;#34; #ParamsSize)) \
&lt;/span>&lt;span class="cp"> DLL_EXPORT ReturnType __stdcall FuncName(__VA_ARGS__)
&lt;/span>&lt;span class="cp">#else
&lt;/span>&lt;span class="cp">#define CQ_EXPORT(ReturnType, FuncName, ParamsSize, ...) \
&lt;/span>&lt;span class="cp"> DLL_EXPORT ReturnType __stdcall FuncName(__VA_ARGS__)
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>理论上也能用&lt;code>.def&lt;/code>文件来定义导出表，可以自行尝试下。&lt;/p>
&lt;h2 id="0x3-导入-cqpdll-的-api-的问题">0x3 导入 CQP.dll 的 API 的问题&lt;/h2>
&lt;p>首先要知道&lt;code>CQP.dll&lt;/code>也会加载到&lt;code>CQP.exe&lt;/code>中，插件也会加载到&lt;code>CQP.exe&lt;/code>中，所以我们需要的就是使用 Windows API 获取到&lt;code>CQP.dll&lt;/code>的 Handle 再进行操作。&lt;/p>
&lt;p>大致代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">dll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetModuleHandleW&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;CQP.dll&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">CQ_addLog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">__stdcall&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;CQ_addLog&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过两个 API 调用即可获得需要的函数指针了。&lt;/p>
&lt;h2 id="0x4-嵌入-python-解释器">0x4 嵌入 Python 解释器&lt;/h2>
&lt;p>到了这一步已经非常简单了，&lt;code>pybind11&lt;/code>提供了高度封装的 C++ API。可以直接参考&lt;a class="link" href="https://pybind11.readthedocs.io/en/stable/advanced/embedding.html" target="_blank" rel="noopener"
>这个文档&lt;/a>。&lt;/p>
&lt;p>再给个简单的例子代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">py_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">py_func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Args&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">guard&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cqpy._callback&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">py_func&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">())(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">...).&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">error_already_set&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 记录 python 错误到日志
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 启用插件
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">CQ_EXPORT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cq_event_enable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">initialize_interpreter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 设置 AUTH_CODE，但是暂时还不能使用酷Q的API
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">_embed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;_embed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">_embed&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;AUTH_CODE&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AUTH_CODE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 初始化 Python 解释器环境，把数据目录加入 python path
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">raw_app_dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CQ_getAppDirectory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AUTH_CODE&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">app_dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">raw_app_dir&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;decode&amp;#34;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="s">&amp;#34;gb18030&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">sys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sys&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;append&amp;#34;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">app_dir&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 初始化完成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Python interpreter initialized.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">py_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;on_enable&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是，虽然在前面通过相关参数指定了静态链接，但实际&lt;code>Python3.7.dll&lt;/code>还是动态链接上去的。&lt;/p>
&lt;p>所以分发这样编译出来的 dll，依然需要用户先安装一个 &lt;code>Python3.7&lt;/code>，或者把 &lt;code>Python3.7.dll&lt;/code> 也一起分发出去。&lt;/p>
&lt;p>如果要完全的静态链接，可能要自行编译 Python 源代码。实在太麻烦，就懒得弄了。&lt;/p>
&lt;h2 id="0x5-踩的坑">0x5 踩的坑&lt;/h2>
&lt;p>通过 Python 调用 C++ 端提供的 API 时，特别注意参数一定要一一对应，特别是数据类型，一旦不匹配或传入数据有误（例如 None），可能造成 C++ 端内存异常，需要挂调试器才能发现原因，非常麻烦。&lt;/p>
&lt;p>&lt;code>sys&lt;/code>是&lt;code>builtin&lt;/code>的库，和&lt;code>os&lt;/code>不同，如果分发的用户没有安装 Python，只有一个 &lt;code>Python3.7.dll&lt;/code>的话，很多 Python 自带的库是用不了的。例如说&lt;code>json&lt;/code>、&lt;code>logging&lt;/code>、甚至&lt;code>os&lt;/code>。这个应该算是常识，但最好一开始就意识到：你的用户还是要装一个 Python 才行。&lt;/p>
&lt;p>关于 VirtualEnv 支持，建议直接参考&lt;a class="link" href="https://www.python.org/dev/peps/pep-0405/" target="_blank" rel="noopener"
>PEP 405&lt;/a>。不多赘述。比较简单的处理就是把&lt;code>VENV\Lib\site-packages&lt;/code>加入到&lt;code>sys.path&lt;/code>里。&lt;/p>
&lt;p>能不能把所有 Python 代码和 dll 都打包进 dll 里？大致原理就是丢进&lt;code>rc&lt;/code>里，但实际很麻烦，看&lt;code>py2exe&lt;/code>迄今为止还有一大堆坑就知道有多麻烦了。&lt;/p></description></item><item><title>Flask源码阅读笔记：WSGI</title><link>https://nnnewb.github.io/blog/p/flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0wsgi/</link><pubDate>Sun, 17 Mar 2019 00:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0wsgi/</guid><description>&lt;h2 id="0-intro">0. Intro&lt;/h2>
&lt;p>Flask 是一个基于 WSGI 协议的上层应用框架，据我了解应该是和 Tornado、Django 流行程度相近，当然 Django 老大哥始终占据了最多的份额。Flask 是一个轻量级的 Micro Framework，源码值得一读。&lt;/p>
&lt;h2 id="1-回顾-wsgi">1. 回顾 WSGI&lt;/h2>
&lt;p>开始之前，需要先回顾以下 WSGI 协议。&lt;/p>
&lt;p>WSGI 是一个针对 Python 的协议，故说到的 App、Server、函数、参数等描述都是指 Python 对应的概念或实现。&lt;/p>
&lt;h3 id="11-pep-0333-到-pep-3333">1.1 PEP-0333 到 PEP-3333&lt;/h3>
&lt;p>PEP-0333 是初版的 WSGI 协议提案，PEP-3333 是 1.0.1 版本的 WSGI 提案，差别不大，主要是对 py3 和 py2 不兼容的部分作了更新说明（&lt;code>str&lt;/code>和&lt;code>unicode&lt;/code>方面的问题，python2 的 str 在 python3 是 bytes，故 python3 编写的 wsgi app 必须返回 bytes）。&lt;/p>
&lt;p>WSGI 协议规范了 Python Web 应用的两个层级：服务器层（Server）和应用层（Application），两者通过 WSGI 协议进行通信。&lt;/p>
&lt;p>其中 Server 负责处理请求，将请求转换成符合 WSGI 要求的模式（&lt;code>environ&lt;/code>参数）。 Application 完成处理后再通知 Server 返回 Response（&lt;code>start_response&lt;/code>参数）。&lt;/p>
&lt;p>WSGI 规定 App 必须是一个可以被调用的对象，接受指定数量的参数，WSGI Server 不关注任何其他 App 实现细节。而 WSGI App 也应当遵守这一要求，对 &lt;code>start_response&lt;/code> 参数也遵守不依赖于任何 WSGI Server 的实现细节。&lt;/p>
&lt;p>WSGI App 的接口规范声明如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>start_response&lt;/code>的声明如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">start_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response_headers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exc_info&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-wsgi-server">1.2 WSGI Server&lt;/h3>
&lt;p>常见的 WSGI Server 有几个。Nginx 和 Apache 都有 WSGI 插件，除此之外还有 gunicorn、gevent.wsgi 等。&lt;/p>
&lt;p>举一个典型的例子来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># app.py&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">wsgiserver&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">start_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;200 OK&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;text-plain&amp;#39;&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">wsgiserver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">WSGIServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;5000&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 windows 下使用如下命令安装 wsgiserver&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pip install wsgiserver
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">python app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-入口点">2. 入口点&lt;/h2>
&lt;p>看完 WSGI ，接下来看 Flask 请求的入口点在哪儿。&lt;/p>
&lt;h3 id="21-wsgi-server-与-run">2.1 WSGI Server 与 &lt;code>.run&lt;/code>&lt;/h3>
&lt;p>&lt;code>Flask&lt;/code>这个类定义于&lt;code>flask.app&lt;/code>，看这里的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_PackageBoundObject&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先不去管 &lt;code>_PackageBoundObject&lt;/code> 是啥。我们知道 &lt;code>Flask&lt;/code>有一个&lt;code>run&lt;/code>方法可以快速启动服务，直接跳转到那儿。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 844 ~ 949&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">debug&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">load_dotenv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; 略 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1"># Change this into a no-op if the server is invoked from the&lt;/span>
&lt;span class="c1"># command line. Have a look at cli.py for more information.&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;FLASK_RUN_FROM_CLI&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;true&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">.debughelpers&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">explain_ignored_app_run&lt;/span>
&lt;span class="n">explain_ignored_app_run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">get_load_dotenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">cli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># if set, let env vars override previous values&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="s1">&amp;#39;FLASK_ENV&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_env&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_debug_flag&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="s1">&amp;#39;FLASK_DEBUG&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_debug_flag&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># debug passed to method overrides all other sources&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">debug&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">_host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>
&lt;span class="n">_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5000&lt;/span>
&lt;span class="n">server_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;SERVER_NAME&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sn_host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">server_name&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">sn_host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">server_name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">partition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">sn_host&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">_host&lt;/span>
&lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">_port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;use_reloader&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;use_debugger&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;threaded&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show_server_banner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># reset the first request information if the development server&lt;/span>
&lt;span class="c1"># reset normally. This makes it possible to restart the server&lt;/span>
&lt;span class="c1"># without reloader and that stuff from an interactive shell.&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_got_first_request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>首先进入眼帘的是关于 flask/cli 的内容。 点进 &lt;code>explain_ignored_app_run&lt;/code> 可以得知这是一个防止用户犯蠢写下 app.run() 后又用 &lt;code>flask run&lt;/code>在命令行启动留下的说明性输出。&lt;/p>
&lt;p>其次是 dotenv 相关的玩意儿，没用过 dotenv 推荐去了解下 python-dotenv 这个包。可以很方便地配置好开发环境下的环境变量。&lt;/p>
&lt;p>经过一堆类型转换和检查之后，终于看到了这几行。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 941 ~ 949&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># reset the first request information if the development server&lt;/span>
&lt;span class="c1"># reset normally. This makes it possible to restart the server&lt;/span>
&lt;span class="c1"># without reloader and that stuff from an interactive shell.&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_got_first_request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;code>run_simple&lt;/code>？这就是 WSGI Server 启动的地方了。&lt;/p>
&lt;p>&lt;a class="link" href="http://werkzeug.pocoo.org/docs/0.14/serving/" target="_blank" rel="noopener"
>看看 werkzeug 文档吧&lt;/a>，我这里摘一段。&lt;/p>
&lt;blockquote>
&lt;p>Serving WSGI Applications
There are many ways to serve a WSGI application. While you’re developing it, you usually don’t want to have a full-blown webserver like Apache up and running, but instead a simple standalone one. Because of that Werkzeug comes with a builtin development server.
The easiest way is creating a small start-myproject.py file that runs the application using the builtin server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">myproject&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">make_app&lt;/span>
&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8080&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">use_reloader&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>从函数签名可以看得出，&lt;code>run_simple&lt;/code>启动时，flask 将自己作为 wsgi app 参数传给了 werkzeug，不难猜测出，Flask 本身是一个可调用对象，即重写了 &lt;code>__call__&lt;/code> 方法。&lt;/p>
&lt;h3 id="22-__call__">2.2 &lt;code>__call__&lt;/code>&lt;/h3>
&lt;p>来到&lt;code>__call__&lt;/code>，发现它调用了&lt;code>self.wsgi_app&lt;/code>，本身没做任何事。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 2323 ~ 2327&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__call__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;The WSGI server calls the Flask application object as the
&lt;/span>&lt;span class="s2"> WSGI application. This calls :meth:`wsgi_app` which can be
&lt;/span>&lt;span class="s2"> wrapped to applying middleware.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wsgi_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>再来到 &lt;code>wsgi_app&lt;/code> 的定义。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">wsgi_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; 略 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request_context&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full_dispatch_request&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">handle_exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exc_info&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">should_ignore_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">auto_pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里，就是整个 Flask 作为 wsgi app，处理 request 的入口点了。&lt;/p>
&lt;p>从这儿我们能鸟瞰整个 flask 框架的核心逻辑。&lt;code>environ&lt;/code>被包装成 &lt;code>request&lt;/code>，压栈，&lt;code>full_dispatch_request&lt;/code>路由至视图，处理异常，一切结束后清栈。&lt;/p></description></item><item><title>Django 的各种关系字段详解</title><link>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 06 Mar 2019 21:11:35 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</guid><description>&lt;blockquote>
&lt;p>参考资料如下&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/models/fields/" target="_blank" rel="noopener"
>Django 文档 - Model field reference&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://graycarl.me/2014/03/24/sqlalchemy-cascade-delete.html" target="_blank" rel="noopener"
>SQLAlchemy 中的级联删除&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="1-foreignkey">1. ForeignKey&lt;/h2>
&lt;p>&lt;code>ForeignKey&lt;/code>用于多对一关系，直接对应到数据库外键的概念。使用&lt;code>ForeignKey&lt;/code>需要指定引用的目标表，会自动关联到目标表的主键（一般是&lt;code>id&lt;/code>字段）。&lt;/p>
&lt;p>例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对比之 sqlalchemy，一行&lt;code>parent=models.ForeignKey(...)&lt;/code>包含了 sqlalchemy 中的&lt;code>ForeignKey&lt;/code>和&lt;code>relationship&lt;/code>两部分内容。&lt;/p>
&lt;h3 id="11-参数on_delete">1.1 参数：on_delete&lt;/h3>
&lt;p>&lt;code>on_delete&lt;/code>意为当&lt;code>ForeignKey&lt;/code>引用的对象被删除时进行的操作。&lt;/p>
&lt;p>有几个可以考虑的选项。&lt;/p>
&lt;h4 id="111-modelscascade">1.1.1 models.CASCADE&lt;/h4>
&lt;p>&lt;code>CASCADE&lt;/code>意为级联，&lt;code>on_delete&lt;/code>设置为&lt;code>CASCADE&lt;/code>时意为执行级联删除。依据文档，Django 会模仿 SQL 的&lt;code>ON DELETE CASCADE&lt;/code>，对包含了&lt;code>ForeignKey&lt;/code>的对象执行删除。&lt;/p>
&lt;p>需要注意的是不会调用被级联删除对象上的&lt;code>model.delete()&lt;/code>，但是会发送&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.pre_delete" target="_blank" rel="noopener"
>&lt;code>pre_delete&lt;/code>&lt;/a>和&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.post_delete" target="_blank" rel="noopener"
>&lt;code>post_delete&lt;/code>&lt;/a>信号。&lt;/p>
&lt;h4 id="1112-modelsprotect">1.1.1.2 models.PROTECT&lt;/h4>
&lt;p>&lt;code>PROTECT&lt;/code>意为保护，&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>意味着要阻止删除操作发生。删除关联的对象时，&lt;code>ForeignKey&lt;/code>的&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>会触发&lt;code>ProtectedError&lt;/code>。&lt;/p>
&lt;h4 id="1113-modelsset_null">1.1.1.3 models.SET_NULL&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>是 nullable 的，则关联的对象删除时将外键设置为 null。&lt;/p>
&lt;h4 id="1114-modelsset_default">1.1.1.4 models.SET_DEFAULT&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>设置了&lt;code>DEFAULT&lt;/code>，则关联的对象删除时设置这个外键为&lt;code>DEFAULT&lt;/code>值。&lt;/p>
&lt;h4 id="1115-modelsset">1.1.1.5 models.SET&lt;/h4>
&lt;p>在关联的对象删除时，设置为一个指定的值。这个参数可以接受一个可以赋值给这个 ForeignKey 的对象或者一个可调用对象。&lt;/p>
&lt;p>官方例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.contrib.auth&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_user_model&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_sentinel_user&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">get_user_model&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_or_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;deleted&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MyModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">AUTH_USER_MODEL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_sentinel_user&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1116-modelsdo_nothing">1.1.1.6 models.DO_NOTHING&lt;/h4>
&lt;p>应该不用多说了吧。Django 不会做多余的事情，但是如果后端的数据库服务有强制完整性约束，除非你在数据库一端自己定义了&lt;code>ON DELETE&lt;/code>，否则会触发&lt;code>IntegrityError&lt;/code>。&lt;/p>
&lt;h3 id="12-参数limited_choice_to">1.2 参数：limited_choice_to&lt;/h3>
&lt;p>强制约束为 django.admin 或者 ModelForm 渲染时提供有限的可选项。&lt;/p>
&lt;p>接受参数为&lt;code>dict&lt;/code>或者&lt;code>Q&lt;/code>对象、返回&lt;code>Q&lt;/code>对象的可调用对象。&lt;/p>
&lt;p>官方例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">staff_member&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">User&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">limit_choices_to&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;is_staff&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q 对象是什么玩意儿这个我搞明白了再说&amp;hellip;&lt;/p>
&lt;h3 id="13-参数related_name">1.3 参数：related_name&lt;/h3>
&lt;p>设置反向关联的字段名，和&lt;code>sqlalchemy&lt;/code>的&lt;code>backref&lt;/code>类似。&lt;/p>
&lt;p>举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child_set&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 未设置 related_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 设置 related_name=children&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-参数related_query_name">1.4 参数：related_query_name&lt;/h3>
&lt;p>related_query_name 和 related_name 类似，设置反向引用查询时条件的前缀名。举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CharField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Child__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 未设置 related_query_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myboy__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 设置 related_query_name=myboy&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="15-参数to_field">1.5 参数：to_field&lt;/h3>
&lt;p>得到&lt;code>ForeignKey&lt;/code>关联的模型的字段，默认是主键，如果指定的不是主键那么必须有&lt;code>unique&lt;/code>约束才行。&lt;/p>
&lt;h3 id="16-参数db_constraint">1.6 参数：db_constraint&lt;/h3>
&lt;p>要不要创建数据库层级的约束，也就是通过后端数据库服务确保数据完整性不受破坏。如果设置为 False 那么访问不存在的对象时会触发 DoesNotExists 异常。&lt;/p>
&lt;h3 id="17-参数swappable">1.7 参数：swappable&lt;/h3>
&lt;p>用于处理“我有一个抽象类模型但是这个模型有一个外键”的情况，典型就是&lt;code>AUTH_USER_MODEL&lt;/code>。&lt;/p>
&lt;p>一般不用改到，这个属性控制了数据库迁移时如何处理这个外键关联的表，总之保持默认值就行了。&lt;/p>
&lt;p>这个功能支持了使用自定义的用户模型替代 &lt;code>django.auth.models.User&lt;/code> 之类的玩意儿。&lt;/p>
&lt;h2 id="2-onetoonefield">2. OneToOneField&lt;/h2>
&lt;p>&lt;code>OneToOneField&lt;/code> 基本就是一个加了&lt;code>unique&lt;/code>约束的&lt;code>ForeignKey&lt;/code>。使用上与 ForeignKey 略有不同。&lt;/p>
&lt;p>首先是访问 &lt;code>OneToOneField&lt;/code> 时，得到的不是 &lt;code>QuerySet&lt;/code> 而是一个对象实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 优生优育政策（&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OneToOneField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Child&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Child 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次是反向引用的名字是模型名字小写。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Parent 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果指定 &lt;code>related_name&lt;/code> 那就和 &lt;code>ForeignKey&lt;/code> 一个表现。&lt;/p>
&lt;h2 id="3-manytomanyfield">3. ManyToManyField&lt;/h2>
&lt;p>基本和&lt;code>ForeignKey&lt;/code>相同。&lt;/p>
&lt;h3 id="31-和-foreignkey-相同的参数">3.1 和 &lt;code>ForeignKey&lt;/code> 相同的参数&lt;/h3>
&lt;ul>
&lt;li>related_name&lt;/li>
&lt;li>related_query_name&lt;/li>
&lt;li>limited_choices_to&lt;/li>
&lt;li>db_constraint&lt;/li>
&lt;li>swappable&lt;/li>
&lt;/ul>
&lt;p>limited_choices_to 在指定自定义中间表的情况下无效。&lt;/p>
&lt;h3 id="32-参数symmetrical">3.2 参数：symmetrical&lt;/h3>
&lt;p>用于处理一个表自己对自己的多对多引用对称性。&lt;/p>
&lt;p>Django 的默认行为是，我是你的朋友，那么你就是我的朋友。&lt;/p>
&lt;p>设置了这个参数则强迫 Django 改变这个行为，允许“被朋友”。&lt;/p>
&lt;h3 id="33-参数through">3.3 参数：through&lt;/h3>
&lt;p>默认情况下，Django 会自行创建中间表，这个参数强制指定中间表。&lt;/p>
&lt;p>默认中间表模型里包含三个字段。&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>&amp;lt;containing_model&amp;gt;_id&lt;/li>
&lt;li>&amp;lt;other_model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;p>如果是自己和自己的多对多关系，则&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>from_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;li>to_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;h3 id="34-参数through_fields">3.4 参数：through_fields&lt;/h3>
&lt;p>当自行指定中间表，中间表又包含了多个外键时，指定关联的外键用。&lt;/p>
&lt;p>举例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ModelB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时在中间表中&lt;code>a&lt;/code>和&lt;code>c&lt;/code>都是对&lt;code>ModelA&lt;/code>的外键，产生了歧义，Django 无法自行决定用哪个外键来关联 AB 两个表。&lt;/p>
&lt;p>这时提供参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through_fields&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ManyToManyField&lt;/code> 关联两个表总是不对称的关系（指我把你当兄弟，你却想当我爸爸这样的关系。此时“我”对“你”的“兄弟”关系就是单向的。），这就形成了&lt;strong>来源&lt;/strong>和&lt;strong>目标&lt;/strong>的概念。&lt;/p>
&lt;p>&lt;code>through_fields&lt;/code> 的第一个元素总被认为是&lt;strong>来源&lt;/strong>字段，第二个元素是&lt;strong>目标&lt;/strong>字段。&lt;/p>
&lt;h3 id="35-参数db_table">3.5 参数：db_table&lt;/h3>
&lt;p>指定 Django 创建的中间表的名字，默认根据两个表表名和 &lt;code>ManyToManyField&lt;/code> 的名字决定。&lt;/p></description></item><item><title>轻量级 django 阅读笔记：最小的 django 应用</title><link>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 03 Mar 2019 12:26:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>找不到工作十分难受，在家看书，恰巧翻到这本《轻量级 Django》，看起来还蛮有意思的，做个读书笔记。&lt;/p>
&lt;h2 id="1-最小的-django-app">1. 最小的 Django App&lt;/h2>
&lt;p>Django 是个重量级框架，所谓最小指的是写最少的代码，理解一个 Django App 的最小组成元素。&lt;/p>
&lt;p>作为开场，先创建一个 &lt;code>app.py&lt;/code> 文件，作为整个 Django App 存储的地方。&lt;/p>
&lt;h3 id="11-djangoconfsettings">1.1 django.conf.settings&lt;/h3>
&lt;p>书中使用 &lt;code>django.core.management.execute_from_command_line&lt;/code> 作为启动 Django app 的手段。&lt;/p>
&lt;p>&lt;code>execute_from_command_line&lt;/code>，就是通过 &lt;code>django startproject&lt;/code>的方式创建的&lt;code>manage.py&lt;/code>内的主要内容，这种方式启动必须要配置&lt;code>settings&lt;/code>才行。&lt;/p>
&lt;p>在一个常规方式创建的 Django App 中，&lt;code>settings.py&lt;/code>是一个独立的 python 模块，&lt;code>Django&lt;/code>通过&lt;code>DJANGO_SETTINGS_MODULE&lt;/code>这个环境变量来确定配置信息存储位置。&lt;/p>
&lt;p>但是换一种方式，&lt;code>django.conf.settings.configure()&lt;/code>可以手动完成配置。&lt;/p>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一个 keyword argument 都和 &lt;code>settings.py&lt;/code>这个模块内的名字相同，去除所有不必要的元素之后，剩下的就是&lt;code>DEBUG&lt;/code>和&lt;code>ROOT_URLCONF&lt;/code>了。&lt;/p>
&lt;p>阅读源码可知&lt;code>configure&lt;/code>只能被调用一次。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 摘自 django.conf.settings.configure 源码&lt;/span>
&lt;span class="c1"># Django 版本号:&lt;/span>
&lt;span class="c1"># VERSION = (2, 1, 7, &amp;#39;final&amp;#39;, 0)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default_settings&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">global_settings&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> Called to manually configure the settings. The &amp;#39;default_settings&amp;#39;
&lt;/span>&lt;span class="s2"> parameter sets where to retrieve any unspecified values from (its
&lt;/span>&lt;span class="s2"> argument must support attribute access (__getattr__)).
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Settings already configured.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UserSettingsHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default_settings&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">setattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">holder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">holder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-urlpatterns">1.2 urlpatterns&lt;/h3>
&lt;p>都知道 &lt;code>Django&lt;/code> 的路由是需要手动写明的，和&lt;code>flask&lt;/code>等以装饰器的方式配置路由的风格迥异。哪种风格更好，就看用户自己见仁见智了。&lt;/p>
&lt;p>上文的&lt;code>settings.configure&lt;/code>中可以看到有一句&lt;code>ROOT_URLCONF=__name__&lt;/code>，意义明确，就是指定哪个 python 模块保存了路由配置信息，而这里指定的&lt;code>__name__&lt;/code>正是自己。&lt;/p>
&lt;p>所以我们的&lt;code>urlpatterns&lt;/code>也应当如配置所述，写到这个文件中。&lt;/p>
&lt;p>见代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="13-__main__">1.3 &lt;code>__main__&lt;/code>&lt;/h3>
&lt;p>最后将所有的代码整合起来，就形成了这样一个 python 程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>算上所有的 import 在内共 12 行，4 行空行，5 行 import，3 行代码，即构成了一个麻雀虽小五脏俱全的 Django hello world。&lt;/p>
&lt;p>在命令行执行&lt;code>python app.py runserver&lt;/code>即可看到以下输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">PS&lt;/span> &lt;span class="n">D&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">GitHub&lt;/span>\&lt;span class="n">minimum&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">django&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">python&lt;/span> &lt;span class="o">.&lt;/span>\&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">runserver&lt;/span>
&lt;span class="n">Performing&lt;/span> &lt;span class="n">system&lt;/span> &lt;span class="n">checks&lt;/span>&lt;span class="o">...&lt;/span>
&lt;span class="n">System&lt;/span> &lt;span class="n">check&lt;/span> &lt;span class="n">identified&lt;/span> &lt;span class="n">no&lt;/span> &lt;span class="n">issues&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">silenced&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="n">March&lt;/span> &lt;span class="mi">03&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2019&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="n">Django&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="mf">2.1.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">using&lt;/span> &lt;span class="n">settings&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="n">Starting&lt;/span> &lt;span class="n">development&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8000&lt;/span>&lt;span class="o">/&lt;/span>
&lt;span class="n">Quit&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">CTRL&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">BREAK&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-wsgi">1.4 wsgi&lt;/h3>
&lt;p>完成了最小的 django app，依然有一个问题。&lt;/p>
&lt;p>如何部署这个 django app？&lt;/p>
&lt;p>固然，使用 runserver 的方式执行，再 nginx 反向代理是一个不错的主意，但 uwsgi 之类的部署方式依然有其独到的优势。&lt;/p>
&lt;p>使用 uwsgi 或者 gunicorn 之类的基于 wsgi 协议的服务器就必须取得一个 wsgi app 实例才行。&lt;/p>
&lt;p>Django 提供了函数 &lt;code>django.core.wsgi.get_wsgi_application&lt;/code> 用于取得 wsgi app。&lt;/p>
&lt;p>手头没 linux 机器，懒得演示 output 了。就这样吧。&lt;/p>
&lt;p>最终代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.wsgi&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="n">application&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;code>gunicorn app.py --log-file=-&lt;/code>启动。&lt;/p></description></item><item><title>sqlalchemy 各种表关系</title><link>https://nnnewb.github.io/blog/p/sqlalchemy-%E5%90%84%E7%A7%8D%E8%A1%A8%E5%85%B3%E7%B3%BB/</link><pubDate>Fri, 01 Mar 2019 15:52:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/sqlalchemy-%E5%90%84%E7%A7%8D%E8%A1%A8%E5%85%B3%E7%B3%BB/</guid><description>&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;h3 id="foreignkey">ForeignKey&lt;/h3>
&lt;p>&lt;code>db.ForeginKey&lt;/code>的参数是&lt;code>&amp;lt;表名&amp;gt;.&amp;lt;键名&amp;gt;&lt;/code>，而不是&lt;code>&amp;lt;类名&amp;gt;.&amp;lt;字段名&amp;gt;&lt;/code>，务必注意这个区别。&lt;/p>
&lt;h3 id="back_populates-和-backref-在多对多关系中使用的区别">back_populates 和 backref 在多对多关系中使用的区别&lt;/h3>
&lt;p>&lt;code>back_populates&lt;/code>是更推荐的写法。&lt;/p>
&lt;p>多对多关系中使用&lt;code>backref&lt;/code>并指定了&lt;code>secondary&lt;/code>的话，另一张表关联的&lt;code>relationship&lt;/code>字段会使用相同的&lt;code>secondary&lt;/code>。&lt;/p>
&lt;p>&lt;code>back_populates&lt;/code>则需要在两张表的&lt;code>relationship&lt;/code>中都写上相同的&lt;code>secondary&lt;/code>中间表。&lt;/p>
&lt;h3 id="可调用的-secondary">可调用的 secondary&lt;/h3>
&lt;p>&lt;code>secondary&lt;/code>参数可以是一个可调用对象，做一些 trick 的时候应该有用。姑且记下。&lt;/p>
&lt;h2 id="一对多关系">一对多关系&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;child&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parent_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;parent.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;child&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>parent&lt;/code>包含多个&lt;code>child&lt;/code>的一对多关系。&lt;code>child&lt;/code>里写&lt;code>ForeignKey&lt;/code>为&lt;code>parent&lt;/code>的主键，&lt;code>child&lt;/code>里写&lt;code>relationship&lt;/code>，&lt;code>parent&lt;/code>里同样写&lt;code>relationship&lt;/code>，&lt;code>back_populates&lt;/code>填充上，完事。&lt;/p>
&lt;h2 id="一对一关系">一对一关系&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uselist&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;child&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parent_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;parent.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;child&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一对一关系中&lt;code>parent&lt;/code>需要在&lt;code>relationship&lt;/code>里加入参数&lt;code>uselist&lt;/code>，其他相同，完事儿。&lt;/p>
&lt;h2 id="多对多关系">多对多关系&lt;/h2>
&lt;p>多对多关系需要一个中间表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">association_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;association&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;left_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;left.id&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;right_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;right.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;left&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">secondary&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">association_table&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parents&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;right&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parents&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">secondary&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">association_table&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;children&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>中间表里写上&lt;code>parent&lt;/code>和&lt;code>child&lt;/code>的主键作为&lt;code>foreignkey&lt;/code>，&lt;code>parent&lt;/code>和&lt;code>child&lt;/code>里的&lt;code>relationship&lt;/code>加入参数&lt;code>secondary&lt;/code>，指定为中间表。&lt;/p></description></item><item><title>利用 descriptor 实现自己的 property</title><link>https://nnnewb.github.io/blog/p/%E5%88%A9%E7%94%A8-descriptor-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84-property/</link><pubDate>Thu, 21 Feb 2019 17:53:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%88%A9%E7%94%A8-descriptor-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84-property/</guid><description>&lt;h2 id="1概念简介">1.概念简介&lt;/h2>
&lt;h3 id="11-property">1.1 property&lt;/h3>
&lt;p>在 python 代码中，property 是非常常见的一个内置函数。property 可以为一个 python 类的 attribute 设置 getter/setter，可以类比之 C# 的 &lt;a class="link" href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/classes#properties" target="_blank" rel="noopener"
>properties&lt;/a>。&lt;/p>
&lt;p>见下面的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="nd">@property&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span>
&lt;span class="nd">@hello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># 1&lt;/span>
&lt;span class="n">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">obj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># hello world&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-descriptor">1.2 descriptor&lt;/h3>
&lt;p>python 中的 descriptor 指的是实现了&lt;code>__get__&lt;/code>、&lt;code>__set__&lt;/code>、&lt;code>__delete__&lt;/code>三个方法之一的类。&lt;/p>
&lt;p>当一个 descriptor 类的实例作为其他类的成员时，通过&lt;code>obj.attr&lt;/code>语法访问该实例将会调用 descriptor 实例的&lt;code>__get__&lt;/code>方法。同理，&lt;code>__set__&lt;/code>和&lt;code>__delete__&lt;/code>也是相似的逻辑。&lt;/p>
&lt;p>先看个例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">DescriptorClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">owner&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;some value&amp;#39;&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">some_attr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DescriptorClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SomeClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">some_attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># &amp;lt;__main__.DescriptorClass object at 0x0000027AAE777160&amp;gt;&lt;/span>
&lt;span class="c1"># &amp;lt;__main__.SomeClass object at 0x0000027AAE777198&amp;gt;&lt;/span>
&lt;span class="c1"># &amp;lt;class &amp;#39;__main__.SomeClass&amp;#39;&amp;gt;&lt;/span>
&lt;span class="c1"># some value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-实现">2. 实现&lt;/h2>
&lt;p>property 的逻辑在于，&lt;strong>当实例访问这个属性时，调用方法&lt;/strong>。descriptor 刚好处在那个正确的位置上。&lt;/p>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">PropertyDescriptor&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fn&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__set__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">setter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">func&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">my_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">PropertyDescriptor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nd">@my_property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">simple_attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;a simple property&amp;#39;&lt;/span>
&lt;span class="nd">@simple_attr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">simple_attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;simple attr setter&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">simple_attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">simple_attr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;something&amp;#39;&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># a simple property&lt;/span>
&lt;span class="c1"># simple attr setter&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-总结">3. 总结&lt;/h2>
&lt;blockquote>
&lt;p>个人看法，谨慎参考&lt;/p>
&lt;/blockquote>
&lt;p>descriptor 避免了重复编写&lt;code>getter&lt;/code>和&lt;code>setter&lt;/code>方法，非常直觉的一种用途就是类似于&lt;code>SQLAlchemy&lt;/code>这样的 ORM 框架的的字段映射。不需要为每一个特定类型的字段在基类或元类里编写大量样板代码。&lt;/p>
&lt;p>但这种设计是侵入式的（需要修改目标类的代码），而且非常不直观。在合适的地方使用相信可以有其发光发热的空间。&lt;/p>
&lt;p>对可读性来讲，结合元类，这俩被一起滥用的话对维护者而言完全是地狱吧&amp;hellip;&lt;/p></description></item><item><title>python3元类深入解读</title><link>https://nnnewb.github.io/blog/p/python3%E5%85%83%E7%B1%BB%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BB/</link><pubDate>Thu, 20 Dec 2018 19:46:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/python3%E5%85%83%E7%B1%BB%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BB/</guid><description>&lt;h2 id="0-intro">0. intro&lt;/h2>
&lt;p>元类是 python 里被说烂了的一个东西，然而日常用到的地方实在不多，每次想到都得查一下谷歌，想想干脆在博客留个笔记好了。&lt;/p>
&lt;p>元类的主要用途是定制&lt;strong>类&lt;/strong>的产生过程，以便于根据类声明包含的信息来创建出不同的类。&lt;/p>
&lt;h2 id="1-type">1. type&lt;/h2>
&lt;p>提到元类不得不说一下 python 的类型系统。&lt;/p>
&lt;p>python 的 class 也被视作一个对象，定制一个 class 的构造过程其实就和平时在 class 定义里写&lt;code>__init__&lt;/code>没啥区别。&lt;/p>
&lt;p>python3 里类的类型是&lt;code>type&lt;/code>，&lt;code>type&lt;/code>又继承自&lt;code>object&lt;/code>，&lt;code>object&lt;/code>的父类是自己，构成一个奇怪的闭环。其中，&lt;code>type&lt;/code>本身是一个特殊的类，他是自己的实例。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">graph TB;
type --&amp;gt; |inherite|object;
type --&amp;gt; |instance-of| type;
object --&amp;gt; |instance-of|type;
other-cls --&amp;gt; |instance-of| type;
other-cls --&amp;gt; |inherite| object;
other-cls-instance --&amp;gt; |instance-of|other-cls;
&lt;/code>&lt;/pre>&lt;p>&lt;code>type&lt;/code>有两种调用方式，一种是最常用的接受一个对象参数，返回该对象的类型，另一种是不怎么常用的，直接创建一个新的类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># usage with one argument&lt;/span>
&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 返回对象的类型，这里返回的是 `type`&lt;/span>
&lt;span class="c1"># usage with three arguments&lt;/span>
&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 返回新创建的类型&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-meta-class">2. meta class&lt;/h2>
&lt;p>元类语法如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basecls1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">basecls2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaClass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般的元类可以是一个真正的&lt;code>class&lt;/code>或者一个函数。&lt;/p>
&lt;p>以函数为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">meta_f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">meta_f&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以类为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaC&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>元类可以接受参数，参数必须是命名的，传递参数的方式是写在类声明的继承列表里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">meta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optional_arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">named_arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">option&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">optional_arg&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">meta&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># output: hi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>位置参数都会被当成继承列表，作为&lt;code>bases&lt;/code>参数(list)的一部分传入元类。&lt;/p>
&lt;h2 id="3-元类继承规则">3. 元类继承规则&lt;/h2>
&lt;p>有了元类那么就有了相应继承规则，显而易见。元类用于构造一个类，两个父类分别有一个不同的元类显然会造成冲突：这个子类用哪个元类构造？&lt;/p>
&lt;p>首先看元类的在创建类的过程中的位置，摘自 python 文档&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html#metaclasses" target="_blank" rel="noopener"
>3.3.3.1. Metaclasses&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>MRO entries are resolved&lt;/li>
&lt;li>the appropriate metaclass is determined&lt;/li>
&lt;li>the class namespace is prepared&lt;/li>
&lt;li>the class body is executed&lt;/li>
&lt;li>the class object is created&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>一旦处理完继承链（mro, method resolve order）之后，就会决定采用哪个 metaclass 作为构造这个类的元类。&lt;/p>
&lt;p>在 python 文档的&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html#determining-the-appropriate-metaclass" target="_blank" rel="noopener"
>3.3.3.3 determining the appropriate metaclass&lt;/a>中描述了如何确定合适的元类，摘录如下。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>if no bases and no explicit metaclass are given, then type() is used&lt;/li>
&lt;li>if an explicit metaclass is given and it is not an instance of type(), then it is used directly as the metaclass&lt;/li>
&lt;li>if an instance of type() is given as the explicit metaclass, or bases are defined, then the most derived metaclass is used&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>翻译如下&lt;/p>
&lt;ul>
&lt;li>如果没有基类也没有指定 metaclass，那么&lt;code>type()&lt;/code>将作为元类使用。&lt;/li>
&lt;li>如果指定了元类，并且该元类不是 type 的实例，那么直接使用这个元类。&lt;/li>
&lt;li>如果元类是一个 type 的实例，或者存在基类，那么使用最衍生的元类。&lt;/li>
&lt;/ul>
&lt;p>有一个比较难理解的点是&lt;/p>
&lt;blockquote>
&lt;p>most derived metaclass&lt;/p>
&lt;/blockquote>
&lt;p>也就是所谓的&lt;strong>最衍生的元类&lt;/strong>。惯例，先放文档解释&lt;/p>
&lt;blockquote>
&lt;p>The most derived metaclass is selected from the explicitly specified metaclass (if any) and the metaclasses (i.e. type(cls)) of all specified base classes. The most derived metaclass is one which is a subtype of all of these candidate metaclasses. If none of the candidate metaclasses meets that criterion, then the class definition will fail with TypeError.&lt;/p>
&lt;/blockquote>
&lt;p>简单翻译如下&lt;/p>
&lt;blockquote>
&lt;p>最衍生的元类会从类声明中明确提供的元类，还有所有明确继承的基类的元类中选择。最衍生的元类是以上所有候选元类的子类型，如果没有类型符合这一条件，则抛出&lt;code>TypeError&lt;/code>异常。&lt;/p>
&lt;/blockquote>
&lt;p>重点在于，&lt;strong>最衍生的元类必须是&lt;/strong>，所有继承的基类的元类和指定元类的&lt;strong>子类型&lt;/strong>。&lt;/p>
&lt;p>在这里提醒一下，&lt;code>issubclass(cls, cls)&lt;/code>的结果是&lt;code>True&lt;/code>。换句话说，必须有一个类是所有元类的子类，或者所有基类有相同的元类。&lt;/p>
&lt;p>代码举例如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MetaA &amp;lt;- &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MetaB &amp;lt;- &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaB&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="c1"># 未指定元类，基类元类分别是type和type的子类，则选择继承链底部的那个类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BaseB&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok,元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，元类和基类元类相同的情况下，元类就是那个元类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，元类并不处于继承链底端的情况下，元类选择继承链底端的类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，但元类和父类无父子类关系&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">E&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># TypeError&lt;/span>
&lt;span class="c1"># 不指定元类，基类具有不同的元类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseA&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BaseC&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># TypeError&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">MetaA &amp;lt;- A
MetaA &amp;lt;- C
MetaA &amp;lt;- D
In [71]: class E(BaseC, metaclass=MetaA): ... # TypeError
---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
&amp;lt;ipython-input-71-9129a36c52b2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 class E(BaseC, metaclass=MetaA): ... # TypeError
TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
In [72]: class F(BaseA,BaseB,BaseC): ... # TypeError
---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
&amp;lt;ipython-input-72-1c510edd69d1&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 class F(BaseA,BaseB,BaseC): ... # TypeError
TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但元类是函数的情况下会有比较特殊的表现，注意规则二。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>如果指定了元类，并且该元类不是 type 的实例，那么直接使用这个元类。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果函数形式的元类作为父类的元类时不会列入选择，除非指定当前类的元类为函数，才会调用函数形式的元类，而且是无条件选择这个函数形式的元类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">MetaA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;MetaA &amp;lt;- &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MetaB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，无条件选择元类 MetaA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python 实现 redis 分布式锁</title><link>https://nnnewb.github.io/blog/p/python-%E5%AE%9E%E7%8E%B0-redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link><pubDate>Mon, 17 Dec 2018 14:57:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/python-%E5%AE%9E%E7%8E%B0-redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>分布式不是啥黑魔法，究其理念无非是用多台服务器处理更多的请求。提高每秒处理的数据量，并发就不可避免了。&lt;/p>
&lt;p>在单机并发的情况下，我们可以用 mutex，可以用 os 的文件锁，全局锁，多台服务器的并发就需要另一个持有并保护锁的角色了。&lt;/p>
&lt;p>概述如何使用 redis 实现一个分布式锁。&lt;/p>
&lt;h2 id="为何是-lua">为何是 Lua&lt;/h2>
&lt;p>redis 保证了 lua 解释器执行脚本的事务性，即执行结果要么不可见，要么已完成。&lt;/p>
&lt;p>参考&lt;a class="link" href="http://redisdoc.com/script/eval.html" target="_blank" rel="noopener"
>这篇文档&lt;/a>。&lt;/p>
&lt;h2 id="简单锁">简单锁&lt;/h2>
&lt;p>简单锁指的是简单互斥锁，一旦锁定，则其他锁定请求都必须等待。&lt;/p>
&lt;h3 id="加锁">加锁&lt;/h3>
&lt;p>直觉的想法是通过 redis 的键来保持锁，故准备一个用于锁定互斥的名字（比如说 mutex-1）然后指定为键。&lt;/p>
&lt;p>直接使用 set 是显然不正确的，如果临界区内程序崩溃或意外断网将导致死锁，所以 setnx 和 expire 是必选项。&lt;/p>
&lt;p>加锁需要判断锁的键为空，才能加锁，这两步必须保证原子性，要么都执行，要么一个都不执行。幸好 redis 提供了这方面保证，只要使用 lua 脚本的话。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 加锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;setnx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;expire&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的 lua 代码用 python 再封装一层，就是这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 加锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == nil then
&lt;/span>&lt;span class="s1"> if redis.call(&amp;#34;setnx&amp;#34;, KEYS[1], ARGV[1]) ~= nil then
&lt;/span>&lt;span class="s1"> redis.call(&amp;#34;expire&amp;#34;, KEYS[1], ARGV[2])
&lt;/span>&lt;span class="s1"> return 1
&lt;/span>&lt;span class="s1"> else
&lt;/span>&lt;span class="s1"> return
&lt;/span>&lt;span class="s1"> end
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lock&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解锁">解锁&lt;/h3>
&lt;p>解锁代码同样是通过 lua 实现。&lt;/p>
&lt;p>下面是&lt;strong>错误实现例子&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误之处在于会解除非自己加的锁。如果临界区内的工作时间超过预期时间，那么就会造成误解锁的问题。&lt;/p>
&lt;p>下面是&lt;strong>正确例子&lt;/strong>。&lt;/p>
&lt;p>为了标记锁持有者，需要修改加锁代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 加锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == nil then
&lt;/span>&lt;span class="s1"> if redis.call(&amp;#34;setnx&amp;#34;, KEYS[1], ARGV[1]) ~= nil then
&lt;/span>&lt;span class="s1"> redis.call(&amp;#34;expire&amp;#34;, KEYS[1], ARGV[2])
&lt;/span>&lt;span class="s1"> return 1
&lt;/span>&lt;span class="s1"> else
&lt;/span>&lt;span class="s1"> return
&lt;/span>&lt;span class="s1"> end
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解锁的 lua 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解锁的 python 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 解锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == ARGV[1] then
&lt;/span>&lt;span class="s1"> return redis.call(&amp;#34;del&amp;#34;, KEYS[1])
&lt;/span>&lt;span class="s1">else
&lt;/span>&lt;span class="s1"> return 0
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="超时和一致性">超时和一致性&lt;/h3>
&lt;p>关于超时有这样一个问题在。如果超时时间过长，那么超时的设置意义就不大，服务宕机 1 小时和宕机 24 小时都是事故。如果超时时间过短，那么超时就可能造成一致性上的损害。&lt;/p>
&lt;p>举例来说，付款处理花了 2.1s，但是锁超时 2.0s。这 0.1s 的数据竞争时间里，更新&lt;code>update balance where id = xxx&lt;/code>和下一个更新 blance 的请求就指不定谁先执行了。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">sequenceDiagram
participant 付款
participant 汇款
participant 锁
付款-&amp;gt;&amp;gt;锁:请求锁
锁--&amp;gt;&amp;gt;付款:已锁定
汇款-&amp;gt;&amp;gt;锁:请求锁
note over 付款,锁: 锁在2秒后超时，付款程序在2.1秒后完成
note over 锁: 2.0s到了，超时解锁
锁--&amp;gt;&amp;gt;汇款:已锁定
note over 付款,汇款:数据竞争
note over 付款:完成。
&lt;/code>&lt;/pre>&lt;p>所以，设置了超时，那么必须保证一致性，整个处理要么全部完成，要么超时全部未完成，对编程能力提出了挑战。&lt;/p>
&lt;p>后续再想想能不能写篇博文。&lt;/p>
&lt;h2 id="读写锁">读写锁&lt;/h2>
&lt;p>读写锁的实现和简单锁别无二致，特征是多个读，一个写。在大量读取，少量写入的情况下，读写锁可以有效提高效率。&lt;/p>
&lt;h3 id="加读锁">加读锁&lt;/h3>
&lt;p>读锁实现和简单锁差别不大，在简单锁基础上稍作修改即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 读锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hset&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="加写锁">加写锁&lt;/h3>
&lt;p>写锁实现差别也不大，这里使用 hash table 解决标记持有人的问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 写锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hlen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;setnx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解读锁">解读锁&lt;/h3>
&lt;p>读锁的解除只需要删除 hash table 里的自己就行了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解读锁&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hdel&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解写锁">解写锁&lt;/h3>
&lt;p>写锁解除如解除简单锁一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>unity3d 键盘控制移动</title><link>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%A7%BB%E5%8A%A8/</link><pubDate>Mon, 17 Dec 2018 02:29:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%A7%BB%E5%8A%A8/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="k">void&lt;/span> &lt;span class="n">HandleKeyboardAction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">horizontal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Horizontal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">vertical&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Vertical&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">motion&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rotation&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Vector3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">horizontal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vertical&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">mag&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">magnitude&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">normalized&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">mag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>极其简单的做法，获取到键盘移动的轴之后，用摄像机的旋转四元数乘一下，即可得到旋转后的向量，加上去就 ok 了。&lt;/p>
&lt;p>需要注意的是这里用摄像机的四元数旋转要求摄像机必须只在 x 和 y 两个轴旋转。&lt;/p>
&lt;p>先备份一下三维向量的数量值，这是为了能保证摄像机向上和向下看时，平面 x 和 z 轴上的分量不会过小，保持一致的移动速度。&lt;/p>
&lt;p>用四元数旋转完成后，去除 y 轴的值，使目标只在当前平面上移动。再用算出来的向量的单位向量乘上之前备份的数量值，得到平面上移动的偏移向量。&lt;/p>
&lt;p>最后，算出新的位置坐标。&lt;/p></description></item><item><title>go语言实战之解密ons脚本</title><link>https://nnnewb.github.io/blog/p/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B9%8B%E8%A7%A3%E5%AF%86ons%E8%84%9A%E6%9C%AC/</link><pubDate>Sun, 16 Dec 2018 23:44:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B9%8B%E8%A7%A3%E5%AF%86ons%E8%84%9A%E6%9C%AC/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>ons 是一个开放源代码的视觉小说引擎，以简单实用出名。本博用 golang 来解密 ons 引擎的&lt;code>.dat&lt;/code>和&lt;code>.nt2&lt;/code>脚本，主要实践目标是异步解密输出。&lt;/p>
&lt;h2 id="算法">算法&lt;/h2>
&lt;p>&lt;code>.dat&lt;/code>的加密非常简单，一次异或。密码是&lt;code>0x84&lt;/code>。&lt;/p>
&lt;p>可以用 go 非常简单粗暴地写出以下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^=&lt;/span> &lt;span class="mh">0x84&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.nt2&lt;/code>的加密同样简单，一次异或，密码是&lt;code>0x85 &amp;amp; 0x97&lt;/code>。&lt;/p>
&lt;p>可以用 go 非常粗暴地写出以下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x85&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x97&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异步读文件">异步读文件&lt;/h2>
&lt;p>go 方式比较多，&lt;code>ioutil&lt;/code>或者&lt;code>bufio&lt;/code>或者&lt;code>os&lt;/code>都有文件模块。这里采用&lt;code>bufio&lt;/code>套&lt;code>os.Open&lt;/code>的方式读文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 只读方式打开文件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_RDONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 包装一层 bufio
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 准备一个保存读取结果的buf
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1024000&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 循环读
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[:])&lt;/span>
&lt;span class="c1">// 没有内容了就退出循环
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 把读到的结果用 channel 传递给下一道处理工序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异步写文件">异步写文件&lt;/h2>
&lt;p>写文件的方式和读文件的方式差不多，由那几个包提供。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 只读方式打开文件，已存在文件则清空内容，未存在文件则创建，文件权限 rw-r--r--
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_WRONLY&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_TRUNC&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_CREATE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">writer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewWriter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 从上一道工序取得解密后的数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">outChannel&lt;/span>
&lt;span class="c1">// 如果所有数据全部取得，则结束写入
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 写入
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">done&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异步解密">异步解密&lt;/h2>
&lt;p>解密过程就像是水管上的过滤器，水流进来处理好，流出去。内容乏善可陈，就直接丢代码好了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^=&lt;/span> &lt;span class="mh">0x84&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x85&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x97&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="调度">调度&lt;/h2>
&lt;p>严肃地说，我认为这种调度模式是显然不对的。正确的调度方式应该是这样。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">graph TB;
A[cli] --&amp;gt; |启动|B[read worker];
A --&amp;gt; |启动| C[write worker];
A --&amp;gt; |启动| D[decode worker];
A --&amp;gt; |启动| E[scheduler];
E --&amp;gt; |发出读指令| B;
B --&amp;gt; |发送来源标识符+内容| D;
D --&amp;gt; |发送来源标识符+处理后的内容| C;
&lt;/code>&lt;/pre>&lt;p>对于有多个 worker 的情况，也需要调度器协调才行，不过直觉上来说硬盘读写性能会是先一步的瓶颈。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.dat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.nt2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input file should be .dat or .nt2 encrypted script!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">done&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;path&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.dat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.nt2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input file should be .dat or .nt2 encrypted script!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">done&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_RDONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">reader&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1024000&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[:])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_WRONLY&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_TRUNC&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_CREATE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">writer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewWriter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">outChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">done&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^=&lt;/span> &lt;span class="mh">0x84&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x85&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x97&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>关于笔记的考虑</title><link>https://nnnewb.github.io/blog/p/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0%E7%9A%84%E8%80%83%E8%99%91/</link><pubDate>Sun, 16 Dec 2018 23:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0%E7%9A%84%E8%80%83%E8%99%91/</guid><description>&lt;p>使用了两年多的 One Note，但是 One Note 对代码的支持实在是难受，于是数次折腾之后最终还是选择再找个更合适的笔记工具。&lt;/p>
&lt;p>在知乎上搜了一圈之后，大多数笔记工具收费且不论，最严重的问题反而是对笔记能否生存下去的怀疑。&lt;/p>
&lt;p>大多笔记工具用私有格式来处理富文本（比如可用样式排版有限的 HTML），或者其他奇奇怪怪的格式。且不说这些东西导出来怎么办&amp;hellip;..把笔记多地备份本身就够难受了。&lt;/p>
&lt;p>再者，笔记这玩意儿记了自己都不一定看。偶尔想起来翻一下，还要怀疑自己当初写的什么狗屁玩意儿。&lt;/p>
&lt;p>所以经过这么多考虑&amp;hellip;&amp;hellip;还是直接搭个博客最自由且不会太担心保存的问题了。&lt;/p>
&lt;p>比较别的笔记工具可能密码忘了或长时间不登陆，git 天天用（这里应有自嘲），根本离不开。&lt;/p>
&lt;p>所以想了想，还是转移笔记到博客好了。写笔记可能很随便，写博客总要考据两下的。再说，还可以自定义页面效果，对我这种喜欢折腾的人还是蛮对胃口的。&lt;/p>
&lt;p>总而言之，先挂上去了，就这样。&lt;/p></description></item><item><title>AudioContext 技术和音乐可视化（2）</title><link>https://nnnewb.github.io/blog/p/audiocontext-%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%962/</link><pubDate>Thu, 08 Nov 2018 21:41:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/audiocontext-%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%962/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>转载请注明来源，可以在&lt;a class="link" href="https://th-zxj.club" target="_blank" rel="noopener"
>测试博客&lt;/a>查看完成效果。&lt;/p>
&lt;p>本篇讲述如何从频域数据绘制动态的星空。&lt;/p>
&lt;h2 id="一使用-canvas-绘图">一、使用 Canvas 绘图&lt;/h2>
&lt;h3 id="11-位置和大小">1.1 位置和大小&lt;/h3>
&lt;p>绘制背景的第一要务便是把 canvas 元素放置在背景这一层次上，避免遮盖其他元素。&lt;/p>
&lt;p>对我而言，个人习惯用 css 来设置大小和位置，用 html 来确定渲染顺序而不是 z-index。&lt;/p>
&lt;p>下面是 html 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">canvas&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">canvas&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- other elements --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 css 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">#&lt;/span>&lt;span class="nn">background-canvas&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">fixed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">vw&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">vh&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fixed&lt;/code>确保拖动页面不会令背景也跟随移动。&lt;/p>
&lt;p>其余部分我想应该没什么有疑问的地方。&lt;/p>
&lt;h3 id="12-canvascontext2d">1.2 CanvasContext2D&lt;/h3>
&lt;p>对于 canvas 元素的绘图操作我想很多人应该接触过。&lt;/p>
&lt;p>以绘制圆形为例，使用如下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 参数分别为坐标x,y,半径，起始弧度，结束弧度
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就画完了一个实心圆。&lt;/p>
&lt;p>需要注意，canvas 的大小通过 css 设置可能导致画面被拉伸变形模糊，所以最好的办法是绘制前确定一下 canvas 的大小。&lt;/p>
&lt;p>此外需要注意的是，重置大小会导致画面清空，用这种方式可以替代&lt;code>fillRect&lt;/code>或者&lt;code>clearRect&lt;/code>，有的浏览器平台更快但也有浏览器更慢。可以查阅这篇&lt;a class="link" href="https://www.html5rocks.com/en/tutorials/canvas/performance/#toc-pre-render?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener"
>博文&lt;/a>来参考如何提升 canvas 绘图性能。&lt;/p>
&lt;p>&lt;code>fillStyle&lt;/code>可以使用 css 的颜色代码，也就是说我们可以写下诸如&lt;code>rgba&lt;/code>、&lt;code>hsla&lt;/code>之类的颜色，这给我们编写代码提供了很多方便。&lt;/p>
&lt;h3 id="13-绘制星星">1.3 绘制星星&lt;/h3>
&lt;p>星空是由星星组成的这显然不用多说了，先来看如何绘制单个星星。&lt;/p>
&lt;p>星星的绘制方法很多，贴图虽然便利但显然不够灵活，我们的星星是要随节奏改变亮度和大小的，利用贴图的话就只能在&lt;code>alpha&lt;/code>值和&lt;code>drawImage&lt;/code>缩放来处理了。虽然是一种不错的办法，不过这里我使用了&lt;code>RadialGradient&lt;/code>来控制绘图。&lt;/p>
&lt;blockquote>
&lt;p>PS：&lt;code>RadialGradient&lt;/code> 的性能比较差，大量使用会导致明显的性能下降，这是一个显著降低绘制效率的地方。&lt;/p>
&lt;/blockquote>
&lt;p>那么，我们先画一个圆（加点细节预警）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 参数分别为起始坐标x,y,半径，结束坐标x,y,半径
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">gradient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRadialGradient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.025&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 中心的亮白色
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rgba(255, 255, 255, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心光点和四周的分界线
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 66%, 75%, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心亮点往四周发散的蓝光
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0.4)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 蓝光边缘
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 淡化直至透明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/KrzwPV" target="_blank" rel="noopener"
>codepen&lt;/a>查看效果或直接编辑你的星（圈）星（圈）。&lt;/p>
&lt;p>看上去还不错？&lt;/p>
&lt;p>让我们用代码控制它的亮度和大小。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 通过energy控制亮度和大小
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">draw&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 定时绘制，requestAnimationFrame比setTimeout更好。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 见过呼吸灯吧？我们让它变亮~再变暗~反复循环~
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 计算出当前的大小
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">radius&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 清空屏幕
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillRect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 参数分别为起始坐标x,y,半径，结束坐标x,y,半径
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">gradient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRadialGradient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.025&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 中心的亮白色
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rgba(255, 255, 255, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心光点和四周的分界线
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 66%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">75&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.9)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心亮点往四周发散的蓝光
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.75&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 64%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">33&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.4)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 蓝光边缘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 淡化直至透明
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">draw&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/LXNEaa" target="_blank" rel="noopener"
>codepen&lt;/a>查看并编辑效果。&lt;/p>
&lt;h3 id="14-封装星星">1.4 封装星星&lt;/h3>
&lt;p>通常来说粒子系统不大会把单个粒子封装成类，因为函数调用的开销还是蛮大的。。。&lt;/p>
&lt;p>不过在这里我们这里就先这样了，方便理解和阅读。渲染的瓶颈解决之前，粒子函数调用这点开销根本不是回事儿。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 用javascript原生的class而不是prototype
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Star&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lightness&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lightness&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">energy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 计算出当前的大小
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">radius&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 参数分别为起始坐标x,y,半径，结束坐标x,y,半径
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">gradient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRadialGradient&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">r&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.025&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 中心的亮白色
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rgba(255, 255, 255, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心光点和四周的分界线
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 66%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">75&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.9)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心亮点往四周发散的蓝光
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.75&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 64%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">33&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.4)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 蓝光边缘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 淡化直至透明
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Star&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 渲染函数来循环渲染！
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">energy&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 清空屏幕
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillRect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">energy&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 开始渲染动画！
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/pQyJQQ" target="_blank" rel="noopener"
>codepen&lt;/a>查看代码效果。&lt;/p>
&lt;p>完成！&lt;/p>
&lt;h3 id="15-银河">1.5 银河&lt;/h3>
&lt;p>绘制银河的核心在于随机分布的星星绕着同一中心点旋转，分为两步来讲，第一步是随机分布，这很简单，用&lt;code>Math.random&lt;/code>就好了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// star 部分略
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">Galaxy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// 随机生成一定数量的星星，初始化星星位置和大小。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Star&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">33&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 清空屏幕
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillRect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">galaxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Galaxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/jQqPoQ" target="_blank" rel="noopener"
>codepen&lt;/a>查看效果和完整代码。&lt;/p>
&lt;h3 id="16-旋转起来">1.6 旋转起来！&lt;/h3>
&lt;p>【加点细节预警】&lt;/p>
&lt;p>接下来我们为星星准备轨道参数，让它们动起来！&lt;/p>
&lt;p>首先修改&lt;code>Star&lt;/code>类，加入几个字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Star&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lightness&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">orbit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">speed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lightness&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">orbit&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 轨道
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">speed&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 运动速度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 三角函数x轴参数，用 sin/cos 组合计算位置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// 下略
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改初始化代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// 前略
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">diameter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">longerAxis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">maxOrbit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">diameter&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// 随机生成一定数量的星星，初始化星星位置和大小。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Star&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">33&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">maxOrbit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 随机轨道
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 随机速度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="c1">// 随机位置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 后略
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在&lt;code>Galaxy&lt;/code>里加入控制移动的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">move&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">speed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后每一帧进行移动！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 动起来！
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>大功告成！&lt;/p>
&lt;p>在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/NENGYm" target="_blank" rel="noopener"
>codepen&lt;/a>查看完整源码！&lt;/p>
&lt;h3 id="17-待续">1.7 待续&lt;/h3>
&lt;blockquote>
&lt;p>PS：不保证粘贴的代码都能跑，反正 codepen 上是都能的。&lt;/p>
&lt;/blockquote></description></item><item><title>AudioContext技术和音乐可视化（1）</title><link>https://nnnewb.github.io/blog/p/audiocontext%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%961/</link><pubDate>Wed, 07 Nov 2018 02:48:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/audiocontext%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%961/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>因为自己搭了个博客，一时兴起，就想写个动态的博客背景。毕竟用 django 后端渲染，前端只有 jquery 和 bootstrap 已经够 low 了，虽说极简风格也很棒，但是多少有点亮眼的东西才好办不是吗。&lt;/p>
&lt;p>转载注明来源。&lt;/p>
&lt;p>为了方便讲解，整个思路分为两个部分：音乐播放和背景绘制。&lt;/p>
&lt;h2 id="一音乐播放">一、音乐播放&lt;/h2>
&lt;h3 id="11-audiocontext">1.1 AudioContext&lt;/h3>
&lt;p>概述部分懒得自己写，参考 MDN 的描述。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>AudioContext&lt;/strong>接口表示由音频模块连接而成的音频处理图，每个模块对应一个&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/API/AudioNode" target="_blank" rel="noopener"
>&lt;code>AudioNode&lt;/code>&lt;/a>。&lt;strong>AudioContext&lt;/strong>可以控制它所包含的节点的创建，以及音频处理、解码操作的执行。做任何事情之前都要先创建&lt;strong>AudioContext&lt;/strong>对象，因为一切都发生在这个环境之中。&lt;/p>
&lt;/blockquote>
&lt;h3 id="12-浏览器支持状况">1.2 浏览器支持状况&lt;/h3>
&lt;p>&lt;code>AudioContext标准&lt;/code>目前还是草案，不过新 chrome 已经实现了。我使用的 chrome 版本如下。&lt;/p>
&lt;pre>&lt;code>版本 70.0.3538.77（正式版本） （64 位）
&lt;/code>&lt;/pre>&lt;p>如果发现 console 报错或者其他问题请检查浏览器版本，所有支持的浏览器可以在这个&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext" target="_blank" rel="noopener"
>链接&lt;/a>查看。&lt;/p>
&lt;h3 id="13-audiocontext-和音频处理图">1.3 AudioContext 和音频处理图&lt;/h3>
&lt;p>关于&lt;code>AudioContext&lt;/code>我的了解不是很深入，所以只在需要用到的部分进行概述。&lt;/p>
&lt;p>首先，关于&lt;strong>音频处理图&lt;/strong>的概念。&lt;/p>
&lt;p>这个名词不甚直观，我用过虚幻，所以用虚幻的&lt;code>Blueprint&lt;/code>来类比理解。音频处理图，其实是一系列音频处理的模块，连接构成一张数据结构中的“图”，从一般使用的角度来讲，一个播放音频的图，就是&lt;code>AudioSource -&amp;gt; AudioContext.destination&lt;/code>，两个节点构成的图。其中有很多特殊的节点可以对音频进行处理，比如音频增益节点&lt;code>GainNode&lt;/code>。&lt;/p>
&lt;p>对于音频处理的部分介绍就到这里为止，毕竟真的了解不多，不过从 MDN 的文档看，可用的处理节点还是非常多的，就等标准制订完成了。&lt;/p>
&lt;h3 id="14-加载音频文件并播放">1.4 加载音频文件并播放&lt;/h3>
&lt;p>音频文件加载使用典型的&lt;code>JavaScript&lt;/code>接口&lt;code>FileReader&lt;/code>实现。&lt;/p>
&lt;p>一个非常简单的实例是这样&lt;/p>
&lt;p>首先是 html 里写上 input&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;file&amp;#34;&lt;/span> &lt;span class="na">accept&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;audio/*&amp;#34;&lt;/span> &lt;span class="na">onchange&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;onInputChange&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在 javascript 里读文件内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">onInputChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">FileReader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// event.target.result 就是我们的文件内容了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readAsArrayBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件读取就是这么简单，所以回到那个问题：说了那么多，音乐到底怎么放？&lt;/p>
&lt;p>答案是用&lt;code>AudioContext&lt;/code>的&lt;code>decodeAudioData&lt;/code>方法。&lt;/p>
&lt;p>所以从上面的 js 里做少许修改——&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// 创建一个新的 AudioContext
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">AudioContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">onInputChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">FileReader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// event.target.result 就是我们的文件内容了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 解码它
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeAudioData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">decoded&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 解码后的音频数据作为音频源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createBufferSource&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">decoded&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 把音源 node 和输出 node 连接，boom——
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">destination&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 收工。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readAsArrayBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="15-分析频谱">1.5 分析频谱&lt;/h3>
&lt;p>频谱的概念我建议搜一下&lt;strong>傅里叶变换&lt;/strong>，关于时域和频域转换的计算过程和数学原理直接略（因为不懂），至今我还只理解到时域和频域的概念以及傅里叶变换的实现接受采样返回采样数一半长的频域数据&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>不班门弄斧了。&lt;/p>
&lt;p>以前写&lt;code>python&lt;/code>的时候用的&lt;code>numpy&lt;/code>来进行傅里叶变换取得频域数据，现在在浏览器上用 js 着实有些难受。不过幸好，&lt;code>AudioContext&lt;/code>直接支持了一个音频分析的 node，叫做&lt;code>AudioAnalyserNode&lt;/code>。&lt;/p>
&lt;p>这个 Node 处于音源 Node 和播放输出 Node 之间，想象一道数据流，音源 Node 把离散的采样数据交给 Analyser，Analyser 再交给输出 Node。&lt;/p>
&lt;p>直接看代码实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// 创建一个新的 AudioContext
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">AudioContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 解码后的音频数据作为音频源
&lt;/span>&lt;span class="c1">// 为了方便管理，将这些Node都放置在回调函数外部
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createBufferSource&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 创建音频分析Node!
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">audioAnalyser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createAnalyser&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 注意注意！这里配置傅里叶变换使用的采样窗口大小！比如说，我们要256个频域数据，那么采样就应该是512。
&lt;/span>&lt;span class="c1">// 具体对应频率请自行搜傅里叶变换相关博文。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fftSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">onInputChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">FileReader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// event.target.result 就是我们的文件内容了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 解码它
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeAudioData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">decoded&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 停止原先的音频源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 先把音频源Node和Analyser连接。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 然后把Analyser和destination连接。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">destination&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 修改音频源数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">decoded&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 收工。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readAsArrayBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 读取频域数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">freqData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Uint8Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">frequencyBinCount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">freqData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>频域数据是二维的，频率（数组下标）和能量（下标对应值）。悄悄补一句，数学上应该说是该频率函数图像的振幅？&lt;/p>
&lt;p>其实获得了这个频域数据，继续画出我们常见的条状频域图就很容易了。参考我一朋友的博客。&lt;a class="link" href="https://misuzu.moe/music/index.html" target="_blank" rel="noopener"
>misuzu.moe&lt;/a>，可以看看效果。&lt;/p>
&lt;p>关于&lt;code>AudioContext&lt;/code>的介绍先到此为止，等我找时间继续写。&lt;/p>
&lt;blockquote>
&lt;p>PS：代码不保证复制粘贴就能运行，领会精神，遇到问题查查文档。MDN 比我这博客详细多了。&lt;/p>
&lt;/blockquote></description></item><item><title>Unity3D 键盘控制物体平面移动（操作相对于摄像机方向）</title><link>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%89%A9%E4%BD%93%E5%B9%B3%E9%9D%A2%E7%A7%BB%E5%8A%A8%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%91%84%E5%83%8F%E6%9C%BA%E6%96%B9%E5%90%91/</link><pubDate>Sat, 03 Nov 2018 18:57:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%89%A9%E4%BD%93%E5%B9%B3%E9%9D%A2%E7%A7%BB%E5%8A%A8%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%91%84%E5%83%8F%E6%9C%BA%E6%96%B9%E5%90%91/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>目标是实现目标随摄像机方向的不同而进行不同方向移动——而且，目标不需要随摄像机一起旋转。&lt;/p>
&lt;h2 id="使用摄像机的四元数旋转">使用摄像机的四元数旋转&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#"> &lt;span class="k">void&lt;/span> &lt;span class="n">HandleKeyboardAction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">horizontal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Horizontal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">vertical&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Vertical&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">motion&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rotation&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Vector3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">horizontal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vertical&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">mag&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">magnitude&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">normalized&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">mag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>极其简单的做法，获取到键盘移动的轴之后，用摄像机的旋转四元数乘一下，即可得到旋转后的向量，加上去就 ok 了。&lt;/p>
&lt;p>需要注意的是这里用摄像机的四元数旋转要求摄像机必须只在 x 和 y 两个轴旋转。&lt;/p>
&lt;p>先备份一下三维向量的数量值，这是为了能保证摄像机向上和向下看时，平面 x 和 z 轴上的分量不会过小，保持一致的移动速度。&lt;/p>
&lt;p>用四元数旋转完成后，去除 y 轴的值，使目标只在当前平面上移动。再用算出来的向量的单位向量乘上之前备份的数量值，得到平面上移动的偏移向量。&lt;/p>
&lt;p>最后，算出新的位置坐标，赋值，完事儿。&lt;/p></description></item><item><title>Unity3d 摄像机跟随旋转的方案</title><link>https://nnnewb.github.io/blog/p/unity3d-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F%E6%97%8B%E8%BD%AC%E7%9A%84%E6%96%B9%E6%A1%88/</link><pubDate>Sat, 03 Nov 2018 18:20:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/unity3d-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F%E6%97%8B%E8%BD%AC%E7%9A%84%E6%96%B9%E6%A1%88/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>主要想探讨的是如何令摄像机随鼠标操作进行旋转和移动，摄像机跟随的脚本官方就有 Example。&lt;/p>
&lt;h2 id="方案独立的角度变量">方案：独立的角度变量&lt;/h2>
&lt;p>主要的特点是使用独立的角度变量，每次处理鼠标移动操作都会创建一个新的&lt;code>Quaternion&lt;/code>用于计算。&lt;/p>
&lt;p>先看 Demo。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">PlayerControls&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">MonoBehaviour&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">GameObject&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">Distance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//public float CameraRepositionSpeed;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">MouseMotionScaleLevel&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">ReverseAxisY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">PitchMaximum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">PitchMinimum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="n">Vector3&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Use this for initialization
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Update is called once per frame
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Update&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mouse Y&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">MouseMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ReverseAxisY&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mouse X&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">MouseMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Mathf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Clamp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PitchMinimum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PitchMaximum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">Quaternion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Euler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(-&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forward&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Distance&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//transform.position = Vector3.Lerp(transform.position, _PositionTarget, Time.deltaTime * CameraRepositionSpeed);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">LookAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>核心在于&lt;code>_CurrentCameraAngleAroundX&lt;/code>和&lt;code>_CurrentCameraAngleAroundY&lt;/code>以及&lt;code>Distance&lt;/code>，这三个变量共同决定了以玩家&lt;code>Player&lt;/code>为原点的极坐标系下摄像机所处的空间位置。&lt;/p>
&lt;p>计算坐标时只需要通过&lt;code>Quaternion.Euler&lt;/code>来取得旋转四元数，以玩家为原点衍生一条（0,0,-1）的向量并乘上四元数以旋转至&lt;code>Player&lt;/code>指向摄像机的方向，最后乘上&lt;code>Distance&lt;/code>，即可得到摄像机相对玩家的偏移。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="n">Quaternion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Euler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span>
&lt;span class="p">(-&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forward&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Distance&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后只要将摄像机放置在那个位置，然后&lt;code>LookAt&lt;/code>旋转到&lt;code>z&lt;/code>轴正方向指向玩家就完事儿了。&lt;/p></description></item><item><title>GameHollywood 面试笔记</title><link>https://nnnewb.github.io/blog/p/gamehollywood-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 26 Jun 2018 17:22:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/gamehollywood-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>面试的职位是 C++后端开发工程师，主要聊的还是 C++。在过程中自我感觉面得还行，至少没&lt;a class="link" href="https://my.oschina.net/u/3888259/blog/1833040" target="_blank" rel="noopener"
>上次&lt;/a>那么蠢。&lt;/p>
&lt;p>聊的内容主要集中在 STL 和线程安全、资源管理的层面。&lt;/p>
&lt;p>惯例的，填完面试信息表并简历一起上交，然后等面试官来客套完，就开始聊技术了。&lt;/p>
&lt;blockquote>
&lt;p>注意，面试官的提问并非原话，有修饰和脑补。&lt;/p>
&lt;/blockquote>
&lt;h2 id="0-预热你用哪个版本的-c">0. 预热：你用哪个版本的 C++？&lt;/h2>
&lt;p>客套话什么的就略了。&lt;/p>
&lt;blockquote>
&lt;p>面试官：&amp;hellip;行，那我们就聊聊 C++吧。你常用哪个版本的 C++？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：我比较常用的是 C++11。&lt;/p>
&lt;/blockquote>
&lt;p>C++版本这个问题面试里应该不多见，不过作为引入的话题还行，标准之神会瞑目的。&lt;/p>
&lt;p>对于&lt;strong>C++版本&lt;/strong>这个词，很大概率上大家说的应该就是 C++标准委员会&lt;a class="link" href="http://www.open-std.org/JTC1/SC22/WG21/" target="_blank" rel="noopener"
>WG21&lt;/a>制定的 C++标准了，最新版本的标准文档是 C++17 定稿&lt;a class="link" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf" target="_blank" rel="noopener"
>N4659&lt;/a>，制定中的 C++20 标准文档可以访问&lt;a class="link" href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2018/" target="_blank" rel="noopener"
>WG21/docs/papers/2018&lt;/a>查阅。&lt;/p>
&lt;p>需要注意的是，如果答成了&lt;strong>我用 VC6&lt;/strong>之类的骚话，很大概率会留下不好的映像——或者对方也是忠实的 VC6 神教教徒的话，达成共识也说不定。&lt;/p>
&lt;p>闲话少叙。&lt;/p>
&lt;h2 id="1-起手式stdshared_ptr">1. 起手式：&lt;code>std::shared_ptr&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>面试官：说说&lt;code>std::shared_ptr&lt;/code>是怎么实现的？一般怎么去使用它？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：&lt;code>shared_ptr&lt;/code>是通过&lt;strong>引用计数&lt;/strong>实现的，它可以作为容器元素，在程序里传递 blabal&amp;hellip;..而且&lt;code>shared_ptr&lt;/code>&lt;strong>不是线程安全的&lt;/strong>，它不能跨线程传递，要额外做一层包装 blabla&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>正巧最近有想写一篇智能指针相关的博客，面试官的第一问就提到了。&lt;/p>
&lt;p>说到智能指针，就必须提一下 RAII 了。&lt;/p>
&lt;h3 id="11-异常安全和-raii">1.1 异常安全和 RAII&lt;/h3>
&lt;p>&lt;code>std::shared_ptr&lt;/code>和其他智能指针类型都在&lt;code>&amp;lt;memory&amp;gt;&lt;/code>头文件里定义，主要的作用是实现自动化的资源管理，基于&lt;strong>RAII&lt;/strong>的理念设计和实现。&lt;/p>
&lt;p>&lt;strong>RAII&lt;/strong>指的是&lt;strong>获取资源即初始化&lt;/strong>，英文全写是&lt;strong>Resource Acquisition Is Initialization&lt;/strong>，属于一种面向对象编程语言中常见的惯用法。&lt;/p>
&lt;p>它的思路是这样子的：初始化即获取资源，离开作用域就自动销毁。&lt;/p>
&lt;p>RAII 解决的问题是，当异常发生时，如何确保资源释放。这是个&lt;strong>异常安全&lt;/strong>的问题。&lt;/p>
&lt;p>常见的非 RAII 风格代码里，如果要确保资源被正确释放，就要用&lt;code>try {} catch() {} finally {}&lt;/code>块捕获异常，然后执行资源释放的代码，再将异常重新抛出。&lt;/p>
&lt;p>而 RAII 的理念是，让资源的生命周期和一个栈上的对象严格绑定，确保栈上对象被析构的时候，资源也就被一同释放了。&lt;/p>
&lt;p>在 C++中，有大量的代码都是以 RAII 风格进行设计的，其中智能指针也是。&lt;/p>
&lt;h3 id="12-stdshared_ptr的实现">1.2 &lt;code>std::shared_ptr&lt;/code>的实现&lt;/h3>
&lt;p>引用计数，大概了解过智能指针的人都能回答得出来。&lt;/p>
&lt;p>虽然说实现方式并没有规定只能是引用计数，但实际上大家都是这么写的，万一哪天有个 GC 实现的&lt;code>std::shared_ptr&lt;/code>也别太震惊。&lt;/p>
&lt;p>实现思路也挺简单。&lt;/p>
&lt;p>所有指向同一实例的&lt;code>std::shared_ptr&lt;/code>应当持有同一个引用计数，来保持所有&lt;code>std::shared_ptr&lt;/code>计数同步，所以它们共同拥有一个计数器指针&lt;code>long *p&lt;/code>。&lt;/p>
&lt;p>在复制时，&lt;code>shared_ptr&lt;/code>管理的对象指针和引用计数器指针被同时复制，然后引用计数器指针保存的引用计数+1——销毁同理，减少引用，直到删除。&lt;/p>
&lt;h3 id="13-stdshared_ptr和copyassignable">1.3 &lt;code>std::shared_ptr&lt;/code>和&lt;code>CopyAssignable&lt;/code>&lt;/h3>
&lt;p>&lt;code>std::shared_ptr&lt;/code>满足&lt;code>CopyContructiable&lt;/code>、&lt;code>CopyAssignable&lt;/code>和&lt;code>LessThanComparable&lt;/code>这些标准库的&lt;a class="link" href="https://zh.cppreference.com/w/cpp/named_req" target="_blank" rel="noopener"
>具名要求&lt;/a>，因此可以作为 STL 容器的元素。&lt;/p>
&lt;blockquote>
&lt;p>顺便一提 &lt;code>Concept&lt;/code> 有很大可能出现在 C++20 标准里。&lt;/p>
&lt;/blockquote>
&lt;h3 id="14-线程安全性">1.4 线程安全性&lt;/h3>
&lt;p>&lt;code>std::shared_ptr&lt;/code>不是线程安全的，不然不满足 C++对&lt;code>Zero Cost Abstraction&lt;/code>的要（吹）求（逼）。&lt;/p>
&lt;p>依据官方说法，多线程访问不同的&lt;code>std::shared_ptr&lt;/code>实例是没问题的（大多容器也是）；多线程访问同一个&lt;code>std::shared_ptr&lt;/code>实例，但是只调用&lt;code>const&lt;/code>方法，那么也是没问题的（多线程读）；多线程访问同一个&lt;code>std::shared_ptr&lt;/code>实例，调用非&lt;code>const&lt;/code>方法，那么会产生数据竞争（多线程读写）。&lt;/p>
&lt;p>如果希望在线程间传递 &lt;code>std::shared_ptr&lt;/code> 得靠 STL 提供的原子操作库&lt;code>std::atomic&lt;/code>。&lt;/p>
&lt;p>&lt;code>std::atomic&lt;/code>可以快速帮助包装一个线程安全的对象或者指针，不过这东西对&lt;code>std::shared_ptr&lt;/code>的特化是目前还在制定的&lt;code>C++20&lt;/code>标准的一部分，所以能不用则不用，直到标准制定完成稳定，并且各编译器支持完善后再行考虑。&lt;/p>
&lt;p>除此之外，如果确实有这方面的考虑，引入&lt;code>boost&lt;/code>是一个不错的选择。&lt;/p>
&lt;p>无论如何，跨线程使用&lt;code>std::shared_ptr&lt;/code>我不怎么支持。&lt;/p>
&lt;p>跨线程传递&lt;code>std::shared_ptr&lt;/code>本身就是个非常危险的行为。&lt;code>std::shared_ptr&lt;/code>作为标准库的一员，背负了 C++的历史包袱，它随时可能被取出裸指针使用，或者意外复制了一次或几次，而这些对线程安全几乎就是意味着作死的行为却没有任何管束。&lt;/p>
&lt;h3 id="15-其他智能指针">1.5 其他智能指针&lt;/h3>
&lt;ul>
&lt;li>&lt;code>std::auto_ptr&lt;/code>&lt;/li>
&lt;li>&lt;code>std::weak_ptr&lt;/code>&lt;/li>
&lt;li>&lt;code>std::unique_ptr&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其中&lt;code>std::auto_ptr&lt;/code>已经被扫进历史的垃圾堆了，作为替代者，&lt;code>std::unique_ptr&lt;/code>有更明确的语义和更高的可定制性。&lt;/p>
&lt;p>&lt;code>std::weak_ptr&lt;/code>是对于&lt;code>std::shared_ptr&lt;/code>的补充，对于希望使用&lt;code>std::shared_ptr&lt;/code>作为使用了指针的数据结构之间的连接方式，又不希望产生循环引用恶劣情况的一个解决方案。弱指针的存在不影响引用计数工作。&lt;/p>
&lt;p>最后是&lt;code>std::unique_ptr&lt;/code>，它的语义是明确唯一持有某一资源，依照约定，被&lt;code>std::unique_ptr&lt;/code>持有的资源不应该再有第二人持有，&lt;code>std::unique_ptr&lt;/code>是唯一访问该资源的入口。&lt;/p>
&lt;p>这些智能指针都有一个共同点：为了兼容 C 代码，所以它们随时可以被取出裸指针而不影响自身的工作，但这种使用方式造成的一切后果自负。&lt;/p>
&lt;h2 id="2-stdvector">2. &lt;code>std::vector&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>面试官：&amp;hellip;知道&lt;code>std::vector&lt;/code>吧？讲讲它是怎么实现的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：vector 保存了一个一定长度的 buffer，当插入时可以避免插入一次就分配一次空间 blabla&amp;hellip;当插入长度超过了 buffer 长度，buffer 会依照内部算法来重新分配一次内存，扩张长度。&lt;/p>
&lt;/blockquote>
&lt;p>回答不全对。其实面试官之后又强调了一次，但面试时没有听出来。&lt;/p>
&lt;blockquote>
&lt;p>面试官：那之前分配的 buffer 呢？&lt;/p>
&lt;p>我：之前分配的 buffer 先复制到新的 buffer 里，然后旧 buffer 会被释放。&lt;/p>
&lt;/blockquote>
&lt;p>这里对于释放旧 buffer 的说法其实是有问题的，可以具体看看下面。&lt;/p>
&lt;h3 id="21-内存布局">2.1 内存布局&lt;/h3>
&lt;p>&lt;code>std::vector&lt;/code>的&lt;strong>内存布局是连续的&lt;/strong>，这一点除了几乎每个人都有所了解之外（&amp;hellip;），标准给出的要求也可以看出点端倪。&lt;/p>
&lt;blockquote>
&lt;p>26.3.11.1 Class template vector overview&lt;/p>
&lt;p>A vector is a sequence container that supports (amortized) constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage management is handled automatically, though hints can be given to improve eﬃciency.&lt;/p>
&lt;/blockquote>
&lt;p>关键点集中在这里：&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; constant time insert and erase operations at the end;&lt;/p>
&lt;/blockquote>
&lt;p>末端插入和删除是常数时间&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; insert and erase in the middle take linear time.&lt;/p>
&lt;/blockquote>
&lt;p>中间插入和删除需要线性时间（就是 &lt;code>O(n)&lt;/code>）。&lt;/p>
&lt;p>典型的数组插入和删除的特征，不同的是&lt;code>std::vector&lt;/code>可以变长，所以真正插入大量数据的时候会有多次重新分配内存和复制的操作。&lt;/p>
&lt;h3 id="22-copyassignable的约定">2.2 &lt;code>CopyAssignable&lt;/code>的约定&lt;/h3>
&lt;p>&lt;code>std::vector&lt;/code>要求储存的对象满足&lt;code>DefautConstructible&lt;/code>、&lt;code>CopyContructiable&lt;/code>和&lt;code>CopyAssignable&lt;/code>的具名要求，文档参考&lt;code>26.3.11.1&lt;/code>第 2 节。&lt;/p>
&lt;blockquote>
&lt;p>26.3.11.1&lt;/p>
&lt;p>A vector satisﬁes all of the requirements of a container and of a reversible container (given in two tables in 26.2), of a sequence container, including most of the optional sequence container requirements (26.2.3), of an allocator-aware container (Table 86), and, for an element type other than bool, of a contiguous container (26.2.1).&lt;/p>
&lt;/blockquote>
&lt;p>其中提到的&lt;code>Table 86&lt;/code>中列出了&lt;code>DefaultConstructible&lt;/code>、&lt;code>CopyAssignable&lt;/code>和&lt;code>CopyConstructiable&lt;/code>。&lt;/p>
&lt;p>发挥一下脑洞，这些要求完美符合了之前对于重新分配内存的猜测对不对？&lt;/p>
&lt;p>对象要可以被默认构造，因为&lt;code>vector&lt;/code>的实现可能是&lt;code>new&lt;/code>了一个新的对象数组（更可能是字节数组，到时候再&lt;code>placement new&lt;/code>）；对象要可以被复制构造，因为对象可能被从旧数组移动到新数组；对象要可以被复制构造&amp;hellip;..&lt;/p>
&lt;p>当然更可能的原因是&lt;code>vector&lt;/code>本身是可复制的，上面的就当我吹逼吧。&lt;/p>
&lt;p>除此之外还有&lt;code>CopyInsertable&lt;/code>和&lt;code>MoveInsertable&lt;/code>的具名需求，就像其字面意义那样，不多做解释。&lt;/p>
&lt;h3 id="23-内存重新分配的方式">2.3 内存重新分配的方式&lt;/h3>
&lt;p>对 C 稍有经验的人应该知道 C 语言有一个 API 叫做&lt;code>realloc&lt;/code>，它做的事情是这样的：&lt;/p>
&lt;ol>
&lt;li>如果可能的话，扩张原先分配的内存的长度。&lt;/li>
&lt;li>否则重新分配一块内存，然后把旧的内存复制过去，释放旧内存，返回新指针。&lt;/li>
&lt;li>如果找不到足够长度的连续内存，则返回 NULL，不释放旧内存。&lt;/li>
&lt;/ol>
&lt;p>C++自然不会少。&lt;/p>
&lt;p>面试时没有想起来，本来认为是一种优化方案，但 STL 本身就算是优化方案了吧（&amp;hellip;）。正确的解答应该是&lt;/p>
&lt;blockquote>
&lt;p>用 realloc 的方式尝试扩展 buffer 长度，如果无法扩展长度，则拷贝旧 buffer 到新 buffer，再释放旧 buffer。&lt;/p>
&lt;/blockquote>
&lt;p>还行，失误就是失误，认错复习一遍。&lt;/p>
&lt;h2 id="3-比较三个容器vectormaplist">3. 比较三个容器：&lt;code>vector&lt;/code>,&lt;code>map&lt;/code>,&lt;code>list&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>面试官：说说看&lt;code>vector&lt;/code>、&lt;code>list&lt;/code>、&lt;code>map&lt;/code>有什么不同，分别在什么样的上下文环境里去使用它们吧。&lt;/p>
&lt;p>我：vector 可以被随机访问，支持随机访问迭代器，迭代器算法有些不适用在&lt;code>list&lt;/code>和&lt;code>map&lt;/code>上 blabla&amp;hellip;&lt;code>list&lt;/code>通常是链表实现，在插入删除的性能上有优势 blabla&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>顺便一提还没说到&lt;code>map&lt;/code>，面试官就换话题了。&lt;/p>
&lt;p>这一题我大概又没有 get 到面试官的 point，单谈论容器的话可说的东西不少，我觉得面试官可能更想了解下我对这些容器的性能和内存方面的认知，可惜我答的有些太浅白了。&lt;/p>
&lt;h3 id="31-迭代器">3.1 迭代器&lt;/h3>
&lt;p>先从迭代器的角度比较三个容器。&lt;/p>
&lt;p>&lt;code>vector&lt;/code>是个典型的随机访问容器，显然支持&lt;code>forward iterator&lt;/code>、&lt;code>reversible iterator&lt;/code>和&lt;code>random access iterator&lt;/code>。典型的实现是&lt;a class="link" href="https://en.wikipedia.org/wiki/Dynamic_array" target="_blank" rel="noopener"
>&lt;code>dynamic array&lt;/code>&lt;/a>。&lt;/p>
&lt;p>&lt;code>list&lt;/code>是个线性结构容器，支持&lt;code>forward iterator&lt;/code>、&lt;code>reversible iterator&lt;/code>。典型的实现是链表。&lt;/p>
&lt;p>&lt;code>map&lt;/code>是个树形容器，支持&lt;code>forward iterator&lt;/code>和&lt;code>reversible iterator&lt;/code>。典型的实现是红黑树。&lt;/p>
&lt;h3 id="32-内存布局和访问效率">3.2 内存布局和访问效率&lt;/h3>
&lt;p>讨论常见实现。&lt;/p>
&lt;p>&lt;code>vector&lt;/code>是连续分配，访问成本低，插入和删除的成本高，会重分配内存。&lt;/p>
&lt;p>&lt;code>list&lt;/code>是不连续分配，访问成本高，任意位置插入删除成本相对低，插入删除不会导致重新分配整块内存。&lt;/p>
&lt;p>&lt;code>map&lt;/code>是不连续分配，插入删除访问成本不应和线性容器比较，毕竟它是关联容器。插入删除的成本都比较高，因为需要重新平衡树。访问时间在标准中的要求是对数时间复杂度，插入时间懒得继续翻标准文档了。&lt;/p>
&lt;h3 id="33-使用上下文">3.3 使用上下文&lt;/h3>
&lt;p>显而易见&lt;code>vector&lt;/code>适合高频读，而&lt;code>list&lt;/code>适合大量插入删除，&lt;code>map&lt;/code>和前面两个迭代器都搭不上调，在需要复杂索引的地方再合适不过了。&lt;/p>
&lt;h3 id="34-线程安全性">3.4 线程安全性&lt;/h3>
&lt;p>这些容器都不是线程安全的。&lt;/p>
&lt;p>依照标准，多线程访问不同的容器实例一切都安好，访问同一个实例的&lt;code>const&lt;/code>方法也 ok，但是非&lt;code>const&lt;/code>方法就会引起数据竞争。&lt;/p>
&lt;p>尤其注意迭代器的选择，这玩意儿有时候不比指针好多少。&lt;/p>
&lt;h2 id="4-如何管理内存资源">4. 如何管理内存资源&lt;/h2>
&lt;blockquote>
&lt;p>面试官：你在项目里一般是怎么管理内存的呢？&lt;/p>
&lt;p>我：一个是尽可能用智能指针，然后是需要频繁构造对象的场合下可以用 placement new blabla&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>内存管理是一个非常广阔的话题，我的回答太过于浅显了。常见的内存管理策略有很多，智能指针只能算是 RAII 这种常见的范式，placement new 算是内存池/对象池的一种写法大概，还有其他很多策略我并不了解也未能涉及。&lt;/p>
&lt;h3 id="41-再论-raii">4.1 再论 RAII&lt;/h3>
&lt;p>RAII 的范式可以确保异常安全，避免手贱忘记回收内存以及底层设计变更抛出的异常无法处理时导致意外的资源泄露。&lt;/p>
&lt;p>诸如此类等等。&lt;/p>
&lt;p>有一些约定可以关注一下。&lt;/p>
&lt;h4 id="411-获取资源失败抛异常">4.1.1 获取资源失败抛异常&lt;/h4>
&lt;p>首先 RAII 的全写是&lt;strong>获取资源即初始化&lt;/strong>，连资源都没能获取的话，构造理应失败，而不是静默给出一个无效的对象。&lt;/p>
&lt;h4 id="412-析构绝不抛异常">4.1.2 析构绝不抛异常&lt;/h4>
&lt;p>很好理解，如果析构又抛个异常出来的话，这个对象还析构不析构？父类还析构不析构？&lt;/p>
&lt;h4 id="423-常见设计">4.2.3 常见设计&lt;/h4>
&lt;p>在 STL 里除了智能指针以 RAII 设计以外，还有加锁解锁相关的内容也是：&lt;code>std::lock_guard&lt;/code>。&lt;/p>
&lt;p>诸如此类的&lt;code>guard&lt;/code>模式也在其他语言中有出现：比如说 C#的&lt;code>using (var file = File.Open(...)) {}&lt;/code>。&lt;/p>
&lt;h3 id="42-内存池和对象池">4.2 内存池和对象池&lt;/h3>
&lt;p>内存池和对象池算是常见的设计范式，基本考虑到大量对象的构造删除的情况都会考虑到使用这两个模式，因为真的很好用（&lt;/p>
&lt;p>内存池的模式主要是预先分配内存，然后在这片内存上构造对象，主要的适用场景是大量频繁构造小对象，构造成本低，生命周期短，内存分配成本居高不下的情况。当然，不仅是这里提到的场景，根据具体业务逻辑可能还会有不同的理由去选择内存池模式。&lt;/p>
&lt;p>对象池区别于内存池的地方在于，对象池的对象构造成本要更高，频繁构造和析构是无法接受的，这种时候就需要一个候选备用的对象池，对象池实现需要对象本身允许被复用在不同的地方，一般来说性能会比较好。内存池则没这个顾虑：反正你需要就构造一个呗。&lt;/p>
&lt;p>这两个池都可以用&lt;code>factory&lt;/code>模式来提供构造对象的服务，而工厂的消费者不需要了解对象是怎么构造出来的。结合 RAII 的话，内存池、对象池里的对象还可以用一层 RAII 设计的“智能指针”封装，使其完成使命后能自动返还资源，等待下一个工厂访客。&lt;/p>
&lt;h2 id="5-玩过哪些游戏对游戏制作流程了解多少">5. 玩过哪些游戏，对游戏制作流程了解多少？&lt;/h2>
&lt;blockquote>
&lt;p>面试官：喜欢玩游戏吗？都玩过哪些游戏？&lt;/p>
&lt;p>我：我的话&amp;hellip;主要玩的是音游，和贵公司业务可能并没有太多关联。&lt;/p>
&lt;p>面试官：除了音乐游戏，有玩过 RPG、ARPG 类型的游戏吗？&lt;/p>
&lt;p>我：像是辐射啊，老滚啊这些&amp;hellip;开放世界类型的游戏游戏性没那么好，比起来我更喜欢电影式的游戏，比如说最近比较火的《底特律：变人》。&lt;/p>
&lt;p>面试官：&amp;hellip;&amp;hellip;（你丫来捣乱的是吧）&lt;/p>
&lt;p>面试官：说说你对游戏行业的看法吧。&lt;/p>
&lt;p>我：游戏行业前景好啊 blablabla&amp;hellip;娱乐崛起 blabla&amp;hellip;经济增长 blabla&amp;hellip;.&lt;/p>
&lt;p>面试官：&amp;hellip;&amp;hellip;（？？？？）&lt;/p>
&lt;p>面试官：你上一家公司也是制作游戏的吧？就是说，你们游戏制作啊，都有哪方面的人在负责做什么东西，大概是怎么个分工合作的样子。（提醒+强调）
我：哦！哦哦，大概就是一个人负责策划整个游戏的玩法和系统，设计每个细节，然后程序负责去实现，自动测试 blabla&amp;hellip;内部试玩 blabla&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>还行，这波操作其实我也是挺佩服自己的。&lt;/p>
&lt;h3 id="51-陷阱玩过哪些游戏">5.1 陷阱：玩过哪些游戏&lt;/h3>
&lt;p>我注意到一件事：在多次面试游戏行业的职位时，都提到这这个问题：&lt;/p>
&lt;blockquote>
&lt;p>你玩过哪些游戏？&lt;/p>
&lt;/blockquote>
&lt;p>也许形式上有所区别：&lt;/p>
&lt;blockquote>
&lt;p>你玩过的游戏里，有哪些特别喜欢的？&lt;/p>
&lt;/blockquote>
&lt;p>换位思考，如果我是面试官，我为什么要问这个问题？我想知道什么？&lt;/p>
&lt;blockquote>
&lt;p>熟悉游戏吗？&lt;/p>
&lt;p>知道游戏有哪些元素吗？&lt;/p>
&lt;p>能理解（我们招你进来要做的游戏）要你做什么吗？&lt;/p>
&lt;/blockquote>
&lt;p>不必太过刻意地表达出对游戏行业的崇拜或者抬高之类的，这一关主要的目的还是引出下文，聊聊对游戏制作流程的理解。如果对面试的公司出的产品有所了解的话可能算是加分项。&lt;/p>
&lt;p>但是，从一个游戏玩家的角度出发，表现出不好的情绪容易留下坏映像——&lt;strong>特别是，绝对不要明显地表达出对国产网游、手游、页游的鄙视！！&lt;/strong>&lt;/p>
&lt;p>从一个玩家的角度出发，我也不喜欢&lt;strong>大部分&lt;/strong>国产的页游手游，但是当着游戏行业公司的面试官的面，表现出&lt;strong>我看不起你&lt;/strong>的态度，知道什么叫作死吗？&lt;/p>
&lt;p>更何况并不是&lt;strong>所有国产游戏&lt;/strong>都是屎，举例来说我现在超喜欢 MUSE DASH 这款国产音游的，手感比兰空 voze、节奏大师之类的好得多，界面也没有像节奏大师那样糊成屎，要不是我的 Unity3D 水平太差我真想给这家 pero pero game 工作室（公司？）投个简历看看。&lt;/p>
&lt;p>除此之外还有就是抱着&lt;strong>拯救国产游戏&lt;/strong>的想法或者态度，又或者&lt;strong>劳资教你们什么才是真正的游戏&lt;/strong>这样的想法或者态度，作死无极限啊。&lt;/p>
&lt;p>比较稳妥的回答方案应该是常见的几个网游，比如说 LOL，DNF，王者荣耀，诸如此类。实际上玩过没玩过&amp;hellip;..咳，不被戳穿就无所谓了。&lt;/p>
&lt;h3 id="52-游戏行业">5.2 游戏行业&lt;/h3>
&lt;p>加班是家常便饭，好像所有游戏行业的公司都会这么说。&lt;/p>
&lt;p>大概了解下几个术语，算是加班界的黑话吧。&lt;/p>
&lt;p>一个是 996。什么意思呢？上午 9 点上班，晚上 9 点下班，一周上 6 天，加班费不用考虑了，不存在的，最多给调休。&lt;/p>
&lt;p>再有一个是大小周。一周上 6 天，一周上 5 天，如此循环。同样，大周加班不算加班费，给调休。&lt;/p>
&lt;p>另外就是调休。如果加班一天，将来某天就可以不扣工资休息一天，直白吧。攒下半年的调休然后一口气给自己放 6 个月假这种事情还是做梦比较好，调休基本上就等于无偿加班了，忙起来的时候劝你别休，不然人手就不够了；那闲下来的时候还能让你一周休 6 天？你敢休公司也不敢让你随便休啊，其他员工怎么看。&lt;/p>
&lt;p>发薪日。网上有人总结，发薪日越接近月中的，或者超过月中的，大多都是怕员工流失的公司，而这些公司往往都不是什么好公司。听起来还是挺有道理的（&lt;/p>
&lt;p>当然，最后还是要靠自己的眼睛去确认这一点。&lt;/p>
&lt;h3 id="53-游戏的制作流程">5.3 游戏的制作流程&lt;/h3>
&lt;p>之前待得确实是一家小公司，甚至算得上工作室级别的超小初创公司，游戏制作方面的知识储备不算充足，写这篇博客的时候又去补习了一下。&lt;/p>
&lt;p>主要的工种分为策划、美术、程序。&lt;/p>
&lt;p>细分的话，策划可能有数值方面的，世界背景人物背景方面的，对话文本方面的，甚至可能有长篇幅的资料啊故事啊这方面的需求。&lt;/p>
&lt;p>美术有 UI 方面的，人物、场景的原画师，3d 模型制作，动画制作，骨骼制作，特效制作，等等方面的。程序经常需要和美术方面的沟通交流。&lt;/p>
&lt;p>程序的话主要分前后端和测试，再加上运维和 DBA 之类的角色。&lt;/p>
&lt;p>细分的话前端根据开发平台不同也有不同的技术栈，图像特效上可能会有更专业的大牛负责，team leader 带队设计架构，分配工作，诸如此类。后端也一样，根据不同的技术抉择，可能整体的人员配置也有所区别，但大家都是程序嘛。&lt;/p>
&lt;p>测试算是比较独立的，编写测试代码是一件很痛苦的事情（&lt;/p>
&lt;p>所以这份疼痛有专人负责承受了：）&lt;/p>
&lt;p>持续集成啊什么的也被承包了，测试或者运维会去负责的。&lt;/p>
&lt;p>DBA 一般公司也用不到，运维多少会两手 SQL，规模更大的公司可能会设置这个专门职位。&lt;/p>
&lt;p>流程上来说，策划给出游戏方案，美术可能会配合做个初稿效果图之类的（更可能是策划自己做个简单的效果图之类的方便说明），程序疯狂实现（崩溃-爆发-认命 循环），测试则配合给出反馈，让程序的脱发状况持续恶化，最后发布，项目黄了。&lt;/p>
&lt;p>哦不是，我是说项目火了，程序们一跃成为 CTO，迎娶白富美，走上人生巅峰。&lt;/p>
&lt;p>（并没有）&lt;/p>
&lt;h2 id="6-尾声">6. 尾声&lt;/h2>
&lt;p>其实这次面试的自我感觉还是不错的，没有犯下太蠢的错误，但是可以改进的地方依然很多，语言组织能力需要进一步提高。&lt;/p>
&lt;p>这篇博客的目的是自我反省，但是这次自我反省的效果并不算好，因为面试官的问题基本上都戳在我懂，但又没真正去深入挖掘的领域。日常使用自然没有问题，但理解却谈不上了。&lt;/p>
&lt;p>如果面试官在细节上稍作追究：比如说 placement new 和 user-defined new 之类的话题上深入，异常安全，或者问个 map 用红黑树实现，红黑树什么原理，那么这次我基本又要挂了。&lt;/p>
&lt;p>关于给出的待遇的问题&amp;hellip;&amp;hellip;我其实很好奇&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>因为我真的才工作一年，不懂啊&amp;hellip;&lt;/p>
&lt;p>一年工作年限，C++我也不知道算什么水平，不知道怎么去横向对比，要 8k 是要多了么&amp;hellip;&lt;/p>
&lt;p>初级职位的意思是待遇初级还是能力初级啊&amp;hellip;&lt;/p>
&lt;p>还有主程一般指的是 team leader 对吗，游戏行业程序是不是干到 team leader 就算到头了&amp;hellip;只能转管理岗了&amp;hellip;&lt;/p></description></item><item><title>可重入和异步安全</title><link>https://nnnewb.github.io/blog/p/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E5%AE%89%E5%85%A8/</link><pubDate>Sun, 24 Jun 2018 22:48:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E5%AE%89%E5%85%A8/</guid><description>&lt;p>这篇博客主要记录的是关于可重入性的相关定义，以及关于并发安全的思考。&lt;/p>
&lt;h2 id="可重入性">可重入性&lt;/h2>
&lt;p>在不同语言中，由于语言标准以及运行期环境规定的不同，可重入性的具体定义可能有所不同。这里聊的是 C++语言中的可重入性。&lt;/p>
&lt;p>所谓可重入性（&lt;code>reetrant&lt;/code>），指的是同时具备&lt;strong>并发安全&lt;/strong>和&lt;strong>中断安全&lt;/strong>的特征，这是目前为止我对可重入性的认识，也是这篇博客在写下时给可重入性下的定义。&lt;/p>
&lt;p>这个认知可能并不准确，因为在&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E9%87%8D%E5%85%A5" target="_blank" rel="noopener"
>wiki&lt;/a>上的定义是这样的。&lt;/p>
&lt;blockquote>
&lt;p>若一个程序或子程序可以「在任意时刻被中断然后操作系统调度执行另外一段代码，这段代码又调用了该子程序不会出错」，则称其为可重入（reentrant 或 re-entrant）的。即当该子程序正在运行时，执行线程可以再次进入并执行它，仍然获得符合設計時預期的结果。与多线程并发执行的线程安全不同，可重入强调对单个线程执行时重新进入同一个子程序仍然是安全的。&lt;/p>
&lt;/blockquote>
&lt;p>但是在很多中文博客里，聊到可重入性的时候往往也会把并发安全混为一谈。实际上来说的话&amp;hellip;&amp;hellip;一个可重入的函数，常常也是并发安全的。&lt;/p>
&lt;p>那么先从并发安全讲起吧。&lt;/p>
&lt;h2 id="并发安全性和可重入性">并发安全性和可重入性&lt;/h2>
&lt;p>所谓并发安全已经是老生常谈了。&lt;/p>
&lt;p>以一段非常简单的代码为例，我们打算初始化一个对象，这个对象被两个线程共享。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>显而易见，如果线程在执行到特定环节时发生了切换&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// &amp;lt;-------- 线程切换
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 线程2() {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// initialize(something);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 线程切换 ---------&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么 &lt;code>createSomeShit&lt;/code>这段代码就会被执行两次。&lt;/p>
&lt;p>显然这和我们预期的行为不符。&lt;/p>
&lt;p>这里要聊的不是并发，而是&amp;hellip;&amp;hellip;可重入性。所以我们再看看这个函数能否被重入。&lt;/p>
&lt;p>按照 wiki 提供的定义，函数可重入指的是&lt;/p>
&lt;blockquote>
&lt;p>在任意时刻被中断然后操作系统调度执行另外一段代码，这段代码又调用了该子程序不会出错。&lt;/p>
&lt;/blockquote>
&lt;p>符合吗？不。为什么？因为同样在那个线程切换的位置上中断，然后再另一段代码里再次执行这个函数，也会触发同样的问题，导致&lt;code>createSomeShit&lt;/code>被执行两次。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// &amp;lt;-------- 被中断
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 中断处理函数() {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// initialize(something);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 中断结束 --------
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，那些线程不安全的代码，都是不可重入的。&lt;/p>
&lt;p>那么，线程安全的代码，就一定是可重入的吗？&lt;/p>
&lt;h2 id="中断安全性或者叫信号安全性">中断安全性，或者叫信号安全性&lt;/h2>
&lt;p>中断这个东西对其他编程语言的用户来说可能会少见一些，在 C/C++语言里，中断并不是什么新鲜话题。&lt;/p>
&lt;p>在 C 标准库中，规定了一系列的信号和信号处理方法。关于信号的定义可以参考&lt;a class="link" href="https://zh.cppreference.com/w/c/program/signal" target="_blank" rel="noopener"
>这个&lt;/a>。&lt;/p>
&lt;p>当进程接收到信号的时候，当前正在执行的代码就会被中断——注意了，这回，锁救不了你。&lt;/p>
&lt;p>在 C/C++中，中断处理是由一个函数进行。在函数里可能会调用到中断时正在执行的函数。那么问题来了——一个线程安全的函数，是中断安全的函数吗？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">realshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看上去岁月静好~一切线程切换的问题，都被那句&lt;code>std::lock_guard&amp;lt;std::mutex&amp;gt;(realshit)&lt;/code>给挡在了墙的另一边。&lt;/p>
&lt;p>但是&amp;hellip;&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">realshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// &amp;lt;----- 调皮的用户按下了 Ctrl-C
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 中断处理函数() {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// initialize(someshit, realshit);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// // inside initialize {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// // std::lock_guard&amp;lt;std::mutex&amp;gt;(realshit); // DEAD LOCK
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// // }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看这里~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 进入信号处理
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>好了，GG。死锁在这个时候发生了。&lt;/p>
&lt;p>经验丰富的大佬可能注意到了，咱还可以用&lt;code>std::recursive_mutex&lt;/code>啊！&lt;/p>
&lt;p>这里就要提到一个很遗憾的问题了：C/C++的语言标准给了哪些保证。&lt;/p>
&lt;p>C 对信号处理函数的定义很粗暴，除了&lt;code>abort&lt;/code>、&lt;code>_Exit&lt;/code>、&lt;code>quick_exit&lt;/code>、&lt;code>signal&lt;/code>、&lt;code>stdatomic.h的免锁原子函数&lt;/code>、&lt;code>atomic_is_lock_free与任何类型的原子参数&lt;/code>这些函数以外，任何标准库函数的调用，行为都是未定义的。&lt;/p>
&lt;p>C++对信号处理函数的定义则更加复杂，限制比之 C 更加严格。毕竟标准库要庞大得多&amp;hellip;&amp;hellip;也不是不能理解。&lt;/p>
&lt;p>标准中有个一个地方的描述很微妙：&lt;strong>&amp;hellip;&amp;hellip;免锁的&lt;/strong>。&lt;/p>
&lt;p>换言之，谁又保证了信号处理函数必然和你希望的那个线程是同一个线程呢？&lt;/p>
&lt;p>&lt;code>std::recursive_mutex&lt;/code>的实现依赖于平台提供的系统 API，反正我没有找到语言标准中相关的规定要求信号处理函数必须和&lt;code>main&lt;/code>函数在同一个线程，所以我认为这是平台相关的问题：这样的代码是&lt;strong>不可移植的&lt;/strong>。&lt;/p>
&lt;p>按照设计模式原则，我们是面向接口——也就是标准文档编程，而不是面对实现——Visual C++、GCC、MinGW 或者哪个中东土豪在未来某天突发奇想送我一台 MIPS 的超算的话。&lt;/p>
&lt;p>到业务层面的话会更灵活一些——反正我只在某环境下跑，等公司什么时候全面换平台了，咱再能改则改，改不了就跑路。&lt;/p>
&lt;h2 id="递归函数和可重入">递归函数和可重入&lt;/h2>
&lt;p>递归和重入有一定的相似性，但又有所不同。&lt;/p>
&lt;p>一个递归函数，直觉上来讲，好像应该是可重入的：因为它要调用自己。&lt;/p>
&lt;p>那么&amp;hellip;&amp;hellip;事实上呢？&lt;/p>
&lt;p>写个比较骚的递归删除链表节点的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">removeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// &amp;lt;------ 出现了！中断兽！
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 不用看了，Node之间的联结已经被破坏了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 离开了！中断兽！--------&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">freeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">removeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>轻易地否定了递归函数=可重入函数的直觉想法。&lt;/p>
&lt;p>深究下去，又到了线程安全——然后是死锁——然后提出了&lt;code>std::recursive_mutex&lt;/code>或者其他类似的操作——最后走到平台相关的 API 和保证——失去可移植性。&lt;/p>
&lt;p>为什么我一直在提可移植性？&lt;/p>
&lt;p>emmmm，大概是装逼如风，常伴吾身吧。&lt;/p>
&lt;h2 id="标准库好烦人啊">标准库好烦人啊&lt;/h2>
&lt;p>C/C++语言的标准库是出了名的——但不是好的方面，而是他们总在修修补补又一年。&lt;/p>
&lt;p>C 标准库还好说——毕竟语言本身没啥特性，全靠各种平台提供 API 撑着。标准库改来改去也只是割个双眼皮的程度。&lt;/p>
&lt;p>C++要更骚气一些，每隔几年就整个容，简直不给人活路。&lt;/p>
&lt;p>就中断安全来说，虽然不知道内部怎么实现的，但是&amp;hellip;&amp;hellip;printf 这样的函数在信号处理函数里调用的话，也算是未定义行为。&lt;/p>
&lt;p>认输吧，你是斗不过标准的。该依赖平台行为的时候，就去依赖平台行为吧。&lt;/p>
&lt;h2 id="文档引用">文档引用&lt;/h2>
&lt;p>懒得找原文，直接看 cppreference 对 signal 的说法就好。有兴趣的话可以找又臭又长的&lt;a class="link" href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1570.pdf" target="_blank" rel="noopener"
>WG14 - N1570 - C11&lt;/a>，还有&lt;a class="link" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf" target="_blank" rel="noopener"
>WG21 - N4659 - C++17&lt;/a>这两本标准文档。&lt;/p>
&lt;h2 id="尾声">尾声&lt;/h2>
&lt;p>于是这会儿就到了其他各种语言的用户惯例吐槽的时候：&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;大佬是公司里唯一用 C++写代码的人。他对人说话，总是满口“目标平台”、“标准”、“可移植性”之类的话，叫人半懂不懂的。因为他总是说“C++天下第一！”，别人便从他说的那些半懂不懂的话里，替他取下个绰号，叫 C++大神。&lt;/p>
&lt;p>C++大神一到公司里，程序员们便看着他笑，有的叫道：“C++大神，你的代码又编译出错了！”&lt;/p>
&lt;p>他不回答，对前台说：“倒上特浓的咖啡，今天也要加班到夜里。”便拿出员工卡。程序员们又高声叫嚷道：“你一定又用上新标准了吧？”&lt;/p>
&lt;p>C++大神睁大眼睛说，“你怎么凭空污人清白！”&lt;/p>
&lt;p>“什么清白？我前天亲眼看见你的代码编译报了错，整整十几 MB 的日志！”&lt;/p>
&lt;p>C++大神便涨红了脸，额上的青筋条条绽出，争辩道，“编译器报错怎么能叫错&amp;hellip;&amp;hellip;C++&amp;hellip;&amp;hellip;编译器不支持，那能算错么？”&lt;/p>
&lt;p>接连便是难懂的话，什么“CONCEPT 还不加入标准”、“未定义行为就该是编译错误”、“SFINAE 就是给编译器开洞”、“boost 大法好，天灭 std::experimental”，引得众人都哄笑起来：店内外充满了快活的空气。&lt;/p>
&lt;/blockquote></description></item><item><title>MySQL 24小时入门笔记 - 4</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-4/</link><pubDate>Sat, 23 Jun 2018 22:34:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-4/</guid><description>&lt;h2 id="创建表">创建表&lt;/h2>
&lt;h3 id="create-table">CREATE TABLE&lt;/h3>
&lt;p>&lt;code>CREATE TABLE&lt;/code>的作用是创建表。不多说，先创建个简单的学生表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">char&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里没写 &lt;code>ENGINE=InnoDB&lt;/code>，因为这是新 MariaDB 的默认值。&lt;/p>
&lt;p>那么进入正题，&lt;code>CREATE TABLE&lt;/code>的语法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">约束和其他属性&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">约束和其他属性&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">....&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">其他表配置&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>很容易看出，括号里面写的是表的相关配置，包括列定义，主键定义，索引定义等等。&lt;/p>
&lt;h3 id="默认值">默认值&lt;/h3>
&lt;p>在创建表时可以指定默认值，有默认值的列在插入时可以不填。&lt;/p>
&lt;p>语法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">值&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可为一个列设定默认值。&lt;/p>
&lt;h3 id="非空">非空&lt;/h3>
&lt;p>非空约束非常常见。比如说，我们要记录学生信息，包括学号、成绩、姓名，那么学生姓名能不能留空呢？显然不行，因为没有姓名的记录让谁看都是一脸懵逼，这破坏了一条记录的完整性。&lt;/p>
&lt;p>创建非空约束的语法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就创建了非空约束。非空约束下，插入数据时不能不填写这个列。&lt;/p>
&lt;p>如果需要要求可空，那么这样做。但一般不用特地写，很多&lt;code>DBMS&lt;/code>的列默认创建就是可空的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改表">修改表&lt;/h2>
&lt;h3 id="alter-table">ALTER TABLE&lt;/h3>
&lt;p>&lt;code>ALTER TABLE&lt;/code>可以修改表定义，添加删除列，修改约束，等等。&lt;/p>
&lt;h3 id="添加列">添加列&lt;/h3>
&lt;p>举例，在一个只有学号和姓名两个列的学生表加入一个新的成绩列，代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法基本是这样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">其他属性和约束&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>后面列的定义写法基本和&lt;code>CREATE TABLE&lt;/code>时差不多。&lt;/p>
&lt;h3 id="删除列">删除列&lt;/h3>
&lt;p>和添加列差不多，但删除的关键字&lt;strong>不是&lt;/strong>&lt;code>DELETE&lt;/code>，而是&lt;code>DROP&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加外键约束">添加外键约束&lt;/h3>
&lt;p>外键约束其实保证的是&lt;strong>引用完整性&lt;/strong>，外键约束的列的值必须引用了一个有效的行，或者是&lt;code>NULL&lt;/code>。&lt;/p>
&lt;p>举例来说，我们先有两个表。&lt;/p>
&lt;p>学生表&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>student 1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>student 2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>student 3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>班级表&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>level&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Lv5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Lv4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Lv3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>为了让学生表的&lt;code>class&lt;/code>关联到班级表的&lt;code>id&lt;/code>，我们要这样做。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CONSTRAINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fk_students_classes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FOREIGN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REFERENCES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">classes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法基本是这样子的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">保存外键的表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CONSTRAINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">外键约束的名字，一般&lt;/span>&lt;span class="n">fk开头&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FOREIGN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="err">外键名&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REFERENCES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">引用的表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="err">引用的键名&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比较复杂。&lt;/p>
&lt;h3 id="删除表">删除表&lt;/h3>
&lt;p>那么终于到了期待已久的删库跑路阶段。&lt;/p>
&lt;p>删除表的语法非常简单，那么从一开始活到现在的这所学校终于干不下去了，校长决定遣散学生。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>人走光了。&lt;/p>
&lt;h3 id="重命名表">重命名表&lt;/h3>
&lt;p>校长决定把学校改成夜总会，于是他写道：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">RENAME&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">school&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">night_club&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要是换行有这么容易就好了&amp;hellip;&amp;hellip;（你敢说回车看看）&lt;/p></description></item><item><title>MySQL 24小时入门笔记 - 3</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-3/</link><pubDate>Sat, 23 Jun 2018 21:51:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-3/</guid><description>&lt;h2 id="插入">插入&lt;/h2>
&lt;h3 id="insert">INSERT&lt;/h3>
&lt;p>&lt;code>INSERT&lt;/code>用法非常简单。现在我们有表&lt;code>students&lt;/code>如下。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>列名&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>约束&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;td>primary key&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>char(16)&lt;/td>
&lt;td>NOT NULL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>向里面插入一条学号为&lt;code>1&lt;/code>，姓名为&lt;code>学姐&lt;/code>的学生，只需要写如下&lt;code>SQL&lt;/code>语句。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学姐&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">列值&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">列值&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,...);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>INSERT&lt;/code>语句有一个简单的变体，能比较明确地指明将值交付给哪个列。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学妹&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样写相当于指明了&lt;code>1&lt;/code>应该是&lt;code>id&lt;/code>，&lt;code>'学妹'&lt;/code>应该是&lt;code>name&lt;/code>。&lt;/p>
&lt;p>插入多条也很简单，只要在&lt;code>VALUES&lt;/code>后面跟更多小括号包围的值集合就行了，记得拿括号分隔，下面给个例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学渣&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学霸&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学神&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="insert-select">INSERT SELECT&lt;/h3>
&lt;p>这个写法比较有意思，从一个表查询出数据，并插入另一个表。&lt;/p>
&lt;p>举个例子来说，我们有两个班级表，分别叫&lt;code>学渣班&lt;/code>和&lt;code>补习班&lt;/code>，一旦学渣成绩烂到一定程度，那么我们就要把他分配到补习班里去强制补习。&lt;/p>
&lt;p>怎么做呢？看下面啦。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">补习班&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是，&lt;code>INSERT&lt;/code> 填充补习班表时用的并不是你&lt;code>SELECT&lt;/code>的列名，而是&lt;code>SELECT&lt;/code>后列名的顺序，来对应到要&lt;code>INSERT&lt;/code>的表的列上。&lt;/p>
&lt;p>其他的写法和&lt;code>SELECT&lt;/code>相同。&lt;/p>
&lt;h2 id="修改">修改&lt;/h2>
&lt;h3 id="update">UPDATE&lt;/h3>
&lt;p>&lt;code>UPDATE&lt;/code>语句的作用是修改现存行的数据，非常值得注意的是用&lt;code>UPDATE&lt;/code>语句时一定要小心写&lt;code>WHERE&lt;/code>子句，不然就等着删库跑路吧。&lt;/p>
&lt;p>依然举个实际栗子，学号为&lt;code>10&lt;/code>的学生成绩由于作弊而被取消了，我们要更新他的成绩为 0 分，这真是个悲伤的故事:P&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法是这样的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更新多条的话是这样的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>千万小心，如果没有 &lt;code>WHERE&lt;/code>子句的话，指定的列会全部被设置成这个值。这样一来，所有的学生都变成了 0 分&amp;hellip;&amp;hellip;你会被手撕了的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="删除">删除&lt;/h2>
&lt;h3 id="delete">DELETE&lt;/h3>
&lt;p>&lt;code>DELETE&lt;/code>的作用是删除行，同样的，万分注意&lt;code>WHERE&lt;/code>子句一定要正确编写，不然真的要删库跑路了。&lt;/p>
&lt;p>同样以之前那位作弊的同学为例，很遗憾，他又一次作弊被抓住了，传说中的高科技 AR 技术作弊眼镜也没能让他逃过监考员的火眼金睛，于是他被退学了&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>另一个悲伤的故事:P&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">DELETE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法是这样子的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">DELETE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不写&lt;code>WHERE&lt;/code>的话&amp;hellip;&amp;hellip;找个好点的新工作吧，不要再去写&lt;code>SQL&lt;/code>了，ORM 多好。&lt;/p>
&lt;blockquote>
&lt;p>注意，不写&lt;code>WHERE&lt;/code>子句会删除这个表里的所有行。&lt;/p>
&lt;/blockquote></description></item><item><title>MySQL 24小时入门笔记 - 2</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-2/</link><pubDate>Sat, 23 Jun 2018 15:41:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-2/</guid><description>&lt;h2 id="查询">查询&lt;/h2>
&lt;h3 id="select">SELECT&lt;/h3>
&lt;p>&lt;code>SELECT&lt;/code>是一个特殊的关键字，它的语义是查询，取出结果。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意&lt;/strong>：仅为个人理解。&lt;/p>
&lt;/blockquote>
&lt;h3 id="from">FROM&lt;/h3>
&lt;p>&lt;code>FROM&lt;/code>子句，标识要查询的对象的来源，来源可能是多个的。在查询有多个来源表的情况下，称之为联结查询（&lt;code>Join query&lt;/code>）。&lt;/p>
&lt;p>最常见的常规写法是&lt;code>SELECT column FROM table&lt;/code>，表示从特定表取出所有行的特定列。&lt;/p>
&lt;h3 id="where">WHERE&lt;/h3>
&lt;p>&lt;code>WHERE&lt;/code>子句用于过滤查询的行，只有满足条件的行会被查询出来。&lt;/p>
&lt;p>常见的用法有&lt;code>SELECT column FROM table WHERE column &amp;lt;&amp;gt; 0&lt;/code>，表示在&lt;code>table&lt;/code>表中查询&lt;code>column&lt;/code>非空的行，返回这些行的&lt;code>column&lt;/code>。&lt;/p>
&lt;p>其中的二元关系运算符&lt;code>&amp;lt;&amp;gt;&lt;/code>表示不等于，其他常见的关系运算符还有这些。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>=&lt;/code>&lt;/td>
&lt;td>相等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;td>大于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;td>小于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;td>大于等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;td>小于等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!=&lt;/code>&lt;/td>
&lt;td>不等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>不等于&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>此外还有一些&lt;code>SQL&lt;/code>关键字可以辅助编写判断逻辑。&lt;/p>
&lt;p>&lt;code>SQL&lt;/code>关键字&lt;code>IN&lt;/code>可以用于判断元素是否在集合中。举例，&lt;code>SELECT 1 IN (1,2,3)&lt;/code>，查询&lt;code>1&lt;/code>是否在&lt;code>1,2,3&lt;/code>这个集合中。被判断的集合需要被小括号包围，并且以逗号分隔元素。&lt;/p>
&lt;p>&lt;code>SQL&lt;/code>关键字&lt;code>BETWEEN&lt;/code>可以判断元素是否在一定区间中。举例，&lt;code>SELECT 1 BETWEEN 0 and 10&lt;/code>，查询&lt;code>1&lt;/code>是否在&lt;code>0&lt;/code>到&lt;code>10&lt;/code>的区间内。语法是&lt;code>BETWEEN [low] AND [high]&lt;/code>，区间较小的一端必须在左侧，较大的一端必须在右侧。&lt;/p>
&lt;p>&lt;code>SQL&lt;/code>关键字&lt;code>LIKE&lt;/code>可以用非常简单的通配符来判断元素是否匹配一定的规则。举例，&lt;code>SELECT 'abcabcabc' LIKE '%CAB%'&lt;/code>，判断字符串&lt;code>abcabcabc&lt;/code>是否匹配&lt;code>%CAB%&lt;/code>。值得注意的是，模式串中的&lt;code>%&lt;/code>代表的是匹配 0 或任意多个字符，就像是正则表达式中的&lt;code>*&lt;/code>一样。此外还有&lt;code>_&lt;/code>，下划线，匹配 1 个任意字符。&lt;/p>
&lt;p>&lt;code>MySQL&lt;/code>扩展的&lt;code>REGEXP&lt;/code>可以用正则表达式来匹配元素是否符合模式串。举例，&lt;code>SELECT 'abcabcabc' REGEXP '.*cab.*'&lt;/code>，正则表达式不做赘述，简单的模式串大家都会写。&lt;/p>
&lt;h3 id="order-by">ORDER BY&lt;/h3>
&lt;p>&lt;code>ORDER BY&lt;/code>就像字面意义上说的那样，按照某个列来进行排序。举例来说，我有一个学生表，记录了学号和姓名，我可以按照学号排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认排序是升序，也可以通过指定&lt;code>DESC&lt;/code>或者&lt;code>ASC&lt;/code>来决定怎么排。&lt;code>ASC&lt;/code>是升序，&lt;code>DESC&lt;/code>是降序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="as">AS&lt;/h3>
&lt;p>&lt;code>AS&lt;/code>常见的用法是建立别名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id_alias&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">my_table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_alias&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_alias&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里出现了一个新的语法细节，&lt;code>table_alias.column&lt;/code>。用点&lt;code>.&lt;/code>连接表名和列名的行为类似于 C++中的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">typedef&lt;/span> &lt;span class="n">table_alias&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">my_table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">id_alias&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SELECT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">table_alias&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">column&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">table_alias&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">column&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看得出来，&lt;code>table_alias.column&lt;/code>是完全限定了&lt;code>column&lt;/code>是哪个&lt;code>column&lt;/code>，之所以有这种语法，是因为&lt;code>FROM&lt;/code>子句需要支持多个表作为查询来源。到时候可能就会用到&lt;code>table1.column &amp;lt;&amp;gt; 1 AND table2.column &amp;lt;&amp;gt; 2&lt;/code>这样的写法了。&lt;/p>
&lt;p>而查询开头的&lt;code>column AS id_alias&lt;/code>则是标识查询结果列叫做&lt;code>id_alias&lt;/code>，举例如子查询的情况下，便于引用。&lt;/p>
&lt;h3 id="join">JOIN&lt;/h3>
&lt;p>&lt;code>JOIN&lt;/code>的术语叫做&lt;strong>联结&lt;/strong>，使用了&lt;code>JOIN&lt;/code>关键字的查询叫做&lt;strong>联结查询&lt;/strong>。&lt;/p>
&lt;p>联结查询和一般的查询不同的地方是，联结查询的数据来源是多个表。&lt;/p>
&lt;p>最简单的联结查询是内联结查询。&lt;/p>
&lt;p>举例来说，我现在有表&lt;code>students&lt;/code>如下，所有学生根据超能力开发等级分配到多个班级。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>stu3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>stu4&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>又有表&lt;code>top_class&lt;/code>，收录了所有接收高等级超能力者的班级，能进入这些班级的学生都是如同能考上&lt;code>985&lt;/code>、&lt;code>211&lt;/code>般恐怖如斯的存在。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>现在我们要查询出学生中那些恐怖如斯的存在有哪些。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法&lt;code>JOIN [表] ON [条件]&lt;/code>也很简单啦。在例子中，&lt;code>JOIN&lt;/code>表示要联结表&lt;code>top_class&lt;/code>，&lt;code>ON&lt;/code>表示查询的对象要符合条件&lt;code>top_class.id = students.class&lt;/code>。不好理解？看看伪代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">student&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">students&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 先过滤 students 表本身，这个过滤应该由 WHERE 子句完成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">cls&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">top_class&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 然后联结表 top_class
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cls&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 判断 ON students.class = top_class.id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 得出结果
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意，伪代码的查询过程是错误的，为了方便理解 students.class = top_class.id 才这么写。真实数据库实现联结查询的方法应当查阅对应&lt;code>DBMS&lt;/code>的文档。&lt;/p>
&lt;/blockquote>
&lt;p>注意的关键点有&lt;code>ON&lt;/code>很像但不同于&lt;code>WHERE&lt;/code>，在了解&lt;code>LEFT JOIN&lt;/code>和&lt;code>RIGHT JOIN&lt;/code>时会区分。&lt;/p>
&lt;h3 id="left-join">LEFT JOIN&lt;/h3>
&lt;p>&lt;code>LEFT JOIN&lt;/code>又叫&lt;strong>左联结&lt;/strong>，基本思路是写在&lt;code>LEFT JOIN&lt;/code>左边的表满足条件即可作为结果，即使右边的表没有满足条件的条目。&lt;/p>
&lt;p>还是以上文的学园都市数据库为例（我 tm 写了什么&amp;hellip;）&lt;/p>
&lt;p>学生表 &lt;code>students&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>stu3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>stu4&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>班级表 &lt;code>top_class&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>现在我们查询学生都处在哪些班级，得到班级的名字。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询结果应该是这样子的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>name&lt;/th>
&lt;th>cls&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>stu1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu4&lt;/td>
&lt;td>&lt;code>NULL&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意到了吗？&lt;code>stu4&lt;/code>虽然不是&lt;code>top_class&lt;/code>的学生，但是还是被查询出来了。&lt;/p>
&lt;h3 id="right-join">RIGHT JOIN&lt;/h3>
&lt;p>继续拿学园都市做例子&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>其实是和左联结一个鸟样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">RIGHT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们注意到&amp;hellip;&amp;hellip;我就是把 &lt;code>students&lt;/code>和 &lt;code>top_class&lt;/code>换了个位置。查询结果其实是一样的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>name&lt;/th>
&lt;th>cls&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>stu1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu4&lt;/td>
&lt;td>&lt;code>NULL&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="cross-join">CROSS JOIN&lt;/h3>
&lt;p>交叉联结，查询结果是联结的表和&lt;code>FROM&lt;/code>的表的笛卡尔积，这么说听的明白不？听不明白就算了，因为交叉联结基本用不到。&lt;/p>
&lt;p>其实就是把两个表的每个行都排列组合一下：&lt;/p>
&lt;ul>
&lt;li>表 A 行 1-表 B 行 1&lt;/li>
&lt;li>表 A 行 1-表 B 行 2&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;li>表 A 行 10-表 B 行 1&lt;/li>
&lt;li>表 A 行 10-表 B 行 2&lt;/li>
&lt;li>表 A 行 10-表 B 行 3&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="join-自己">JOIN 自己？&lt;/h3>
&lt;p>术语叫自联结，其实也挺好理解的，直接举个例子看看。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>stu3&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>stu4&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>注意我数据改了哈。&lt;/p>
&lt;/blockquote>
&lt;p>现在要查询出所有和&lt;code>stu1&lt;/code>同一个班级的学生。&lt;/p>
&lt;p>一般我们想怎么查？先查出&lt;code>stu1&lt;/code>是哪个班级的：&lt;code>SELECT class FROM students WHERE name = 'stu1'&lt;/code>，然后查出所有属于这个班级的学生：&lt;code>SELECT name FROM students WHERE class = [上次查出来的班级]&lt;/code>。&lt;/p>
&lt;p>那么&amp;hellip;怎么写成一句话呢？&lt;/p>
&lt;p>这时候自联结就可以上场了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;stu1&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询结果是&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>基本思路是这样的：&lt;code>FROM&lt;/code>的表是&lt;code>s1&lt;/code>，因此&lt;code>INNER JOIN&lt;/code>查询结果来自&lt;code>s1&lt;/code>而不是&lt;code>s2&lt;/code>。查找&lt;code>s1&lt;/code>表中每个行的&lt;code>class&lt;/code>在&lt;code>s2&lt;/code>表里有没有行具有同样的&lt;code>class&lt;/code>属性，同时，&lt;code>s2&lt;/code>具有和&lt;code>s1&lt;/code>同样&lt;code>class&lt;/code>属性的行还必须有个&lt;code>stu1&lt;/code>的&lt;code>name&lt;/code>。&lt;/p>
&lt;p>分析得知，&lt;code>s2&lt;/code>中有&lt;code>stu1&lt;/code>这个&lt;code>name&lt;/code>的行只有&lt;code>1&lt;/code>，所以&lt;code>s2&lt;/code>表其实长这样。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这时候再去看&lt;code>s1&lt;/code>表，&lt;code>s1&lt;/code>表的&lt;code>class&lt;/code>同时存在于&lt;code>s2&lt;/code>表的行只有&lt;code>1&lt;/code>和&lt;code>2&lt;/code>了。&lt;/p>
&lt;h3 id="outer-join">OUTER JOIN&lt;/h3>
&lt;p>其实&lt;code>OUTER JOIN&lt;/code>上面的&lt;code>LEFT JOIN&lt;/code>和&lt;code>RIGHT JOIN&lt;/code>已经讲过了，&lt;code>LEFT JOIN&lt;/code>的完整写法就是&lt;code>LEFT OUTER JOIN&lt;/code>，&lt;code>RIGHT JOIN&lt;/code>就是&lt;code>RIGHT OUTER JOIN&lt;/code>，和&lt;code>INNER JOIN&lt;/code>的区别在于&lt;code>OUTER JOIN&lt;/code>包含了指定表里不满足&lt;code>ON&lt;/code>条件的行。&lt;/p>
&lt;p>这有个知识点，就是&lt;code>ON&lt;/code>条件不过滤指定&lt;code>OUTER JOIN&lt;/code>的表的不满足条件的行，但是&lt;code>WHERE&lt;/code>会过滤。&lt;/p>
&lt;h3 id="union">UNION&lt;/h3>
&lt;p>&lt;code>UNION&lt;/code>关键字的术语是&lt;strong>联合查询&lt;/strong>。&lt;/p>
&lt;p>作用是将多个&lt;code>SELECT&lt;/code>的结果放在一起并返回。&lt;/p>
&lt;p>举个例子&amp;hellip;&amp;hellip;我们要查询全美最好的大学&lt;code>american_top_college&lt;/code>和中国最好的大学&lt;code>chinese_top_college&lt;/code>数据，来决定报考哪个大学（反正都考不上），如果不想写成两句&lt;code>SELECT&lt;/code>，然后手工合并成一个表格的话，那么就用&lt;code>UNION&lt;/code>查询吧。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;american&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nation&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">american_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">college_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">american_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">american_top_college&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">UNION&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;china&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nation&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">chinese_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">college_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">chinese_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询结果&amp;hellip;不展示了。&lt;/p>
&lt;p>还有个细节可能要注意，如果有大学同时是美国大学和中国大学的话，那么为了在联合查询中排除相同的项目，可以使用&lt;code>UNION ALL&lt;/code>而不是&lt;code>UNION&lt;/code>。&lt;/p>
&lt;h3 id="fulltext">FULLTEXT&lt;/h3>
&lt;p>&lt;code>MySQL&lt;/code>支持一种实用的文本索引方式，叫做&lt;strong>全文本搜索&lt;/strong>。大家都知道，正则表达式和简单通配符来查找文本是非常消耗性能的操作，而且难以优化（反正我想不出任何减少查询的优化思路）。&lt;code>MySQL&lt;/code>提供了全文本搜索的属性来帮助索引文本（但是想到中文支持我觉得已经凉的差不多了），快速查询出包含特定词汇之类的行。&lt;/p>
&lt;blockquote>
&lt;p>抱歉我觉得不行。不说别的，中文分词就&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>跳过了跳过了。&lt;/p></description></item><item><title>MySQL 24小时入门笔记 - 1</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/</link><pubDate>Sat, 23 Jun 2018 02:24:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/</guid><description>&lt;h2 id="1-数据库概念">1. 数据库概念&lt;/h2>
&lt;h3 id="11-数据和储存">1.1 数据和储存&lt;/h3>
&lt;p>数据库本质上做的工作是储存和查询数据。理论上而言，&lt;code>MySQL&lt;/code>应该叫做&lt;code>DBMS&lt;/code>，也就是&lt;strong>数据库管理系统&lt;/strong>，而不是&lt;strong>数据库&lt;/strong>。&lt;/p>
&lt;p>&lt;code>DBMS&lt;/code>提供了统一的建立、使用、管理数据库的接口，常见的&lt;code>DBMS&lt;/code>有&lt;code>postgreSQL&lt;/code>、&lt;code>MariaDB&lt;/code>、&lt;code>SQL Server&lt;/code>等。&lt;/p>
&lt;h3 id="12-数据库和schema">1.2 数据库和&lt;code>Schema&lt;/code>&lt;/h3>
&lt;p>通常来说，一个&lt;code>DBMS&lt;/code>会支持多个数据库共存。这里所说的&lt;em>数据库&lt;/em>指的是特定数据库管理系统管理下的&lt;em>数据库&lt;/em>，而不是上一节说的&lt;code>DBMS&lt;/code>。&lt;/p>
&lt;p>而&lt;code>Schema&lt;/code>的中译术语一般叫&lt;strong>模式&lt;/strong>，&lt;code>Schema&lt;/code>描述了数据库的结构，比如说有哪些表，表有哪些字段，字段分别有哪些限制，有哪些声明了的函数，等等。&lt;/p>
&lt;p>通常的&lt;code>DBMS&lt;/code>往往是这样的结构：位于&lt;code>DBMS&lt;/code>管理最顶层的是一个或多个数据库，数据库里存放表，表里以行为单位存放数据。&lt;/p>
&lt;h3 id="13-表列键行">1.3 表、列、键、行&lt;/h3>
&lt;h4 id="131-表">1.3.1 表&lt;/h4>
&lt;p>表的英语术语是&lt;code>Table&lt;/code>。&lt;/p>
&lt;p>用过 Excl 吗？&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Mike&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>John&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>直观的表就是一个二维的“表”，有行，有列。&lt;/p>
&lt;h4 id="132-列">1.3.2 列&lt;/h4>
&lt;p>列的术语是 &lt;code>Column&lt;/code>。&lt;/p>
&lt;p>每个列都应该有一个特定的类型（&lt;code>type&lt;/code>），使该列仅仅储存指定类型的数据。&lt;/p>
&lt;h4 id="133-键或者叫码">1.3.3 键&amp;hellip;&amp;hellip;或者叫码&lt;/h4>
&lt;p>键的术语是 &lt;code>Key&lt;/code>。&lt;/p>
&lt;p>通常指的是&lt;code>Primary Key&lt;/code>，也就是主键。主键可以是任意一个列。但是如果列是主键，那么这个列必须每个行都保证不和其他行重复。&lt;/p>
&lt;p>主键也可以是多个列，如果是多个列，那么必须保证这些列的组合不重复。&lt;/p>
&lt;p>举例来说&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>db&lt;/th>
&lt;th>table&lt;/th>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>aa&lt;/td>
&lt;td>aaaaa&lt;/td>
&lt;td>11&lt;/td>
&lt;td>xxxx&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>aa&lt;/td>
&lt;td>bbbbb&lt;/td>
&lt;td>11&lt;/td>
&lt;td>xxxx&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中&lt;code>db&lt;/code>和&lt;code>table&lt;/code>还有&lt;code>id&lt;/code>都是主键，只要保证没有两个行同时存在相同的&lt;code>db&lt;/code>/&lt;code>table&lt;/code>/&lt;code>id&lt;/code>就算是满足了主键约束。&lt;/p>
&lt;blockquote>
&lt;p>需要注意的是，多主键的可移植性存疑，不一定其他的&lt;code>DBMS&lt;/code>会支持。&lt;/p>
&lt;/blockquote>
&lt;h4 id="134-行">1.3.4 行&lt;/h4>
&lt;p>行的术语是 &lt;code>Row&lt;/code>。&lt;/p>
&lt;p>每个行都是一条记录（&lt;code>record&lt;/code>），换做对象的概念的话，也可以说，每个表都储存了一个其特有的的&lt;code>Row&lt;/code>对象的集合，&lt;code>Column&lt;/code>一一对应&lt;code>Row&lt;/code>对象的属性。&lt;/p>
&lt;p>比如上文的&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Mike&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>John&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>对象概念表达就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">class&lt;/span> &lt;span class="nc">row&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="14-sql-是什么">1.4 SQL 是什么&lt;/h2>
&lt;p>&lt;code>SQL&lt;/code>的直译是&lt;strong>结构化查询语言&lt;/strong>，其实就是标准化的数据库查询语言，基本每个&lt;code>DBMS&lt;/code>都支持。&lt;/p>
&lt;p>但是&amp;hellip;&amp;hellip;数据库管理系统对&lt;code>SQL&lt;/code>标准的支持并不是那么上心。其中有性能优化、平台优化之类的原因，也有数据库软件开发商自身的考虑。但总而言之，不要太期待同样的&lt;code>SQL&lt;/code>能在任意&lt;code>DBMS&lt;/code>里都一样跑得欢。&lt;/p></description></item><item><title>鲸鱼游戏面试笔记</title><link>https://nnnewb.github.io/blog/p/%E9%B2%B8%E9%B1%BC%E6%B8%B8%E6%88%8F%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 20 Jun 2018 19:15:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E9%B2%B8%E9%B1%BC%E6%B8%B8%E6%88%8F%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>简单介绍下面试的前置情况。&lt;/p>
&lt;p>面试的公司是鲸鱼游戏，职位是后端开发工程师，开发语言 C++。&lt;/p>
&lt;p>这篇博文主要是为了记录面试中发现的自身不足。&lt;/p>
&lt;p>这次面试里，因为面试约得比较匆忙，所以基本没做任何准备。讲道理的说我是有点盲目自信了，毕竟 C/C++是我的第一语言来着，本来以为考察语言的部分不会有什么问题，但没想到因为紧张而错漏百出。&lt;/p>
&lt;p>那么接下来就直接进入正题，以下是对面试中遇到的问题重新思考后的回答和想法。&lt;/p>
&lt;blockquote>
&lt;p>下面面试官的提问并非原话，有经过脑补润色。&lt;/p>
&lt;/blockquote>
&lt;h2 id="起手式面向对象">起手式：面向对象&lt;/h2>
&lt;blockquote>
&lt;p>面试官：讲讲面向对象，继承，还有多态。我们都知道程序设计有两种常见的范式，面向过程和面向对象，讲讲面向对象给我们带来了什么好处？&lt;/p>
&lt;/blockquote>
&lt;p>实话说第一问就已经有点出乎意料，但想想其实还是在意料之中。初级职位更注重于基础概念和技能，中高级职位可能会在数据结构和并发一类的问题上更深入。&lt;/p>
&lt;blockquote>
&lt;p>答：抽象，归类 blabla&amp;hellip;易于维护 blabla&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>全错。&lt;/strong>&lt;/p>
&lt;p>现在回忆起来，面试官想问的其实只有一点，就是那句&lt;strong>封装&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>封装&lt;/strong>是面向对象的&lt;strong>核心概念之一&lt;/strong>。&lt;/p>
&lt;p>封装使代码成为一个&lt;strong>黑箱&lt;/strong>，让我们不必关注它的实现，而是关注它的&lt;strong>行为&lt;/strong>和&lt;strong>接口&lt;/strong>。&lt;/p>
&lt;p>这产生了&lt;strong>面向接口编程&lt;/strong>的概念，我们不再关注封装后的对象内部的逻辑，我们给封装后的对象以输入，然后从封装后的对象里取出数据。&lt;/p>
&lt;p>&lt;strong>封装&lt;/strong>并不只是一系列接口的集合，更包含了&lt;strong>数据&lt;/strong>和&lt;strong>状态&lt;/strong>，它就是一个微型化的服务，调用者告诉它去做什么事，而不关心它怎么做。&lt;/p>
&lt;h2 id="第二招继承">第二招：继承&lt;/h2>
&lt;blockquote>
&lt;p>面试官：讲讲继承。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：代码复用，blabla&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>代码复用，这是核心。&lt;/strong>&lt;/p>
&lt;p>代码复用是继承最主要的作用，大家都知道。面试官并没有在这方面继续深入，所以能答出代码复用其实已经差不多了。&lt;/p>
&lt;p>除非再抠上语言相关的语法细节：&lt;strong>多继承&lt;/strong>和&lt;strong>单继承&lt;/strong>。&lt;/p>
&lt;h3 id="多继承">多继承&lt;/h3>
&lt;p>C++ 采用了多继承模型，即一个子类可以有多个父类。&lt;/p>
&lt;pre>&lt;code>Father ------|
|====&amp;gt; child
Mother ------|
&lt;/code>&lt;/pre>&lt;p>多继承可以允许一些特殊的编程范式。比如说&lt;code>mixin&lt;/code>模式。但是多继承也存在其固有的复杂性，主要表现在运行时多态上。&lt;/p>
&lt;p>举几个多继承上常见的问题。&lt;/p>
&lt;ol>
&lt;li>父类成员冲突&lt;/li>
&lt;/ol>
&lt;p>典型场景如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">class&lt;/span> &lt;span class="nc">ParentA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ParentB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ParentA&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ParentB&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Child&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// error
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解决办法也很简单&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Child&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ParentA&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之所以如果不调用 &lt;code>func&lt;/code> 就不会出错，是因为 &lt;code>func&lt;/code> 在编译后的 ABI 导出的名字并没有产生冲突。但如果主动调用了&lt;code>func&lt;/code>，编译器则需要插入一个函数调用，但这里的&lt;code>func&lt;/code>语义却是不明确的，所以编译阶段就会报告错误。&lt;/p>
&lt;ol start="2">
&lt;li>&lt;code>dynamic_cast&lt;/code>会改变指针&lt;/li>
&lt;/ol>
&lt;p>&lt;code>dynamic_cast&lt;/code>是基于 RTTI 的运行时类型安全的标准类型转换，&lt;code>dynamic_cast&lt;/code>本身是一个关键字，这里就说一说&lt;code>dynamic_cast&lt;/code>的行为和多继承。&lt;/p>
&lt;p>多继承下的&lt;code>dynamic_cast&lt;/code>会修改指针绝非危言耸听。事实上只要稍作思考就能得出这样的结论：多继承下的内存布局应该是什么样子的？&lt;/p>
&lt;pre>&lt;code>v Pointer to Child
v Pointer to ParentB
v Pointer to ParentA
| ParentA | ParentB | Child |
[-----------====================&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;]
&lt;/code>&lt;/pre>&lt;p>C++ 鼓吹&lt;code>Zero cost abstraction&lt;/code>也不是一天两天的事情了，成果如何不予置评，但显然，专门为多继承下的指针附加类型信息，以允许&lt;code>ParentB*&lt;/code>类型的指针指向的地址和&lt;code>Child*&lt;/code>相同是不可能的。&lt;/p>
&lt;p>遑论 C++标准里根本没&lt;code>地址&lt;/code>这回事儿了，指针指向的是啥玩意儿都有可能。&lt;/p>
&lt;h3 id="单继承">单继承&lt;/h3>
&lt;p>单继承就简单得多，只允许一个父类存在，根据语言设计也可能允许实现多个接口。比如说&lt;code>Java&lt;/code>和&lt;code>C#&lt;/code>。以我比较熟悉的 &lt;code>Rust&lt;/code> 为例（暂不提继承，因为&lt;code>Rust&lt;/code>就没继承这码事儿，全是&lt;code>Trait&lt;/code>），一个&lt;code>struct&lt;/code>可以实现多个&lt;code>Trait&lt;/code>，然后以&lt;code>Trait object&lt;/code>来实现对象多态。&lt;/p>
&lt;p>单继承更多是在多态、重载、接口等方面的取舍，就不细谈了。&lt;/p>
&lt;h2 id="第三招多态">第三招：多态&lt;/h2>
&lt;h2 id="多态和面向接口编程">多态和面向接口编程&lt;/h2>
&lt;blockquote>
&lt;p>面试官：知道多态吗？多态有什么好处？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：多态就是&amp;hellip;blabla&amp;hellip;不去关注子类细节，归类成 xxx&amp;hellip;&amp;hellip;blabla&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>多态&lt;/strong>算是面向对象基本概念之一了。&lt;/p>
&lt;p>多态最基本的解释就是&lt;strong>同一个接口的不同实现&lt;/strong>，但我理解中的&lt;strong>多态&lt;/strong>解释则更趋向于&lt;strong>类型擦除&lt;/strong>，即&lt;strong>我不在乎你是什么黑人、白人、黄种人、香蕉人，我只要你能做到某件事&lt;/strong>。本质上来说，多态的主要作用就是&lt;strong>擦除细节&lt;/strong>。&lt;/p>
&lt;p>举个例子，我打算去面试一家公司，面试官想要的是什么呢？他想要的是&lt;strong>能干活的人&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">class&lt;/span> &lt;span class="nc">Worker&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">declarePay&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">declareEfficiency&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="nf">testWorkEfficiency&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SomeShit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Worker&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Company&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="n">hire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Worker&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>面试者可能是&lt;code>HardWorker&lt;/code>，&lt;code>FxxkWorker&lt;/code>都是&lt;code>Worker&lt;/code>实例，但他们也同时是&lt;code>Human&lt;/code>，可能是&lt;code>Wife&lt;/code>，可能是&lt;code>Husband&lt;/code>，也可能是&lt;code>Father&lt;/code>、&lt;code>Mother&lt;/code>，但是这些我们都不关心。&lt;/p>
&lt;p>我们不可能为每个&lt;code>People某某某&lt;/code>各自定义一个&lt;code>BOOL hirePeople某某某() {}&lt;/code>，我们关注的是工作能力，所以我们要在类型里擦除掉这些无关的细节，保留关注的部分。&lt;/p>
&lt;p>多态做的就是这样的一件事：我不在乎你是谁，我在乎你是不是能干好这件事的人。&lt;/p>
&lt;p>这么说其实有些脱离主题了，因为这是&lt;strong>面向接口编程&lt;/strong>的思想，而不是对&lt;strong>多态&lt;/strong>的学术解释，但这确实就是我对多态的理解，它的主要作用就是&lt;strong>隐藏差异&lt;/strong>，进而发展为&lt;strong>擦除细节&lt;/strong>。&lt;/p>
&lt;p>我的回答其实根本没到点上，也没 Get 到面试官的 point，所以面试官很快就换了下一个问题。&lt;/p>
&lt;h2 id="谈谈虚函数">谈谈虚函数&lt;/h2>
&lt;blockquote>
&lt;p>面试官：虚函数的作用是什么？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：啊？实现多态啊？&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>可以说是最差的回答。&lt;/strong>&lt;/p>
&lt;p>面试中没有反应过来问的啥，知道被拒绝了才突然明白。&lt;/p>
&lt;p>o(￣ヘ￣ o＃)&lt;/p>
&lt;p>这已经问到语言细节了，所以咱们就从语言出发来讲。&lt;/p>
&lt;h3 id="多态">多态&lt;/h3>
&lt;p>首先虚函数是什么？虚函数是 C++实现多态的手段，这么答没错，学过 C++都知道。不过虚函数不仅仅是这一点。&lt;/p>
&lt;p>咱先从这一点讲起。&lt;/p>
&lt;p>虚函数通过一个叫虚函数表的东西来实现多态，这个虚函数表是实现定义的，标准没有对&lt;code>vtable&lt;/code>做什么规定，比如说必须放在类指针的前后几个字节处啊什么的&amp;hellip;&amp;hellip;不存在的。所以也不谈虚表是怎么实现的，这已经是具体到平台和编译器上的差别了，要抠这个的话必须去读编译器和平台相关的各种文档了，PE 格式啊 DLL 啊 SharedObject 啊什么的。&lt;/p>
&lt;p>如果问起来的话&amp;hellip;&amp;hellip;嗯&amp;hellip;&amp;hellip;这个职位应该很厉害。&lt;/p>
&lt;p>所以我就跳过了。&lt;/p>
&lt;p>直接给个虚函数的实例，真的没什么好说的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ParentA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="n">vFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ParentA&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ParentA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="n">vFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Child&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 顺便写调用父类的
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ParentA&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vFunc&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="虚析构函数">虚析构函数&lt;/h3>
&lt;p>C++虚函数的另一个重要用途就是虚析构函数。&lt;/p>
&lt;p>因为&amp;hellip;&amp;hellip;C++对象模型中，析构函数的位置十分尴尬。&lt;/p>
&lt;p>构造函数也就算了，无论如何也要显式调用一次。&lt;/p>
&lt;p>析构函数则因为多态的存在而十分尴尬：给你一个父类指针列表，你显然不能一个一个检查这些指针指向是什么对象，然后再转回去，最后才 &lt;code>delete&lt;/code> 它。&lt;/p>
&lt;p>光是听起来就麻烦得要死，更别提有时候根本做不到。C++脆弱的&lt;code>RTTI&lt;/code>和基本不存在的&lt;code>Reflection&lt;/code>可是出了名的。&lt;/p>
&lt;p>C++对这个问题的解决办法就是虚析构函数。&lt;/p>
&lt;p>和一般的虚函数不同，一般的虚函数一旦被&lt;code>override&lt;/code>，除非你主动调用指定父类的虚方法，否则调用的必然是继承链最后一个&lt;code>override&lt;/code>了这个虚方法的类的虚方法实现。&lt;/p>
&lt;p>析构函数的话就稳了，它会链式的调用继承链上每个类的析构方法，多继承的情况下则是按照继承的顺序调用析构方法。&lt;/p>
&lt;p>&lt;strong>不用主动写&lt;code>ParentA::~ParentA()&lt;/code>，是不是特别爽？&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>还行，这就是个语法糖。&lt;/p>
&lt;/blockquote>
&lt;h3 id="纯虚函数和抽象类">纯虚函数和抽象类&lt;/h3>
&lt;p>最后是纯虚函数。&lt;/p>
&lt;p>其实这玩意儿我更愿意称他为&lt;strong>接口&lt;/strong>。&lt;/p>
&lt;p>本质上来说，纯虚函数规定了一个&lt;strong>方法&lt;/strong>，这个方法接收固定的&lt;strong>输入&lt;/strong>，并保证提供一个&lt;strong>输出&lt;/strong>，相应的可能还有&lt;strong>异常声明&lt;/strong>，来说明这个方法可能抛出的异常。&lt;/p>
&lt;p>怎么样，看起来眼熟不？&lt;/p>
&lt;p>还没完，纯虚方法没有实现（你开心的话也可以写个实现），强制要求子类必须实现，而定义了纯虚方法的类被称之为&lt;strong>抽象类&lt;/strong>。&lt;/p>
&lt;p>我想就算是叫它&lt;strong>接口类&lt;/strong>它也不会反对的吧。&lt;/p>
&lt;p>纯虚函数可以类比于&lt;code>C#&lt;/code>的&lt;code>interface&lt;/code>，或者&lt;code>typescript&lt;/code>的&lt;code>interface&lt;/code>，总之就是各种语言的&lt;code>interface&lt;/code>。这些&lt;code>interface&lt;/code>在具体的规定上可能有所差异，比如说不允许写数据成员啦，数据成员写了不算在实现&lt;code>interface&lt;/code>的类上还要再声明一次啦，&lt;code>interface&lt;/code>的方法可不可以有个默认实现啦，这些都是细节。&lt;/p>
&lt;p>还记得上面我说&lt;strong>多态&lt;/strong>吗？多态的目的是&lt;strong>擦除类型细节&lt;/strong>，所以这些长得各不相同百花齐放的&lt;code>interface&lt;/code>做的事情其实都是一回事：你能做啥，那么你是啥。&lt;/p>
&lt;p>这里再说个细节，纯虚函数作为析构函数的时候，析构函数应该有个实现&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>听起来挺奇怪的？不写纯虚析构函数实现的话，会报个链接错误&amp;hellip;至于为什么要这么做，其中的取舍就不得而知了。&lt;/p>
&lt;p>C++的纯虚函数和抽象类很灵活，没有其他语言&lt;code>interface&lt;/code>种种限制，如果要追问纯虚函数&lt;/p>
&lt;blockquote>
&lt;p>when? where? why?&lt;/p>
&lt;/blockquote>
&lt;p>那就要看到具体场景了，C++这些灵活的特性一不小心就会变成滥用，反正这么问我应该也就答&lt;code>interface&lt;/code>、&lt;code>mixin&lt;/code>以及其他具体需求的场景这样子了。&lt;/p>
&lt;h3 id="mixin-模式">Mixin 模式&lt;/h3>
&lt;p>&lt;code>Mixin&lt;/code>模式在&lt;code>Python&lt;/code>里比较常见，不过 C++也并不是没有。通过定义纯虚析构函数，来给一个对象混入特定功能而又不允许自己被独立构建，算是个常见的范式。&lt;/p>
&lt;p>举个例子，引用计数，如果发现自己引用归零了就释放资源，线程安全之类的问题先不管，仅仅是展示这个范式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">RcMixin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">deleter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">deleter&lt;/span> &lt;span class="n">resDeleter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">RcMixin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">deleter&lt;/span> &lt;span class="n">resDeleter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 线程安全就先放一边
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">RcMixin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">RcMixin&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">resDeleter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">RcMixin&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// 虽然是个RcMixin但是外界并不需要知道它是RcMixin
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeShit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">private&lt;/span> &lt;span class="n">RcMixin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">SomeShit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">:&lt;/span> &lt;span class="n">RcMixin&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">res&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">SomeShit&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">SomeShit&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码没测过，反正大概就是这种感觉，将某些功能混入一个现存的类，而不需要做太多的工作。在 C++里没那么方便，强类型下的 Mixin 需要很多变通技巧才能愉快地混入新功能，而鸭子类型&lt;code>Duck typing&lt;/code>的语言则舒爽很多，当然，最好的还是具有完善 &lt;code>Reflection&lt;/code> 和 &lt;code>Attribute&lt;/code> 支持的语言，完全避免了对&lt;code>Mixin&lt;/code>类型的构造和需要利用的数据的绑定一类的不必要的关注。&lt;/p>
&lt;h3 id="扩展虚继承">扩展：虚继承&lt;/h3>
&lt;p>同样是 &lt;code>virtual&lt;/code> 关键字，虚继承和虚函数关系就不怎么大了。&lt;/p>
&lt;p>虚继承面对的问题是&lt;strong>多继承时，多个父类继承自同一个基类&lt;/strong>这一问题。&lt;/p>
&lt;p>听起来是不是有点奇怪？这些父类继承自同一个基类会有什么问题？&lt;/p>
&lt;p>事实上，这个问题取决于写出多继承代码的人，也取决于这多个父类是否有对多继承方面做过考虑。&lt;/p>
&lt;p>举个简单的例子，&lt;code>ParentA&lt;/code>和&lt;code>ParentB&lt;/code>都继承自&lt;code>DataA&lt;/code>，&lt;code>ParentA&lt;/code>修改了&lt;code>DataA&lt;/code>的数据，但&lt;code>ParentB&lt;/code>不知道。如果&lt;code>ParentB&lt;/code>需要根据&lt;code>DataA&lt;/code>的某些数据进行操作——很遗憾，这个行为可能与预期的不同。&lt;/p>
&lt;p>之所以引入虚继承，是为了解决&lt;strong>要不要共享同一个基类实例&lt;/strong>的问题，选择虚继承，则选择共享基类实例。&lt;/p>
&lt;p>共享基类实例的优势是，多个父类的功能可以无缝结合。&lt;code>ParentA&lt;/code>和&lt;code>ParentB&lt;/code>可以共享基类定义的&lt;code>Mutex&lt;/code>等状态资源——当然，前提是设计父类的人有过这方面的考虑。&lt;/p>
&lt;p>不然的话，不共享基类实例是个保守但更安全，不易出现歧义的选择。&lt;/p>
&lt;h2 id="第四招数组和链表">第四招：数组和链表&lt;/h2>
&lt;blockquote>
&lt;p>面试官：我们聊一下数据结构方面吧&amp;hellip;..讲一下数组和链表？可以从访问和删除两方面来说。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：数组允许随机访问，只需要一步就能找到对应元素，而链表需要&amp;hellip;&amp;hellip;blabla，数组删除元素如果需要移动后续元素的话，会产生复制操作性能损失，链表只需要修改几个指针&amp;hellip;blabla。&lt;/p>
&lt;/blockquote>
&lt;p>实际上答到这里我已经不知道自己在说啥了。&lt;/p>
&lt;p>数组和链表的区别还是挺大的，我应该算是 Get 到了几个点？下面是重新整理了语言后的回答。&lt;/p>
&lt;h3 id="数组和链表的内存布局">数组和链表的内存布局&lt;/h3>
&lt;p>数组和链表两者都是线性数据结构，表现上都是一条有头有尾的有序序列，但是储存方式上有区别。&lt;/p>
&lt;p>数组的储存方式是一端连续的内存空间，索引只需要进行一次指针运算即可获得目标元素的位置，也可以理解为访问时间始终是&lt;code>O(1)&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>PS: 还能写出 0[array] 这样的骚写法，不怕被打死的话。&lt;/p>
&lt;/blockquote>
&lt;p>链表的内存布局则是分散的，通常的链表实现往往是插入元素时动态分配一个元素的空间，而删除的时候再释放，长此以往对内存是不友好的，容易产生内存碎片，导致分配较大空间时无法寻得足够长的连续内存片段而造成分配失败。&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;当然，是长期才会产生的问题，而且是切实存在的问题。&lt;/p>
&lt;h3 id="索引">索引&lt;/h3>
&lt;p>对于数组来说的话，可以理解成标准库的 &lt;code>std::array&lt;/code>，也可以理解成原始数组，但不变的是索引方式始终是&lt;code>O(1)&lt;/code>复杂度，而且支持随机访问迭代器。&lt;/p>
&lt;p>对于链表来说，不考虑优化后的变体，索引方式在本质上都是顺序访问迭代器——指针也算是概念上的迭代器。所以对于链表，访问时间的复杂度最坏情况应该是&lt;code>O(n)&lt;/code>，&lt;code>n&lt;/code>是链表长度。不用说，索引性能自然是不如数组的。&lt;/p>
&lt;h3 id="删除">删除&lt;/h3>
&lt;p>数组删除元素其实是比较烦的，复杂度应该是&lt;code>O(n)&lt;/code>，&lt;code>n&lt;/code>是数组长度减去删除元素在数组中的位置。最麻烦的是万一数组很长，那么复制元素到上一个位置将会是噩梦。&lt;/p>
&lt;p>当然也不是不能优化&amp;hellip;&amp;hellip;把移动的操作推迟到插入新元素的时候就好了，用一个占位符表示这里已经被删除，同时记录前面有多少个元素被删除。这样一来索引性能会下降（因为要找到上一个被删除的元素，然后更新索引位置，直到找到正确的元素），删除性能提高（只要找到上一个被删除的元素然后记录自己作为被删除元素的位置就好），整体实现的复杂度提升，索引删除插入都要另外编写实现，感觉得不偿失。&lt;/p>
&lt;p>链表删除元素很简单，索引到需要删除的元素的时间复杂度是&lt;code>O(n)&lt;/code>，删除操作的时间复杂度是&lt;code>O(1)&lt;/code>，而且实现简单。&lt;/p>
&lt;h3 id="扩展结合两者">扩展：结合两者？&lt;/h3>
&lt;p>好吧，这个问题面试官没问到。&lt;/p>
&lt;p>链表和数组结合一下能解决一部分内存碎片的问题，基本思路的话&amp;hellip;&amp;hellip;咱预先分配 100 个元素，如果插入的元素超过了 100 个，咱再分配 100 个元素的空间，然后索引的时候再去找第二个池？&lt;/p>
&lt;p>这个思路术语叫什么记不起来了。&lt;/p>
&lt;h3 id="哦不他到底想问什么">哦不！他到底想问什么？&lt;/h3>
&lt;p>猜一猜面试官到底想问些什么？&lt;/p>
&lt;ol>
&lt;li>动态内存分配：数组定长，而链表变长。我感觉这个特征基本没什么好说的，工作中基本没有机会自己重新实现一个线性容器，除非要定制一些特殊的结构，环形链表之类的东西。其他像是链表，数组，队列，标准库都有相应的实现。也许是考虑自行编写线程安全版本的 STL？&lt;/li>
&lt;li>&lt;code>std::array&lt;/code>和&lt;code>std::list&lt;/code>。所以问的是啥呢&amp;hellip;？提供的保证和&lt;code>implement specified&lt;/code>还有&lt;code>undefined behavior&lt;/code>吗？STL 现在还没有&lt;code>concept&lt;/code>，但是早早就有了&lt;code>SFINAE&lt;/code>和&lt;code>enable_if&lt;/code>之类的东西，&lt;code>constexpr if&lt;/code> 更是极大地强化了编译期元编程方面的能力。如果是问标准模板库方面的东西的话，我觉得问标准库线程安全啊，迭代器算法之类的东西要合适得多。所以&amp;hellip;&amp;hellip;大概也不是想问这个。&lt;/li>
&lt;li>迭代器。如果是这个的话我真的希望面试官大人能直接说出迭代器三个字&amp;hellip;&amp;hellip;不过好歹回答出随机访问了，应该不至于吧。&lt;/li>
&lt;/ol>
&lt;h2 id="第四招数据库索引">第四招：数据库索引&lt;/h2>
&lt;blockquote>
&lt;p>面试官：讲一下数据库的索引有什么作用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：懵逼&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>还行，直接懵了。&lt;/p>
&lt;p>因为完全没搞明白面试官的意图：索引指的是啥？面试官是想问数据库索引的方式吗？B+树该怎么实现？&lt;/p>
&lt;p>回来路上我考虑了一下，这几方面可能可以作为回答的方向。&lt;/p>
&lt;h3 id="索引的实现">索引的实现&lt;/h3>
&lt;p>数据库索引的常见实现方式是 B+ 树，我数据结构学的不好，只知道 B+ 树是个很厉害的数据结构&amp;hellip;..所以博文写到这里，不得不开始查资料了。&lt;/p>
&lt;blockquote>
&lt;p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反。&lt;/p>
&lt;/blockquote>
&lt;p>如果问起 B+树实现，或者让手写个 B+树的话，我也只能望而兴叹了。&lt;/p>
&lt;h3 id="postgres-数据库的索引属性">postgres 数据库的索引属性&lt;/h3>
&lt;p>对于数据库的实现我了解不多。&lt;/p>
&lt;p>大概就是建立个独立的 B+ 树索引&amp;hellip;&amp;hellip;吧？&lt;/p>
&lt;h3 id="emmmmmm">emmmmmm&lt;/h3>
&lt;p>真想不出了&amp;hellip;&lt;/p>
&lt;h2 id="第五招primary-key">第五招：Primary key&lt;/h2>
&lt;blockquote>
&lt;p>面试官：说下主键的作用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：emmmmmm&amp;hellip;..&lt;/p>
&lt;/blockquote>
&lt;p>到这里我基本已经萌的不行了。（无错字）&lt;/p>
&lt;blockquote>
&lt;p>内心 OS：我是谁？我在哪？我要干什么？&lt;/p>
&lt;/blockquote>
&lt;p>甚至连&lt;strong>zhujian&lt;/strong>都听成了&lt;strong>zujian&lt;/strong>&lt;/p>
&lt;p>被面试官提醒了一下&lt;/p>
&lt;blockquote>
&lt;p>面试官 B：就是那个 &lt;strong>key&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>我也没反应过来&amp;hellip;&amp;hellip;&lt;/p>
&lt;h3 id="有啥用啊天真脸">有啥用啊（天真脸）&lt;/h3>
&lt;p>主键的话，具有唯一性的索引？&lt;/p>
&lt;p>emmmmm，不然还有什么作用呢&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>看来数据库必须下功夫学一学才行啊&amp;hellip;&amp;hellip;&lt;/p>
&lt;h2 id="叮叮叮you-fxxk-up">叮叮叮——You fxxk up&lt;/h2>
&lt;blockquote>
&lt;p>面试官：十动然拒。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：理解理解，谢谢谢谢。&lt;/p>
&lt;/blockquote>
&lt;p>还行，回顾完整个面试流程，除了 C++部分可能是因为发挥失常之外，数据库方面的确是没有下够功夫，以至于连索引和 PrimaryKey 这两问都在持续懵逼。&lt;/p>
&lt;p>而且实话说面试，确实有技巧这回事&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>面试官提的问题也存在着范式——网络上面试真题什么的，看起来像是玩笑，但面试官提出这些问题的时候却是认真的。&lt;/p>
&lt;p>尽管&amp;hellip;&amp;hellip;这种&lt;/p>
&lt;blockquote>
&lt;p>聊聊 xxxx（某技术/概念/工具），xxx 的作用是什么&lt;/p>
&lt;/blockquote>
&lt;p>的提问确实让人不容易抓住重点&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>考察基础的角度来说，现场白板写一个程序，然后再深入聊聊这么写的用意，有没有优化方案，考察对语言的理解和 api 设计、代码架构能力，比单纯的说说 xxx，问 xxx 作用要实际的多。当然并不是说这么问不好，这些概念的掌握也是非常重要的基础，而且能有效考察面试者语言组织能力和对这方面知识的掌握程度。&lt;/p>
&lt;p>唯一不好的就是，面试者和面试官聊的过程就像是用&lt;strong>黑话&lt;/strong>交流一样&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>不说了，学这黑话去&amp;hellip;&amp;hellip;&lt;/p></description></item></channel></rss>