<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on weakptr's 笔记</title><link>https://nnnewb.github.io/tags/network/</link><description>Recent content in network on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Dec 2023 19:08:56 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>一套Linux网络开发/调试/运维的三板斧</title><link>https://nnnewb.github.io/p/%E4%B8%80%E5%A5%97linux%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91/%E8%B0%83%E8%AF%95/%E8%BF%90%E7%BB%B4%E7%9A%84%E4%B8%89%E6%9D%BF%E6%96%A7/</link><pubDate>Tue, 12 Dec 2023 19:08:56 +0800</pubDate><guid>https://nnnewb.github.io/p/%E4%B8%80%E5%A5%97linux%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91/%E8%B0%83%E8%AF%95/%E8%BF%90%E7%BB%B4%E7%9A%84%E4%B8%89%E6%9D%BF%E6%96%A7/</guid><description>&lt;img src="https://nnnewb.github.io/p/%E4%B8%80%E5%A5%97linux%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91/%E8%B0%83%E8%AF%95/%E8%BF%90%E7%BB%B4%E7%9A%84%E4%B8%89%E6%9D%BF%E6%96%A7/cover.jpg" alt="Featured image of post 一套Linux网络开发/调试/运维的三板斧" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>作为网络领域的一个菜鸡，谈不了什么深入的东西。&lt;/p>
&lt;p>近两年的工作里接触比较多的，容器编排工具如k8s、compose，虚拟机编排工具如 libvirt、openstack、ESXi 这些玩意儿，多少都有网络层的虚拟化和编排能力。而我负责做蜜罐系统的主机防火墙策略、蜜罐网络编排、流量牵引，不可避免就会碰到很多网络问题。&lt;/p>
&lt;p>本文不能算正经技术分享文，就当成我对着空气和幻想中的朋友闲聊吧。梳理下从入职到离职这一年多以来，积累的一些技术实践，为建立知识体系做准备，先把点连成线。&lt;/p>
&lt;h2 id="三板斧之-tcpdumpwireshark">三板斧之 tcpdump/wireshark&lt;/h2>
&lt;p>&lt;code>tcpdump&lt;/code> 是最管用的一板斧，跟电工手里的万用表一样。调试防火墙策略、网络转发的时候，常见的异常表现就是没收到/没发出/连接异常，这些都可以通过 &lt;code>tcpdump&lt;/code> 排查。&lt;/p>
&lt;p>比如某个 &lt;code>docker-compose&lt;/code> 编排的业务服务容器，暴露方式是 &lt;code>docker-compose.yaml&lt;/code> 的 &lt;code>ports&lt;/code> 配置，自定义 docker 网络。问题表现是浏览器访问超时，反向代理没有 access log。主机没有开启 firewalld/ufw，selinux 已关闭，有自定义防火墙加固策略。那么问题的阻塞点在哪儿？&lt;/p>
&lt;p>&lt;code>tcpdump&lt;/code> 这时候就跟万用表一样出场了。先看看物理网卡的链路收到流量了没？&lt;code>tcpdump -i eno3 tcp and port 443 -nn&lt;/code>，哦吼，根本没收到。所以问题不在 我们服务器上，直接推给客户网管排查。&lt;/p>
&lt;p>再例如，改了个 &lt;code>libvirtd&lt;/code> 的配置后重启了一下 &lt;code>libvirtd&lt;/code>，发现虚拟机全部不联网了，虚拟机硬件配置无异常。怎么办？&lt;code>tcpdump&lt;/code> 看下网桥流量，咦，没有。再看下桥接，哦，虚拟机 tap 网卡 &lt;code>vnet*&lt;/code> 怎么全都断开桥接了？重新 &lt;code>brctl addif br-test vnet1&lt;/code> 接上，问题解决。再看是否是改配置重启 &lt;code>libvirtd&lt;/code> 的影响，加上对应处理。&lt;/p>
&lt;p>&lt;code>tcpdump&lt;/code> 和 &lt;code>wireshark&lt;/code> 结合使用效果更好，主要是 &lt;code>tcpdump&lt;/code> 分析流量内容没 &lt;code>wireshark&lt;/code> 简单直观。前公司的流量牵引功能实现里，有个用 go 写的的低效软件 NAT 和 tun 网卡，调试过程就会需要看 TCP 报头的字段在转发过程里变化，偶尔也需要看报文内容。&lt;code>tcpdump&lt;/code> 抓好的包还是用 &lt;code>wireshark&lt;/code> 分析更方便。&lt;/p>
&lt;h2 id="三板斧之-iptables">三板斧之 iptables&lt;/h2>
&lt;p>以我有限的经验来看，Linux 网络防火墙基本都包含一定程度上对 iptables 的接管。不论是 &lt;code>firewalld&lt;/code> 还是 &lt;code>ufw&lt;/code>，乃至国产麒麟桌面版自带的防火墙。麒麟桌面有两套防火墙，&lt;code>ufw&lt;/code> 和一套没有提供 cli 的防火墙 &lt;code>kylin-firewall&lt;/code>，就是配置在 &lt;code>/etc/kylin-firewall&lt;/code> 里的那套玩意儿。服务器版则只有 &lt;code>firewalld&lt;/code>。桌面版和服务器版来源大概一个是ubuntu一个是centos。&lt;/p>
&lt;p>&lt;code>iptables&lt;/code> 作为 Linux 防火墙技术的事实标准是必学的。工作常用的 &lt;code>docker&lt;/code> 也好，&lt;code>libvirt&lt;/code> 也好，默认都会涉及一些 &lt;code>iptables&lt;/code> 控制。&lt;/p>
&lt;p>&lt;code>iptables&lt;/code> 最让人烦的就是如果有多个程序想搞 iptables 策略，程序本身写得还不太好的时候，很容易导致策略顺序错乱。而 &lt;code>iptables&lt;/code> 策略对顺序又是敏感的。像 &lt;code>docker&lt;/code> 一样建一条用户策略链是个很好的选择，程序只需要确保用户链策略的存在性和相对顺序，内置链的跳转策略只需要要求存在。但 &lt;code>libvirt&lt;/code> 有点粗暴，策略直接写内建链里，相对就容易出毛病。&lt;/p>
&lt;p>在前司工作的时候，设计防火墙策略时就考虑了大家伙儿一起操作 &lt;code>iptables&lt;/code> 对策略顺序的影响，而且软件化、云部署等客户已有环境上部署的复杂场景，要求接管 &lt;code>iptables&lt;/code> 不太现实。所以仅做了一些有限的控制。比如，要求 &lt;code>docker-compose.yaml&lt;/code> 不配置 &lt;code>ports&lt;/code> 端口映射，因为 &lt;code>docker-proxy&lt;/code> 常出毛病。&lt;code>docker&lt;/code> 不接管 &lt;code>iptables&lt;/code>，业务容器 IP 采用静态定义+&lt;code>iptables&lt;/code>主动控制端口映射。&lt;code>libvirtd&lt;/code>也是，网络策略尽可能选择了自行接管，降低协作的复杂度。而这个决策的 tradeoff ，评估认为让 &lt;code>docker&lt;/code> + &lt;code>libvirtd&lt;/code> + 我们的管理服务 + 防火墙 协作管理 &lt;code>iptables&lt;/code> 的成本收益比太低。&lt;/p>
&lt;p>接管 &lt;code>docker&lt;/code> 和 &lt;code>libvirtd&lt;/code> 的策略还算好推，至于宿主机的防火墙，由于确实有客户在乎这个点（可能是内审合规要求？），所以接管后的策略还是以用户链的形式配置的。客户如果想保留防火墙协同管理 &lt;code>iptables&lt;/code> 策略，也可以，客户自行配置下防火墙的策略就好啦。&lt;/p>
&lt;p>另外几个 &lt;code>iptables&lt;/code> 的坑值得一提。&lt;/p>
&lt;p>一个是 &lt;code>iptables&lt;/code> 的 &lt;code>LOG&lt;/code> 目标和 &lt;code>TRACE&lt;/code> 目标打不出日志，&lt;code>dmesg&lt;/code> 啥也看不到。可能是没加载 &lt;code>nf_log_ipv4&lt;/code> 模块。&lt;code>modprobe nf_log_ipv4&lt;/code> 加载下就行。&lt;/p>
&lt;p>还有 &lt;code>iptables&lt;/code> 的内置表、链或目标不存在，比如 &lt;code>iptables -t nat -S&lt;/code> 提示没有 &lt;code>nat&lt;/code> 表，原因可能是 &lt;code>iptables&lt;/code> 安装损坏了，内核模块丢失。可以尝试重装。需要注意 &lt;code>iptables&lt;/code> 的内核模块包含在哪个包里。而目标不存在则考虑下是不是 &lt;code>iptables&lt;/code> 版本太低了。SLES 11 SP4 这个老古董发行版就缺很多目标。&lt;/p>
&lt;h2 id="三板斧之-iproute2">三板斧之 iproute2&lt;/h2>
&lt;p>&lt;code>iproute2&lt;/code> 是一套网络工具，是 &lt;code>ifconfig&lt;/code>、&lt;code>brctl&lt;/code>、&lt;code>netstat&lt;/code>、&lt;code>route&lt;/code> 这套 &lt;code>net-tools&lt;/code> 工具的替代。现在 &lt;code>ifconfig&lt;/code> 这套命令行工具是弃用状态，很多发行版较新版本要么不带 &lt;code>net-tools&lt;/code> 要么就是 &lt;code>net-tools&lt;/code> 和 &lt;code>iproute2&lt;/code> 共存了。&lt;/p>
&lt;p>&lt;code>iproute2&lt;/code> 这个包最主要用的工具还是 &lt;code>ip&lt;/code> ，用来调链路属性（UP/DOWN等）、IP地址、路由表和策略路由、ARP、隧道等。还有大伙儿应该听过的 &lt;code>ss&lt;/code> ，&lt;code>netstat&lt;/code> 的替代，以及个人用的比较少的 &lt;code>bridge&lt;/code> 。&lt;/p>
&lt;p>&lt;code>iproute2&lt;/code> 这套工具都是基于 &lt;code>netlink&lt;/code> 协议和内核通信的，用 go 写网络代码应该对 &lt;code>github.com/vishvananda/netlink&lt;/code> 这个包不陌生，很多 &lt;code>iproute2&lt;/code> 的功能可以在这个包里找到对应的 API 。&lt;/p>
&lt;h2 id="内核参数">内核参数&lt;/h2>
&lt;p>常用的内核参数列一下。&lt;/p>
&lt;p>&lt;code>net.ipv4.ip_forward&lt;/code> ，控制是否允许跨网卡的IP报文转发，或者简单点说就是路由功能。修改这个配置会影响其他配置，所以还是用 &lt;code>net.ipv4.conf.all.forwarding&lt;/code> 更好。&lt;code>net.ipv6.conf.all.forwarding&lt;/code> 是对应参数的 IPv6 版本。&lt;/p>
&lt;p>&lt;code>net.ipv4.conf.all.rp_filter&lt;/code>，如果反向路由校验不通过则丢弃包，也是在多网卡环境下有影响。举例来说，网卡 eno4 配置的 IP 是 &lt;code>172.19.0.1/24&lt;/code>，但 eno4 收到了来自 &lt;code>192.168.1.100&lt;/code> 的报文，系统没有针对这个 IP 的路由，而且 eno4 没有默认路由，返程会走另一个网卡。这种情况下就会丢弃报文而不处理。&lt;/p>
&lt;h2 id="networkmanager-和其他">NetworkManager 和其他&lt;/h2>
&lt;p>一些经验技巧性的东西。&lt;/p>
&lt;p>现在常见的 RHEL 系发行版和基于 RHEL 系发行版衍生的“兼容”、“自主”发行版基本都用的 &lt;code>NetworkManager&lt;/code>，坚持不把 &lt;code>NetworkManager&lt;/code> 设为默认的，主流发行版里除了 Arch Linux 这样让你自己选的之外，应该就剩 Debian 了。其他更小众的不谈。至于商用的，SLES、RHEL 都是默认 &lt;code>NetworkManager&lt;/code> 。学会用 &lt;code>NetworkManager&lt;/code> 还是很有必要的。&lt;/p>
&lt;p>&lt;code>NetworkManager&lt;/code> 的主要命令行交互界面是 &lt;code>nmcli&lt;/code> 命令，具体翻文档。给网络配置功能做图形前端主要用 &lt;code>NetworkManager&lt;/code> 的 D-Bus 接口。D-Bus 是个非常恶心的玩意儿，但目前没有其他替代，主流 Linux 服务适配的还是它。特别是 systemd 那套东西。有个已知的情况是在 systemd 系统上配 sys-v 启动脚本，有概率在 journald 采集到 systemd 启动的 sys-v 服务相关的 D-Bus 错误 （忘记具体错误消息是啥了，队列满什么的吧。）。安全行业客户日志审计遇到 error 都要我们给个解释，很难顶。专门去学 D-Bus 又很傻逼，ROI 太低。&lt;/p>
&lt;p>还有专门提一嘴的，APUE 这书真的值得手边参考。很多 *nix 常见编程范式都囊括了。读没读过这书做出来的程序设计真的会很不一样。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>后面再想想归纳下这两年的工作经历，项目经验和教训。&lt;/p></description></item><item><title>802和以太网协议概览</title><link>https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/</link><pubDate>Thu, 16 Mar 2023 23:36:25 +0800</pubDate><guid>https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>目前的工作内容除了后端增删改查外多了一些比较有意思的内容，主要是网络方面。搞了几个月，感觉有学到点东西。就当是整理自己的知识体系，后面准备写一系列笔记，关于 Linux/Windows 网络相关的东西，从运维到开发各方面吧。&lt;/p>
&lt;h2 id="数据链路层协议">数据链路层协议&lt;/h2>
&lt;h3 id="一些术语">一些术语&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>术语&lt;/th>
&lt;th>解读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MAC&lt;/td>
&lt;td>Media Access Control addressing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FCS&lt;/td>
&lt;td>Frame Check Sequence (CRC)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CRC&lt;/td>
&lt;td>Cyclic Redundancy Check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LPDU&lt;/td>
&lt;td>An LLC frame is called LLC Protocol Data Unit (LPDU)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DIX&lt;/td>
&lt;td>Digital Equipment Corporation, Intel and Xerox&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="ethernet-ii">Ethernet II&lt;/h3>
&lt;p>区别于 IEEE 802.3 标准集里的以太网协议，Ethernet II 也称 DIX ethernet ，最初由迪吉多（Digital Equipment Corporation）、因特尔（Intel）、和施乐公司（Xerox）为主要参与者制定。和 IEEE 802.3 主要差别在于以太网帧头部的 Ether Type 字段的两个字节如何释义。Ethernet II 解释为 Ether Type，而 IEEE 802.3 解释为 Length 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/2560px-Ethernet_Type_II_Frame_format.svg.png"
width="2560"
height="452"
srcset="https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/2560px-Ethernet_Type_II_Frame_format.svg_hua268d0ec98fc6c750f48eea94e409f02_88313_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/2560px-Ethernet_Type_II_Frame_format.svg_hua268d0ec98fc6c750f48eea94e409f02_88313_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Ethernet II Frame"
class="gallery-image"
data-flex-grow="566"
data-flex-basis="1359px"
>&lt;/p>
&lt;p>另外除了上面同位置字段的释义差别，还有就是在 Ethernet II 格式中 payload 部分的开头，IEEE 802.3 加入了 802.2 LLC 头。&lt;/p>
&lt;h3 id="8023-以太网协议">802.3 以太网协议&lt;/h3>
&lt;p>802.3 以太网帧格式比 Ethernet 2 更复杂一点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/802.3%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%B8%A7%E6%A0%BC%E5%BC%8F.drawio.png"
loading="lazy"
alt="802.3以太网帧格式"
>&lt;/p>
&lt;p>帧头部分除 LENGTH/Ether Type 不同，都和 Ethernet II 没区别，主要关注 LLC 和 SNAP 这两部分。&lt;/p>
&lt;h4 id="8022-llc----logical-link-control">802.2 LLC - Logical Link Control&lt;/h4>
&lt;p>802.2 LLC 直译过来就是逻辑链路控制。参考 &lt;a class="link" href="https://www.cisco.com/c/en/us/support/docs/ibm-technologies/logical-link-control-llc/12247-45.html" target="_blank" rel="noopener"
>Understanding Logic Link Control - Cisco&lt;/a> 这篇文章。历史上，IBM 最初把 LLC 设计成 IBM 令牌环网络的一个子层。&lt;/p>
&lt;p>LLC如前面图中所示分为 &lt;code>DSAP&lt;/code>（Destination Service Access Point）、&lt;code>SSAP&lt;/code>（Source Service Access Point）和&lt;code>CNTL&lt;/code>（Control）三个字段。&lt;code>DSAP&lt;/code>和&lt;code>SSAP&lt;/code>表示的是创建消息的网络层实体的逻辑地址，具体每个位怎么定义参考前面的链接。一般承载 IP 报文的 LPDU 里 &lt;code>DSAP&lt;/code> 和 &lt;code>SSAP&lt;/code> 都定义为 &lt;code>0xAA&lt;/code> ，&lt;code>CNTL&lt;/code> 则定义为 &lt;code>03&lt;/code> （参考 《TCP/IP 详解卷一：协议》）。&lt;/p>
&lt;p>平时不怎么会折腾这个字段，除非很深度玩 L2 设备或协议或者需要解析或者手写 Ethernet 帧的时候可能会需要注意下。目前没这需求，现学现卖即可。&lt;/p>
&lt;h4 id="8022-snap---sub-network-access-protocol">802.2 SNAP - Sub-Network Access Protocol&lt;/h4>
&lt;p>802.2 SNAP 替代了 Ethernet II 帧格式里的 Ether Type 字段，加了个比较见鬼的 &lt;code>ORG CODE&lt;/code> ，于是又变成了历史遗留问题。真就觉得自己公司千秋万代了呗。&lt;/p>
&lt;p>&lt;code>ORG CODE&lt;/code> 参考 &lt;a class="link" href="https://www.rfc-editor.org/rfc/rfc1340" target="_blank" rel="noopener"
>RFC 1340 - ASSIGNED NUMBERS&lt;/a> 。一般就置 0 。&lt;code>TYPE&lt;/code> 字段则和 Ethernet II 的 Ether Type 字段取值一样。取值可以参考 &lt;a class="link" href="https://en.wikipedia.org/wiki/EtherType" target="_blank" rel="noopener"
>Ether Type - Wikipedia&lt;/a> ，比如 IPv4 是 &lt;code>0x0800&lt;/code>，ARP 是 &lt;code>0x0806&lt;/code>，IPv6 是 &lt;code>0x86DD&lt;/code> 。&lt;/p>
&lt;h4 id="8021q-vlan协议">802.1Q VLAN协议&lt;/h4>
&lt;p>802.1Q 协议和 802.3 以太网帧区别在于 Ether Type/Length 和 Source MAC 之间加入了一个 4 字节的 802.1Q Header 。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/2560px-Ethernet_802.1Q_Insert.svg.png"
width="2560"
height="269"
srcset="https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/2560px-Ethernet_802.1Q_Insert.svg_hu4586e112ae8714a0abaf15749097ce2b_70372_480x0_resize_box_3.png 480w, https://nnnewb.github.io/p/802%E5%92%8C%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A7%88/2560px-Ethernet_802.1Q_Insert.svg_hu4586e112ae8714a0abaf15749097ce2b_70372_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="802.1Q Tagging"
class="gallery-image"
data-flex-grow="951"
data-flex-basis="2284px"
>&lt;/p>
&lt;p>802.1Q Header 中 TPID (Tag Protocol Identifier)占用原 Ether Type 位置，取值 &lt;code>0x8100&lt;/code>。正好起到和 Ether Type 一样的作用。&lt;/p>
&lt;p>随后的3比特表示 &lt;a class="link" href="https://en.wikipedia.org/wiki/Class_of_service" target="_blank" rel="noopener"
>802.1p class of service&lt;/a> ，理解为优先级。下一比特是 Drop Eligible Indicator，表示拥塞时是否允许丢弃包。这4个比特位都用于拥塞控制。&lt;/p>
&lt;p>剩下12个比特位表示 VID，或者说 VLAN ID，用于区分 VLAN。&lt;/p>
&lt;p>后面的 Ether Type 字段和 Payload 就和 802.3 Ethernet 没什么区别了，可以解析为 Ethernet II 也可以解析为 802.3 Ethernet。&lt;/p>
&lt;h3 id="hub-集线器">Hub 集线器&lt;/h3>
&lt;p>集线器就像是把网线给串联起来，集线器上一台设备发出的以太网帧，所有设备都会收到。&lt;/p>
&lt;p>就是这种设备，靠 802.3 CSMA/CD 也能支撑基本的数据链路层通信。&lt;/p>
&lt;h3 id="l2-交换机">L2 交换机&lt;/h3>
&lt;p>L2 交换机是在以太网帧这一层的交换，按照以太网帧头部中的控制字段来决定把帧转发到哪个网口。为了实现这个目的，L2交换机还得能“学习”到每个网口连接的设备 MAC 地址是什么，以便做转发动作。&lt;/p>
&lt;p>L2 交换机和路由器的最大区别在于交换机是根据 MAC 地址做的转发，计算机在以 IP 协议访问局域网设备时，会通过 ARP 协议获取目的 MAC 地址，然后直接构造以太网帧发送。交换机可以直接把以太网帧送给对应的设备而无需经过路由器解析 IP 报文再封包以太网帧。可以说交换机性能决定了局域网传输的速度。&lt;/p>
&lt;p>这篇文章介绍了交换机是怎么学习 MAC 地址的 &lt;a class="link" href="https://www.computernetworkingnotes.com/ccna-study-guide/how-switch-learns-the-mac-addresses-explained.html" target="_blank" rel="noopener"
>How Switch learns the MAC addresses Explained&lt;/a> 。&lt;/p>
&lt;p>有些高级点的交换机还支持 VLAN 虚拟局域网，允许把交换机上几十个口再划分成更小的局域网以实现网络隔离。同时 VLAN 技术也让一张网卡一条网线接入多个局域网成为可能。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>一千来个字憋一两周，这工作要命，没时间看书没时间学习。&lt;/p></description></item></channel></rss>