<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>杂谈 on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/tags/%E6%9D%82%E8%B0%88/</link><description>Recent content in 杂谈 on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 24 Dec 2022 14:36:31 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/tags/%E6%9D%82%E8%B0%88/index.xml" rel="self" type="application/rss+xml"/><item><title>羊了</title><link>https://nnnewb.github.io/blog/p/%E7%BE%8A%E4%BA%86/</link><pubDate>Sat, 24 Dec 2022 14:36:31 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E7%BE%8A%E4%BA%86/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/%E7%BE%8A%E4%BA%86/cover.webp" alt="Featured image of post 羊了" />&lt;p>简述下感受。&lt;/p>
&lt;p>几乎就是放开之后几天，先是弟弟在佛山有感冒症状给送回家，然后是父母阳了，接着就是我。&lt;/p>
&lt;p>从 12/9 得知家人阳性开始居家，12/12开始发热，最高烧到40°，然后进入恢复期等转阴。&lt;/p>
&lt;p>上次抗原在 12/21 还是清晰的两条杠。&lt;/p>
&lt;p>今天，12/24，咳嗽症状还在。另外不知道是不是新冠确实削弱了免疫系统，在发热症状消退后两天就出现了严重的牙龈炎，持续到现在还肿着，伴随偶尔来一下的神经痛，十分刺激。&lt;/p>
&lt;p>以上。&lt;/p>
&lt;p>另外还有点别的想说。&lt;/p>
&lt;p>今年11月因为广州疫情爆发，居家办公了一个月，放开后上班不到两天，又先后全家阳性，11~12两个月几乎没怎么好好上班。以至于前段时间听说本部门老大离职了，我居然成了最后一个知道的。&lt;/p>
&lt;p>心里五味杂陈，真的是难以言喻。转正前那段时间本来不想留的，还是被他劝下来的。结果才个月就立场互换。同期两个试用期同事都没留，入职前联系的HR在我入职后就跑了。&lt;/p>
&lt;p>难顶。&lt;/p>
&lt;p>说起来还有点惭愧，本来居家办公还少了2小时/天的通勤时间，不管是写博客、看书还是培养点兴趣爱好都是好的，但果然还是和以往一样，多出来的时间没有得到有效利用。说起来上家也是真的待遇挺好的，但凡项目管理上要是有现在这家的80%的功夫，也不至于几年都出不了一个那么简单的产品，今后估计想找到这样一家公司难了。&lt;/p>
&lt;p>不说工作的屁事了。&lt;/p>
&lt;p>双11买了几本书，惯例买重了一本（我都为自己这脑子悲哀），不久前才送到。&lt;/p>
&lt;ul>
&lt;li>《深入理解Linux网络技术内幕》x2&lt;/li>
&lt;li>《CSAPP》&lt;/li>
&lt;li>《深入理解Linux内核》&lt;/li>
&lt;li>《计算机网络-自顶向下方法》&lt;/li>
&lt;li>《Rust系统编程》&lt;/li>
&lt;li>《CTF竞赛权威指南-PWN》&lt;/li>
&lt;li>一整套《鲁迅全集》二十本。&lt;/li>
&lt;/ul>
&lt;p>按惯例还是没开始看，拿来压书架了。&lt;/p>
&lt;p>工作里发现《TCP/IP 协议详解：卷一》这本有点实用到意外，必须找时间看了。&lt;/p>
&lt;p>最后，在看《孤独摇滚》，芳文社 yyds ！电吉他已下单，燥起来！把东京塔烧成灰（精神错乱）！&lt;/p></description></item><item><title>systemd 配置 ssh-agent 用户服务自启</title><link>https://nnnewb.github.io/blog/p/systemd-%E9%85%8D%E7%BD%AE-ssh-agent-%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%90%AF/</link><pubDate>Mon, 27 Jun 2022 11:17:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/systemd-%E9%85%8D%E7%BD%AE-ssh-agent-%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%90%AF/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>主要是想解决一个问题：ssh 只自动尝试了 &lt;code>~/.ssh/id_ed25519&lt;/code> 这个硬编码的路径，但我有两个 ed25519 秘钥（工作用一个，私人一个），除非用 &lt;code>ssh -i&lt;/code> 指定不然不会被自动发现和使用。&lt;/p>
&lt;p>但我又不想多打个 &lt;code>-i ~/.ssh/id_ed25519.xxx&lt;/code> ，所以就想配个 &lt;code>ssh-agent&lt;/code> 好了，手动&lt;code>ssh-add&lt;/code> 还是自动都可。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;h3 id="创建服务配置">创建服务配置&lt;/h3>
&lt;p>位置：&lt;code>~/.config/systemd/user/ssh-agent.service&lt;/code>&lt;/p>
&lt;p>内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="k">[Unit]&lt;/span>
&lt;span class="na">Description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">SSH key agent&lt;/span>
&lt;span class="k">[Service]&lt;/span>
&lt;span class="na">Type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">simple&lt;/span>
&lt;span class="na">Environment&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">SSH_AUTH_SOCK=%t/ssh-agent.socket&lt;/span>
&lt;span class="na">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/usr/bin/ssh-agent -D -a $SSH_AUTH_SOCK&lt;/span>
&lt;span class="k">[Install]&lt;/span>
&lt;span class="na">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">default.target&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加 &lt;code>SSH_AUTH_SOCK DEFAULT=&amp;quot;${XDG_RUNTIME_DIR}/ssh-agent.socket&amp;quot;&lt;/code> 到 &lt;code>~/.pam_environment&lt;/code>。&lt;/p>
&lt;p>在我的系统上 &lt;code>XDG_RUNTIME_DIR&lt;/code> 对应 &lt;code>/run/user/你的用户id&lt;/code> ，不同发行版自己看下这个全局变量对应哪个位置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">echo&lt;/span> SSH_AUTH_SOCK &lt;span class="nv">DEFAULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">XDG_RUNTIME_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/ssh-agent.socket&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> tee -a ~/.pam_environment
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可选，自动添加秘钥（OpenSSH版本&amp;gt;=7.2）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;AddKeysToAgent yes&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.ssh/config
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="启用服务">启用服务&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl --user &lt;span class="nb">enable&lt;/span> ssh-agent
systemctl --user start ssh-agent
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重新登录后生效。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>参考：&lt;a class="link" href="https://unix.stackexchange.com/questions/339840/how-to-start-and-use-ssh-agent-as-systemd-service" target="_blank" rel="noopener"
>How to start and use ssh-agent as systemd service?&lt;/a>&lt;/p></description></item><item><title>2022年5月27日 面试记录</title><link>https://nnnewb.github.io/blog/p/2022-05-27-interview-note/</link><pubDate>Fri, 27 May 2022 18:33:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2022-05-27-interview-note/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>面试完，结果只能说我对自己也不算很满意，顺带反思了一下是不是表现得太着急了。&lt;/p>
&lt;p>原本以为一个小时足矣，结果面到快12点，才结束完面试，还没出门就碰到泼水一样的暴雨。花了一个多钟头到家，已经是下午1点十几分了。原本打算去公司继续上下午的班，但累到没有一点心情，于是把上午的假延长到下午。&lt;/p>
&lt;p>typora 建好文件后就着住房改造家的视频吃了午饭，再看会儿 boss 上的的 jd ，还是劝自己把面试的复盘写完，迟早都是要写的。&lt;/p>
&lt;h2 id="技术面">技术面&lt;/h2>
&lt;p>开场技术面，自我介绍、关于离职原因一类的问题就略了。我不记得所有问题，所以就单独把还有映像的问题拿出来复盘下。鉴于我技术栈两门语言，面试官 Python 和 Go 的题混合问的，我回忆的顺序大概也对不上实际面试中问的顺序。&lt;/p>
&lt;h2 id="简答题">简答题&lt;/h2>
&lt;h3 id="深浅拷贝">深浅拷贝&lt;/h3>
&lt;p>基础题。复盘中自我感觉回答应该没什么遗漏，但沟通中感觉和面试官就 &lt;strong>拷贝&lt;/strong> 意指 &lt;code>a=b&lt;/code> 还是 &lt;code>a=list(b)&lt;/code> 有点误会，但总之问题不大。&lt;/p>
&lt;h3 id="哈希冲突哈希表时间复杂度哈希表实现dict是不是哈希表">哈希冲突、哈希表时间复杂度、哈希表实现、dict是不是哈希表&lt;/h3>
&lt;p>简单的算法和一点CPython实现细节。&lt;/p>
&lt;p>哈希冲突实质是摘要函数输入空间和输出空间不对等，冲突无法避免。&lt;/p>
&lt;p>哈希表的时间复杂度是 &lt;code>O(1)&lt;/code> ，面试官还问了为什么是 &lt;code>O(1)&lt;/code>，emm，我的回答是直接拿哈希值当索引的情况下空间换时间，最理想的情况一条指令就能取到元素了。回答不太准，问了下谷歌说是最坏O(n)，平均O1。显然最坏的情况就是碰撞了。&lt;/p>
&lt;p>哈希表实现的话，当时没敢答。现在想想的话，在 leetcode 做过相关的题，简单的实现比如把ascii码表（或者随便什么序列）映射到一块连续内存上然后就能直接去索引了，复杂的实现问谷歌回答是 Java 的 HashMap 是红黑树实现，Go 的 map 也是哈希表，但实现也不是我说的那种直接映射到一块内存上。总之就是各有不同吧。&lt;/p>
&lt;p>&lt;code>dict&lt;/code> 底层也是哈希表，下次记得问 &lt;code>map&lt;/code>/&lt;code>dict&lt;/code> 都回答哈希表就是了。&lt;/p>
&lt;p>具体 Go 和 Python 的实现抽时间再找解析看看，不行就硬读源码了。&lt;/p>
&lt;h3 id="并发和并行">并发和并行&lt;/h3>
&lt;p>可能是几年前看过，但当时印象不深，太偏理论了，实践中很少能碰到抠这俩字眼的情况。重温下。&lt;/p>
&lt;p>并发是 concurrent，并行是 parallel ，有个比较形象的说法是并发是同一时间发生几件事，并行是这几件事同时发生。&lt;/p>
&lt;p>放到操作系统原理来解释就是并发可以是单核CPU给两个进程都分了时间片，所以 &lt;strong>看起来&lt;/strong> 两者同时执行，但实际上两者还是有先后，或者交错进行的。并行就是多核 CPU &lt;strong>同时&lt;/strong>在跑两个进程的代码，两个程序是真的同时处于运行状态。&lt;/p>
&lt;h3 id="gil">GIL&lt;/h3>
&lt;p>基础题。我当时回答是执行字节码的时候加的锁，确保同时只有一个线程在执行字节码，目的是简化编程，后来因为各种原因就变成了历史遗留，各种去除GIL改成细粒度锁的尝试目前还没有很好的结果。&lt;/p>
&lt;p>特地回顾了下python文档，确定了文档的说法和我记忆中是一样的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/2022-05-27-interview-note/image-20220527170018461.png"
width="815"
height="103"
srcset="https://nnnewb.github.io/blog/blog/p/2022-05-27-interview-note/image-20220527170018461_hud3e9d34ad8ba2fd890523a9182bdfc8d_29027_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/2022-05-27-interview-note/image-20220527170018461_hud3e9d34ad8ba2fd890523a9182bdfc8d_29027_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220527170018461"
class="gallery-image"
data-flex-grow="791"
data-flex-basis="1899px"
>&lt;/p>
&lt;p>但感觉面试官不太满意的样子…为啥呢。&lt;/p>
&lt;h3 id="gmp">GMP&lt;/h3>
&lt;p>基础题。但没背八股，照着映像乱讲一通了。&lt;/p>
&lt;p>G就是goroutine，M是操作系统线程，P是处理器。好像也有管P叫管理器。&lt;/p>
&lt;p>整个模型就是 M 绑定 P，M 有个 G 队列，然后就是抢占式调度。&lt;/p>
&lt;blockquote>
&lt;p>2022年5月30日 订正&lt;/p>
&lt;p>这里我的理解是错的，参考下面这图&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/GMP%e6%a8%a1%e5%9e%8b.jpg"
loading="lazy"
alt="gmp模型"
>&lt;/p>
&lt;p>P 维护队列，M 绑定 P 运行 G，当 G 阻塞的时候视阻塞类型放到 netpoller 里，或者sysmon标记成可以被抢占，或者把 G 和 M 分出去（解绑P），让其他 M 绑定 P 继续处理其他 G 。&lt;/p>
&lt;/blockquote>
&lt;p>要说遗漏的内容的话 emm&lt;/p>
&lt;ul>
&lt;li>GMP 还有个全局 G 队列&lt;/li>
&lt;li>work stealing：M 在没有任务的时候会抢其他 M 队列里的 G 去调度&lt;/li>
&lt;li>hand off：M 阻塞的时候会释放 P，让其他线程跑。（不太理解）&lt;/li>
&lt;li>P 数量不一定对应物理核心或者逻辑核心数量，可以调。&lt;/li>
&lt;li>M 是 Go runtime 阻塞的时候自动创建新的，有上限。&lt;/li>
&lt;li>M0 和 G0&lt;/li>
&lt;/ul>
&lt;p>漏的东西还挺多的。因为面 Python 都忘了要看下 Go 的经典八股。&lt;/p>
&lt;h3 id="gc">GC&lt;/h3>
&lt;p>基础题。Go的 GC 是从 Mark-Sweep 到三色标记算法（黑白灰），面试中具体的算法内容没提。还提到Go的内存返还机制，但没表达清楚。&lt;code>MADV_FREE&lt;/code> 的坑也没提。&lt;/p>
&lt;h3 id="混合写屏障">混合写屏障&lt;/h3>
&lt;p>GC进阶一点的题？面试时没答上来。讲真应该把Go的八股先看看的…&lt;/p>
&lt;p>写屏障是一个无STW场景才存在的问题，STW的话就不会在扫描的时候有谁在写了。写屏障是为了解决扫描的时候有人在写对象的问题，避免三色标记错误。&lt;/p>
&lt;p>混合写屏障是混合了两种写屏障算法（ Dijkstra 插入屏障和 Yuasa 删除屏障）。&lt;/p>
&lt;p>具体的我先放个链接在这里吧=。=&lt;/p>
&lt;p>懒得抄一遍。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://golang.design/under-the-hood/zh-cn/part2runtime/ch08gc/barrier/#heading2" target="_blank" rel="noopener"
>写屏障技术 - Go语言原本&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.jianshu.com/p/4c5a303af470" target="_blank" rel="noopener"
>Golang 三色标记、混合写屏障GC模式图文全分析&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="innodb">InnoDB&lt;/h3>
&lt;p>数据库题。问题有点宽泛到摸不着头脑，但真要我介绍下 InnoDB 是个啥有啥特性我也真说不上来。&lt;/p>
&lt;p>先留个链接等之后再细读。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html" target="_blank" rel="noopener"
>mysql 5.7 innodb introduction&lt;/a>&lt;/li>
&lt;li>《MySQL技术内幕（InnoDB引擎）》&lt;/li>
&lt;/ul>
&lt;p>面试官居然问你们不用MySQL的吗…我…&lt;/p>
&lt;p>行吧……&lt;/p>
&lt;p>简直是暴击。&lt;/p>
&lt;h3 id="docker隔离原理">docker隔离原理&lt;/h3>
&lt;p>基础题吧。&lt;/p>
&lt;p>基本原理就是利用内核的 namespace 隔离了 pid、mount、network，chroot 隔离了文件系统，cgroup 控制资源使用。&lt;/p>
&lt;p>面试的时候忘记了一个 &lt;code>UTS&lt;/code> ，就是隔离 hostname ，还有 IPC，还有 USER 。另外就是 cgroup 也是有 namespace 的。&lt;/p>
&lt;p>具体可以看 &lt;code>unshare&lt;/code>，直接 &lt;code>man unshare&lt;/code> 就行。&lt;/p>
&lt;h2 id="论述题">论述题&lt;/h2>
&lt;h3 id="python给函数加超时装饰器">python给函数加超时装饰器&lt;/h3>
&lt;p>面试的时候回答是&lt;code>async def&lt;/code> 可以直接用 &lt;code>future&lt;/code> 实现。普通函数可以用线程，完成后信号量统治下调用方。当时就中途返回的问题拉扯了一下，感觉还是没讲清楚。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">time&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">sleep&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">timeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">wrapper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">wrapped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 构造一个 0 信号量&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Semaphore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="c1"># 包装一下，任务完成时返回结果并发出完成信号&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">_f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sem&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Semaphore&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">nonlocal&lt;/span> &lt;span class="n">result&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sem&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">_f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># acquire 会把信号量 -1 ，不满足时等待，这里利用了 acquire 自带的 timeout 参数&lt;/span>
&lt;span class="c1"># 如果问到更底层的话比如C/C++甚至汇编，可能要依赖OS功能（信号机制之类的）来唤醒，大概这样。&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;timeout&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">wrapped&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">wrapper&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nd">@timeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;hahaha&amp;#39;&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就是我说的信号量解法。但面试官后来又问是不是每个装饰器都要一个信号量，我猜面试官对这个解还不满意。&lt;/p>
&lt;p>不使用信号量也能实现，但无论如何这个等待和唤醒要依赖一个异步通知机制，总是没法避免。&lt;/p>
&lt;p>分离到另一个线程里执行也是个比较头疼的做法，但面试那儿会想不出更好的主意。&lt;/p>
&lt;h3 id="三个goroutine循环输出abc">三个goroutine循环输出abc&lt;/h3>
&lt;p>面试的时候下意识回答用&lt;code>mutex&lt;/code>，但拿纸笔整理了下思路，改成了用&lt;code>chan&lt;/code>感觉更好。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">a&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}{}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">in&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">out&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">in&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">out&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}{}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// abcabcabcabcabc
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>面试官还问到是不是无buffer的 &lt;code>chan&lt;/code>，我说是1 。当时没想那么多，实际分析代码会发现必须是1，不能是无缓冲的，因为循环末尾&lt;code>c&lt;/code>会再发信号给&lt;code>a&lt;/code>，而那时候&lt;code>a&lt;/code>已经退出了，无缓冲的情况下&lt;code>c&lt;/code>会阻塞死，会报错 &lt;code>all goroutines are asleep&lt;/code> 。但1缓冲就不会有这个问题。&lt;/p>
&lt;h3 id="分布式追踪架构和实现侵入非侵入">分布式追踪架构和实现（侵入/非侵入）&lt;/h3>
&lt;p>这个主要是吹逼。&lt;/p>
&lt;p>讲了下分布式追踪基本的架构，也就是从 &lt;code>Agent&lt;/code> 到 &lt;code>Collector&lt;/code> 再到存储，然后前端从存储查数据展示，基本数据结构 Span 啦什么的。&lt;/p>
&lt;p>面试官还问能不能非侵入，非侵入和侵入有什么区别，这部分就是吹水了。侵入的话自然是什么都能做，把分布式追踪当日志用。非侵入的话就是外面挂 sidecar，代理流量，也能拿到 RPC 调用、HTTP请求之类的数据，举例就是服务网格。当然还有 pprof 也能拿到一些统计数据但那个是时序性的，应该叫 metrics ，和追踪又不太一样。&lt;/p>
&lt;p>但后来发现和面试官理解有点偏差，面试官只想不侵入业务代码，但应用代码是可以侵入的，那就好办多了。不管是 sql.driver 还是自定义 logger 都行，很多组件都支持插中间件，这种情况下基本和侵入业务代码差不多了，除了一些更细致的像是统计某个循环跑了多久之类的还需要单独写 span 办不到之外（要是封装个&lt;code>timeit&lt;/code>之类的也不算侵入的话那就0限制了，想干啥都行）。&lt;/p>
&lt;h3 id="upv-登录界面几个接口">UPV 登录界面几个接口&lt;/h3>
&lt;p>面试官画了个图问这界面要几个后端接口。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/2022-05-27-interview-note/image-20220527181148464.png"
width="800"
height="600"
srcset="https://nnnewb.github.io/blog/blog/p/2022-05-27-interview-note/image-20220527181148464_hu060edb4cd2e9977ccffafca537a042b4_41474_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/2022-05-27-interview-note/image-20220527181148464_hu060edb4cd2e9977ccffafca537a042b4_41474_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220527181148464"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>U是用户名，P是密码，V是验证码。&lt;/p>
&lt;p>我的回答是2~3个，看验证码刷新要不要单独给个接口。&lt;/p>
&lt;p>然后又问你会怎么实现这个登录接口。&lt;/p>
&lt;p>emm，感觉题有点怪，想考察思维全面不全面？答了几个点：&lt;/p>
&lt;ul>
&lt;li>密码加盐哈希，一般就直接 HMAC&lt;/li>
&lt;li>SESSION_ID 取正确验证码来验证&lt;/li>
&lt;li>给 ratelimit，验证码刷新和登录尝试都要限&lt;/li>
&lt;li>CSRF Token，可以是直接从服务端返回（服务端渲染）或者Ajax 拿到&lt;/li>
&lt;/ul>
&lt;p>现在的话想起来几个新的点&lt;/p>
&lt;ul>
&lt;li>用户量很大的话查数据库压力太大，可以加一层缓存，验证密码的时候不访问数据库了&lt;/li>
&lt;li>错误信息控制，防止爆破用户名&lt;/li>
&lt;li>响应时间控制，防止 Timing Attack （虽然可能性真的很低，但结合下数据库压力，能让走数据库和不走数据库的请求有明显时间差异的话还是可能爆出用户名的，感觉是非常极端的情况了）&lt;/li>
&lt;li>前后端分离的情况下前端单独nginx部署肯定是没有后端返回的会话ID或者验证码ID什么的，这种情况下会话标识、CSRF Token 都只能 Ajax 拿。最近PHP看多了感觉思路在往后端渲染跑。前后端分离最少也要2个接口，CSRF、验证码+验证码ID（或者会话ID，总之要把登录请求和验证码联系起来）&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>薄弱点基本确定了。&lt;/p>
&lt;p>一个是Go方面，八股背熟真的有用。&lt;/p>
&lt;p>另一个是MySQL，一方面是需要切实再深入一下，另外MySQL的八股也得找找。&lt;/p>
&lt;p>虽然面完让我有点幻灭的感觉，安全行业不止卷还抠=。=&lt;/p>
&lt;p>虽然让我等联系，但估计也没下文了。骑驴找马还得继续。&lt;/p></description></item><item><title>好事儿来乐</title><link>https://nnnewb.github.io/blog/p/good-thing-happens-2022-5-25/</link><pubDate>Wed, 25 May 2022 16:18:52 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/good-thing-happens-2022-5-25/</guid><description>&lt;p>分享下喜讯，倒不是找到女朋友了，而是投简历三天终于约到了第一个面试。虽然和最初期待的安全方向有点偏差，没面到渗透测试的岗位，但薪资能涨点的话还是挺不错的。&lt;/p>
&lt;p>不过往安全行业继续探索的想法暂时还没变，互联网别的行业兴趣确实不大，非互联网的做软件我是真的担心项目管理的水平行不行，全看团队合不合得来，越做越糟心，还不如一开始就拒绝。安全还算有一点兴趣，不管是干开发还是做安服起码都还是技术岗，营收靠技术起码保证能活下来的公司技术管理上不会太糊吧。我希望是这样。&lt;/p>
&lt;p>另外一个重大问题就是学历、证书、开源项目（技术文章）三个重大问题，学历有望解决，别的证书主要是烧钱。学历和证书都要时间，所以如果看对眼的话期望工作之余能顺利拿到学位证，再看情况考个 CISP 之类的证（emm，但看起来渗透测试月薪开得比较低，不值一个 CISP-PTE 这样要几个w 的证，安全开发职位看起来并不是很多）。&lt;/p>
&lt;p>开源项目和技术文章质量还得提高，开源项目目前的问题是没找到适合的参与，自己写也没有方向。技术文章受限于自己水平有限，写起来基本是一边做一边写，时不时发现自己理解有误又改一下，最后产出乱七八糟的，感觉远没有那些精品文章写得好。这个没啥好主意，练呗。&lt;/p>
&lt;p>就这样啦，开心一下。&lt;/p></description></item><item><title>BurpSuite 入门和正在做的技能树</title><link>https://nnnewb.github.io/blog/p/get-start-burpsuite-and-my-skill-tree/</link><pubDate>Tue, 24 May 2022 14:48:22 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-burpsuite-and-my-skill-tree/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/get-start-burpsuite-and-my-skill-tree/clement-helardot-95YRwf6CNw8-unsplash.jpg" alt="Featured image of post BurpSuite 入门和正在做的技能树" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>因为一些不可抗力因素，不得不提前准备换工作事宜了。&lt;/p>
&lt;p>早上尝试投了两家安全方向的企业，但目前还没有好消息传来。于是根据招聘App上看到各个企业招渗透测试给出的技术栈要求，决定下一步是对技术外的两个方面初步挖掘下。&lt;/p>
&lt;p>一是工具掌握上，不知道是HR懒喜欢从别人公司的招聘要求上复制还是技术负责人确实在乎，反正大部分要求上都写要熟悉 BurpSuite、MSF 之类的玩意儿。这方面确实有欠缺，工具到现在还只在靶场用过 sqlmap，所以接下来计划熟悉下 BurpSuite 和 MSF，也看看 Kali Linux 这个常常和 script kid 联系起来的发行版有啥东西可以玩玩看。&lt;/p>
&lt;p>二是行业内的法律规范和工作流程、测试报告写法之类的内容。目前看起来做乙方的公司对合规性还是普遍比较重视的。&lt;/p>
&lt;h2 id="技能树">技能树&lt;/h2>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/skill-tree.png"
width="2877"
height="3510"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/skill-tree_hu031df7b29cc96e21395e2236c282b36f_706402_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/skill-tree_hu031df7b29cc96e21395e2236c282b36f_706402_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="技能树"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>目前这个技能树做得很粗糙，基本是靠映像捋了下。绿色是有针对性学过或者实践过，标成绿色的技能水平其实并不太一样。黄色是没有针对性学过的，但同样不代表完全不了解，比如 &lt;code>gdb&lt;/code> 是写c/c++的老朋友了=。=但我从没有在 pwn 或者逆向之类的场景里用过 &lt;code>gdb&lt;/code> ，所以还是标黄。&lt;code>nmap&lt;/code>也用过，扫自己的路由器还有找不到树莓派的IP的时候扫网段什么的，但也没拿 &lt;code>nmap&lt;/code> 做过渗透前信息收集之类的事情。&lt;/p>
&lt;p>技能集中在 Web 领域，大概是入门的水平，反序列化漏洞还没有系统学过算是个知识漏洞。逆向领域因为之前研究加壳脱壳的缘故，也算是有入门的水准吧。正经 CTF 可能不太行，但52破解的 2022 新年 CTF 还是把中级题做出来了的（但正好那几天没时间，实际上只提交了初级题的flag，中级题做出来的时候已经连题解都有了）。&lt;/p>
&lt;p>另外一个实际缺陷是没有真正重现和分析 CVE/CNVD 的经验，靶场练习有点纸上谈兵的意思。&lt;/p>
&lt;p>大概就是这样，接着开始说 BurpSuite。&lt;/p>
&lt;h2 id="burpsuite">BurpSuite&lt;/h2>
&lt;h3 id="总览">总览&lt;/h3>
&lt;p>BurpSuite 是个 Portswigger 出品的渗透测试工具。我直接说我的看法，BurpSuite 其实是一个中间人，类似 mitmporxy 或者 fiddler 的中间人代理工具，但集成了很多渗透测试领域实用的功能。但本体上给我的初步映像是这就是个 proxy。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220523151607445.png"
width="1266"
height="696"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220523151607445_hu4cd6b92fe1caf437ca284a4a014cee1f_81849_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220523151607445_hu4cd6b92fe1caf437ca284a4a014cee1f_81849_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220523151607445"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>信息收集一类的工作有下面几个模块&lt;/p>
&lt;ul>
&lt;li>Burp Target 搜集站点信息如站点地图等&lt;/li>
&lt;li>Burp Spider 顾名思义爬虫，更深一步了解全站&lt;/li>
&lt;li>Burp Scanner 漏洞扫描工具&lt;/li>
&lt;/ul>
&lt;p>执行攻击，比如枚举用户名之类的工作&lt;/p>
&lt;ul>
&lt;li>Burp Intruder 尝试在不同位置带 payload 发起攻击&lt;/li>
&lt;li>Burp Repeater 请求重放&lt;/li>
&lt;li>Burp Sequencer 数据样本随机性质量检测，或者说随机数分析，找规律的工具&lt;/li>
&lt;/ul>
&lt;p>以及一些其他工具&lt;/p>
&lt;ul>
&lt;li>Burp Decoder&lt;/li>
&lt;li>Burp Comparer&lt;/li>
&lt;/ul>
&lt;p>顾名思义了。&lt;/p>
&lt;h3 id="实验">实验&lt;/h3>
&lt;h4 id="interceptor">interceptor&lt;/h4>
&lt;p>一个简单的实验，用 BurpSuite 完成 DVWA 盲注。试用上面这些模块。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524135914027.png"
width="1345"
height="650"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524135914027_hu3020bcf691d12861d7e34e394577a65a_89323_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524135914027_hu3020bcf691d12861d7e34e394577a65a_89323_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220524135914027"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="496px"
>&lt;/p>
&lt;p>首先是 proxy 模块里的 interceptor 功能，顾名思义，拦截 HTTP 请求，可以在 burpsuite 里编辑请求和响应，选择转发还是丢弃。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140115228.png"
width="1266"
height="696"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140115228_hu11302d64d11cc9783b86d5e2edcef35d_67331_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140115228_hu11302d64d11cc9783b86d5e2edcef35d_67331_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220524140115228"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>需要注意响应拦截器默认不是开启状态。&lt;/p>
&lt;h4 id="sitemap">sitemap&lt;/h4>
&lt;p>通过 proxy 随便拦一个请求下来之后就可以在 Target 里看到目标域名的站点地图了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140253787.png"
width="1266"
height="696"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140253787_hu5c4b66c154e565519ba2d8e175cc9bd8_105316_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140253787_hu5c4b66c154e565519ba2d8e175cc9bd8_105316_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220524140253787"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>侧边栏里大部分结果应该是从网页里爬出来的链接，并不是实际执行了请求。我们打开盲注题随便请求一次后，burpsuite里就记录下了相关的信息。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140652860.png"
width="286"
height="69"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140652860_hufe36c66b0567678020ea04aaa411e04a_3754_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524140652860_hufe36c66b0567678020ea04aaa411e04a_3754_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220524140652860"
class="gallery-image"
data-flex-grow="414"
data-flex-basis="994px"
>&lt;/p>
&lt;p>这个齿轮图标表示能接收参数（可配置？）。邮件图标表示是 POST 方法。&lt;/p>
&lt;h4 id="intruder">intruder&lt;/h4>
&lt;p>在齿轮或者右键图标这一行记录上右键，发送到 intruder ，然后就可以在 intruder 里配置扫描方式了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141030426.png"
width="1266"
height="696"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141030426_hu71f3ec92d9a945c1d270f68f8a02ee60_83318_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141030426_hu71f3ec92d9a945c1d270f68f8a02ee60_83318_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220524141030426"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>attack type 是怎么组织攻击 payload，比如 sniper 类型会把 payload 按顺序放到 payload positions 里定义的位置；再比如 batteies ram 会迭代 payload ，把同一个 payload 放到所有位置上。&lt;/p>
&lt;p>在 payloads tab 页里可以配置 payload 类型什么的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141605388.png"
width="1266"
height="696"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141605388_hu7791d581e8009c7de59c91cc376790e7_45569_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141605388_hu7791d581e8009c7de59c91cc376790e7_45569_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220524141605388"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>这里我打算测一下有多少id可用，所以改成了 numbers 类型，范围1~99，约束格式为10进制数，无小数，1~2位。接着 start attack 看看 BurpSuite 会怎么做。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141906268.png"
width="1047"
height="514"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141906268_huff19df8386d5ee09937316b0c21cdd66_25291_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524141906268_huff19df8386d5ee09937316b0c21cdd66_25291_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220524141906268"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>注意到长度在 0~5 都是 4610，后续都是4616。点击其中的条目可以看到具体的请求和响应数据。一个特例是请求0发送的id=1，此时是payload position里定义的位置原始的参数。之后请求1开始就是intruder生成的了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524142317977.png"
width="309"
height="69"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524142317977_hu49f38555a13700b0826196752e4190a5_3787_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524142317977_hu49f38555a13700b0826196752e4190a5_3787_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="id=1"
class="gallery-image"
data-flex-grow="447"
data-flex-basis="1074px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524142341242-16533734219041.png"
width="335"
height="66"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524142341242-16533734219041_hu00d28112a54f06b01084eb682661a4ee_4077_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-burpsuite-and-my-skill-tree/image-20220524142341242-16533734219041_hu00d28112a54f06b01084eb682661a4ee_4077_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="id=6"
class="gallery-image"
data-flex-grow="507"
data-flex-basis="1218px"
>&lt;/p>
&lt;p>显然 intruder 还可以有很多玩法，比如自己指定一个 payload 集合去跑。intruder 也内置了 brute force 之类的 payload 集合，可以省点写脚本的时间。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>有点突兀是吧？暂且先写到这里。本来想看看 BurpSuite 的 scan 模块，但不清楚是 temporary project 的原因还是 community edition 就不支持，反正 new scan 这个按钮是灰的。&lt;/p>
&lt;p>投了两家安全方向的厂商没什么结果，现在突如其来一堆事情搞得烦不胜烦。马原的网课才看了四分之三，找工作开始两天一个面试邀约也没有，身体上又有新毛病，膝盖疼起来了&amp;hellip;..都不知道是不是有痛风的因素，就连脑子这两天都有点昏昏沉沉的。&lt;/p>
&lt;p>博客虽然想保持高频率更新，但抵不过真的很烦心。除了叹气都不知道还有什么可说的。这么短一篇博客还写了两天。&lt;/p>
&lt;p>记得刚面这家公司的时候就提过，不想再一年一跳了，能忍则忍，怎么就混成现在这样子了，才两年而已。越是想，越是从生气变成沮丧。难道真的是我不配。&lt;/p>
&lt;p>就先这样吧，收拾收拾。先保持骑驴找马的状态。&lt;/p></description></item><item><title>雨</title><link>https://nnnewb.github.io/blog/p/2022-05-16-rain/</link><pubDate>Mon, 16 May 2022 10:28:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2022-05-16-rain/</guid><description>&lt;img src="https://nnnewb.github.io/blog/p/2022-05-16-rain/geetanjal-khanna-8CwoHpZe3qE-unsplash.jpg" alt="Featured image of post 雨" />&lt;blockquote>
&lt;p>图片来自 unsplash.com，图文无关。&lt;/p>
&lt;/blockquote>
&lt;p>周一的上午是惯例的摸鱼时间。&lt;/p>
&lt;p>项目依然是半死不活的样子，前端大量的 bug 待修，后端要么没事要么就是异想天开的麻烦事。或者修两个小 bug。说是上线了生产环境，但看起来没人有这个意识，线上也没有什么可观察性基础设施。&lt;/p>
&lt;p>所以就这样了，对我来说这个项目就是一潭死水了。&lt;/p>
&lt;p>看了看时间，现在是 2022 年 5 月了，记忆里还残存着电视里 2008 年奥运会的盛景，初高中那会儿愣头青干的蠢事，想想就连在入行以来第一份工作里说的蠢话干的蠢事都像是很久以前发生的事情了。&lt;/p>
&lt;p>算算年龄，然后周期性地恐慌：离30岁还有6、5、4、3&amp;hellip;.年。哦，我的恐慌周期还要短一点，应该是&amp;hellip;N年零M个月，以此类推。&lt;/p>
&lt;p>昨天晚上从书架底下的纸箱里翻出一副旧耳机，映像里最初是在18还是19年入手，用了一年不到陶瓷壳就碎了，于是过了段时间又买了同款。昨晚翻出来的这幅当然是后来买的同款。记得最后一次用这幅耳机应该是20年的事情，现在戴上这幅耳机，感觉就像是回到了过去，刚入职这家公司的那会儿。&lt;/p>
&lt;p>又在说蠢话了。&lt;/p>
&lt;p>不知道什么时候开始，对敲代码的执念逐渐放松，而现在渐渐接近消逝了。回首过去，我是个爱幻想的孩子，有些过于沉溺于那些奇幻瑰丽的脑内世界。我也曾经相信敲代码能改变什么，与人工智能共赴什么。我也尝试把这些幻想分享给更多人，但总而言之，很遗憾。&lt;/p>
&lt;p>过去的一切造就了现在的我。&lt;/p>
&lt;p>这两天广州的雨未停歇，7点清晨的雨滴落在掌心，渗透到我的内里。浸润，浸润。&lt;/p></description></item><item><title>2022年5月12日 一件小事</title><link>https://nnnewb.github.io/blog/p/2022-5-12-one-small-thing/</link><pubDate>Thu, 12 May 2022 10:33:08 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2022-5-12-one-small-thing/</guid><description>&lt;p>胡言乱语几句。&lt;/p>
&lt;p>先分享一个比较开心的事情，下狠心拿一个月工资报了个机构自考本科，目标是把学位证也拿下，最好还能混到奖学金。顺便申请了继续教育退税，虽然退不了多少。也不指望还能靠这些把学费赚回来。&lt;/p>
&lt;p>嗯，就是这样啦。&lt;/p>
&lt;p>原本的想法是考个 CISP 之类的证（注意到培训价格也是8k+，而且是强制培训。CISP-PTE 更是快 2w。），后来因为同事报了个自考，想想这个价完全可以先把自考拿下，学历比这几个技能证有用多了，至少以后投简历不会那么轻易被筛掉了。&lt;/p>
&lt;p>惨。为了能有个和别人公平竞争的机会真的是又烧钱又费时间。这种时候才会后悔自己当初怎么就会有学历就是个敲门砖的傻卵想法，就算是砖也不是遍地都能捡的啊。还好学了点手艺才能混到现在，年收入还够不到个税自主申报线。想想自己四五年工作经历只感觉自己就是个傻卵废物。&lt;/p>
&lt;p>发泄完还得继续生活。&lt;/p>
&lt;p>看了下自考科目感觉有几门还是比较容易过的，数学几门还是有点发憷。不过今年好像没有考数学，复习时间应该是够长的。&lt;/p>
&lt;p>除了自考还打算考虑下软考或者安全方向的证，趁现在工作比较清闲充电，期望在30岁前能赚到税后年入接近20w吧，也不奢求超过这个数了，有个十七八都好。&lt;/p>
&lt;p>说到年龄，还有点比较烦心的事情。过了30想再解决终身大事恐怕就有点难了，烦，烦，烦。&lt;/p>
&lt;p>就这样吧，胡言乱语水了一篇博客。&lt;/p></description></item><item><title>2022年5月5日 未来规划</title><link>https://nnnewb.github.io/blog/p/diary-2022-05-05/</link><pubDate>Thu, 05 May 2022 11:29:51 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/diary-2022-05-05/</guid><description>&lt;p>主要是方向性的一些记录和一些想法。&lt;/p>
&lt;h2 id="大体方向">大体方向&lt;/h2>
&lt;h3 id="清单">清单&lt;/h3>
&lt;p>只列出初步了解到的。&lt;/p>
&lt;ul>
&lt;li>二进制安全
&lt;ul>
&lt;li>反病毒&lt;/li>
&lt;li>反破解/软件保护&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>web安全
&lt;ul>
&lt;li>蓝队（防御，监测，反制）&lt;/li>
&lt;li>红队（渗透突防）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>漏洞挖掘
&lt;ul>
&lt;li>二进制、内核&lt;/li>
&lt;li>web&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安全开发
&lt;ul>
&lt;li>扫描器、防火墙、流量监测&amp;hellip;&amp;hellip;安全软件开发&lt;/li>
&lt;li>代码审计&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安全管理&lt;/li>
&lt;/ul>
&lt;h3 id="可选方向">可选方向&lt;/h3>
&lt;p>研发工作做得比较多，个人知识面在广不在深，考虑代码审计是比较容易上手的。安全开发方向还欠缺很多安全相关的专业知识，但补一补课还有机会，应该吧。&lt;/p>
&lt;p>安全管理了解很浅，转型会很难，而且刚转的话待遇大概没开发好，预计是这样。&lt;/p>
&lt;p>二进制相关方向很难，需要极大精力投入。自学了x86汇编并做了一点简单的实践（52pojie的新年活动CTF，逆向）发现这块真的需要很多知识和经验积累而且很枯燥，有非常多平台相关的 trick。只能说非常难，非常吃经验和知识积累。但总体来说，二进制安全这块的基础知识更新迭代是比较慢的，有非常重的历史包袱。学习曲线应该是入门难，入门后保持学习的压力就会比较轻了。&lt;/p>
&lt;p>Web是个有点过于概括的大方向，基于我目前的了解是感觉囊括了一般Web开发中应用到基础设施在内的一切内容，从前端到后端应用、后端基础设施（web服务器、代理、缓存、数据库、消息队列、容器引擎、容器编排系统、虚拟化等等），非常综合性的方向。但这块目前了解到的很少，从先知社区和其他平台了解到的主要还是两类：攻防和漏洞挖掘。&lt;/p>
&lt;p>这块不能说零基础，但真的缺乏积累，不过基础岗应该很快就能达到要求，大概。&lt;/p>
&lt;p>总结一下下面的方向都还可能：&lt;/p>
&lt;ul>
&lt;li>安全开发 - 代码审计&lt;/li>
&lt;li>漏洞挖掘 - Web&lt;/li>
&lt;li>Web 安全 - 攻防&lt;/li>
&lt;/ul>
&lt;h3 id="路线">路线&lt;/h3>
&lt;p>前期方向比较接近，主要是补安全领域的基础知识。&lt;/p>
&lt;ul>
&lt;li>取得 CISP 证书（初步了解发现要求强制培训和工作经验，机构报价很贵，8k 左右的成本，需要考虑下）。&lt;/li>
&lt;li>摸清 OWASP Top 10 ，了解当前主要安全威胁来源。可能的话找靶场具体了解。&lt;/li>
&lt;li>收集一些安全情报来源，CNVD、CVE。搞清楚去哪儿找安全情报。&lt;/li>
&lt;li>收集一些安全领域的工具，主要覆盖已经了解的 Web 安全领域细分方向，摸清基本使用方法和原理。&lt;/li>
&lt;li>补必要的编程语言知识，Java、PHP。给代码审计打基础。&lt;/li>
&lt;li>培养一点基本的安全意识，靶场实践里积累一点方法论。&lt;/li>
&lt;/ul>
&lt;p>综合来说，这个阶段主要是在迷雾里找个方向，不一定正确但要先走起来。路在脚下。&lt;/p>
&lt;h3 id="求职计划">求职计划&lt;/h3>
&lt;p>初级~中级，安全领域技术类岗位，个人倾向于攻防和挖洞，因为比较酷也是兴趣所在的方向。但安全领域的研发也可以接受，看能得到什么样的岗位。做安全的公司和其他领域比起来还是少得可怜的，竞争可能会很激烈。个人推测是人才缺口可能在安全+研发这块，攻防挖洞不能说饱和但应该不会特别缺人吧？就是瞎猜下。门槛应该都不会太低，开发是条狗都能干点基础的活，几年干下来我已经见识到没水平的开发是什么样子了。安全领域虽然不熟悉，但猜测安全没点脑子应该是干不动的（也不绝对吧&amp;hellip;傻x哪儿都有）。&lt;/p>
&lt;h2 id="文末碎碎念">文末碎碎念&lt;/h2>
&lt;p>想要换工作一个理所当然的原因就是对现在的干的活不满意。不满意的理由有很多，概括起来就是委屈和没钱。&lt;/p>
&lt;p>工作快5年下来，换了三四个老板，多少是看清了一点现实，期望值腰斩再腰斩。曾经我以为有钱有闲满足一个就行，现在发现好像和我预期的不太一样。&lt;/p>
&lt;p>开始工作的前两年我就差不多意识到了，我不是那种自制力很强的人，三分钟热度说的就是我。不过兴趣能提供的驱动力持续时间多少还是比三分钟长的，只要开始的时候顺利，没有硬门槛或者太大的挫折给弄委屈了，基本还是能达到入门的。然后下一个阶段就是恐慌焦虑，后悔折腾的事情无法变现没有意义，继续的成本太高等等。开始工作前我还写过本同人小说来着，发在刺猬猫上，40多w字，现在想起来还有点惊奇那时候怎么坚持每天在word里水上一个小时两个小时的。至于后来嘛，发生了一些事，和家里闹翻了，出来找工作，总之是阴差阳错吧，我又是早早学过 C/C++/Java 的，基础不错，运气好碰到家愿意收的公司，就开始干码农这行了。&lt;/p>
&lt;p>转行安全是现在的想法，很难说是因为看了几篇大佬的博客产生的三分钟热度还是长久以来的梦想什么的。所以现实一点，转行的目的是抬高收入的天花板，减轻学历歧视的负担。换句话说，就是找机会多赚点钱，在现有条件下拿高那么点点的工资。&lt;/p>
&lt;p>不管怎么说转方向都是个很重大的事情，过去的后端研发经验价值要缩水不少但不会归零，想转回来也会有机会但并不会容易，损失最大的就是时间。&lt;/p>
&lt;p>真的是一件很需要勇气去做的事，而且我也真的不能肯定会达成目的。&lt;/p>
&lt;p>路在脚下，且行且珍惜吧。&lt;/p></description></item><item><title>尝鲜keepassxc的ssh集成</title><link>https://nnnewb.github.io/blog/p/keepassxc-ssh-integration/</link><pubDate>Thu, 21 Apr 2022 10:27:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/keepassxc-ssh-integration/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>突发奇想，先前一直把密码存在 keepassxc 里，但 SSH 秘钥是存在 keepassxc 的备注里，用的时候还得先复制出来建个文件，虽然只用折腾一次但还是嫌麻烦。&lt;/p>
&lt;p>于是想到 keepassxc 自带 SSH 集成，于是研究了下怎么用 SSH 集成在 keepassxc 里保存秘钥对，省掉复制出秘钥内容到文件里的过程，还更安全。&lt;/p>
&lt;h2 id="过程">过程&lt;/h2>
&lt;h3 id="平台和选型">平台和选型&lt;/h3>
&lt;p>首先确定 keepassxc 和 ssh 运行的平台，keepassxc 本体是支持 Windows/MacOS/Linux 三端的，ssh 在Windows上倒是有几种不同的选型。&lt;/p>
&lt;p>在 Windows 10 Build 1809 版本之后，Windows 已经内置了 OpenSSH 软件，还在用 PuTTY 的可以省掉 PuTTY 了。&lt;/p>
&lt;p>旧点的 Windows 可以选择 PuTTY 或者装一个基于 MinGW 的 OpenSSH，如 Git-SCM 自带的 OpenSSH 或者 MSYS2、MinGW64 一类。&lt;/p>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>keepassxc 的 ssh 集成本质是主动往 ssh-agent 添加秘钥，ssh 命令从 ssh-agent 读到秘钥，尝试用秘钥连接服务器。表现出的效果就是和直接把秘钥放在 &lt;code>.ssh/id_rsa&lt;/code> 也没什么区别。&lt;/p>
&lt;p>keepassxc 还支持解锁自动添加和锁定时自动删除，还有超时自动删除，安全性会稍再好一点，可惜 Windows 自带的 OpenSSH 不支持使用秘钥时给用户确认（见 issue &lt;a class="link" href="https://github.com/PowerShell/Win32-OpenSSH/issues/1056" target="_blank" rel="noopener"
>#1056&lt;/a>），导致开启 keepassxc 的确认功能时会添加秘钥失败。&lt;/p>
&lt;p>至于 ssh-agent 的原理就略过不提了，可以理解成一个秘钥代理，ssh 自动问 ssh-agent 有什么秘钥可用，就像保管钥匙的管家。&lt;/p>
&lt;h3 id="配置-openssh">配置 OpenSSH&lt;/h3>
&lt;p>参考 keepassxc 的文档，先启动 Windows 自带的 OpenSSH 的 ssh-agent 服务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="nb">PS &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nb">Get-Service&lt;/span> &lt;span class="nb">ssh-agent&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">Set-Service&lt;/span> &lt;span class="n">-StartupType&lt;/span> &lt;span class="n">Automatic&lt;/span>
&lt;span class="nb">PS &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nb">Start-Service&lt;/span> &lt;span class="nb">ssh-agent&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意上面的命令需要 &lt;strong>管理员权限&lt;/strong> 运行。&lt;/p>
&lt;p>就是这样！&lt;/p>
&lt;h3 id="配置-keepassxc">配置 keepassxc&lt;/h3>
&lt;p>之后在 keepassxc 里打开 ssh 集成，选中 OpenSSH 作为代理。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-application-settings.png"
width="1601"
height="1218"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-application-settings_huf85379ed477f6ac0dbb86a595d8f10b4_56971_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-application-settings_huf85379ed477f6ac0dbb86a595d8f10b4_56971_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="sshagent application settings"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>然后添加一个常规的密码记录，在高级里添加秘钥文件，并在 SSH 里启用：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-entry-settings.png"
width="1758"
height="1374"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-entry-settings_huc6b8a73468d62e299570a0a7d6f50725_56080_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-entry-settings_huc6b8a73468d62e299570a0a7d6f50725_56080_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="sshagent entry settings"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="307px"
>&lt;/p>
&lt;p>注意勾选 &lt;code>Add key to agent when database is opened/unlocked&lt;/code> 和 &lt;code>Remove key from agent when database is closed/locked&lt;/code>，这两个选项会让 keepassxc 解锁的情况下自动在后台添加 SSH 秘钥到 ssh-agent，同时当你关闭 keepassxc 之后 SSH 就无法再从 ssh-agent 拿到秘钥，体验会更自然。&lt;/p>
&lt;p>如果不勾选这两个选项，也可以手动在设置了 SSH 代理的项目上右击添加到 ssh-agent。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-context-menu.png"
width="1758"
height="1265"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-context-menu_hu5f860989dfb1f00a09b694a656667942_49439_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/sshagent-context-menu_hu5f860989dfb1f00a09b694a656667942_49439_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="sshagent context menu"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>这种方式添加到 ssh-agent 的秘钥不会自动从 ssh-agent 删除或自动添加，每次重启都要自己右键添加，比较麻烦。&lt;/p>
&lt;h3 id="检查">检查&lt;/h3>
&lt;p>如何确认配置正确无误？&lt;/p>
&lt;p>可以通过几个方面：&lt;/p>
&lt;ol>
&lt;li>在设置-SSH代理界面，顶部有个绿条，提示 ”SSH代理连接工作正常！“&lt;/li>
&lt;li>在命令行运行&lt;code>ssh-add -l&lt;/code>，会列出你刚添加的秘钥。&lt;/li>
&lt;li>尝试&lt;code>ssh&lt;/code>连接你的服务器，公钥登陆成功。&lt;/li>
&lt;/ol>
&lt;p>如果 “SSH 代理连接工作正常” 没出现的话可能是 ssh-agent 服务没启动或者有问题，可以 &lt;code>stop-service ssh-agent&lt;/code> 停止 &lt;code>ssh-agent&lt;/code> 这个系统服务后再在命令行运行 &lt;code>ssh-agent -d&lt;/code>，输出调试日志，看看具体什么问题。&lt;/p>
&lt;p>如果&lt;code>ssh-add -l&lt;/code>没有输出，也是一样，检查&lt;code>ssh-agent&lt;/code>是否在运行，如果在运行但依然没有，用&lt;code>-d&lt;/code>参数启动 ssh-agent 看看添加秘钥的步骤有什么问题。&lt;/p>
&lt;p>如果 &lt;code>ssh-add -l&lt;/code> 有输出了，但 ssh 连接依然问你要密码，有两种可能：&lt;/p>
&lt;ol>
&lt;li>你的 ssh 秘钥有密码保护，一般是 &lt;code>ssh-keygen&lt;/code> 的时候设置的。&lt;/li>
&lt;li>秘钥被拒绝了。&lt;/li>
&lt;/ol>
&lt;p>有密码保护的秘钥 ssh 命令有提示，注意看 ssh 命令的输出就行。秘钥被拒绝的情况表面很难看出来，可以用 &lt;code>-vvv&lt;/code> 参数再运行 ssh 命令，看命令输出。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101423653.png"
width="1044"
height="157"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101423653_hu955d457efbed342c16ebd2cc7efa854b_176372_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101423653_hu955d457efbed342c16ebd2cc7efa854b_176372_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421101423653"
class="gallery-image"
data-flex-grow="664"
data-flex-basis="1595px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101509008.png"
width="1029"
height="99"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101509008_hufdb8d068113679e23d2947d5c9dd2a58_103423_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101509008_hufdb8d068113679e23d2947d5c9dd2a58_103423_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421101509008"
class="gallery-image"
data-flex-grow="1039"
data-flex-basis="2494px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101612311.png"
width="900"
height="99"
srcset="https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101612311_hu416fe79149793836d529a9d87da9135b_46057_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/keepassxc-ssh-integration/image-20220421101612311_hu416fe79149793836d529a9d87da9135b_46057_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421101612311"
class="gallery-image"
data-flex-grow="909"
data-flex-basis="2181px"
>&lt;/p>
&lt;p>如果 &lt;code>will attempt key&lt;/code> 没有出现 &lt;code>ssh-add -l&lt;/code> 列出的秘钥，还可能是因为 &lt;code>.ssh/config&lt;/code> 里，给你要连接的 Host 设置了 &lt;code>IdentitiesOnly yes&lt;/code>。这个设置项会强制 ssh 只使用本地的 &lt;code>.ssh/id_rsa&lt;/code> 等私钥文件。&lt;/p>
&lt;p>另外 &lt;code>.ssh/config&lt;/code> 里可能还指定了别的验证方式也会导致不使用公钥，这就要靠自己检查 &lt;code>.ssh/config&lt;/code> 来排错了。&lt;/p>
&lt;h3 id="配置-git">配置 Git&lt;/h3>
&lt;p>Windows 下还有个坑，在提交博客的时候才发现。 Git-SCM 默认使用的 SSH 命令不是 Windows 自带的 OpenSSH。这会导致 Git 在推送的时候不使用我们添加到 ssh-agent （Windows 自带的 OpenSSH 版 ssh-agent）的秘钥，而是用 Git-SCM 自带的 MinGW 版 OpenSSH，造成推送时提示 &lt;code>Permission Denied (publickey)&lt;/code> 。&lt;/p>
&lt;p>解决办法也很简单，&lt;code>git config --global core.SshCommand &amp;quot;C:/Windows/System32/OpenSSH/ssh.exe&amp;quot;&lt;/code> 把 Windows 自带的 OpenSSH 设置成 Git 默认使用的 ssh 即可。需要注意 &lt;strong>这里的路径用正斜杠&lt;code>/&lt;/code>分隔，不要用反斜杠&lt;code>\&lt;/code>&lt;/strong> 。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>总的来说用 ssh-agent 配合 keepassxc 玩 ssh 还是很舒服的，特别是迁移起来的时候，只要同步和备份 keepassxc 的数据库就完事。&lt;/p>
&lt;p>keepassxc 的附加文件也非常适合把 GPG 之类的秘钥备份起来，换工作机或者自己电脑重装迁移的时候都能省不少心思。&lt;/p></description></item><item><title>2022新年第一篇博客</title><link>https://nnnewb.github.io/blog/p/first-blog-in-2022/</link><pubDate>Wed, 09 Feb 2022 09:24:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/first-blog-in-2022/</guid><description>&lt;h2 id="一">一&lt;/h2>
&lt;p>其实年前还有一篇写了蛮长的，但因为种种原因反正假期内是没继续动笔写完，今天本来打算继续写，但是看了眼开头，还是把全文 ctrl+a delete 了。&lt;/p>
&lt;p>这次就短一点。&lt;/p>
&lt;h2 id="二">二&lt;/h2>
&lt;p>回顾过去，2021年对我而言是怎样的一年？&lt;/p>
&lt;p>当我问自己这个问题，我才发现似乎没有一个能脱口而出的答案。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093132174.png"
width="870"
height="154"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093132174_hu312baa1af15bc0284994619b812524f6_3754_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093132174_hu312baa1af15bc0284994619b812524f6_3754_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093132174"
class="gallery-image"
data-flex-grow="564"
data-flex-basis="1355px"
>&lt;/p>
&lt;p>普普通通地正常工作，顺便也摸摸鱼。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093249061.png"
width="728"
height="147"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093249061_huc19f43cf1d7a348ef7c6f534f3f07c4a_8775_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093249061_huc19f43cf1d7a348ef7c6f534f3f07c4a_8775_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093249061"
class="gallery-image"
data-flex-grow="495"
data-flex-basis="1188px"
>&lt;/p>
&lt;p>偶尔也上GitHub看两眼，有没有什么新鲜玩意儿。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093447327.png"
width="452"
height="129"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093447327_hucfe56099574b6d1070a7ba458db01ed2_7134_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093447327_hucfe56099574b6d1070a7ba458db01ed2_7134_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093447327"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="840px"
>&lt;/p>
&lt;p>学了点没用的逆向技术，demo也勉强凑出9+1个star。不过趁这个机会倒是了解了下x86汇编语言，姑且算是个没什么卵用的进步，主流64位的汇编和arm的汇编还是不懂，x86也只能算是盲人摸象。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093903198.png"
width="366"
height="123"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093903198_hu1a597d42e008a51b6b7e3058561fedc4_7207_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209093903198_hu1a597d42e008a51b6b7e3058561fedc4_7207_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209093903198"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="714px"
>&lt;/p>
&lt;p>又一个玩具，这类玩具太多了。我水平不够，完成度也低，只能说是写这个的时候就是打发时间。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209094119262.png"
width="256"
height="121"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209094119262_huba5eeb6809b4946e971e1798bbd4c32c_4701_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209094119262_huba5eeb6809b4946e971e1798bbd4c32c_4701_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209094119262"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>本来不是很看得上 dtm 这个项目。不为别的，就是觉得作者 segmentfault 上刷博文宣传自己的框架有种保险推销员的感觉，让人觉得不靠谱。但还是老实去看了代码，毕竟比起 Java 写得 seata 之类的框架，dtm 封装比较薄，源码稍微好读一点。&lt;/p>
&lt;p>实际读起来感觉还是有点混乱，最后照着 dtm 文档的时序图写了个案例，配置了opentelemetry。分布式追踪真的很好用，讲真，要是单体应用也能跟着函数追踪出这样一个图就绝了。我觉得可以拿 python 开刀试试。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209095328828.png"
width="355"
height="131"
srcset="https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209095328828_hu09413e63593e9e88b5002d57426f4aa7_9471_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/first-blog-in-2022/image-20220209095328828_hu09413e63593e9e88b5002d57426f4aa7_9471_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220209095328828"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="650px"
>&lt;/p>
&lt;p>尝试入门密码学，但数学基础不好，为了搞明白希尔密码用到的矩阵运算翻了半天搜索引擎才写出来。结果还是没继续学下去。2022也许继续看？好歹把传统密码里的DES、AES学完吧，不求能手写，大概能看明白过程就好。要是能再把原理懂个大概就更好了。&lt;/p>
&lt;p>至于别的，也许我能报菜名一样提一大堆名字，但终究骗不了我自己。是，2021一年时间，各种杂七杂八的技术概念和新名词碰了一堆，但杂而不精，几乎没有什么真正吸收、融会贯通的内容。&lt;/p>
&lt;h2 id="三">三&lt;/h2>
&lt;p>工作和生活上还是老一套。&lt;/p>
&lt;p>产品经理走了，于是部门间的矛盾和磨合又来了。我甚至不愿意管这个叫“磨合”，无非是两边一起摆烂罢了。所以还是到此为止，只能期盼好聚好散，2022尝试跳个愿意出更高工资的地方，也许能在中年危机前攒够本钱，下半生是自己做点生意也好，安心打工也好，至少能安顿好一家人，即便不能富足，也得温饱。真心希望这个渺小的愿望可以实现。&lt;/p>
&lt;p>生活上，年底才收到一个坏消息，爷爷病了，可能是肺癌。很难描述听到这个消息的时候我的心情。上初中的时候我的曾祖父去世了，我和曾祖父交流接触很少，但还是有种心里缺了一块的感觉。&lt;/p>
&lt;p>是，人终有一死。但出奇的是我一点也没想什么轻于鸿毛重于泰山。死亡就只是死亡而已，没有意义，什么也没有。时间最终会抚平一切。&lt;/p>
&lt;p>好了。&lt;/p>
&lt;p>2022，还是祝愿爷爷他手术顺利，能活到120岁。&lt;/p>
&lt;h2 id="四">四&lt;/h2>
&lt;p>还是要展望下未来的。&lt;/p>
&lt;p>2022年，很快就要26周岁了，还是单身，一年的收入大概能在广州买一两平米的卫生间，存款不比一间卫生间的价值多多少。有一点焦虑。&lt;/p>
&lt;p>焦虑的原因在于我觉得自己配得上更高的工资，或者说，更好的生活，有看得到希望的未来。但理想和现实的矛盾始终无法解决。&lt;/p>
&lt;p>不说那么多了。&lt;/p>
&lt;p>今年有跳槽的想法，也有考个系统分析师证书的想法，但两者恐怕不好兼顾。还好的是系统分析师考试在5月，这段时间来个百日冲刺，运气好的话有机会拿到证书，再在下半年靠证书跳个更高薪的职位。运气不好的话，今年没考上，下半年跳槽还有悬念，那就明年再说了。&lt;/p>
&lt;p>另外更新简历的时候发现，多写点博客还是挺唬人的。21年下半年几个月写了40篇，2022年继续保持的话起码一年一百篇不过分吧，坚持多写几篇，笔耕不辍。&lt;/p>
&lt;p>最好再参与下知名的开源项目，发几个PR。&lt;/p>
&lt;p>小说也想写，短篇整个十几万字总得有。&lt;/p>
&lt;p>梦想嘛，还是要有的。&lt;/p>
&lt;h2 id="来吧2022">来吧，2022！&lt;/h2></description></item><item><title>一些屁话 2021年11月4日</title><link>https://nnnewb.github.io/blog/p/2021-11-4-diary/</link><pubDate>Thu, 04 Nov 2021 16:06:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2021-11-4-diary/</guid><description>&lt;h2 id="比烂">比烂&lt;/h2>
&lt;p>不知道什么时候起，对现在的工作失去了激情，连带着对生活也失去了期待。&lt;/p>
&lt;p>上班下班，例行公事，像是个机器人。虽然一直都是这样，从来没有好过。&lt;/p>
&lt;p>似乎也不是——至少在peropero工作的那段时间，还是有些兴奋的。只是确实各方面多少有些合不来，但个人原因还是居多数。毕竟多少已经摸爬滚打了几年下来，一定要说哪个老东家很好或者很差，恐怕都不合适。&lt;/p>
&lt;p>有优点也有缺点是常态，决定能不能持续干下去，最后还是看能不能忍受缺点。&lt;/p>
&lt;p>所以说到底还是比烂，到底万事万物还是比烂。&lt;/p>
&lt;h2 id="做人">做人&lt;/h2>
&lt;p>一个常常出现在脑海里的问题是，我应该做什么样的人？&lt;/p>
&lt;p>然后忽然就有了答案，那就是我不能决定自己成为什么样的人。环境塑造人，经历塑造人，唯独人不能塑造自己，所以说做什么样的人其实是伪命题。&lt;/p>
&lt;p>这么想有些悲观，是机械决定论。人一出生就已经决定了命运，所思所想，悲欢离合，早已经决定，生命就是概率之海的小水花，生或死都没有意义。&lt;/p>
&lt;p>但无论如何吧，至少，还得有一点念想？假装一切都在掌控之中，像是抓住浪潮中的浮木。所以还是得有个什么念想，要做一个什么样的人。&lt;/p>
&lt;p>我怎么想呢。&lt;/p>
&lt;p>做正确的事，也许不正确，也许现在以为是正确，将来又觉得不正确。而即便是这样也做不到。&lt;/p>
&lt;h2 id="时间">时间&lt;/h2>
&lt;p>现在是2021年11月4日，2021年也快要过去了，天气转凉。&lt;/p>
&lt;p>现在总结一年的工作或者生活还有些太早，但如今回头看，这一年也就这样吧。&lt;/p>
&lt;p>事业发展，没有变化。&lt;/p>
&lt;p>人生大事，没有进展。&lt;/p>
&lt;p>健康生活？被痛风折磨，头发肉眼可见地变得稀疏，还好发际线没有太明显的移动。精力虽然有些消退，但并没有什么妨害。&lt;/p>
&lt;p>想要看看还有没有什么提升的机会，发现国家又在教改，成人学历教育明年大概又有什么动作。随便翻了翻招生简章，就看到对25岁以上考生居然有优待。&lt;/p>
&lt;p>再一对自己的，哦豁，不用等明年，今年12月就成了被优待的对象了。&lt;/p>
&lt;p>已经快记不起上学时的光景了，好像所有东西都在飞快地远离。&lt;/p>
&lt;h2 id="变化">变化&lt;/h2>
&lt;p>时间给人带来最明显的变化就是内敛。&lt;/p>
&lt;p>不再轻易喜悦，也不再轻易动怒。&lt;/p>
&lt;p>与其说是沉稳，不如说是更焦虑了，为身边的一切事情焦虑，为自己的能力总是捉襟见肘焦虑。而后又容易放弃，因为总忍不住去对比已知的成本和未知的收益，又或者因为各种内外条件变化而不了了之。&lt;/p>
&lt;p>明知道抱怨没有意义，还是忍不住抱怨，每天都有发泄不完的情绪。&lt;/p>
&lt;h2 id="终">终&lt;/h2>
&lt;p>写了那么多屁话，还是要到这里结束。&lt;/p>
&lt;p>生活还要继续。&lt;/p></description></item><item><title>不常用的 Git 命令</title><link>https://nnnewb.github.io/blog/p/%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-git-%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 09 Jul 2021 09:25:16 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-git-%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>大概是不太常用的一些 Git 命令。&lt;/p>
&lt;!-- more -->
&lt;h2 id="找回数据">找回数据&lt;/h2>
&lt;p>两种办法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git reflog show
git reset --hard HEAD@&lt;span class="o">{&lt;/span>1&lt;span class="o">}&lt;/span> &lt;span class="c1"># 从上一步找到希望回退的位置&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git fsck --lost-found
&lt;span class="nb">cd&lt;/span> .git/lost-found/
&lt;span class="c1"># 用 git show hash 查看悬空对象的内容&lt;/span>
&lt;span class="c1"># 用 git merge hash 或者 git rebase hash 来恢复到当前分支里&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="合并分支时创建合并commit">合并分支时创建合并commit&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git config branch.master.mergeoptions &lt;span class="s2">&amp;#34;--no-ff&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="删除远程分支">删除远程分支&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git push --delete origin branch
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="删除已经合并的分支">删除已经合并的分支&lt;/h2>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;h3 id="删除已合并的本地分支">删除已合并的本地分支&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git branch --merged &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s2">&amp;#34;^\\s+(patch|feat|refactor|test|misc)&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> xargs -I&lt;span class="o">{}&lt;/span> git branch -d &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="删除已合并的远程分支">删除已合并的远程分支&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git branch -r --merged &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s2">&amp;#34;^\\s+origin/(patch|feat|refactor|test|misc)&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/origin\///&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> xargs -I&lt;span class="o">{}&lt;/span> &lt;span class="nb">echo&lt;/span> git push --delete origin &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>2021-04-25 无事发生</title><link>https://nnnewb.github.io/blog/p/2021-04-25-%E6%97%A0%E4%BA%8B%E5%8F%91%E7%94%9F/</link><pubDate>Sun, 25 Apr 2021 10:40:30 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/2021-04-25-%E6%97%A0%E4%BA%8B%E5%8F%91%E7%94%9F/</guid><description>&lt;p>4月25日好像也不是什么节日，对我个人来说也没有什么特殊意义。仅仅是普通的一天——如果不算五一调休导致今天明明是周日但还要上班这一点的话。&lt;/p>
&lt;p>想想也挺不可思议的，不知不觉已经到2021年这个在不少科学幻想中的“未来”时代了，光算工作年限，我也干了有四五年的程序了吧。&lt;/p>
&lt;p>从最开始抱着“不写代码还能干啥”到“写代码也挺不错的”，再到现在，“还能写几年代码呢”。&lt;/p>
&lt;p>反思一下这几年，几乎没干出什么成绩，工作一年一换，工作几年下来，也没几个认识、熟悉到可以称之为“朋友”的人。倒不是我孤僻（这么说的人一般都确实孤僻吧），主要是确实没什么主观能动性。&lt;/p>
&lt;p>如今这家公司写写 go，折腾折腾 kubernetes，也算清闲，反倒开始忧心起将来了。&lt;/p>
&lt;p>现在的工作，说好，也就那样。说不好，这个大环境下，但凡没失业，我觉得都算不上不好吧。&lt;/p>
&lt;p>又是疫情，又是新冷战，又是各种各样的奇葩事。当笑话看，看久了也笑不出来了。&lt;/p>
&lt;p>我这人爱看小说，以前也是动画漫画来者不拒，特效大片就饭，总之蛮快乐的。过去还写过同人小说，可惜没得家里支持，最后也就是40万字左右就切了。&lt;/p>
&lt;p>不过起码这段经历算是给我找第一份码农工作加了点助力（大概）。自从开始写代码拿工资，好像写小说这回事就和我没什么关系了的样子。&lt;/p>
&lt;p>不过我还是一直想写的，几乎每次换工作，心里想的都是空闲的时间多了，就会用来做点有意义的事情。比如学学钢琴啊（买了电钢琴吃灰中），比如写写小说啊（也就开了个头），比如学点新技术啊（有倒是有，新工作新技术栈），总之就是自我提升下。&lt;/p>
&lt;p>结果当然是没有的。&lt;/p>
&lt;p>好像从前读书的时候捧着本 C Primer Plus/C++ Primer 看的激情已经完全从身体里消失了一样。不管是什么事情，虽然总是想到，啊，这个想要，那个想要。但一到行动，就完全没了动力。“做了也没用”，“学了也是浪费时间”这种想法就从脑子里冒出来了。&lt;/p>
&lt;p>不能说和家庭完全没关系——但把责任都推给父母、老师，大概也不合适。&lt;/p>
&lt;p>我是相信环境会改变人的，当然人也能发挥主观能动性，改造环境。像是叶子随波逐流进了下水道，不能说是水有错，也不能怪叶子没有奋力闪躲，秋风更是无辜。于是环视四周，最后悲哀地发现只能感叹一句命运无常。&lt;/p>
&lt;p>诸如未来可以改变之类的鸡汤喝了又喝，脑子也有了抗性，不切实际的期待也越来越少，然后发现即使是切实可行的期待也开始落向不切实际的一侧。&lt;/p>
&lt;p>那便不想未来了吧。俗话说，“把握当下”。于是便来上班，对着屏幕，无事可做，等待 call of work。&lt;/p>
&lt;p>那便是这样了吧。&lt;/p>
&lt;p>2021年4月25日，无事发生。&lt;/p></description></item><item><title>关于笔记的考虑</title><link>https://nnnewb.github.io/blog/p/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0%E7%9A%84%E8%80%83%E8%99%91/</link><pubDate>Sun, 16 Dec 2018 23:30:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0%E7%9A%84%E8%80%83%E8%99%91/</guid><description>&lt;p>使用了两年多的 One Note，但是 One Note 对代码的支持实在是难受，于是数次折腾之后最终还是选择再找个更合适的笔记工具。&lt;/p>
&lt;p>在知乎上搜了一圈之后，大多数笔记工具收费且不论，最严重的问题反而是对笔记能否生存下去的怀疑。&lt;/p>
&lt;p>大多笔记工具用私有格式来处理富文本（比如可用样式排版有限的 HTML），或者其他奇奇怪怪的格式。且不说这些东西导出来怎么办&amp;hellip;..把笔记多地备份本身就够难受了。&lt;/p>
&lt;p>再者，笔记这玩意儿记了自己都不一定看。偶尔想起来翻一下，还要怀疑自己当初写的什么狗屁玩意儿。&lt;/p>
&lt;p>所以经过这么多考虑&amp;hellip;&amp;hellip;还是直接搭个博客最自由且不会太担心保存的问题了。&lt;/p>
&lt;p>比较别的笔记工具可能密码忘了或长时间不登陆，git 天天用（这里应有自嘲），根本离不开。&lt;/p>
&lt;p>所以想了想，还是转移笔记到博客好了。写笔记可能很随便，写博客总要考据两下的。再说，还可以自定义页面效果，对我这种喜欢折腾的人还是蛮对胃口的。&lt;/p>
&lt;p>总而言之，先挂上去了，就这样。&lt;/p></description></item></channel></rss>