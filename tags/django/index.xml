<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>django on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/tags/django/</link><description>Recent content in django on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 06 Mar 2019 21:11:35 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Django 的各种关系字段详解</title><link>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 06 Mar 2019 21:11:35 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/django-%E7%9A%84%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</guid><description>&lt;blockquote>
&lt;p>参考资料如下&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/models/fields/" target="_blank" rel="noopener"
>Django 文档 - Model field reference&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://graycarl.me/2014/03/24/sqlalchemy-cascade-delete.html" target="_blank" rel="noopener"
>SQLAlchemy 中的级联删除&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="1-foreignkey">1. ForeignKey&lt;/h2>
&lt;p>&lt;code>ForeignKey&lt;/code>用于多对一关系，直接对应到数据库外键的概念。使用&lt;code>ForeignKey&lt;/code>需要指定引用的目标表，会自动关联到目标表的主键（一般是&lt;code>id&lt;/code>字段）。&lt;/p>
&lt;p>例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对比之 sqlalchemy，一行&lt;code>parent=models.ForeignKey(...)&lt;/code>包含了 sqlalchemy 中的&lt;code>ForeignKey&lt;/code>和&lt;code>relationship&lt;/code>两部分内容。&lt;/p>
&lt;h3 id="11-参数on_delete">1.1 参数：on_delete&lt;/h3>
&lt;p>&lt;code>on_delete&lt;/code>意为当&lt;code>ForeignKey&lt;/code>引用的对象被删除时进行的操作。&lt;/p>
&lt;p>有几个可以考虑的选项。&lt;/p>
&lt;h4 id="111-modelscascade">1.1.1 models.CASCADE&lt;/h4>
&lt;p>&lt;code>CASCADE&lt;/code>意为级联，&lt;code>on_delete&lt;/code>设置为&lt;code>CASCADE&lt;/code>时意为执行级联删除。依据文档，Django 会模仿 SQL 的&lt;code>ON DELETE CASCADE&lt;/code>，对包含了&lt;code>ForeignKey&lt;/code>的对象执行删除。&lt;/p>
&lt;p>需要注意的是不会调用被级联删除对象上的&lt;code>model.delete()&lt;/code>，但是会发送&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.pre_delete" target="_blank" rel="noopener"
>&lt;code>pre_delete&lt;/code>&lt;/a>和&lt;a class="link" href="https://docs.djangoproject.com/zh-hans/2.1/ref/signals/#django.db.models.signals.post_delete" target="_blank" rel="noopener"
>&lt;code>post_delete&lt;/code>&lt;/a>信号。&lt;/p>
&lt;h4 id="1112-modelsprotect">1.1.1.2 models.PROTECT&lt;/h4>
&lt;p>&lt;code>PROTECT&lt;/code>意为保护，&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>意味着要阻止删除操作发生。删除关联的对象时，&lt;code>ForeignKey&lt;/code>的&lt;code>on_delete&lt;/code>设置为&lt;code>PROTECT&lt;/code>会触发&lt;code>ProtectedError&lt;/code>。&lt;/p>
&lt;h4 id="1113-modelsset_null">1.1.1.3 models.SET_NULL&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>是 nullable 的，则关联的对象删除时将外键设置为 null。&lt;/p>
&lt;h4 id="1114-modelsset_default">1.1.1.4 models.SET_DEFAULT&lt;/h4>
&lt;p>如其名所述，如果这个&lt;code>ForeignKey&lt;/code>设置了&lt;code>DEFAULT&lt;/code>，则关联的对象删除时设置这个外键为&lt;code>DEFAULT&lt;/code>值。&lt;/p>
&lt;h4 id="1115-modelsset">1.1.1.5 models.SET&lt;/h4>
&lt;p>在关联的对象删除时，设置为一个指定的值。这个参数可以接受一个可以赋值给这个 ForeignKey 的对象或者一个可调用对象。&lt;/p>
&lt;p>官方例子如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.contrib.auth&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_user_model&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.db&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">models&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_sentinel_user&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">get_user_model&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_or_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;deleted&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MyModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">AUTH_USER_MODEL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_sentinel_user&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1116-modelsdo_nothing">1.1.1.6 models.DO_NOTHING&lt;/h4>
&lt;p>应该不用多说了吧。Django 不会做多余的事情，但是如果后端的数据库服务有强制完整性约束，除非你在数据库一端自己定义了&lt;code>ON DELETE&lt;/code>，否则会触发&lt;code>IntegrityError&lt;/code>。&lt;/p>
&lt;h3 id="12-参数limited_choice_to">1.2 参数：limited_choice_to&lt;/h3>
&lt;p>强制约束为 django.admin 或者 ModelForm 渲染时提供有限的可选项。&lt;/p>
&lt;p>接受参数为&lt;code>dict&lt;/code>或者&lt;code>Q&lt;/code>对象、返回&lt;code>Q&lt;/code>对象的可调用对象。&lt;/p>
&lt;p>官方例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">staff_member&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">User&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">on_delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CASCADE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">limit_choices_to&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;is_staff&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q 对象是什么玩意儿这个我搞明白了再说&amp;hellip;&lt;/p>
&lt;h3 id="13-参数related_name">1.3 参数：related_name&lt;/h3>
&lt;p>设置反向关联的字段名，和&lt;code>sqlalchemy&lt;/code>的&lt;code>backref&lt;/code>类似。&lt;/p>
&lt;p>举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child_set&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 未设置 related_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 设置 related_name=children&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-参数related_query_name">1.4 参数：related_query_name&lt;/h3>
&lt;p>related_query_name 和 related_name 类似，设置反向引用查询时条件的前缀名。举例来说。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Parent&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CharField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Child__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 未设置 related_query_name&lt;/span>
&lt;span class="n">Parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myboy__name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;沙雕网友&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 设置 related_query_name=myboy&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="15-参数to_field">1.5 参数：to_field&lt;/h3>
&lt;p>得到&lt;code>ForeignKey&lt;/code>关联的模型的字段，默认是主键，如果指定的不是主键那么必须有&lt;code>unique&lt;/code>约束才行。&lt;/p>
&lt;h3 id="16-参数db_constraint">1.6 参数：db_constraint&lt;/h3>
&lt;p>要不要创建数据库层级的约束，也就是通过后端数据库服务确保数据完整性不受破坏。如果设置为 False 那么访问不存在的对象时会触发 DoesNotExists 异常。&lt;/p>
&lt;h3 id="17-参数swappable">1.7 参数：swappable&lt;/h3>
&lt;p>用于处理“我有一个抽象类模型但是这个模型有一个外键”的情况，典型就是&lt;code>AUTH_USER_MODEL&lt;/code>。&lt;/p>
&lt;p>一般不用改到，这个属性控制了数据库迁移时如何处理这个外键关联的表，总之保持默认值就行了。&lt;/p>
&lt;p>这个功能支持了使用自定义的用户模型替代 &lt;code>django.auth.models.User&lt;/code> 之类的玩意儿。&lt;/p>
&lt;h2 id="2-onetoonefield">2. OneToOneField&lt;/h2>
&lt;p>&lt;code>OneToOneField&lt;/code> 基本就是一个加了&lt;code>unique&lt;/code>约束的&lt;code>ForeignKey&lt;/code>。使用上与 ForeignKey 略有不同。&lt;/p>
&lt;p>首先是访问 &lt;code>OneToOneField&lt;/code> 时，得到的不是 &lt;code>QuerySet&lt;/code> 而是一个对象实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 优生优育政策（&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OneToOneField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Child&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Child 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次是反向引用的名字是模型名字小写。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="c1"># =&amp;gt; 得到一个 Parent 实例&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果指定 &lt;code>related_name&lt;/code> 那就和 &lt;code>ForeignKey&lt;/code> 一个表现。&lt;/p>
&lt;h2 id="3-manytomanyfield">3. ManyToManyField&lt;/h2>
&lt;p>基本和&lt;code>ForeignKey&lt;/code>相同。&lt;/p>
&lt;h3 id="31-和-foreignkey-相同的参数">3.1 和 &lt;code>ForeignKey&lt;/code> 相同的参数&lt;/h3>
&lt;ul>
&lt;li>related_name&lt;/li>
&lt;li>related_query_name&lt;/li>
&lt;li>limited_choices_to&lt;/li>
&lt;li>db_constraint&lt;/li>
&lt;li>swappable&lt;/li>
&lt;/ul>
&lt;p>limited_choices_to 在指定自定义中间表的情况下无效。&lt;/p>
&lt;h3 id="32-参数symmetrical">3.2 参数：symmetrical&lt;/h3>
&lt;p>用于处理一个表自己对自己的多对多引用对称性。&lt;/p>
&lt;p>Django 的默认行为是，我是你的朋友，那么你就是我的朋友。&lt;/p>
&lt;p>设置了这个参数则强迫 Django 改变这个行为，允许“被朋友”。&lt;/p>
&lt;h3 id="33-参数through">3.3 参数：through&lt;/h3>
&lt;p>默认情况下，Django 会自行创建中间表，这个参数强制指定中间表。&lt;/p>
&lt;p>默认中间表模型里包含三个字段。&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>&amp;lt;containing_model&amp;gt;_id&lt;/li>
&lt;li>&amp;lt;other_model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;p>如果是自己和自己的多对多关系，则&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>from_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;li>to_&amp;lt;model&amp;gt;_id&lt;/li>
&lt;/ul>
&lt;h3 id="34-参数through_fields">3.4 参数：through_fields&lt;/h3>
&lt;p>当自行指定中间表，中间表又包含了多个外键时，指定关联的外键用。&lt;/p>
&lt;p>举例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ModelB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ModelC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForeignKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时在中间表中&lt;code>a&lt;/code>和&lt;code>c&lt;/code>都是对&lt;code>ModelA&lt;/code>的外键，产生了歧义，Django 无法自行决定用哪个外键来关联 AB 两个表。&lt;/p>
&lt;p>这时提供参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ManyToManyField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ModelB&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ModelC&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through_fields&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ManyToManyField&lt;/code> 关联两个表总是不对称的关系（指我把你当兄弟，你却想当我爸爸这样的关系。此时“我”对“你”的“兄弟”关系就是单向的。），这就形成了&lt;strong>来源&lt;/strong>和&lt;strong>目标&lt;/strong>的概念。&lt;/p>
&lt;p>&lt;code>through_fields&lt;/code> 的第一个元素总被认为是&lt;strong>来源&lt;/strong>字段，第二个元素是&lt;strong>目标&lt;/strong>字段。&lt;/p>
&lt;h3 id="35-参数db_table">3.5 参数：db_table&lt;/h3>
&lt;p>指定 Django 创建的中间表的名字，默认根据两个表表名和 &lt;code>ManyToManyField&lt;/code> 的名字决定。&lt;/p></description></item><item><title>轻量级 django 阅读笔记：最小的 django 应用</title><link>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 03 Mar 2019 12:26:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E8%BD%BB%E9%87%8F%E7%BA%A7-django-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9C%80%E5%B0%8F%E7%9A%84-django-%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>找不到工作十分难受，在家看书，恰巧翻到这本《轻量级 Django》，看起来还蛮有意思的，做个读书笔记。&lt;/p>
&lt;h2 id="1-最小的-django-app">1. 最小的 Django App&lt;/h2>
&lt;p>Django 是个重量级框架，所谓最小指的是写最少的代码，理解一个 Django App 的最小组成元素。&lt;/p>
&lt;p>作为开场，先创建一个 &lt;code>app.py&lt;/code> 文件，作为整个 Django App 存储的地方。&lt;/p>
&lt;h3 id="11-djangoconfsettings">1.1 django.conf.settings&lt;/h3>
&lt;p>书中使用 &lt;code>django.core.management.execute_from_command_line&lt;/code> 作为启动 Django app 的手段。&lt;/p>
&lt;p>&lt;code>execute_from_command_line&lt;/code>，就是通过 &lt;code>django startproject&lt;/code>的方式创建的&lt;code>manage.py&lt;/code>内的主要内容，这种方式启动必须要配置&lt;code>settings&lt;/code>才行。&lt;/p>
&lt;p>在一个常规方式创建的 Django App 中，&lt;code>settings.py&lt;/code>是一个独立的 python 模块，&lt;code>Django&lt;/code>通过&lt;code>DJANGO_SETTINGS_MODULE&lt;/code>这个环境变量来确定配置信息存储位置。&lt;/p>
&lt;p>但是换一种方式，&lt;code>django.conf.settings.configure()&lt;/code>可以手动完成配置。&lt;/p>
&lt;p>看代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一个 keyword argument 都和 &lt;code>settings.py&lt;/code>这个模块内的名字相同，去除所有不必要的元素之后，剩下的就是&lt;code>DEBUG&lt;/code>和&lt;code>ROOT_URLCONF&lt;/code>了。&lt;/p>
&lt;p>阅读源码可知&lt;code>configure&lt;/code>只能被调用一次。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># 摘自 django.conf.settings.configure 源码&lt;/span>
&lt;span class="c1"># Django 版本号:&lt;/span>
&lt;span class="c1"># VERSION = (2, 1, 7, &amp;#39;final&amp;#39;, 0)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default_settings&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">global_settings&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> Called to manually configure the settings. The &amp;#39;default_settings&amp;#39;
&lt;/span>&lt;span class="s2"> parameter sets where to retrieve any unspecified values from (its
&lt;/span>&lt;span class="s2"> argument must support attribute access (__getattr__)).
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Settings already configured.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UserSettingsHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default_settings&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">setattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">holder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wrapped&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">holder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-urlpatterns">1.2 urlpatterns&lt;/h3>
&lt;p>都知道 &lt;code>Django&lt;/code> 的路由是需要手动写明的，和&lt;code>flask&lt;/code>等以装饰器的方式配置路由的风格迥异。哪种风格更好，就看用户自己见仁见智了。&lt;/p>
&lt;p>上文的&lt;code>settings.configure&lt;/code>中可以看到有一句&lt;code>ROOT_URLCONF=__name__&lt;/code>，意义明确，就是指定哪个 python 模块保存了路由配置信息，而这里指定的&lt;code>__name__&lt;/code>正是自己。&lt;/p>
&lt;p>所以我们的&lt;code>urlpatterns&lt;/code>也应当如配置所述，写到这个文件中。&lt;/p>
&lt;p>见代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="13-__main__">1.3 &lt;code>__main__&lt;/code>&lt;/h3>
&lt;p>最后将所有的代码整合起来，就形成了这样一个 python 程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>算上所有的 import 在内共 12 行，4 行空行，5 行 import，3 行代码，即构成了一个麻雀虽小五脏俱全的 Django hello world。&lt;/p>
&lt;p>在命令行执行&lt;code>python app.py runserver&lt;/code>即可看到以下输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">PS&lt;/span> &lt;span class="n">D&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">GitHub&lt;/span>\&lt;span class="n">minimum&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">django&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">python&lt;/span> &lt;span class="o">.&lt;/span>\&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">runserver&lt;/span>
&lt;span class="n">Performing&lt;/span> &lt;span class="n">system&lt;/span> &lt;span class="n">checks&lt;/span>&lt;span class="o">...&lt;/span>
&lt;span class="n">System&lt;/span> &lt;span class="n">check&lt;/span> &lt;span class="n">identified&lt;/span> &lt;span class="n">no&lt;/span> &lt;span class="n">issues&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">silenced&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="n">March&lt;/span> &lt;span class="mi">03&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2019&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="n">Django&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="mf">2.1.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">using&lt;/span> &lt;span class="n">settings&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="n">Starting&lt;/span> &lt;span class="n">development&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8000&lt;/span>&lt;span class="o">/&lt;/span>
&lt;span class="n">Quit&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">CTRL&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">BREAK&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-wsgi">1.4 wsgi&lt;/h3>
&lt;p>完成了最小的 django app，依然有一个问题。&lt;/p>
&lt;p>如何部署这个 django app？&lt;/p>
&lt;p>固然，使用 runserver 的方式执行，再 nginx 反向代理是一个不错的主意，但 uwsgi 之类的部署方式依然有其独到的优势。&lt;/p>
&lt;p>使用 uwsgi 或者 gunicorn 之类的基于 wsgi 协议的服务器就必须取得一个 wsgi app 实例才行。&lt;/p>
&lt;p>Django 提供了函数 &lt;code>django.core.wsgi.get_wsgi_application&lt;/code> 用于取得 wsgi app。&lt;/p>
&lt;p>手头没 linux 机器，懒得演示 output 了。就这样吧。&lt;/p>
&lt;p>最终代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.wsgi&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HttpResponse&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.urls&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ROOT_URLCONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="n">urlpatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="n">application&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_wsgi_application&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;code>gunicorn app.py --log-file=-&lt;/code>启动。&lt;/p></description></item></channel></rss>