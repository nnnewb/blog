<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/tags/java/</link><description>Recent content in Java on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 29 Dec 2020 14:04:02 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>一个安卓应用的逆向分析</title><link>https://nnnewb.github.io/blog/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</link><pubDate>Tue, 29 Dec 2020 14:04:02 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/%E4%B8%80%E4%B8%AA%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</guid><description>&lt;p>说起来也不算什么新鲜的东西，现成的工具拼拼凑凑就搞定了，单纯算是点亮了新的技能。&lt;/p>
&lt;p>待破解应用的名字不透露了，避免引火烧身。&lt;/p>
&lt;p>需要准备的工具包括&lt;/p>
&lt;ul>
&lt;li>mumu 模拟器(或者别的什么有 root 权限、能装 xposed 的模拟器)&lt;/li>
&lt;li>FDex2 脱壳&lt;/li>
&lt;li>jadx 反编译 dex 源码&lt;/li>
&lt;li>apktools 拆解 apk&lt;/li>
&lt;li>mitmproxy 中间人拦截网络请求&lt;/li>
&lt;/ul>
&lt;!-- more -->
&lt;h2 id="0x01-目标和方向选择">0x01 目标和方向选择&lt;/h2>
&lt;p>首要的目标是破解这个软件的 api 加密。&lt;/p>
&lt;p>使用 mitmproxy 抓到 https 流量，发现请求体全部是 base64 ，解码发现乱码。基本断定是加密了。&lt;/p>
&lt;blockquote>
&lt;p>mitmproxy 怎么抓 https 流量不多说了，基本流程就是装证书，然后配置代理。能看到有流量进 mitmproxy 就算成功了。&lt;/p>
&lt;p>直接参考 mitmproxy 的文档快一点。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/01.png"
loading="lazy"
alt="01"
>&lt;/p>
&lt;p>搜了一圈没有什么现成的对这个 App 的破解的文章，于是决定自己动手。&lt;/p>
&lt;h2 id="0x02-解包和脱壳">0x02 解包和脱壳&lt;/h2>
&lt;p>先确认下电脑上装了 JDK 或者 JRE ，没有的话就装好。&lt;/p>
&lt;p>推荐一个 vscode 的插件，&lt;code>apklab&lt;/code>。会帮你装好 jadx 和 apktools / signer 这些工具。&lt;/p>
&lt;p>接下来直接用 &lt;code>apklab&lt;/code> 打开需要破解的 apk 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/02.png"
loading="lazy"
alt="02"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/03.png"
loading="lazy"
alt="03"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/04.png"
loading="lazy"
alt="04"
>&lt;/p>
&lt;p>apklab 会自动用 apktools 和 jadx 完成拆包和反编译。&lt;/p>
&lt;p>然后简单观察&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/05.png"
loading="lazy"
alt="05"
>&lt;/p>
&lt;p>应该是被 360 加固了。&lt;/p>
&lt;p>apk 加固的基本原理就是把易被反编译的 java 字节码转译或者加密后保存，运行的时候再释放出来。用过 upx 一类的软件应该会联想到，就是加壳、反调试什么的这一套。&lt;/p>
&lt;p>xposed 提供了一个&lt;a class="link" href="https://api.xposed.info/reference/de/robv/android/xposed/IXposedHookLoadPackage.html" target="_blank" rel="noopener"
>在安卓包加载时设置钩子的机会&lt;/a>，将 ClassLoader Hook 掉，以此获得真正的应用字节码。&lt;/p>
&lt;p>代码看参考资料。&lt;/p>
&lt;p>安装 xposed 框架和 FDex2 之后启动目标应用，即可获得对应的字节码 dex 文件。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/06.png"
loading="lazy"
alt="06"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/07.png"
loading="lazy"
alt="07"
>&lt;/p>
&lt;p>接着把这些 dex 文件复制出来，即可使用 jadx 反编译到 java 了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">jadx -d out *.dex
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将反编译的结果用 vscode 打开，可以看到目标已经被我们脱干净了。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/08.png"
loading="lazy"
alt="08"
>&lt;/p>
&lt;h2 id="0x03-寻找加解密代码">0x03 寻找加解密代码&lt;/h2>
&lt;p>目标是解密 Api 请求的内容，所以下一步就是找到哪里保存了加密代码。&lt;/p>
&lt;p>幸运的是这个 App 没有做过混淆，完成脱壳后就已经是全身赤裸的站在我们面前了。&lt;/p>
&lt;p>直接在代码里搜索之前我们观察到的 url：&lt;code>index_des.php&lt;/code>，仅有一个结果。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/09.png"
loading="lazy"
alt="09"
>&lt;/p>
&lt;p>相关函数非常短，这个 HTTP 框架我没有使用过，不过从函数名看应该是一个中间件模式，对所有 Web 请求进行加密处理。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/10.png"
loading="lazy"
alt="10"
>&lt;/p>
&lt;p>&lt;code>getOverPost2&lt;/code> 源码如下&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/11.png"
loading="lazy"
alt="11"
>&lt;/p>
&lt;p>从代码里可以得出：&lt;/p>
&lt;ul>
&lt;li>g 的含义是 Get 请求的参数，应该就是 QueryString。函数名 &lt;code>getOverPost2&lt;/code> 字面意义就是把 GET 请求以 POST 方式发送出去。&lt;/li>
&lt;li>p 的含义大概就是 Post 的参数了。&lt;/li>
&lt;li>加密代码在 &lt;code>encryptByte&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>如此看来已经接近终点了，再点开 &lt;code>encryptByte&lt;/code> 的定义&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/12.png"
loading="lazy"
alt="12"
>&lt;/p>
&lt;p>密钥保存在 &lt;code>DesLib.sharedInstance().getAuthKey()&lt;/code> 中。&lt;/p>
&lt;p>接着点开 &lt;code>getAuthKey&lt;/code> 的定义:&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/13.png"
loading="lazy"
alt="13"
>&lt;/p>
&lt;p>&lt;code>native&lt;/code> 关键字一出，得，白高兴了。差点劝退成功。&lt;/p>
&lt;p>还是先看下怎么加密的。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/14.png"
loading="lazy"
alt="14"
>&lt;/p>
&lt;p>再往回翻一下响应解密的代码，免得拆除密钥来又白高兴一场。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/15.png"
loading="lazy"
alt="15"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/16.png"
loading="lazy"
alt="16"
>&lt;/p>
&lt;p>很好，也是 DES 。&lt;/p>
&lt;p>其实到这一步已经基本完成解密了，唯一欠缺的就是密钥。&lt;/p>
&lt;p>抱着试一试的心情，还是找到了 &lt;code>libencry.so&lt;/code> ，用 IDA 打开分析了一下。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/17.png"
loading="lazy"
alt="17"
>&lt;/p>
&lt;p>一通操作猛如虎，结果发现看不懂汇编。=w=&lt;/p>
&lt;p>按下 F5，看看伪代码。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/18.png"
loading="lazy"
alt="18"
>&lt;/p>
&lt;p>还是看不懂。这都调的什么函数&amp;hellip; &lt;code>a1 + 668&lt;/code> 这个蜜汁偏移也不知道是在算什么。&lt;/p>
&lt;p>网上搜索了一圈，说道可以手动改一下函数签名，IDA 就能提示出函数了。试试看。&lt;/p>
&lt;p>先把函数签名纠正&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/19.png"
loading="lazy"
alt="19"
>&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/20.png"
loading="lazy"
alt="20"
>&lt;/p>
&lt;p>再关掉类型转换&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/21.png"
loading="lazy"
alt="21"
>&lt;/p>
&lt;p>最终关键代码清晰了很多，看起来就是个直接返回字符串常量的函数。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/22.png"
loading="lazy"
alt="22"
>&lt;/p>
&lt;p>比较具有迷惑性的是上面的 v5-v9，可以看到 v5-v9 地址是增长、连续的，只有 v5 和 v6 有值。v7/v8/v9 都是 0 。而 v5 的地址被用作 &lt;code>NewStringUTF&lt;/code> 函数的参数。查阅 JNI 接口也可以看到这个参数应该是 &lt;code>const char*&lt;/code> 类型。&lt;/p>
&lt;p>所以 &amp;hellip;&lt;/p>
&lt;p>把数值转换成 16 进制再做观察。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/23.png"
loading="lazy"
alt="23"
>&lt;/p>
&lt;p>发现很有规律，每个字节的值都在 ASCII 范围内。于是右键转换成字符串，再按字节序翻转一下，即可得到密钥。&lt;/p>
&lt;p>到此，解密方法的探索已经完成。&lt;/p>
&lt;h2 id="0x04-mitmproxy-解密">0x04 mitmproxy 解密&lt;/h2>
&lt;p>mitmproxy 支持使用 python 脚本扩展，用法很简单就是 &lt;code>mitmweb.exe -s decrypt.py&lt;/code>&lt;/p>
&lt;p>可以参考 mitmproxy 的&lt;a class="link" href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/addons/contentview.py" target="_blank" rel="noopener"
>例子&lt;/a>&lt;/p>
&lt;p>最终效果应该是这样&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/Just-crack-an-android-app/25.png"
loading="lazy"
alt="24"
>&lt;/p>
&lt;p>核心的解密代码就一句，利用 mitmproxy 的扩展即可对每个请求进行统一的处理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pyDes&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PAD_PKCS5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">des&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">padmode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">PAD_PKCS5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="0x05-结语">0x05 结语&lt;/h2>
&lt;p>这个破解的最大意义还是完成了一次完整的安卓逆向，算是点亮了新技能。&lt;/p>
&lt;p>以后再遇到一些傻逼软件或者强制推广的东西就可以用这一手技能来研究吐槽下都什么傻逼代码了。&lt;/p>
&lt;p>当然非法的事情是不可能做的。&lt;/p>
&lt;p>这玩意儿破解完之后发现有泄露隐私、被脱裤的严重漏洞，我也给市政平台发了件。&lt;/p>
&lt;p>所以明年如果再硬推一次的话，到时候再拆了看看是不是有点长进。当然，没人管应该才是常态。&lt;/p></description></item></channel></rss>