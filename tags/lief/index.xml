<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LIEF on weakptr's 笔记</title><link>https://nnnewb.github.io/blog/tags/lief/</link><description>Recent content in LIEF on weakptr's 笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 08 Oct 2021 16:25:00 +0800</lastBuildDate><atom:link href="https://nnnewb.github.io/blog/tags/lief/index.xml" rel="self" type="application/rss+xml"/><item><title>编译LIEF的各种姿势</title><link>https://nnnewb.github.io/blog/p/how-to-compile-lief-on-windows/</link><pubDate>Fri, 08 Oct 2021 16:25:00 +0800</pubDate><guid>https://nnnewb.github.io/blog/p/how-to-compile-lief-on-windows/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>惯例得有个前言。&lt;/p>
&lt;p>LIEF是一个二进制文件分析和操作库，官方推荐的是 Python 版本，确实更好用，就是类型的问题有点多，而且没附送 &lt;code>.pyi&lt;/code> 导致不大好写。而C++版本就没这问题，C++版本有自己的问题=，=&lt;/p>
&lt;p>一个是官方提供下载的SDK是静态链接的，用到SDK的程序必须指定 &lt;code>/MT&lt;/code> 不然编译器就会抱怨运行库不匹配。虽然看issue里已经有人解决了（&lt;code>-DLIEF_USE_CRT_{DEBUG,RELEASE}=MD/MT&lt;/code>），但CI还是老样子，反正直接下载的SDK用起来就蛋疼，vcpkg 全都是 &lt;code>/MD&lt;/code> 链接的，没法配合用。&lt;/p>
&lt;p>更别提 MinGW 了，就没官方的SDK。&lt;/p>
&lt;p>以上就是问题，解决问题的最简单办法就是自己编译了。&lt;/p>
&lt;h2 id="0x01-visual-c-工具链-msbuild">0x01 Visual C++ 工具链 msbuild&lt;/h2>
&lt;p>代码下载下来之后，用 CMake 去编译。下面的命令都是 Powershell 下的，注意折行用的是反引号 backquote，就是波浪号那个键，和 bash 用 反斜杠不一样。直接复制到命令行是跑不起来的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">-G&lt;/span> &lt;span class="s2">&amp;#34;Visual Studio 2019&amp;#34;&lt;/span> &lt;span class="c"># Generator，你的工具链，可以用 cmake --help 来看看有哪些可用的&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">-A&lt;/span> &lt;span class="n">Win32&lt;/span> &lt;span class="c"># 选择 Visual C++ 工具链的情况下可以用 -A Win32 选择编译32位代码，或者 Win64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="c"># 常用的 Debug/Release/RelWithDebInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="c"># 不编译 Python 模块，这样就不用装 Python 了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">-DLIEF_USE_CRT_DEBUG&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nb">MD &lt;/span>&lt;span class="c"># 使用 /MD 链接 msvcrt.dll 而不是 libcmt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这儿有个坑，用 Visual Studio 这个 Generator 的时候，虽然指定了 &lt;code>CMAKE_BUILD_TYPE&lt;/code>，但实际没什么卵用，还得在编译的时候给参数 &lt;code>--config Debug&lt;/code> 才会真的按 Debug 编译。&lt;/p>
&lt;p>然后是编译命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-config&lt;/span> &lt;span class="n">Debug&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认用微软的 msbuild 会花很长时间去编译，不嫌麻烦的话可以用 Ninja。&lt;/p>
&lt;p>编译完还不能用，还得先“安装”到一个目录里。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-config&lt;/span> &lt;span class="n">Debug&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-msvc&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就会把必要的文件给复制到 &lt;code>LIEF-msvc-debug&lt;/code> 这个文件夹里了，参考 LIEF 官方的集成文档，把 &lt;code>LIEF_DIR&lt;/code> 设置成这个文件夹的路径就可以用啦。&lt;/p>
&lt;h2 id="0x02-visual-c-工具链-ninja">0x02 Visual C++ 工具链 ninja&lt;/h2>
&lt;p>使用 CMake + Ninja 的情况下没法用 &lt;code>-A&lt;/code> 去控制编译32位还是64位了，你得先装好 Visual C++ 构建工具，然后打开开发者命令提示符。&lt;/p>
&lt;p>&lt;img src="https://nnnewb.github.io/blog/blog/image/how-to-compile-lief-on-windows/image-20211008160449880.png"
loading="lazy"
alt="image-20211008160449880"
>&lt;/p>
&lt;p>比如想编译32位的就选 &lt;code>x86 native tool command prompt&lt;/code> ，在这个命令提示符里用 cmake 构建。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span> &lt;span class="n">-G&lt;/span> &lt;span class="n">Ninja&lt;/span> &lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="n">-DLIEF_USE_CRT_DEBUG&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nb">MD
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">&lt;/span>&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-msvc&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他和直接用 msvc 没啥区别。&lt;/p>
&lt;h2 id="0x03-mingw-工具链-makefile">0x03 MinGW 工具链 makefile&lt;/h2>
&lt;p>MinGW 工具链其实和 msvc 差不太大。先装 MinGW，推荐 msys2，msys2装好后跑命令 &lt;code>pacman -Sy mingw-w64-i686-toolchain&lt;/code> 就能装上32位的编译工具链了，包括了 &lt;code>gcc&lt;/code>、&lt;code>g++&lt;/code>、&lt;code>mingw32-make&lt;/code> 这些必要的程序。&lt;/p>
&lt;p>完事后把 &lt;code>MinGW&lt;/code> 工具链加到 &lt;code>PATH&lt;/code> 里。一般来说，假如你把 msys2 装到 &lt;code>C:\msys64&lt;/code> 下的话，那要加的路径就是 &lt;code>C:\msys64\mingw32\bin&lt;/code>，自己看看要用的 gcc 放在哪儿呗。&lt;/p>
&lt;p>另外 &lt;code>LIEF_USE_CRT_DEBUG&lt;/code> 这变量也用不到了，&lt;code>MD&lt;/code>还是&lt;code>MT&lt;/code> 这是专供 MSVC 的选择题，MinGW 不管这个。&lt;/p>
&lt;p>接着就可以用 CMake 了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span> &lt;span class="n">-G&lt;/span> &lt;span class="s2">&amp;#34;MinGW Makefiles&amp;#34;&lt;/span> &lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_C_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_CXX_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-mingw32&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不用担心 CMake 选错工具链，用 &lt;code>MinGW Makefiles&lt;/code> 的情况下会优先考虑 GCC 的。不过还有个老问题：怎么选32位还是64位。答案是设置下 &lt;code>C_FLAGS&lt;/code> 和 &lt;code>CXX_FLAGS&lt;/code> 这两个特殊变量，让编译器加上 &lt;code>-m32&lt;/code> 这个参数，编译出来的就是32位代码了。&lt;/p>
&lt;h2 id="0x04-mingw-工具链-ninja">0x04 MinGW 工具链 Ninja&lt;/h2>
&lt;p>和 &lt;code>MinGW Makefiles&lt;/code> 差不太多，但是 &lt;code>Ninja&lt;/code> 没那么聪明，不知道要用什么编译器，得手动指定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">..&lt;/span> &lt;span class="n">-G&lt;/span> &lt;span class="n">Ninja&lt;/span> &lt;span class="n">-DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="n">-DLIEF_PYTHON_API&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">off&lt;/span> &lt;span class="n">-DCMAKE_C_COMPILER&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">gcc&lt;/span> &lt;span class="n">-DCMAKE_CXX_COMPILER&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">++&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_C_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;-DCMAKE_CXX_FLAGS:STRING=&amp;#34;-m32&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-build&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-target&lt;/span> &lt;span class="n">LIB_LIEF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-prefix&lt;/span> &lt;span class="nb">LIEF-mingw32&lt;/span>&lt;span class="n">-debug&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置阶段多出来两个参数，&lt;code>-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++&lt;/code>，目的就是告诉 CMake 放机灵点，用 &lt;code>gcc/g++&lt;/code> 编译器，别瞎整。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>也就这么回事吧。&lt;/p></description></item></channel></rss>